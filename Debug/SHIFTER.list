
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd4  08007cd4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08007cd4  08007cd4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cd4  08007cd4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002694  20000068  08007d44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026fc  08007d44  000226fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001355b  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e77  00000000  00000000  0003362f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d19  00000000  00000000  00037580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a34c  00000000  00000000  00038299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014dd8  00000000  00000000  000525e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000946ab  00000000  00000000  000673bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d18  00000000  00000000  000fba68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00100780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08007b24 	.word	0x08007b24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08007b24 	.word	0x08007b24

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_d2uiz>:
 8000514:	004a      	lsls	r2, r1, #1
 8000516:	d211      	bcs.n	800053c <__aeabi_d2uiz+0x28>
 8000518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800051c:	d211      	bcs.n	8000542 <__aeabi_d2uiz+0x2e>
 800051e:	d50d      	bpl.n	800053c <__aeabi_d2uiz+0x28>
 8000520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000528:	d40e      	bmi.n	8000548 <__aeabi_d2uiz+0x34>
 800052a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000536:	fa23 f002 	lsr.w	r0, r3, r2
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000546:	d102      	bne.n	800054e <__aeabi_d2uiz+0x3a>
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	4770      	bx	lr
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_frsub>:
 8000554:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__addsf3>
 800055a:	bf00      	nop

0800055c <__aeabi_fsub>:
 800055c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000560 <__addsf3>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	bf1f      	itttt	ne
 8000564:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000568:	ea92 0f03 	teqne	r2, r3
 800056c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000570:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000574:	d06a      	beq.n	800064c <__addsf3+0xec>
 8000576:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800057e:	bfc1      	itttt	gt
 8000580:	18d2      	addgt	r2, r2, r3
 8000582:	4041      	eorgt	r1, r0
 8000584:	4048      	eorgt	r0, r1
 8000586:	4041      	eorgt	r1, r0
 8000588:	bfb8      	it	lt
 800058a:	425b      	neglt	r3, r3
 800058c:	2b19      	cmp	r3, #25
 800058e:	bf88      	it	hi
 8000590:	4770      	bxhi	lr
 8000592:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4249      	negne	r1, r1
 80005b2:	ea92 0f03 	teq	r2, r3
 80005b6:	d03f      	beq.n	8000638 <__addsf3+0xd8>
 80005b8:	f1a2 0201 	sub.w	r2, r2, #1
 80005bc:	fa41 fc03 	asr.w	ip, r1, r3
 80005c0:	eb10 000c 	adds.w	r0, r0, ip
 80005c4:	f1c3 0320 	rsb	r3, r3, #32
 80005c8:	fa01 f103 	lsl.w	r1, r1, r3
 80005cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d0:	d502      	bpl.n	80005d8 <__addsf3+0x78>
 80005d2:	4249      	negs	r1, r1
 80005d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005dc:	d313      	bcc.n	8000606 <__addsf3+0xa6>
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d306      	bcc.n	80005f2 <__addsf3+0x92>
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	f102 0201 	add.w	r2, r2, #1
 80005ee:	2afe      	cmp	r2, #254	; 0xfe
 80005f0:	d251      	bcs.n	8000696 <__addsf3+0x136>
 80005f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005fa:	bf08      	it	eq
 80005fc:	f020 0001 	biceq.w	r0, r0, #1
 8000600:	ea40 0003 	orr.w	r0, r0, r3
 8000604:	4770      	bx	lr
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	eb40 0000 	adc.w	r0, r0, r0
 800060c:	3a01      	subs	r2, #1
 800060e:	bf28      	it	cs
 8000610:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000614:	d2ed      	bcs.n	80005f2 <__addsf3+0x92>
 8000616:	fab0 fc80 	clz	ip, r0
 800061a:	f1ac 0c08 	sub.w	ip, ip, #8
 800061e:	ebb2 020c 	subs.w	r2, r2, ip
 8000622:	fa00 f00c 	lsl.w	r0, r0, ip
 8000626:	bfaa      	itet	ge
 8000628:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800062c:	4252      	neglt	r2, r2
 800062e:	4318      	orrge	r0, r3
 8000630:	bfbc      	itt	lt
 8000632:	40d0      	lsrlt	r0, r2
 8000634:	4318      	orrlt	r0, r3
 8000636:	4770      	bx	lr
 8000638:	f092 0f00 	teq	r2, #0
 800063c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000640:	bf06      	itte	eq
 8000642:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000646:	3201      	addeq	r2, #1
 8000648:	3b01      	subne	r3, #1
 800064a:	e7b5      	b.n	80005b8 <__addsf3+0x58>
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d021      	beq.n	80006a0 <__addsf3+0x140>
 800065c:	ea92 0f03 	teq	r2, r3
 8000660:	d004      	beq.n	800066c <__addsf3+0x10c>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	bf08      	it	eq
 8000668:	4608      	moveq	r0, r1
 800066a:	4770      	bx	lr
 800066c:	ea90 0f01 	teq	r0, r1
 8000670:	bf1c      	itt	ne
 8000672:	2000      	movne	r0, #0
 8000674:	4770      	bxne	lr
 8000676:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800067a:	d104      	bne.n	8000686 <__addsf3+0x126>
 800067c:	0040      	lsls	r0, r0, #1
 800067e:	bf28      	it	cs
 8000680:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000684:	4770      	bx	lr
 8000686:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800068a:	bf3c      	itt	cc
 800068c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000690:	4770      	bxcc	lr
 8000692:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000696:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800069a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800069e:	4770      	bx	lr
 80006a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006a4:	bf16      	itet	ne
 80006a6:	4608      	movne	r0, r1
 80006a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ac:	4601      	movne	r1, r0
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	bf06      	itte	eq
 80006b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006b6:	ea90 0f01 	teqeq	r0, r1
 80006ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006be:	4770      	bx	lr

080006c0 <__aeabi_ui2f>:
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e004      	b.n	80006d0 <__aeabi_i2f+0x8>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2f>:
 80006c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	bf48      	it	mi
 80006ce:	4240      	negmi	r0, r0
 80006d0:	ea5f 0c00 	movs.w	ip, r0
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006dc:	4601      	mov	r1, r0
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	e01c      	b.n	800071e <__aeabi_l2f+0x2a>

080006e4 <__aeabi_ul2f>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e00a      	b.n	8000708 <__aeabi_l2f+0x14>
 80006f2:	bf00      	nop

080006f4 <__aeabi_l2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000700:	d502      	bpl.n	8000708 <__aeabi_l2f+0x14>
 8000702:	4240      	negs	r0, r0
 8000704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000708:	ea5f 0c01 	movs.w	ip, r1
 800070c:	bf02      	ittt	eq
 800070e:	4684      	moveq	ip, r0
 8000710:	4601      	moveq	r1, r0
 8000712:	2000      	moveq	r0, #0
 8000714:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000718:	bf08      	it	eq
 800071a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800071e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000722:	fabc f28c 	clz	r2, ip
 8000726:	3a08      	subs	r2, #8
 8000728:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800072c:	db10      	blt.n	8000750 <__aeabi_l2f+0x5c>
 800072e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000732:	4463      	add	r3, ip
 8000734:	fa00 fc02 	lsl.w	ip, r0, r2
 8000738:	f1c2 0220 	rsb	r2, r2, #32
 800073c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000740:	fa20 f202 	lsr.w	r2, r0, r2
 8000744:	eb43 0002 	adc.w	r0, r3, r2
 8000748:	bf08      	it	eq
 800074a:	f020 0001 	biceq.w	r0, r0, #1
 800074e:	4770      	bx	lr
 8000750:	f102 0220 	add.w	r2, r2, #32
 8000754:	fa01 fc02 	lsl.w	ip, r1, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000760:	fa21 f202 	lsr.w	r2, r1, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800076e:	4770      	bx	lr

08000770 <__aeabi_fmul>:
 8000770:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000774:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000778:	bf1e      	ittt	ne
 800077a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800077e:	ea92 0f0c 	teqne	r2, ip
 8000782:	ea93 0f0c 	teqne	r3, ip
 8000786:	d06f      	beq.n	8000868 <__aeabi_fmul+0xf8>
 8000788:	441a      	add	r2, r3
 800078a:	ea80 0c01 	eor.w	ip, r0, r1
 800078e:	0240      	lsls	r0, r0, #9
 8000790:	bf18      	it	ne
 8000792:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000796:	d01e      	beq.n	80007d6 <__aeabi_fmul+0x66>
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007a4:	fba0 3101 	umull	r3, r1, r0, r1
 80007a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b0:	bf3e      	ittt	cc
 80007b2:	0049      	lslcc	r1, r1, #1
 80007b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007b8:	005b      	lslcc	r3, r3, #1
 80007ba:	ea40 0001 	orr.w	r0, r0, r1
 80007be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007c2:	2afd      	cmp	r2, #253	; 0xfd
 80007c4:	d81d      	bhi.n	8000802 <__aeabi_fmul+0x92>
 80007c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	4770      	bx	lr
 80007d6:	f090 0f00 	teq	r0, #0
 80007da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007de:	bf08      	it	eq
 80007e0:	0249      	lsleq	r1, r1, #9
 80007e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ea:	3a7f      	subs	r2, #127	; 0x7f
 80007ec:	bfc2      	ittt	gt
 80007ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007f6:	4770      	bxgt	lr
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	3a01      	subs	r2, #1
 8000802:	dc5d      	bgt.n	80008c0 <__aeabi_fmul+0x150>
 8000804:	f112 0f19 	cmn.w	r2, #25
 8000808:	bfdc      	itt	le
 800080a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800080e:	4770      	bxle	lr
 8000810:	f1c2 0200 	rsb	r2, r2, #0
 8000814:	0041      	lsls	r1, r0, #1
 8000816:	fa21 f102 	lsr.w	r1, r1, r2
 800081a:	f1c2 0220 	rsb	r2, r2, #32
 800081e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000822:	ea5f 0031 	movs.w	r0, r1, rrx
 8000826:	f140 0000 	adc.w	r0, r0, #0
 800082a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800082e:	bf08      	it	eq
 8000830:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000834:	4770      	bx	lr
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800083e:	bf02      	ittt	eq
 8000840:	0040      	lsleq	r0, r0, #1
 8000842:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000846:	3a01      	subeq	r2, #1
 8000848:	d0f9      	beq.n	800083e <__aeabi_fmul+0xce>
 800084a:	ea40 000c 	orr.w	r0, r0, ip
 800084e:	f093 0f00 	teq	r3, #0
 8000852:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000856:	bf02      	ittt	eq
 8000858:	0049      	lsleq	r1, r1, #1
 800085a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800085e:	3b01      	subeq	r3, #1
 8000860:	d0f9      	beq.n	8000856 <__aeabi_fmul+0xe6>
 8000862:	ea41 010c 	orr.w	r1, r1, ip
 8000866:	e78f      	b.n	8000788 <__aeabi_fmul+0x18>
 8000868:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800086c:	ea92 0f0c 	teq	r2, ip
 8000870:	bf18      	it	ne
 8000872:	ea93 0f0c 	teqne	r3, ip
 8000876:	d00a      	beq.n	800088e <__aeabi_fmul+0x11e>
 8000878:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800087c:	bf18      	it	ne
 800087e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000882:	d1d8      	bne.n	8000836 <__aeabi_fmul+0xc6>
 8000884:	ea80 0001 	eor.w	r0, r0, r1
 8000888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f090 0f00 	teq	r0, #0
 8000892:	bf17      	itett	ne
 8000894:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000898:	4608      	moveq	r0, r1
 800089a:	f091 0f00 	teqne	r1, #0
 800089e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008a2:	d014      	beq.n	80008ce <__aeabi_fmul+0x15e>
 80008a4:	ea92 0f0c 	teq	r2, ip
 80008a8:	d101      	bne.n	80008ae <__aeabi_fmul+0x13e>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d10f      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008ae:	ea93 0f0c 	teq	r3, ip
 80008b2:	d103      	bne.n	80008bc <__aeabi_fmul+0x14c>
 80008b4:	024b      	lsls	r3, r1, #9
 80008b6:	bf18      	it	ne
 80008b8:	4608      	movne	r0, r1
 80008ba:	d108      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008bc:	ea80 0001 	eor.w	r0, r0, r1
 80008c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bx	lr
 80008ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fdiv>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d069      	beq.n	80009c4 <__aeabi_fdiv+0xec>
 80008f0:	eba2 0203 	sub.w	r2, r2, r3
 80008f4:	ea80 0c01 	eor.w	ip, r0, r1
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008fe:	d037      	beq.n	8000970 <__aeabi_fdiv+0x98>
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000908:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800090c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000910:	428b      	cmp	r3, r1
 8000912:	bf38      	it	cc
 8000914:	005b      	lslcc	r3, r3, #1
 8000916:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800091a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800091e:	428b      	cmp	r3, r1
 8000920:	bf24      	itt	cs
 8000922:	1a5b      	subcs	r3, r3, r1
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800092c:	bf24      	itt	cs
 800092e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000932:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000936:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800093a:	bf24      	itt	cs
 800093c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000948:	bf24      	itt	cs
 800094a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800094e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	bf18      	it	ne
 8000956:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800095a:	d1e0      	bne.n	800091e <__aeabi_fdiv+0x46>
 800095c:	2afd      	cmp	r2, #253	; 0xfd
 800095e:	f63f af50 	bhi.w	8000802 <__aeabi_fmul+0x92>
 8000962:	428b      	cmp	r3, r1
 8000964:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000968:	bf08      	it	eq
 800096a:	f020 0001 	biceq.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000974:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000978:	327f      	adds	r2, #127	; 0x7f
 800097a:	bfc2      	ittt	gt
 800097c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000980:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000984:	4770      	bxgt	lr
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	3a01      	subs	r2, #1
 8000990:	e737      	b.n	8000802 <__aeabi_fmul+0x92>
 8000992:	f092 0f00 	teq	r2, #0
 8000996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800099a:	bf02      	ittt	eq
 800099c:	0040      	lsleq	r0, r0, #1
 800099e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009a2:	3a01      	subeq	r2, #1
 80009a4:	d0f9      	beq.n	800099a <__aeabi_fdiv+0xc2>
 80009a6:	ea40 000c 	orr.w	r0, r0, ip
 80009aa:	f093 0f00 	teq	r3, #0
 80009ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0049      	lsleq	r1, r1, #1
 80009b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ba:	3b01      	subeq	r3, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fdiv+0xda>
 80009be:	ea41 010c 	orr.w	r1, r1, ip
 80009c2:	e795      	b.n	80008f0 <__aeabi_fdiv+0x18>
 80009c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d108      	bne.n	80009e0 <__aeabi_fdiv+0x108>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	f47f af7d 	bne.w	80008ce <__aeabi_fmul+0x15e>
 80009d4:	ea93 0f0c 	teq	r3, ip
 80009d8:	f47f af70 	bne.w	80008bc <__aeabi_fmul+0x14c>
 80009dc:	4608      	mov	r0, r1
 80009de:	e776      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009e0:	ea93 0f0c 	teq	r3, ip
 80009e4:	d104      	bne.n	80009f0 <__aeabi_fdiv+0x118>
 80009e6:	024b      	lsls	r3, r1, #9
 80009e8:	f43f af4c 	beq.w	8000884 <__aeabi_fmul+0x114>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e76e      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f4:	bf18      	it	ne
 80009f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	d1ca      	bne.n	8000992 <__aeabi_fdiv+0xba>
 80009fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a00:	f47f af5c 	bne.w	80008bc <__aeabi_fmul+0x14c>
 8000a04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a08:	f47f af3c 	bne.w	8000884 <__aeabi_fmul+0x114>
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0x15e>
 8000a0e:	bf00      	nop

08000a10 <__gesf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295
 8000a14:	e006      	b.n	8000a24 <__cmpsf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__lesf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpsf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpsf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d011      	beq.n	8000a60 <__cmpsf2+0x40>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a42:	bf18      	it	ne
 8000a44:	ea90 0f01 	teqne	r0, r1
 8000a48:	bf58      	it	pl
 8000a4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a4e:	bf88      	it	hi
 8000a50:	17c8      	asrhi	r0, r1, #31
 8000a52:	bf38      	it	cc
 8000a54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a58:	bf18      	it	ne
 8000a5a:	f040 0001 	orrne.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	d102      	bne.n	8000a6c <__cmpsf2+0x4c>
 8000a66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a6a:	d105      	bne.n	8000a78 <__cmpsf2+0x58>
 8000a6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a70:	d1e4      	bne.n	8000a3c <__cmpsf2+0x1c>
 8000a72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a76:	d0e1      	beq.n	8000a3c <__cmpsf2+0x1c>
 8000a78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cfrcmple>:
 8000a80:	4684      	mov	ip, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4661      	mov	r1, ip
 8000a86:	e7ff      	b.n	8000a88 <__aeabi_cfcmpeq>

08000a88 <__aeabi_cfcmpeq>:
 8000a88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a8a:	f7ff ffc9 	bl	8000a20 <__cmpsf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a98 <__aeabi_fcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cfcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_fcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffd2 	bl	8000a80 <__aeabi_cfrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc8 	bl	8000a80 <__aeabi_cfrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_f2uiz>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	d20e      	bcs.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b04:	d30b      	bcc.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b0e:	d409      	bmi.n	8000b24 <__aeabi_f2uiz+0x28>
 8000b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2uiz+0x32>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_f2uiz+0x38>
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000b46:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <InitController+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <InitController+0x44>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6013      	str	r3, [r2, #0]

	MyOutputs->xClutchBitepoint = xCLUTCH_BITE_POINT;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <InitController+0x44>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f240 622c 	movw	r2, #1580	; 0x62c
 8000b5a:	821a      	strh	r2, [r3, #16]
	MyOutputs->xClutchTarget = xCLUTCH_REST_POSITION;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <InitController+0x44>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000b64:	81da      	strh	r2, [r3, #14]
	MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <InitController+0x44>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000b6e:	819a      	strh	r2, [r3, #12]
	IDLE_Entry();
 8000b70:	f000 f946 	bl	8000e00 <IDLE_Entry>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000084 	.word	0x20000084
 8000b80:	20000088 	.word	0x20000088

08000b84 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 8000b8e:	f002 fc85 	bl	800349c <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a93      	ldr	r2, [pc, #588]	; (8000de4 <Controller+0x260>)
 8000b96:	6013      	str	r3, [r2, #0]

	// ANTISTALL
		#ifdef ANTISTALL_ENABLED

			// if the shut down is activated and we are at gear greater than neutral we can enter
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError) {
 8000b98:	4b93      	ldr	r3, [pc, #588]	; (8000de8 <Controller+0x264>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 8093 	bne.w	8000ccc <Controller+0x148>
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <Controller+0x264>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 808c 	beq.w	8000ccc <Controller+0x148>
 8000bb4:	4b8c      	ldr	r3, [pc, #560]	; (8000de8 <Controller+0x264>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 8085 	bne.w	8000ccc <Controller+0x148>
 8000bc2:	4b89      	ldr	r3, [pc, #548]	; (8000de8 <Controller+0x264>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d17e      	bne.n	8000ccc <Controller+0x148>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8000bce:	4b87      	ldr	r3, [pc, #540]	; (8000dec <Controller+0x268>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d03c      	beq.n	8000c54 <Controller+0xd0>
 8000bda:	4b83      	ldr	r3, [pc, #524]	; (8000de8 <Controller+0x264>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b80      	ldr	r3, [pc, #512]	; (8000de8 <Controller+0x264>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000bec:	4619      	mov	r1, r3
 8000bee:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <Controller+0x26c>)
 8000bf0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dc2d      	bgt.n	8000c54 <Controller+0xd0>
 8000bf8:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <Controller+0x264>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c00:	2b27      	cmp	r3, #39	; 0x27
 8000c02:	dc27      	bgt.n	8000c54 <Controller+0xd0>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 8000c04:	4b79      	ldr	r3, [pc, #484]	; (8000dec <Controller+0x268>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <Controller+0xa0>
						MyOutputs->NAntistallState = Init;
 8000c10:	4b76      	ldr	r3, [pc, #472]	; (8000dec <Controller+0x268>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						tAntistallTimmer = HAL_GetTick();
 8000c1a:	f002 fc3f 	bl	800349c <HAL_GetTick>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a74      	ldr	r2, [pc, #464]	; (8000df4 <Controller+0x270>)
 8000c22:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8000c24:	4b71      	ldr	r3, [pc, #452]	; (8000dec <Controller+0x268>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d111      	bne.n	8000c54 <Controller+0xd0>
 8000c30:	4b70      	ldr	r3, [pc, #448]	; (8000df4 <Controller+0x270>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000c38:	4b6a      	ldr	r3, [pc, #424]	; (8000de4 <Controller+0x260>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d209      	bcs.n	8000c54 <Controller+0xd0>
						MyOutputs->NAntistallState = Active;
 8000c40:	4b6a      	ldr	r3, [pc, #424]	; (8000dec <Controller+0x268>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2202      	movs	r2, #2
 8000c46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						MyOutputs->xClutchTargetProtection = xCLUTCH_FULLY_ENGAGED;
 8000c4a:	4b68      	ldr	r3, [pc, #416]	; (8000dec <Controller+0x268>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000c52:	809a      	strh	r2, [r3, #4]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8000c54:	4b65      	ldr	r3, [pc, #404]	; (8000dec <Controller+0x268>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d11e      	bne.n	8000c9e <Controller+0x11a>
 8000c60:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <Controller+0x264>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b5f      	ldr	r3, [pc, #380]	; (8000de8 <Controller+0x264>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c72:	4619      	mov	r1, r3
 8000c74:	4b5e      	ldr	r3, [pc, #376]	; (8000df0 <Controller+0x26c>)
 8000c76:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dc05      	bgt.n	8000c8a <Controller+0x106>
 8000c7e:	4b5a      	ldr	r3, [pc, #360]	; (8000de8 <Controller+0x264>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c86:	2b5f      	cmp	r3, #95	; 0x5f
 8000c88:	dd09      	ble.n	8000c9e <Controller+0x11a>
					MyOutputs->NAntistallState = Off;
 8000c8a:	4b58      	ldr	r3, [pc, #352]	; (8000dec <Controller+0x268>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = xCLUTCH_REST_POSITION;
 8000c94:	4b55      	ldr	r3, [pc, #340]	; (8000dec <Controller+0x268>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000c9c:	809a      	strh	r2, [r3, #4]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000c9e:	4b53      	ldr	r3, [pc, #332]	; (8000dec <Controller+0x268>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d11b      	bne.n	8000ce2 <Controller+0x15e>
 8000caa:	4b4f      	ldr	r3, [pc, #316]	; (8000de8 <Controller+0x264>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000cb2:	2b5f      	cmp	r3, #95	; 0x5f
 8000cb4:	dd15      	ble.n	8000ce2 <Controller+0x15e>
					MyOutputs->NAntistallState = Off;
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <Controller+0x268>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = xCLUTCH_REST_POSITION;
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <Controller+0x268>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000cc8:	809a      	strh	r2, [r3, #4]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000cca:	e00a      	b.n	8000ce2 <Controller+0x15e>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	; (8000dec <Controller+0x268>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				MyOutputs->xClutchTargetProtection = xCLUTCH_REST_POSITION;
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <Controller+0x268>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000cde:	809a      	strh	r2, [r3, #4]
 8000ce0:	e000      	b.n	8000ce4 <Controller+0x160>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000ce2:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8000ce4:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <Controller+0x264>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d114      	bne.n	8000d1a <Controller+0x196>
			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_MAX_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <Controller+0x264>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fce5 	bl	80006c8 <__aeabi_i2f>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <Controller+0x268>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3308      	adds	r3, #8
 8000d06:	f04f 0100 	mov.w	r1, #0
 8000d0a:	9101      	str	r1, [sp, #4]
 8000d0c:	f04f 0100 	mov.w	r1, #0
 8000d10:	9100      	str	r1, [sp, #0]
 8000d12:	4939      	ldr	r1, [pc, #228]	; (8000df8 <Controller+0x274>)
 8000d14:	200b      	movs	r0, #11
 8000d16:	f000 fc17 	bl	8001548 <My2DMapInterpolate>
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MIN((uint16_t)MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift);
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <Controller+0x268>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	899c      	ldrh	r4, [r3, #12]
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <Controller+0x268>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fee8 	bl	8000afc <__aeabi_f2uiz>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <Controller+0x268>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	42a2      	cmp	r2, r4
 8000d36:	bf28      	it	cs
 8000d38:	4622      	movcs	r2, r4
 8000d3a:	b292      	uxth	r2, r2
 8000d3c:	81da      	strh	r2, [r3, #14]


	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES & LEDS
		MyOutputs->BSWLEDA = MyInputs->NToggleSwitch01State;
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <Controller+0x264>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <Controller+0x268>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 8000d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		MyOutputs->BSWLEDB = MyInputs->NToggleSwitch02State;
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <Controller+0x264>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <Controller+0x268>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
 8000d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		MyOutputs->BSWLEDC = MyInputs->NToggleSwitch03State;
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <Controller+0x264>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <Controller+0x268>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
 8000d6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	// ------------------------------------------------------------------------------------------------------------------------------------------------------


	//CAN BUS ~ QUICK MESSAGE PARSING
	outputs->BLaunchControl	= inputs->BLaunchRequest;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <Controller+0x278>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d82c      	bhi.n	8000ddc <Controller+0x258>
 8000d82:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <Controller+0x204>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000da1 	.word	0x08000da1
 8000d8c:	08000dab 	.word	0x08000dab
 8000d90:	08000db5 	.word	0x08000db5
 8000d94:	08000dbf 	.word	0x08000dbf
 8000d98:	08000dc9 	.word	0x08000dc9
 8000d9c:	08000dd3 	.word	0x08000dd3

		case IDLE_STATE:
			IDLE_Run();
 8000da0:	f000 f870 	bl	8000e84 <IDLE_Run>
			IDLE_Event();
 8000da4:	f000 f844 	bl	8000e30 <IDLE_Event>
			break;
 8000da8:	e018      	b.n	8000ddc <Controller+0x258>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 8000daa:	f000 f8e1 	bl	8000f70 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 8000dae:	f000 f88b 	bl	8000ec8 <PRE_UPSHIFT_Event>
			break;
 8000db2:	e013      	b.n	8000ddc <Controller+0x258>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 8000db4:	f000 f9be 	bl	8001134 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 8000db8:	f000 f96e 	bl	8001098 <PRE_DNSHIFT_Event>
			break;
 8000dbc:	e00e      	b.n	8000ddc <Controller+0x258>
		case SHIFTING_STATE:
			SHIFTING_Run();
 8000dbe:	f000 fad5 	bl	800136c <SHIFTING_Run>
			SHIFTING_Event();
 8000dc2:	f000 faad 	bl	8001320 <SHIFTING_Event>
			break;
 8000dc6:	e009      	b.n	8000ddc <Controller+0x258>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 8000dc8:	f000 fb3c 	bl	8001444 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 8000dcc:	f000 fb00 	bl	80013d0 <POSTSHIFT_Event>
			break;
 8000dd0:	e004      	b.n	8000ddc <Controller+0x258>
		case ERROR_STATE:
			ERROR_Run();
 8000dd2:	f000 fb99 	bl	8001508 <ERROR_Run>
			ERROR_Event();
 8000dd6:	f000 fb85 	bl	80014e4 <ERROR_Event>
			break;
 8000dda:	bf00      	nop
		}

}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	20000090 	.word	0x20000090
 8000de8:	20000084 	.word	0x20000084
 8000dec:	20000088 	.word	0x20000088
 8000df0:	08007bb4 	.word	0x08007bb4
 8000df4:	200000a4 	.word	0x200000a4
 8000df8:	08007b5c 	.word	0x08007b5c
 8000dfc:	2000008c 	.word	0x2000008c

08000e00 <IDLE_Entry>:


void IDLE_Entry(void) {
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <IDLE_Entry+0x1c>)
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <IDLE_Entry+0x20>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <IDLE_Entry+0x1c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000008c 	.word	0x2000008c
 8000e20:	2000008d 	.word	0x2000008d

08000e24 <IDLE_Exit>:
void IDLE_Exit(void) {
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <IDLE_Event>:
void IDLE_Event(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <IDLE_Event+0x50>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 f9eb 	bl	8002214 <CheckFaults>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <IDLE_Event+0x1e>
		IDLE_Exit();
 8000e44:	f7ff ffee 	bl	8000e24 <IDLE_Exit>
		ERROR_Entry();
 8000e48:	f000 fb20 	bl	800148c <ERROR_Entry>
		return;
 8000e4c:	e017      	b.n	8000e7e <IDLE_Event+0x4e>
	}

	// TODO: do we need to also check controller errors here? I think no...

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <IDLE_Event+0x50>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <IDLE_Event+0x36>
        IDLE_Exit();
 8000e5c:	f7ff ffe2 	bl	8000e24 <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8000e60:	f000 f816 	bl	8000e90 <PRE_UPSHIFT_Entry>
        return;
 8000e64:	e00b      	b.n	8000e7e <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <IDLE_Event+0x50>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <IDLE_Event+0x4e>
        IDLE_Exit();
 8000e74:	f7ff ffd6 	bl	8000e24 <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8000e78:	f000 f8f2 	bl	8001060 <PRE_DNSHIFT_Entry>
        return;
 8000e7c:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000084 	.word	0x20000084

08000e84 <IDLE_Run>:
void IDLE_Run(void) {
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <PRE_UPSHIFT_Entry+0x20>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <PRE_UPSHIFT_Entry+0x24>)
 8000e9a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <PRE_UPSHIFT_Entry+0x20>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8000ea2:	f002 fafb 	bl	800349c <HAL_GetTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <PRE_UPSHIFT_Entry+0x28>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000008c 	.word	0x2000008c
 8000eb4:	2000008d 	.word	0x2000008d
 8000eb8:	20000094 	.word	0x20000094

08000ebc <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 8000ec8:	b598      	push	{r3, r4, r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <PRE_UPSHIFT_Event+0x98>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 f99f 	bl	8002214 <CheckFaults>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <PRE_UPSHIFT_Event+0x1e>
		PRE_UPSHIFT_Exit();
 8000edc:	f7ff ffee 	bl	8000ebc <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000ee0:	f000 fad4 	bl	800148c <ERROR_Entry>
		return;
 8000ee4:	e03b      	b.n	8000f5e <PRE_UPSHIFT_Event+0x96>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d123      	bne.n	8000f38 <PRE_UPSHIFT_Event+0x70>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <PRE_UPSHIFT_Event+0x98>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3201      	adds	r2, #1
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_UPSHIFT || MyOutputs->BOverrideActuateClutchOnUpShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetUpShiftMap[MyInputs->NGear];
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <PRE_UPSHIFT_Event+0x98>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <PRE_UPSHIFT_Event+0xa0>)
 8000f0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	b292      	uxth	r2, r2
 8000f18:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnUpShift = 0; 									// reset the strat for the next gear
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		}
		else {
			MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
		}

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		PRE_UPSHIFT_Exit();
 8000f2e:	f7ff ffc5 	bl	8000ebc <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8000f32:	f000 f97d 	bl	8001230 <SHIFTING_Entry>
		return;
 8000f36:	e012      	b.n	8000f5e <PRE_UPSHIFT_Event+0x96>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00d      	beq.n	8000f5e <PRE_UPSHIFT_Event+0x96>
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <PRE_UPSHIFT_Event+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000f4a:	f002 faa7 	bl	800349c <HAL_GetTick>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	429c      	cmp	r4, r3
 8000f52:	d804      	bhi.n	8000f5e <PRE_UPSHIFT_Event+0x96>
		PRE_UPSHIFT_Exit();
 8000f54:	f7ff ffb2 	bl	8000ebc <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000f58:	f000 fa98 	bl	800148c <ERROR_Entry>
		return;
 8000f5c:	bf00      	nop
	}


}
 8000f5e:	bd98      	pop	{r3, r4, r7, pc}
 8000f60:	20000084 	.word	0x20000084
 8000f64:	20000088 	.word	0x20000088
 8000f68:	08007bd8 	.word	0x08007bd8
 8000f6c:	20000094 	.word	0x20000094

08000f70 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d113      	bne.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000f88:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8a:	dc0d      	bgt.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0202 	orr.w	r2, r2, #2
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	705a      	strb	r2, [r3, #1]
 8000fa6:	e008      	b.n	8000fba <PRE_UPSHIFT_Run+0x4a>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0202 	bic.w	r2, r2, #2
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift up with too low rpm
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <PRE_UPSHIFT_Run+0xec>)
 8000fd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	da13      	bge.n	8001000 <PRE_UPSHIFT_Run+0x90>
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10d      	bne.n	8001000 <PRE_UPSHIFT_Run+0x90>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0208 	orr.w	r2, r2, #8
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	705a      	strb	r2, [r3, #1]
 8000ffe:	e008      	b.n	8001012 <PRE_UPSHIFT_Run+0xa2>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0208 	bic.w	r2, r2, #8
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800101a:	2b04      	cmp	r3, #4
 800101c:	d90d      	bls.n	800103a <PRE_UPSHIFT_Run+0xca>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0210 	orr.w	r2, r2, #16
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2204      	movs	r2, #4
 8001036:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
}
 8001038:	e008      	b.n	800104c <PRE_UPSHIFT_Run+0xdc>
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0210 	bic.w	r2, r2, #16
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000084 	.word	0x20000084
 8001058:	20000088 	.word	0x20000088
 800105c:	08007bc0 	.word	0x08007bc0

08001060 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <PRE_DNSHIFT_Entry+0x24>)
 800106a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 800106e:	2202      	movs	r2, #2
 8001070:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8001072:	f002 fa13 	bl	800349c <HAL_GetTick>
 8001076:	4603      	mov	r3, r0
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <PRE_DNSHIFT_Entry+0x28>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000008c 	.word	0x2000008c
 8001084:	2000008d 	.word	0x2000008d
 8001088:	20000094 	.word	0x20000094

0800108c <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 8001098:	b598      	push	{r3, r4, r7, lr}
 800109a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 f8b7 	bl	8002214 <CheckFaults>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <PRE_DNSHIFT_Event+0x1e>
		PRE_DNSHIFT_Exit();
 80010ac:	f7ff ffee 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 80010b0:	f000 f9ec 	bl	800148c <ERROR_Entry>
		return;
 80010b4:	e035      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11d      	bne.n	80010fc <PRE_DNSHIFT_Event+0x64>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_DNSHIFT || MyOutputs->BOverrideActuateClutchOnDnShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetDnShiftMap[MyInputs->NGear];
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010da:	4619      	mov	r1, r3
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <PRE_DNSHIFT_Event+0x94>)
 80010e2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80010e6:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnDnShift = 0; 									// reset the strat for the next gear
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
		}

		if(ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 80010f2:	f7ff ffcb 	bl	800108c <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 80010f6:	f000 f89b 	bl	8001230 <SHIFTING_Entry>
		return;
 80010fa:	e012      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <PRE_DNSHIFT_Event+0x8a>
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <PRE_DNSHIFT_Event+0x98>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 800110e:	f002 f9c5 	bl	800349c <HAL_GetTick>
 8001112:	4603      	mov	r3, r0
 8001114:	429c      	cmp	r4, r3
 8001116:	d804      	bhi.n	8001122 <PRE_DNSHIFT_Event+0x8a>
		PRE_DNSHIFT_Exit();
 8001118:	f7ff ffb8 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 800111c:	f000 f9b6 	bl	800148c <ERROR_Entry>
		return;
 8001120:	bf00      	nop
	}

}
 8001122:	bd98      	pop	{r3, r4, r7, pc}
 8001124:	20000084 	.word	0x20000084
 8001128:	20000088 	.word	0x20000088
 800112c:	08007bec 	.word	0x08007bec
 8001130:	20000094 	.word	0x20000094

08001134 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH && !(MyInputs->BrClutchPaddleInError && ALLOW_NEUTRAL_WHEN_PADDLE_IN_ERROR)) {	// trying to put neutral gear without clutch
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001140:	2b01      	cmp	r3, #1
 8001142:	d119      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800114c:	2b5a      	cmp	r3, #90	; 0x5a
 800114e:	dc13      	bgt.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10d      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0204 	orr.w	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2202      	movs	r2, #2
 8001174:	705a      	strb	r2, [r3, #1]
 8001176:	e008      	b.n	800118a <PRE_DNSHIFT_Run+0x56>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0204 	bic.w	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift down with too high rpm
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001192:	461a      	mov	r2, r3
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800119c:	4619      	mov	r1, r3
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <PRE_DNSHIFT_Run+0xf8>)
 80011a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dd13      	ble.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10d      	bne.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2205      	movs	r2, #5
 80011cc:	705a      	strb	r2, [r3, #1]
 80011ce:	e008      	b.n	80011e2 <PRE_DNSHIFT_Run+0xae>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0220 	bic.w	r2, r2, #32
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <PRE_DNSHIFT_Run+0xd6>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2206      	movs	r2, #6
 8001206:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }

}
 8001208:	e008      	b.n	800121c <PRE_DNSHIFT_Run+0xe8>
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000084 	.word	0x20000084
 8001228:	20000088 	.word	0x20000088
 800122c:	08007bcc 	.word	0x08007bcc

08001230 <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <SHIFTING_Entry+0xc0>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <SHIFTING_Entry+0xc4>)
 800123a:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <SHIFTING_Entry+0xc0>)
 800123e:	2203      	movs	r2, #3
 8001240:	701a      	strb	r2, [r3, #0]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d11b      	bne.n	8001282 <SHIFTING_Entry+0x52>
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001252:	461a      	mov	r2, r3
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SHIFTING_Entry+0xcc>)
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <SHIFTING_Entry+0xd0>)
 800125c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Up;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <SHIFTING_Entry+0xd4>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d104      	bne.n	8001278 <SHIFTING_Entry+0x48>
			MyOutputs->BDnShiftPortState = 1;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2201      	movs	r2, #1
 8001274:	751a      	strb	r2, [r3, #20]
 8001276:	e034      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other upshifts are normal
			MyOutputs->BUpShiftPortState = 1;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <SHIFTING_Entry+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	74da      	strb	r2, [r3, #19]
 8001280:	e02f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d11b      	bne.n	80012c2 <SHIFTING_Entry+0x92>
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear - 1];
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001292:	3b01      	subs	r3, #1
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <SHIFTING_Entry+0xdc>)
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <SHIFTING_Entry+0xd0>)
 800129c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Down;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <SHIFTING_Entry+0xd4>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <SHIFTING_Entry+0x88>
			MyOutputs->BUpShiftPortState = 1;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	74da      	strb	r2, [r3, #19]
 80012b6:	e014      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other downshifts are normal
			MyOutputs->BDnShiftPortState = 1;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	751a      	strb	r2, [r3, #20]
 80012c0:	e00f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else {
		NCurrentState = Unknown;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <SHIFTING_Entry+0xc0>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2207      	movs	r2, #7
 80012e0:	705a      	strb	r2, [r3, #1]
	}

	tShiftTimer = HAL_GetTick();
 80012e2:	f002 f8db 	bl	800349c <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <SHIFTING_Entry+0xe0>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000008c 	.word	0x2000008c
 80012f4:	2000008d 	.word	0x2000008d
 80012f8:	20000084 	.word	0x20000084
 80012fc:	08007bf8 	.word	0x08007bf8
 8001300:	2000009c 	.word	0x2000009c
 8001304:	2000008e 	.word	0x2000008e
 8001308:	20000088 	.word	0x20000088
 800130c:	08007c0c 	.word	0x08007c0c
 8001310:	20000098 	.word	0x20000098

08001314 <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SHIFTING_Event+0x3c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 ff73 	bl	8002214 <CheckFaults>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <SHIFTING_Event+0x1e>
		SHIFTING_Exit();
 8001334:	f7ff ffee 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 8001338:	f000 f8a8 	bl	800148c <ERROR_Entry>
		return;
 800133c:	e00d      	b.n	800135a <SHIFTING_Event+0x3a>
	}

	// TODO: keep checking for control errors ??


	if((tShiftTimer + tShifterMaxTransitTime) < tControllerTimmer) {	// the max time for the gear has expired
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <SHIFTING_Event+0x40>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SHIFTING_Event+0x44>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	441a      	add	r2, r3
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <SHIFTING_Event+0x48>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d204      	bcs.n	800135a <SHIFTING_Event+0x3a>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 8001350:	f7ff ffe0 	bl	8001314 <SHIFTING_Exit>
		POSTSHIFT_Entry();
 8001354:	f000 f810 	bl	8001378 <POSTSHIFT_Entry>
		return;
 8001358:	bf00      	nop
	}

}
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000084 	.word	0x20000084
 8001360:	20000098 	.word	0x20000098
 8001364:	2000009c 	.word	0x2000009c
 8001368:	20000090 	.word	0x20000090

0800136c <SHIFTING_Run>:
void SHIFTING_Run(void) {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	// PID


	// FEED FORWARD

}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <POSTSHIFT_Entry+0x40>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <POSTSHIFT_Entry+0x44>)
 8001382:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <POSTSHIFT_Entry+0x40>)
 8001386:	2204      	movs	r2, #4
 8001388:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 80013a2:	819a      	strh	r2, [r3, #12]
	MyOutputs->BSparkCut = 0;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000008c 	.word	0x2000008c
 80013bc:	2000008d 	.word	0x2000008d
 80013c0:	20000088 	.word	0x20000088

080013c4 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

	// TODO: probably here we need to set the MyOutputs->NGear = MyInputs->NGear

}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 80013d0:	b598      	push	{r3, r4, r7, lr}
 80013d2:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <POSTSHIFT_Event+0x68>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 ff1b 	bl	8002214 <CheckFaults>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <POSTSHIFT_Event+0x1e>
		SHIFTING_Exit();
 80013e4:	f7ff ff96 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 80013e8:	f000 f850 	bl	800148c <ERROR_Entry>
		return;
 80013ec:	e023      	b.n	8001436 <POSTSHIFT_Event+0x66>
	}


	if(!MyOutputs->NControlErrorStatus) {
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <POSTSHIFT_Event+0x6c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10b      	bne.n	8001410 <POSTSHIFT_Event+0x40>
		// we update the Gear variable for the outputs
		MyOutputs->NGear = MyInputs->NGear;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <POSTSHIFT_Event+0x68>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <POSTSHIFT_Event+0x6c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8001404:	709a      	strb	r2, [r3, #2]
		POSTSHIFT_Exit();
 8001406:	f7ff ffdd 	bl	80013c4 <POSTSHIFT_Exit>
		IDLE_Entry();
 800140a:	f7ff fcf9 	bl	8000e00 <IDLE_Entry>
		return;
 800140e:	e012      	b.n	8001436 <POSTSHIFT_Event+0x66>
	}


	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPostShiftTimer + POSTSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <POSTSHIFT_Event+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00d      	beq.n	8001436 <POSTSHIFT_Event+0x66>
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <POSTSHIFT_Event+0x70>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8001422:	f002 f83b 	bl	800349c <HAL_GetTick>
 8001426:	4603      	mov	r3, r0
 8001428:	429c      	cmp	r4, r3
 800142a:	d804      	bhi.n	8001436 <POSTSHIFT_Event+0x66>
		POSTSHIFT_Exit();
 800142c:	f7ff ffca 	bl	80013c4 <POSTSHIFT_Exit>
		ERROR_Entry();
 8001430:	f000 f82c 	bl	800148c <ERROR_Entry>
		return;
 8001434:	bf00      	nop
	}
}
 8001436:	bd98      	pop	{r3, r4, r7, pc}
 8001438:	20000084 	.word	0x20000084
 800143c:	20000088 	.word	0x20000088
 8001440:	200000a0 	.word	0x200000a0

08001444 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

	if(CHECK_POST_SHIFT_GEAR && MyInputs->NGear != MyOutputs->NGearTarget) {
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <POSTSHIFT_Run+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	429a      	cmp	r2, r3
 8001458:	d00a      	beq.n	8001470 <POSTSHIFT_Run+0x2c>
		RaiseControlError(GEAR_TARGET_MISMATCH);
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <POSTSHIFT_Run+0x44>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2208      	movs	r2, #8
 800146c:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(GEAR_TARGET_MISMATCH); }

}
 800146e:	e005      	b.n	800147c <POSTSHIFT_Run+0x38>
	else { ClearControlError(GEAR_TARGET_MISMATCH); }
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000084 	.word	0x20000084
 8001488:	20000088 	.word	0x20000088

0800148c <ERROR_Entry>:


void ERROR_Entry(void) {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <ERROR_Entry+0x40>)
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <ERROR_Entry+0x44>)
 8001496:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <ERROR_Entry+0x40>)
 800149a:	2205      	movs	r2, #5
 800149c:	701a      	strb	r2, [r3, #0]

	// TODO: we need to open a led to indicate the Error State !!!

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <ERROR_Entry+0x48>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <ERROR_Entry+0x48>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTarget = xCLUTCH_REST_POSITION;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <ERROR_Entry+0x48>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 80014b6:	81da      	strh	r2, [r3, #14]
	// clutch should always work... if we enter here during an actuation, not sure if it is correct to interrupt it
	MyOutputs->BSparkCut = 0;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <ERROR_Entry+0x48>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000008c 	.word	0x2000008c
 80014d0:	2000008d 	.word	0x2000008d
 80014d4:	20000088 	.word	0x20000088

080014d8 <ERROR_Exit>:

void ERROR_Exit(void) {
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <ERROR_Event>:
void ERROR_Event(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

	// check that all faults are cleared
	if(!CheckFaults(MyInputs)) {
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <ERROR_Event+0x20>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fe91 	bl	8002214 <CheckFaults>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d104      	bne.n	8001502 <ERROR_Event+0x1e>
		ERROR_Exit();
 80014f8:	f7ff ffee 	bl	80014d8 <ERROR_Exit>
		IDLE_Entry();
 80014fc:	f7ff fc80 	bl	8000e00 <IDLE_Entry>
		return;
 8001500:	bf00      	nop
	// check that all control errors are cleared
	// and do not zero the logged error status
	// remember return in all functions

	// Remember to create the Strategy (and a way to exit the error) to be able to function without NGear (complete open loop)
}
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000084 	.word	0x20000084

08001508 <ERROR_Run>:
void ERROR_Run(void) {
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <ERROR_Run+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]


	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle

}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000088 	.word	0x20000088

08001520 <print>:
 *      Author: orestis
 */

#include <Utils.h>

void print(char *msg, ...) {
 8001520:	b40f      	push	{r0, r1, r2, r3}
 8001522:	b580      	push	{r7, lr}
 8001524:	b09a      	sub	sp, #104	; 0x68
 8001526:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8001528:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800152c:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001534:	4618      	mov	r0, r3
 8001536:	f005 fe13 	bl	8007160 <vsiprintf>
	va_end(args);

#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}
 800153a:	bf00      	nop
 800153c:	3768      	adds	r7, #104	; 0x68
 800153e:	46bd      	mov	sp, r7
 8001540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001544:	b004      	add	sp, #16
 8001546:	4770      	bx	lr

08001548 <My2DMapInterpolate>:

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	68fe      	ldr	r6, [r7, #12]
 8001558:	1e73      	subs	r3, r6, #1
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	4632      	mov	r2, r6
 800155e:	2300      	movs	r3, #0
 8001560:	4614      	mov	r4, r2
 8001562:	461d      	mov	r5, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	016b      	lsls	r3, r5, #5
 800156e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001572:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffee 	bl	800055c <__aeabi_fsub>
 8001580:	4603      	mov	r3, r0
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fa91 	bl	8000aac <__aeabi_fcmplt>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8001590:	4633      	mov	r3, r6
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4413      	add	r3, r2
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]
		return 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07a      	b.n	8001698 <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffd6 	bl	8000560 <__addsf3>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fa95 	bl	8000ae8 <__aeabi_fcmpgt>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00b      	beq.n	80015dc <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 80015c4:	4633      	mov	r3, r6
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	4413      	add	r3, r2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	3a01      	subs	r2, #1
 80015d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	601a      	str	r2, [r3, #0]
		return 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	e05d      	b.n	8001698 <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	e00e      	b.n	8001600 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	4619      	mov	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fa5c 	bl	8000aac <__aeabi_fcmplt>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d108      	bne.n	800160c <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3b01      	subs	r3, #1
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbeb      	blt.n	80015e2 <My2DMapInterpolate+0x9a>
 800160a:	e000      	b.n	800160e <My2DMapInterpolate+0xc6>
			break;
 800160c:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	4619      	mov	r1, r3
 8001622:	f7fe ff9b 	bl	800055c <__aeabi_fsub>
 8001626:	4603      	mov	r3, r0
 8001628:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 800162a:	4633      	mov	r3, r6
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	4413      	add	r3, r2
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	3201      	adds	r2, #1
 8001636:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800163a:	4633      	mov	r3, r6
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4413      	add	r3, r2
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001648:	4619      	mov	r1, r3
 800164a:	f7fe ff87 	bl	800055c <__aeabi_fsub>
 800164e:	4603      	mov	r3, r0
 8001650:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 8001652:	4633      	mov	r3, r6
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	4413      	add	r3, r2
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff76 	bl	800055c <__aeabi_fsub>
 8001670:	4603      	mov	r3, r0
 8001672:	6939      	ldr	r1, [r7, #16]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff f87b 	bl	8000770 <__aeabi_fmul>
 800167a:	4603      	mov	r3, r0
 800167c:	6979      	ldr	r1, [r7, #20]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f92a 	bl	80008d8 <__aeabi_fdiv>
 8001684:	4603      	mov	r3, r0
 8001686:	4619      	mov	r1, r3
 8001688:	4620      	mov	r0, r4
 800168a:	f7fe ff69 	bl	8000560 <__addsf3>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	601a      	str	r2, [r3, #0]
	return 0;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3724      	adds	r7, #36	; 0x24
 800169c:	46bd      	mov	sp, r7
 800169e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a0 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 80016ae:	f001 fef5 	bl	800349c <HAL_GetTick>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4aa9      	ldr	r2, [pc, #676]	; (800195c <ReadInputs+0x2bc>)
 80016b6:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);	// PA0
 80016b8:	4ba9      	ldr	r3, [pc, #676]	; (8001960 <ReadInputs+0x2c0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	2300      	movs	r3, #0
 80016c0:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80016c4:	48a7      	ldr	r0, [pc, #668]	; (8001964 <ReadInputs+0x2c4>)
 80016c6:	f000 fe65 	bl	8002394 <MyHalfBufferAverage>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);	// PA1
 80016d2:	4ba3      	ldr	r3, [pc, #652]	; (8001960 <ReadInputs+0x2c0>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	2301      	movs	r3, #1
 80016da:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80016de:	48a1      	ldr	r0, [pc, #644]	; (8001964 <ReadInputs+0x2c4>)
 80016e0:	f000 fe58 	bl	8002394 <MyHalfBufferAverage>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);	// PA2
 80016ec:	4b9c      	ldr	r3, [pc, #624]	; (8001960 <ReadInputs+0x2c0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	2302      	movs	r3, #2
 80016f4:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80016f8:	489a      	ldr	r0, [pc, #616]	; (8001964 <ReadInputs+0x2c4>)
 80016fa:	f000 fe4b 	bl	8002394 <MyHalfBufferAverage>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);	// PA3
 8001706:	4b96      	ldr	r3, [pc, #600]	; (8001960 <ReadInputs+0x2c0>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	2303      	movs	r3, #3
 800170e:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001712:	4894      	ldr	r0, [pc, #592]	; (8001964 <ReadInputs+0x2c4>)
 8001714:	f000 fe3e 	bl	8002394 <MyHalfBufferAverage>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);	// PA5
 8001720:	4b8f      	ldr	r3, [pc, #572]	; (8001960 <ReadInputs+0x2c0>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	2305      	movs	r3, #5
 8001728:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800172c:	488d      	ldr	r0, [pc, #564]	; (8001964 <ReadInputs+0x2c4>)
 800172e:	f000 fe31 	bl	8002394 <MyHalfBufferAverage>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);	// PA4
 800173a:	4b89      	ldr	r3, [pc, #548]	; (8001960 <ReadInputs+0x2c0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	2304      	movs	r3, #4
 8001742:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001746:	4887      	ldr	r0, [pc, #540]	; (8001964 <ReadInputs+0x2c4>)
 8001748:	f000 fe24 	bl	8002394 <MyHalfBufferAverage>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	865a      	strh	r2, [r3, #50]	; 0x32
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);	// PA7
 8001754:	4b82      	ldr	r3, [pc, #520]	; (8001960 <ReadInputs+0x2c0>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	2307      	movs	r3, #7
 800175c:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001760:	4880      	ldr	r0, [pc, #512]	; (8001964 <ReadInputs+0x2c4>)
 8001762:	f000 fe17 	bl	8002394 <MyHalfBufferAverage>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	869a      	strh	r2, [r3, #52]	; 0x34
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);	// PA7
 800176e:	4b7c      	ldr	r3, [pc, #496]	; (8001960 <ReadInputs+0x2c0>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	2306      	movs	r3, #6
 8001776:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800177a:	487a      	ldr	r0, [pc, #488]	; (8001964 <ReadInputs+0x2c4>)
 800177c:	f000 fe0a 	bl	8002394 <MyHalfBufferAverage>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	86da      	strh	r2, [r3, #54]	; 0x36

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe ff9b 	bl	80006c8 <__aeabi_i2f>
 8001792:	4603      	mov	r3, r0
 8001794:	4974      	ldr	r1, [pc, #464]	; (8001968 <ReadInputs+0x2c8>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe ffea 	bl	8000770 <__aeabi_fmul>
 800179c:	4603      	mov	r3, r0
 800179e:	4973      	ldr	r1, [pc, #460]	; (800196c <ReadInputs+0x2cc>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f899 	bl	80008d8 <__aeabi_fdiv>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe ff88 	bl	80006c8 <__aeabi_i2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	496b      	ldr	r1, [pc, #428]	; (8001968 <ReadInputs+0x2c8>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe ffd7 	bl	8000770 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4969      	ldr	r1, [pc, #420]	; (800196c <ReadInputs+0x2cc>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff f886 	bl	80008d8 <__aeabi_fdiv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe ff75 	bl	80006c8 <__aeabi_i2f>
 80017de:	4603      	mov	r3, r0
 80017e0:	4961      	ldr	r1, [pc, #388]	; (8001968 <ReadInputs+0x2c8>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe ffc4 	bl	8000770 <__aeabi_fmul>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4960      	ldr	r1, [pc, #384]	; (800196c <ReadInputs+0x2cc>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff f873 	bl	80008d8 <__aeabi_fdiv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe ff62 	bl	80006c8 <__aeabi_i2f>
 8001804:	4603      	mov	r3, r0
 8001806:	4958      	ldr	r1, [pc, #352]	; (8001968 <ReadInputs+0x2c8>)
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe ffb1 	bl	8000770 <__aeabi_fmul>
 800180e:	4603      	mov	r3, r0
 8001810:	4956      	ldr	r1, [pc, #344]	; (800196c <ReadInputs+0x2cc>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f860 	bl	80008d8 <__aeabi_fdiv>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe ff4f 	bl	80006c8 <__aeabi_i2f>
 800182a:	4603      	mov	r3, r0
 800182c:	494e      	ldr	r1, [pc, #312]	; (8001968 <ReadInputs+0x2c8>)
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe ff9e 	bl	8000770 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	494d      	ldr	r1, [pc, #308]	; (800196c <ReadInputs+0x2cc>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff f84d 	bl	80008d8 <__aeabi_fdiv>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe ff3c 	bl	80006c8 <__aeabi_i2f>
 8001850:	4603      	mov	r3, r0
 8001852:	4945      	ldr	r1, [pc, #276]	; (8001968 <ReadInputs+0x2c8>)
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe ff8b 	bl	8000770 <__aeabi_fmul>
 800185a:	4603      	mov	r3, r0
 800185c:	4943      	ldr	r1, [pc, #268]	; (800196c <ReadInputs+0x2cc>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f83a 	bl	80008d8 <__aeabi_fdiv>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe ff29 	bl	80006c8 <__aeabi_i2f>
 8001876:	4603      	mov	r3, r0
 8001878:	493b      	ldr	r1, [pc, #236]	; (8001968 <ReadInputs+0x2c8>)
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe ff78 	bl	8000770 <__aeabi_fmul>
 8001880:	4603      	mov	r3, r0
 8001882:	493a      	ldr	r1, [pc, #232]	; (800196c <ReadInputs+0x2cc>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff f827 	bl	80008d8 <__aeabi_fdiv>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	621a      	str	r2, [r3, #32]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe ff16 	bl	80006c8 <__aeabi_i2f>
 800189c:	4603      	mov	r3, r0
 800189e:	4932      	ldr	r1, [pc, #200]	; (8001968 <ReadInputs+0x2c8>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe ff65 	bl	8000770 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4930      	ldr	r1, [pc, #192]	; (800196c <ReadInputs+0x2cc>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f814 	bl	80008d8 <__aeabi_fdiv>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24

	//Digital Inputs
	inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 80018b8:	2101      	movs	r1, #1
 80018ba:	482d      	ldr	r0, [pc, #180]	; (8001970 <ReadInputs+0x2d0>)
 80018bc:	f003 fdb2 	bl	8005424 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 80018ca:	2102      	movs	r1, #2
 80018cc:	4828      	ldr	r0, [pc, #160]	; (8001970 <ReadInputs+0x2d0>)
 80018ce:	f003 fda9 	bl	8005424 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 80018dc:	2120      	movs	r1, #32
 80018de:	4824      	ldr	r0, [pc, #144]	; (8001970 <ReadInputs+0x2d0>)
 80018e0:	f003 fda0 	bl	8005424 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	481f      	ldr	r0, [pc, #124]	; (8001970 <ReadInputs+0x2d0>)
 80018f2:	f003 fd97 	bl	8005424 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <ReadInputs+0x2d4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	inputs->BSWButtonB = BButtonBCAN;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <ReadInputs+0x2d8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	inputs->BSWButtonC = BButtonCCAN;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <ReadInputs+0x2dc>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	inputs->BSWButtonD = BButtonDCAN;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <ReadInputs+0x2e0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	inputs->BSWButtonE = BButtonECAN;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <ReadInputs+0x2e4>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	inputs->BSWButtonF = BButtonFCAN;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <ReadInputs+0x2e8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

		// Inverted logic!! DriverKill=1 means ShutDown is Open, DriverKill=0 means ShutDown is closed
	if(inputs->NSHIFTERDIN04 & (tBDriverKillTimer < tInputsTimmer) && inputs->BDriverKill) {
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800194e:	4619      	mov	r1, r3
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <ReadInputs+0x2ec>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <ReadInputs+0x2bc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	e019      	b.n	8001990 <ReadInputs+0x2f0>
 800195c:	200000a8 	.word	0x200000a8
 8001960:	200000e0 	.word	0x200000e0
 8001964:	200002a0 	.word	0x200002a0
 8001968:	4055c28f 	.word	0x4055c28f
 800196c:	457ff000 	.word	0x457ff000
 8001970:	40010c00 	.word	0x40010c00
 8001974:	200000c9 	.word	0x200000c9
 8001978:	200000ca 	.word	0x200000ca
 800197c:	200000cb 	.word	0x200000cb
 8001980:	200000cc 	.word	0x200000cc
 8001984:	200000cd 	.word	0x200000cd
 8001988:	200000ce 	.word	0x200000ce
 800198c:	200000bc 	.word	0x200000bc
 8001990:	bf34      	ite	cc
 8001992:	2301      	movcc	r3, #1
 8001994:	2300      	movcs	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	400b      	ands	r3, r1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00e      	beq.n	80019bc <ReadInputs+0x31c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <ReadInputs+0x31c>
		inputs->BDriverKill = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		tBDriverKillTimer = tInputsTimmer + DRIVER_KILL_DEBOUNCE;
 80019b0:	4ba5      	ldr	r3, [pc, #660]	; (8001c48 <ReadInputs+0x5a8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	33c8      	adds	r3, #200	; 0xc8
 80019b6:	4aa5      	ldr	r2, [pc, #660]	; (8001c4c <ReadInputs+0x5ac>)
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00d      	b.n	80019d8 <ReadInputs+0x338>
	}
	else if(!inputs->NSHIFTERDIN04 & !inputs->BDriverKill) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <ReadInputs+0x338>
		inputs->BDriverKill = 1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	// ---------------------------------------------------------------------------------------------------
	// NGear Conditioning

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	; 0x40

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3344      	adds	r3, #68	; 0x44
 80019e8:	4999      	ldr	r1, [pc, #612]	; (8001c50 <ReadInputs+0x5b0>)
 80019ea:	9101      	str	r1, [sp, #4]
 80019ec:	4998      	ldr	r1, [pc, #608]	; (8001c50 <ReadInputs+0x5b0>)
 80019ee:	9100      	str	r1, [sp, #0]
 80019f0:	4998      	ldr	r1, [pc, #608]	; (8001c54 <ReadInputs+0x5b4>)
 80019f2:	2006      	movs	r0, #6
 80019f4:	f7ff fda8 	bl	8001548 <My2DMapInterpolate>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	// TODO: think about checking the float NGear for +-0.2 to define false neutral

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd04 	bl	8000414 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f006 f840 	bl	8007a98 <round>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7fe fd78 	bl	8000514 <__aeabi_d2uiz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	bf28      	it	cs
 8001a38:	2305      	movcs	r3, #5
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// check for errors
	if(inputs->BNGearInError) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <ReadInputs+0x3ba>
		RaiseFault(inputs, NGEAR_FAULT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	e005      	b.n	8001a66 <ReadInputs+0x3c6>
		// inputs->NGear = 1; // TODO: is it correct??? not sure. I would put 1 to be able trigger antistall and to be generic for all functions
	}
	else ClearFault(inputs, NGEAR_FAULT);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f023 0201 	bic.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <ReadInputs+0x5b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <ReadInputs+0x5a8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d204      	bcs.n	8001a80 <ReadInputs+0x3e0>
		inputs->BSteeringWheelFitted = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001a7e:	e003      	b.n	8001a88 <ReadInputs+0x3e8>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <ReadInputs+0x408>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inputs->BDeclutchRequestInError = 0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8001aa6:	e007      	b.n	8001ab8 <ReadInputs+0x418>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Conditioning

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <ReadInputs+0x5bc>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8001ac6:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <ReadInputs+0x5c0>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	661a      	str	r2, [r3, #96]	; 0x60
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_PADDLE_MARGIN_MIN, VrCLUTCH_PADDLE_MARGIN_MAX);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3364      	adds	r3, #100	; 0x64
 8001ae2:	4960      	ldr	r1, [pc, #384]	; (8001c64 <ReadInputs+0x5c4>)
 8001ae4:	9101      	str	r1, [sp, #4]
 8001ae6:	495f      	ldr	r1, [pc, #380]	; (8001c64 <ReadInputs+0x5c4>)
 8001ae8:	9100      	str	r1, [sp, #0]
 8001aea:	495f      	ldr	r1, [pc, #380]	; (8001c68 <ReadInputs+0x5c8>)
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7ff fd2b 	bl	8001548 <My2DMapInterpolate>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d012      	beq.n	8001b2c <ReadInputs+0x48c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10d      	bne.n	8001b2c <ReadInputs+0x48c>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f993 205c 	ldrsb.w	r2, [r3, #92]	; 0x5c
 8001b16:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <ReadInputs+0x5cc>)
 8001b18:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001b2a:	e02d      	b.n	8001b88 <ReadInputs+0x4e8>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11d      	bne.n	8001b72 <ReadInputs+0x4d2>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fc6a 	bl	8000414 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f005 ffa6 	bl	8007a98 <round>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7fe fcb6 	bl	80004c4 <__aeabi_d2iz>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b25a      	sxtb	r2, r3
 8001b5c:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <ReadInputs+0x5cc>)
 8001b5e:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001b70:	e00a      	b.n	8001b88 <ReadInputs+0x4e8>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		inputs->NrClutchPaddleSource = NoSource;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <ReadInputs+0x5cc>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <ReadInputs+0x506>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <ReadInputs+0x500>
 8001b9c:	2264      	movs	r2, #100	; 0x64
 8001b9e:	e000      	b.n	8001ba2 <ReadInputs+0x502>
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <ReadInputs+0x5d0>)
 8001ba4:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001ba6:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <ReadInputs+0x5d0>)
 8001ba8:	f993 2000 	ldrsb.w	r2, [r3]
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <ReadInputs+0x5cc>)
 8001bae:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	bfb8      	it	lt
 8001bb6:	4613      	movlt	r3, r2
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	2b63      	cmp	r3, #99	; 0x63
 8001bbc:	dc0d      	bgt.n	8001bda <ReadInputs+0x53a>
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <ReadInputs+0x5d0>)
 8001bc0:	f993 2000 	ldrsb.w	r2, [r3]
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <ReadInputs+0x5cc>)
 8001bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	bfb8      	it	lt
 8001bce:	4613      	movlt	r3, r2
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bd6:	b25a      	sxtb	r2, r3
 8001bd8:	e000      	b.n	8001bdc <ReadInputs+0x53c>
 8001bda:	2264      	movs	r2, #100	; 0x64
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Conditioning

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <ReadInputs+0x5d4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <ReadInputs+0x5d8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8001bfa:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <ReadInputs+0x5dc>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <ReadInputs+0x5e0>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Analog Input
	// TODO: Debouncing and STUCK detection ???
	inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	651a      	str	r2, [r3, #80]	; 0x50

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fd51 	bl	80006c8 <__aeabi_i2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4916      	ldr	r1, [pc, #88]	; (8001c84 <ReadInputs+0x5e4>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe ff52 	bl	8000ad4 <__aeabi_fcmpge>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d028      	beq.n	8001c88 <ReadInputs+0x5e8>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001c46:	e078      	b.n	8001d3a <ReadInputs+0x69a>
 8001c48:	200000a8 	.word	0x200000a8
 8001c4c:	200000bc 	.word	0x200000bc
 8001c50:	3e4ccccd 	.word	0x3e4ccccd
 8001c54:	08007c20 	.word	0x08007c20
 8001c58:	200000d4 	.word	0x200000d4
 8001c5c:	200000d0 	.word	0x200000d0
 8001c60:	200000cf 	.word	0x200000cf
 8001c64:	3dcccccd 	.word	0x3dcccccd
 8001c68:	08007c50 	.word	0x08007c50
 8001c6c:	200000e1 	.word	0x200000e1
 8001c70:	200000e2 	.word	0x200000e2
 8001c74:	200000c6 	.word	0x200000c6
 8001c78:	200000c8 	.word	0x200000c8
 8001c7c:	200000c5 	.word	0x200000c5
 8001c80:	200000c7 	.word	0x200000c7
 8001c84:	40200000 	.word	0x40200000
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8c:	4972      	ldr	r1, [pc, #456]	; (8001e58 <ReadInputs+0x7b8>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ff16 	bl	8000ac0 <__aeabi_fcmple>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d011      	beq.n	8001cbe <ReadInputs+0x61e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9e:	496f      	ldr	r1, [pc, #444]	; (8001e5c <ReadInputs+0x7bc>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe ff17 	bl	8000ad4 <__aeabi_fcmpge>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <ReadInputs+0x61e>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001cbc:	e03d      	b.n	8001d3a <ReadInputs+0x69a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc2:	4967      	ldr	r1, [pc, #412]	; (8001e60 <ReadInputs+0x7c0>)
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fefb 	bl	8000ac0 <__aeabi_fcmple>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d011      	beq.n	8001cf4 <ReadInputs+0x654>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd4:	4963      	ldr	r1, [pc, #396]	; (8001e64 <ReadInputs+0x7c4>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fefc 	bl	8000ad4 <__aeabi_fcmpge>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <ReadInputs+0x654>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001cf2:	e022      	b.n	8001d3a <ReadInputs+0x69a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf8:	495b      	ldr	r1, [pc, #364]	; (8001e68 <ReadInputs+0x7c8>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fee0 	bl	8000ac0 <__aeabi_fcmple>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d011      	beq.n	8001d2a <ReadInputs+0x68a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	4958      	ldr	r1, [pc, #352]	; (8001e6c <ReadInputs+0x7cc>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fee1 	bl	8000ad4 <__aeabi_fcmpge>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <ReadInputs+0x68a>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001d28:	e007      	b.n	8001d3a <ReadInputs+0x69a>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <ReadInputs+0x6cc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10e      	bne.n	8001d6c <ReadInputs+0x6cc>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = CAN;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001d6a:	e025      	b.n	8001db8 <ReadInputs+0x718>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d114      	bne.n	8001da0 <ReadInputs+0x700>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = Analog;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001d9e:	e00b      	b.n	8001db8 <ReadInputs+0x718>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = NoSource;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d013      	beq.n	8001dea <ReadInputs+0x74a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10e      	bne.n	8001dea <ReadInputs+0x74a>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = CAN;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001de8:	e025      	b.n	8001e36 <ReadInputs+0x796>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d114      	bne.n	8001e1e <ReadInputs+0x77e>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	bf0c      	ite	eq
 8001dfe:	2301      	moveq	r3, #1
 8001e00:	2300      	movne	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = Analog;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001e1c:	e00b      	b.n	8001e36 <ReadInputs+0x796>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = NoSource;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	// ---------------------------------------------------------------------------------------------------
	// Launch

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <ReadInputs+0x7d0>
		inputs->BLaunchRequest = inputs->BSWButtonD;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		inputs->BLaunchRequestInError = 0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001e54:	e014      	b.n	8001e80 <ReadInputs+0x7e0>
 8001e56:	bf00      	nop
 8001e58:	3f8ccccd 	.word	0x3f8ccccd
 8001e5c:	3f733333 	.word	0x3f733333
 8001e60:	3ff33333 	.word	0x3ff33333
 8001e64:	3fd9999a 	.word	0x3fd9999a
 8001e68:	3f666666 	.word	0x3f666666
 8001e6c:	3f4ccccd 	.word	0x3f4ccccd
	}
	else {
		inputs->BLaunchRequestInError = 1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	// ---------------------------------------------------------------------------------------------------
	// Toggle Switches

	// Toggle 1
	if(inputs->BSWButtonA && tToggleSwitch01 < tInputsTimmer) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d014      	beq.n	8001eb4 <ReadInputs+0x814>
 8001e8a:	4b8f      	ldr	r3, [pc, #572]	; (80020c8 <ReadInputs+0xa28>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b8f      	ldr	r3, [pc, #572]	; (80020cc <ReadInputs+0xa2c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d20e      	bcs.n	8001eb4 <ReadInputs+0x814>
		inputs->NToggleSwitch01State ^= 1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		tToggleSwitch01 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001ea8:	4b88      	ldr	r3, [pc, #544]	; (80020cc <ReadInputs+0xa2c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001eb0:	4a85      	ldr	r2, [pc, #532]	; (80020c8 <ReadInputs+0xa28>)
 8001eb2:	6013      	str	r3, [r2, #0]
	}

	// Toggle 2
	if(inputs->BSWButtonB && tToggleSwitch02 < tInputsTimmer) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d014      	beq.n	8001ee8 <ReadInputs+0x848>
 8001ebe:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <ReadInputs+0xa30>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b82      	ldr	r3, [pc, #520]	; (80020cc <ReadInputs+0xa2c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d20e      	bcs.n	8001ee8 <ReadInputs+0x848>
		inputs->NToggleSwitch02State ^= 1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		tToggleSwitch02 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001edc:	4b7b      	ldr	r3, [pc, #492]	; (80020cc <ReadInputs+0xa2c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ee4:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <ReadInputs+0xa30>)
 8001ee6:	6013      	str	r3, [r2, #0]
	}

	// Toggle 3
	if(inputs->BSWButtonC && tToggleSwitch03 < tInputsTimmer) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d014      	beq.n	8001f1c <ReadInputs+0x87c>
 8001ef2:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <ReadInputs+0xa34>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b75      	ldr	r3, [pc, #468]	; (80020cc <ReadInputs+0xa2c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d20e      	bcs.n	8001f1c <ReadInputs+0x87c>
		inputs->NToggleSwitch03State ^= 1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001f04:	f083 0301 	eor.w	r3, r3, #1
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		tToggleSwitch03 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001f10:	4b6e      	ldr	r3, [pc, #440]	; (80020cc <ReadInputs+0xa2c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001f18:	4a6e      	ldr	r2, [pc, #440]	; (80020d4 <ReadInputs+0xa34>)
 8001f1a:	6013      	str	r3, [r2, #0]
	}

	// Toggle 4
	if(inputs->BSWButtonE && tToggleSwitch04 < tInputsTimmer) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d014      	beq.n	8001f50 <ReadInputs+0x8b0>
 8001f26:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <ReadInputs+0xa38>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b68      	ldr	r3, [pc, #416]	; (80020cc <ReadInputs+0xa2c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d20e      	bcs.n	8001f50 <ReadInputs+0x8b0>
		inputs->NToggleSwitch04State ^= 1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		tToggleSwitch04 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <ReadInputs+0xa2c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001f4c:	4a62      	ldr	r2, [pc, #392]	; (80020d8 <ReadInputs+0xa38>)
 8001f4e:	6013      	str	r3, [r2, #0]


	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSHIFTERAnalog01 / VSUPPLY_DIVIDER_GAIN;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4961      	ldr	r1, [pc, #388]	; (80020dc <ReadInputs+0xa3c>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fcbe 	bl	80008d8 <__aeabi_fdiv>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// ---------------------------------------------------------------------------------------------------
	// nEngine Conditioning

	// CAN Input

	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 8001f66:	4b5e      	ldr	r3, [pc, #376]	; (80020e0 <ReadInputs+0xa40>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001f6e:	4b57      	ldr	r3, [pc, #348]	; (80020cc <ReadInputs+0xa2c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d20c      	bcs.n	8001f90 <ReadInputs+0x8f0>
		inputs->BnEngineInError = 1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		inputs->nEngine = 0; 		// we force to zero if in error
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001f8e:	e007      	b.n	8001fa0 <ReadInputs+0x900>
	}
	else {
		inputs->BnEngineInError = 0;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 1;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <ReadInputs+0xa44>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <ReadInputs+0x920>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <ReadInputs+0xa48>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <ReadInputs+0xa4c>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d112      	bne.n	800200a <ReadInputs+0x96a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00d      	beq.n	800200a <ReadInputs+0x96a>
 8001fee:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <ReadInputs+0xa50>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <ReadInputs+0x96a>
		BUpShiftRequested = 1;
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <ReadInputs+0xa50>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e016      	b.n	8002038 <ReadInputs+0x998>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002010:	2b00      	cmp	r3, #0
 8002012:	d111      	bne.n	8002038 <ReadInputs+0x998>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <ReadInputs+0x998>
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <ReadInputs+0xa50>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <ReadInputs+0x998>
		BUpShiftRequested = 0;
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <ReadInputs+0xa50>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f043 0202 	orr.w	r2, r3, #2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800203e:	2b00      	cmp	r3, #0
 8002040:	d112      	bne.n	8002068 <ReadInputs+0x9c8>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <ReadInputs+0x9c8>
 800204c:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <ReadInputs+0xa54>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <ReadInputs+0x9c8>
		BDnShiftRequested = 1;
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <ReadInputs+0xa54>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e016      	b.n	8002096 <ReadInputs+0x9f6>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800206e:	2b00      	cmp	r3, #0
 8002070:	d111      	bne.n	8002096 <ReadInputs+0x9f6>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10c      	bne.n	8002096 <ReadInputs+0x9f6>
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <ReadInputs+0xa54>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <ReadInputs+0x9f6>
		BDnShiftRequested = 0;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <ReadInputs+0xa54>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f043 0208 	orr.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800209c:	2b00      	cmp	r3, #0
 800209e:	d12d      	bne.n	80020fc <ReadInputs+0xa5c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d028      	beq.n	80020fc <ReadInputs+0xa5c>
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <ReadInputs+0xa58>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d124      	bne.n	80020fc <ReadInputs+0xa5c>
		BLaunchRequested = 1;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <ReadInputs+0xa58>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f043 0210 	orr.w	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e031      	b.n	800212a <ReadInputs+0xa8a>
 80020c6:	bf00      	nop
 80020c8:	200000ac 	.word	0x200000ac
 80020cc:	200000a8 	.word	0x200000a8
 80020d0:	200000b0 	.word	0x200000b0
 80020d4:	200000b4 	.word	0x200000b4
 80020d8:	200000b8 	.word	0x200000b8
 80020dc:	3e617c1c 	.word	0x3e617c1c
 80020e0:	200000d8 	.word	0x200000d8
 80020e4:	200000d2 	.word	0x200000d2
 80020e8:	200000dc 	.word	0x200000dc
 80020ec:	200000de 	.word	0x200000de
 80020f0:	200000c0 	.word	0x200000c0
 80020f4:	200000c1 	.word	0x200000c1
 80020f8:	200000c2 	.word	0x200000c2
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002102:	2b00      	cmp	r3, #0
 8002104:	d111      	bne.n	800212a <ReadInputs+0xa8a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10c      	bne.n	800212a <ReadInputs+0xa8a>
 8002110:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <ReadInputs+0xb44>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <ReadInputs+0xa8a>
		BLaunchRequested = 0;
 8002118:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <ReadInputs+0xb44>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f043 0220 	orr.w	r2, r3, #32
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002130:	2b00      	cmp	r3, #0
 8002132:	d112      	bne.n	800215a <ReadInputs+0xaba>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <ReadInputs+0xaba>
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <ReadInputs+0xb48>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <ReadInputs+0xaba>
		BDeclutchRequested = 1;
 8002146:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <ReadInputs+0xb48>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e016      	b.n	8002188 <ReadInputs+0xae8>
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002160:	2b00      	cmp	r3, #0
 8002162:	d111      	bne.n	8002188 <ReadInputs+0xae8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10c      	bne.n	8002188 <ReadInputs+0xae8>
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <ReadInputs+0xb48>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <ReadInputs+0xae8>
		BDeclutchRequested = 0;
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <ReadInputs+0xb48>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800218e:	2b00      	cmp	r3, #0
 8002190:	d124      	bne.n	80021dc <ReadInputs+0xb3c>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8002198:	2b4f      	cmp	r3, #79	; 0x4f
 800219a:	dd0d      	ble.n	80021b8 <ReadInputs+0xb18>
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <ReadInputs+0xb4c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <ReadInputs+0xb18>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <ReadInputs+0xb4c>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]



	// ---------------------------------------------------------------------------------------------------

}
 80021b6:	e011      	b.n	80021dc <ReadInputs+0xb3c>
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dc0c      	bgt.n	80021dc <ReadInputs+0xb3c>
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <ReadInputs+0xb4c>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <ReadInputs+0xb3c>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <ReadInputs+0xb4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200000c2 	.word	0x200000c2
 80021e8:	200000c3 	.word	0x200000c3
 80021ec:	200000c4 	.word	0x200000c4

080021f0 <InitInputs>:

void InitInputs(void) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <InitInputs+0x1c>)
 80021f6:	f001 fd41 	bl	8003c7c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 80021fa:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 80021fe:	4904      	ldr	r1, [pc, #16]	; (8002210 <InitInputs+0x20>)
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <InitInputs+0x1c>)
 8002202:	f001 fa51 	bl	80036a8 <HAL_ADC_Start_DMA>
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200000e4 	.word	0x200000e4
 8002210:	200002a0 	.word	0x200002a0

08002214 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <CheckFaults+0x14>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <CheckFaults+0x16>
	return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	; 0x30
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	f107 0214 	add.w	r2, r7, #20
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f002 f914 	bl	8004476 <HAL_CAN_GetRxMessage>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <CAN_RX+0x120>)
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	3301      	adds	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <CAN_RX+0x120>)
 8002260:	801a      	strh	r2, [r3, #0]
 8002262:	e073      	b.n	800234c <CAN_RX+0x118>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800226a:	d003      	beq.n	8002274 <CAN_RX+0x40>
 800226c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002270:	d05c      	beq.n	800232c <CAN_RX+0xf8>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
		 break;

	 default:
		 break;
 8002272:	e06b      	b.n	800234c <CAN_RX+0x118>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 8002274:	f001 f912 	bl	800349c <HAL_GetTick>
 8002278:	4603      	mov	r3, r0
 800227a:	4a37      	ldr	r2, [pc, #220]	; (8002358 <CAN_RX+0x124>)
 800227c:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <CAN_RX+0x128>)
 8002288:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 800228a:	7b3b      	ldrb	r3, [r7, #12]
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <CAN_RX+0x12c>)
 8002298:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 800229a:	7b3b      	ldrb	r3, [r7, #12]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	b25a      	sxtb	r2, r3
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <CAN_RX+0x130>)
 80022aa:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 80022ac:	7b7b      	ldrb	r3, [r7, #13]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <CAN_RX+0x134>)
 80022b6:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 80022b8:	7b7b      	ldrb	r3, [r7, #13]
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	4b29      	ldr	r3, [pc, #164]	; (800236c <CAN_RX+0x138>)
 80022c6:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 80022c8:	7b7b      	ldrb	r3, [r7, #13]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <CAN_RX+0x13c>)
 80022d6:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 80022d8:	7b7b      	ldrb	r3, [r7, #13]
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <CAN_RX+0x140>)
 80022e6:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 80022e8:	7b7b      	ldrb	r3, [r7, #13]
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <CAN_RX+0x144>)
 80022f6:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <CAN_RX+0x148>)
 8002306:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 8002308:	7b7b      	ldrb	r3, [r7, #13]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <CAN_RX+0x14c>)
 8002316:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 8002318:	7b7b      	ldrb	r3, [r7, #13]
 800231a:	09db      	lsrs	r3, r3, #7
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <CAN_RX+0x150>)
 8002320:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 8002322:	7bbb      	ldrb	r3, [r7, #14]
 8002324:	b25a      	sxtb	r2, r3
 8002326:	4b18      	ldr	r3, [pc, #96]	; (8002388 <CAN_RX+0x154>)
 8002328:	701a      	strb	r2, [r3, #0]
		 break;
 800232a:	e00f      	b.n	800234c <CAN_RX+0x118>
		 tCANECULastSeen = HAL_GetTick();
 800232c:	f001 f8b6 	bl	800349c <HAL_GetTick>
 8002330:	4603      	mov	r3, r0
 8002332:	4a16      	ldr	r2, [pc, #88]	; (800238c <CAN_RX+0x158>)
 8002334:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
 8002336:	7b3b      	ldrb	r3, [r7, #12]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	b21a      	sxth	r2, r3
 800233c:	7b7b      	ldrb	r3, [r7, #13]
 800233e:	b21b      	sxth	r3, r3
 8002340:	4313      	orrs	r3, r2
 8002342:	b21b      	sxth	r3, r3
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <CAN_RX+0x15c>)
 8002348:	801a      	strh	r2, [r3, #0]
		 break;
 800234a:	bf00      	nop
	 }
}
 800234c:	3730      	adds	r7, #48	; 0x30
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200000de 	.word	0x200000de
 8002358:	200000d4 	.word	0x200000d4
 800235c:	200000c6 	.word	0x200000c6
 8002360:	200000c8 	.word	0x200000c8
 8002364:	200000d0 	.word	0x200000d0
 8002368:	200000c5 	.word	0x200000c5
 800236c:	200000c7 	.word	0x200000c7
 8002370:	200000c9 	.word	0x200000c9
 8002374:	200000ca 	.word	0x200000ca
 8002378:	200000cb 	.word	0x200000cb
 800237c:	200000cc 	.word	0x200000cc
 8002380:	200000cd 	.word	0x200000cd
 8002384:	200000ce 	.word	0x200000ce
 8002388:	200000cf 	.word	0x200000cf
 800238c:	200000d8 	.word	0x200000d8
 8002390:	200000d2 	.word	0x200000d2

08002394 <MyHalfBufferAverage>:
    }
    return 1; // If no match found, return error!
}


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	4608      	mov	r0, r1
 800239e:	4611      	mov	r1, r2
 80023a0:	461a      	mov	r2, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	460b      	mov	r3, r1
 80023a8:	707b      	strb	r3, [r7, #1]
 80023aa:	4613      	mov	r3, r2
 80023ac:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 80023b2:	787b      	ldrb	r3, [r7, #1]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <MyHalfBufferAverage+0x28>
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	e000      	b.n	80023be <MyHalfBufferAverage+0x2a>
 80023bc:	2300      	movs	r3, #0
 80023be:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	08db      	lsrs	r3, r3, #3
 80023c4:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 80023c6:	2300      	movs	r3, #0
 80023c8:	827b      	strh	r3, [r7, #18]
 80023ca:	e010      	b.n	80023ee <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 80023cc:	8a7b      	ldrh	r3, [r7, #18]
 80023ce:	00da      	lsls	r2, r3, #3
 80023d0:	783b      	ldrb	r3, [r7, #0]
 80023d2:	441a      	add	r2, r3
 80023d4:	8a3b      	ldrh	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4413      	add	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 80023e8:	8a7b      	ldrh	r3, [r7, #18]
 80023ea:	3301      	adds	r3, #1
 80023ec:	827b      	strh	r3, [r7, #18]
 80023ee:	8a7a      	ldrh	r2, [r7, #18]
 80023f0:	89fb      	ldrh	r3, [r7, #14]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3ea      	bcc.n	80023cc <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	b29b      	uxth	r3, r3

}
 8002404:	4618      	mov	r0, r3
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8002416:	2100      	movs	r1, #0
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff0b 	bl	8002234 <CAN_RX>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 800242e:	2101      	movs	r1, #1
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff feff 	bl	8002234 <CAN_RX>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_CAN_ErrorCallback+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_CAN_ErrorCallback+0x20>)
 8002454:	701a      	strb	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	200000dc 	.word	0x200000dc

08002464 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d107      	bne.n	8002484 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f083 0301 	eor.w	r3, r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002482:	701a      	strb	r2, [r3, #0]
	}
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	200000e4 	.word	0x200000e4
 8002494:	200000e0 	.word	0x200000e0

08002498 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800249c:	f3bf 8f4f 	dsb	sy
}
 80024a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <__NVIC_SystemReset+0x24>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024aa:	4904      	ldr	r1, [pc, #16]	; (80024bc <__NVIC_SystemReset+0x24>)
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_SystemReset+0x28>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80024b2:	f3bf 8f4f 	dsb	sy
}
 80024b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <__NVIC_SystemReset+0x20>
 80024bc:	e000ed00 	.word	0xe000ed00
 80024c0:	05fa0004 	.word	0x05fa0004

080024c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c8:	f000 ff90 	bl	80033ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024cc:	f000 f83e 	bl	800254c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d0:	f000 fba4 	bl	8002c1c <MX_GPIO_Init>
  MX_DMA_Init();
 80024d4:	f000 fb84 	bl	8002be0 <MX_DMA_Init>
  MX_TIM3_Init();
 80024d8:	f000 fb0a 	bl	8002af0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80024dc:	f000 f892 	bl	8002604 <MX_ADC1_Init>
  MX_CAN_Init();
 80024e0:	f000 f932 	bl	8002748 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80024e4:	f000 fb52 	bl	8002b8c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80024e8:	f000 fab6 	bl	8002a58 <MX_TIM2_Init>
  MX_TIM1_Init();
 80024ec:	f000 fa14 	bl	8002918 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 80024f0:	4811      	ldr	r0, [pc, #68]	; (8002538 <main+0x74>)
 80024f2:	f003 fddd 	bl	80060b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 80024f6:	4811      	ldr	r0, [pc, #68]	; (800253c <main+0x78>)
 80024f8:	f003 fd90 	bl	800601c <HAL_TIM_Base_Start>
  InitInputs();
 80024fc:	f7ff fe78 	bl	80021f0 <InitInputs>
  InitController(&Inputs,&Outputs);
 8002500:	490f      	ldr	r1, [pc, #60]	; (8002540 <main+0x7c>)
 8002502:	4810      	ldr	r0, [pc, #64]	; (8002544 <main+0x80>)
 8002504:	f7fe fb1a 	bl	8000b3c <InitController>
  InitOutputs();
 8002508:	f000 fbfe 	bl	8002d08 <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 800250c:	2032      	movs	r0, #50	; 0x32
 800250e:	f000 ffcf 	bl	80034b0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <main+0x84>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0fa      	beq.n	8002512 <main+0x4e>
		  BCycleTimerFlag = 0;
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <main+0x84>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 8002522:	4808      	ldr	r0, [pc, #32]	; (8002544 <main+0x80>)
 8002524:	f7ff f8bc 	bl	80016a0 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 8002528:	4905      	ldr	r1, [pc, #20]	; (8002540 <main+0x7c>)
 800252a:	4806      	ldr	r0, [pc, #24]	; (8002544 <main+0x80>)
 800252c:	f7fe fb2a 	bl	8000b84 <Controller>
		  WriteOutputs(&Outputs);
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <main+0x7c>)
 8002532:	f000 fbf7 	bl	8002d24 <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002536:	e7ec      	b.n	8002512 <main+0x4e>
 8002538:	20000210 	.word	0x20000210
 800253c:	200001c8 	.word	0x200001c8
 8002540:	2000256c 	.word	0x2000256c
 8002544:	200024e4 	.word	0x200024e4
 8002548:	200024e0 	.word	0x200024e0

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b094      	sub	sp, #80	; 0x50
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002556:	2228      	movs	r2, #40	; 0x28
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fe0a 	bl	8007174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800257c:	2301      	movs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800258a:	2301      	movs	r3, #1
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258e:	2302      	movs	r3, #2
 8002590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002598:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800259c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 ff6e 	bl	8005484 <HAL_RCC_OscConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80025ae:	f000 fba1 	bl	8002cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025b2:	230f      	movs	r3, #15
 80025b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2102      	movs	r1, #2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f9da 	bl	8005988 <HAL_RCC_ClockConfig>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80025da:	f000 fb8b 	bl	8002cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025de:	2302      	movs	r3, #2
 80025e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80025e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fb5a 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80025f6:	f000 fb7d 	bl	8002cf4 <Error_Handler>
  }
}
 80025fa:	bf00      	nop
 80025fc:	3750      	adds	r7, #80	; 0x50
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002616:	4a4b      	ldr	r2, [pc, #300]	; (8002744 <MX_ADC1_Init+0x140>)
 8002618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <MX_ADC1_Init+0x13c>)
 800261c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002624:	2201      	movs	r2, #1
 8002626:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <MX_ADC1_Init+0x13c>)
 800262a:	2200      	movs	r2, #0
 800262c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800262e:	4b44      	ldr	r3, [pc, #272]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002630:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002636:	4b42      	ldr	r3, [pc, #264]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002638:	2200      	movs	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800263c:	4b40      	ldr	r3, [pc, #256]	; (8002740 <MX_ADC1_Init+0x13c>)
 800263e:	2208      	movs	r2, #8
 8002640:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002642:	483f      	ldr	r0, [pc, #252]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002644:	f000 ff58 	bl	80034f8 <HAL_ADC_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800264e:	f000 fb51 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002656:	2301      	movs	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800265a:	2303      	movs	r3, #3
 800265c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4837      	ldr	r0, [pc, #220]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002664:	f001 f910 	bl	8003888 <HAL_ADC_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800266e:	f000 fb41 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002672:	2301      	movs	r3, #1
 8002674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002676:	2302      	movs	r3, #2
 8002678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4830      	ldr	r0, [pc, #192]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002680:	f001 f902 	bl	8003888 <HAL_ADC_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800268a:	f000 fb33 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800268e:	2302      	movs	r3, #2
 8002690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002692:	2303      	movs	r3, #3
 8002694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4829      	ldr	r0, [pc, #164]	; (8002740 <MX_ADC1_Init+0x13c>)
 800269c:	f001 f8f4 	bl	8003888 <HAL_ADC_ConfigChannel>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80026a6:	f000 fb25 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026aa:	2303      	movs	r3, #3
 80026ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026ae:	2304      	movs	r3, #4
 80026b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4619      	mov	r1, r3
 80026b6:	4822      	ldr	r0, [pc, #136]	; (8002740 <MX_ADC1_Init+0x13c>)
 80026b8:	f001 f8e6 	bl	8003888 <HAL_ADC_ConfigChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80026c2:	f000 fb17 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80026c6:	2304      	movs	r3, #4
 80026c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80026ca:	2305      	movs	r3, #5
 80026cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	481b      	ldr	r0, [pc, #108]	; (8002740 <MX_ADC1_Init+0x13c>)
 80026d4:	f001 f8d8 	bl	8003888 <HAL_ADC_ConfigChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80026de:	f000 fb09 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80026e2:	2305      	movs	r3, #5
 80026e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80026e6:	2306      	movs	r3, #6
 80026e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4814      	ldr	r0, [pc, #80]	; (8002740 <MX_ADC1_Init+0x13c>)
 80026f0:	f001 f8ca 	bl	8003888 <HAL_ADC_ConfigChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80026fa:	f000 fafb 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80026fe:	2306      	movs	r3, #6
 8002700:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002702:	2307      	movs	r3, #7
 8002704:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	4619      	mov	r1, r3
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_ADC1_Init+0x13c>)
 800270c:	f001 f8bc 	bl	8003888 <HAL_ADC_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002716:	f000 faed 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800271a:	2307      	movs	r3, #7
 800271c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800271e:	2308      	movs	r3, #8
 8002720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <MX_ADC1_Init+0x13c>)
 8002728:	f001 f8ae 	bl	8003888 <HAL_ADC_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002732:	f000 fadf 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200000e4 	.word	0x200000e4
 8002744:	40012400 	.word	0x40012400

08002748 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0a8      	sub	sp, #160	; 0xa0
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002750:	4a70      	ldr	r2, [pc, #448]	; (8002914 <MX_CAN_Init+0x1cc>)
 8002752:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002754:	4b6e      	ldr	r3, [pc, #440]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002756:	2204      	movs	r2, #4
 8002758:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <MX_CAN_Init+0x1c8>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002760:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002766:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002768:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800276c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800276e:	4b68      	ldr	r3, [pc, #416]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002770:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002774:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002776:	4b66      	ldr	r3, [pc, #408]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002778:	2200      	movs	r2, #0
 800277a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800277c:	4b64      	ldr	r3, [pc, #400]	; (8002910 <MX_CAN_Init+0x1c8>)
 800277e:	2201      	movs	r2, #1
 8002780:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002782:	4b63      	ldr	r3, [pc, #396]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002784:	2200      	movs	r2, #0
 8002786:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002788:	4b61      	ldr	r3, [pc, #388]	; (8002910 <MX_CAN_Init+0x1c8>)
 800278a:	2201      	movs	r2, #1
 800278c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800278e:	4b60      	ldr	r3, [pc, #384]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002794:	4b5e      	ldr	r3, [pc, #376]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002796:	2200      	movs	r2, #0
 8002798:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800279a:	485d      	ldr	r0, [pc, #372]	; (8002910 <MX_CAN_Init+0x1c8>)
 800279c:	f001 fb1c 	bl	8003dd8 <HAL_CAN_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80027a6:	f000 faa5 	bl	8002cf4 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_RX_ID << 5 ;
 80027aa:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80027ae:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 80027b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80027b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 80027da:	2301      	movs	r3, #1
 80027dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 80027e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027ea:	4619      	mov	r1, r3
 80027ec:	4848      	ldr	r0, [pc, #288]	; (8002910 <MX_CAN_Init+0x1c8>)
 80027ee:	f001 fbee 	bl	8003fce <HAL_CAN_ConfigFilter>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_CAN_Init+0xb4>
 	  Error_Handler();
 80027f8:	f000 fa7c 	bl	8002cf4 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_RX_ID << 5 ;
 80027fc:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002800:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8002806:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800280a:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002810:	2301      	movs	r3, #1
 8002812:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8002814:	2301      	movs	r3, #1
 8002816:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 800281c:	2300      	movs	r3, #0
 800281e:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 8002820:	2301      	movs	r3, #1
 8002822:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8002824:	2301      	movs	r3, #1
 8002826:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8002828:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800282c:	4619      	mov	r1, r3
 800282e:	4838      	ldr	r0, [pc, #224]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002830:	f001 fbcd 	bl	8003fce <HAL_CAN_ConfigFilter>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_CAN_Init+0xf6>
 	  Error_Handler();
 800283a:	f000 fa5b 	bl	8002cf4 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 800283e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8002848:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002852:	2300      	movs	r3, #0
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 8002856:	2302      	movs	r3, #2
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 800285e:	2300      	movs	r3, #0
 8002860:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002862:	2301      	movs	r3, #1
 8002864:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 8002866:	2301      	movs	r3, #1
 8002868:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 800286a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800286e:	4619      	mov	r1, r3
 8002870:	4827      	ldr	r0, [pc, #156]	; (8002910 <MX_CAN_Init+0x1c8>)
 8002872:	f001 fbac 	bl	8003fce <HAL_CAN_ConfigFilter>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_CAN_Init+0x138>
 	  Error_Handler();
 800287c:	f000 fa3a 	bl	8002cf4 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 8002880:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002884:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 800288a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800288e:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002894:	2301      	movs	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8002898:	2303      	movs	r3, #3
 800289a:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 80028ac:	463b      	mov	r3, r7
 80028ae:	4619      	mov	r1, r3
 80028b0:	4817      	ldr	r0, [pc, #92]	; (8002910 <MX_CAN_Init+0x1c8>)
 80028b2:	f001 fb8c 	bl	8003fce <HAL_CAN_ConfigFilter>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_CAN_Init+0x178>
 	  Error_Handler();
 80028bc:	f000 fa1a 	bl	8002cf4 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80028c0:	2102      	movs	r1, #2
 80028c2:	4813      	ldr	r0, [pc, #76]	; (8002910 <MX_CAN_Init+0x1c8>)
 80028c4:	f001 fef8 	bl	80046b8 <HAL_CAN_ActivateNotification>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_CAN_Init+0x18a>
	   Error_Handler();
 80028ce:	f000 fa11 	bl	8002cf4 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80028d2:	2110      	movs	r1, #16
 80028d4:	480e      	ldr	r0, [pc, #56]	; (8002910 <MX_CAN_Init+0x1c8>)
 80028d6:	f001 feef 	bl	80046b8 <HAL_CAN_ActivateNotification>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_CAN_Init+0x19c>
	   Error_Handler();
 80028e0:	f000 fa08 	bl	8002cf4 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 80028e4:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 80028e8:	4809      	ldr	r0, [pc, #36]	; (8002910 <MX_CAN_Init+0x1c8>)
 80028ea:	f001 fee5 	bl	80046b8 <HAL_CAN_ActivateNotification>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 80028f4:	f000 f9fe 	bl	8002cf4 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_CAN_Init+0x1c8>)
 80028fa:	f001 fc31 	bl	8004160 <HAL_CAN_Start>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8002904:	f000 f9f6 	bl	8002cf4 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	37a0      	adds	r7, #160	; 0xa0
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000158 	.word	0x20000158
 8002914:	40006400 	.word	0x40006400

08002918 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b096      	sub	sp, #88	; 0x58
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]
 8002946:	615a      	str	r2, [r3, #20]
 8002948:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	2220      	movs	r2, #32
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f004 fc0f 	bl	8007174 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002958:	4a3e      	ldr	r2, [pc, #248]	; (8002a54 <MX_TIM1_Init+0x13c>)
 800295a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800295c:	4b3c      	ldr	r3, [pc, #240]	; (8002a50 <MX_TIM1_Init+0x138>)
 800295e:	2247      	movs	r2, #71	; 0x47
 8002960:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <MX_TIM1_Init+0x138>)
 800296a:	f240 52db 	movw	r2, #1499	; 0x5db
 800296e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002970:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002976:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002978:	2200      	movs	r2, #0
 800297a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <MX_TIM1_Init+0x138>)
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002982:	4833      	ldr	r0, [pc, #204]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002984:	f003 fafa 	bl	8005f7c <HAL_TIM_Base_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800298e:	f000 f9b1 	bl	8002cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002998:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800299c:	4619      	mov	r1, r3
 800299e:	482c      	ldr	r0, [pc, #176]	; (8002a50 <MX_TIM1_Init+0x138>)
 80029a0:	f003 fdfa 	bl	8006598 <HAL_TIM_ConfigClockSource>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80029aa:	f000 f9a3 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029ae:	4828      	ldr	r0, [pc, #160]	; (8002a50 <MX_TIM1_Init+0x138>)
 80029b0:	f003 fbd0 	bl	8006154 <HAL_TIM_PWM_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80029ba:	f000 f99b 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029ca:	4619      	mov	r1, r3
 80029cc:	4820      	ldr	r0, [pc, #128]	; (8002a50 <MX_TIM1_Init+0x138>)
 80029ce:	f004 f9ed 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80029d8:	f000 f98c 	bl	8002cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029dc:	2360      	movs	r3, #96	; 0x60
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029e8:	2300      	movs	r3, #0
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80029ec:	2304      	movs	r3, #4
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fc:	2204      	movs	r2, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4813      	ldr	r0, [pc, #76]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002a02:	f003 fd07 	bl	8006414 <HAL_TIM_PWM_ConfigChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002a0c:	f000 f972 	bl	8002cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4807      	ldr	r0, [pc, #28]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002a34:	f004 fa18 	bl	8006e68 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002a3e:	f000 f959 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a42:	4803      	ldr	r0, [pc, #12]	; (8002a50 <MX_TIM1_Init+0x138>)
 8002a44:	f000 fbaa 	bl	800319c <HAL_TIM_MspPostInit>

}
 8002a48:	bf00      	nop
 8002a4a:	3758      	adds	r7, #88	; 0x58
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000180 	.word	0x20000180
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <MX_TIM2_Init+0x94>)
 8002a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <MX_TIM2_Init+0x94>)
 8002a7e:	2247      	movs	r2, #71	; 0x47
 8002a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <MX_TIM2_Init+0x94>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <MX_TIM2_Init+0x94>)
 8002a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a90:	4b16      	ldr	r3, [pc, #88]	; (8002aec <MX_TIM2_Init+0x94>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <MX_TIM2_Init+0x94>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a9c:	4813      	ldr	r0, [pc, #76]	; (8002aec <MX_TIM2_Init+0x94>)
 8002a9e:	f003 fa6d 	bl	8005f7c <HAL_TIM_Base_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002aa8:	f000 f924 	bl	8002cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <MX_TIM2_Init+0x94>)
 8002aba:	f003 fd6d 	bl	8006598 <HAL_TIM_ConfigClockSource>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ac4:	f000 f916 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	; (8002aec <MX_TIM2_Init+0x94>)
 8002ad6:	f004 f969 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ae0:	f000 f908 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200001c8 	.word	0x200001c8

08002af0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002af6:	f107 0308 	add.w	r3, r7, #8
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b04:	463b      	mov	r3, r7
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <MX_TIM3_Init+0x98>)
 8002b10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b14:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002b18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b22:	2263      	movs	r2, #99	; 0x63
 8002b24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b32:	4814      	ldr	r0, [pc, #80]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b34:	f003 fa22 	bl	8005f7c <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b3e:	f000 f8d9 	bl	8002cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b48:	f107 0308 	add.w	r3, r7, #8
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480d      	ldr	r0, [pc, #52]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b50:	f003 fd22 	bl	8006598 <HAL_TIM_ConfigClockSource>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002b5a:	f000 f8cb 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b66:	463b      	mov	r3, r7
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <MX_TIM3_Init+0x94>)
 8002b6c:	f004 f91e 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002b76:	f000 f8bd 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000210 	.word	0x20000210
 8002b88:	40000400 	.word	0x40000400

08002b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <MX_USART1_UART_Init+0x50>)
 8002b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002bb2:	220c      	movs	r2, #12
 8002bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bc2:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <MX_USART1_UART_Init+0x4c>)
 8002bc4:	f004 f9d7 	bl	8006f76 <HAL_UART_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bce:	f000 f891 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000258 	.word	0x20000258
 8002bdc:	40013800 	.word	0x40013800

08002be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_DMA_Init+0x38>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <MX_DMA_Init+0x38>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6153      	str	r3, [r2, #20]
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_DMA_Init+0x38>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	200b      	movs	r0, #11
 8002c04:	f002 f865 	bl	8004cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c08:	200b      	movs	r0, #11
 8002c0a:	f002 f87e 	bl	8004d0a <HAL_NVIC_EnableIRQ>

}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000

08002c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c22:	f107 0310 	add.w	r3, r7, #16
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c36:	f043 0320 	orr.w	r3, r3, #32
 8002c3a:	6193      	str	r3, [r2, #24]
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c60:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6193      	str	r3, [r2, #24]
 8002c6c:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <MX_GPIO_Init+0xa8>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8002c7e:	4812      	ldr	r0, [pc, #72]	; (8002cc8 <MX_GPIO_Init+0xac>)
 8002c80:	f002 fbe7 	bl	8005452 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8002c84:	237b      	movs	r3, #123	; 0x7b
 8002c86:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	f107 0310 	add.w	r3, r7, #16
 8002c94:	4619      	mov	r1, r3
 8002c96:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <MX_GPIO_Init+0xac>)
 8002c98:	f002 fa40 	bl	800511c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 8002c9c:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8002ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cae:	f107 0310 	add.w	r3, r7, #16
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <MX_GPIO_Init+0xac>)
 8002cb6:	f002 fa31 	bl	800511c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cba:	bf00      	nop
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010c00 	.word	0x40010c00

08002ccc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a05      	ldr	r2, [pc, #20]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d102      	bne.n	8002ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
	}
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	20000210 	.word	0x20000210
 8002cf0:	200024e0 	.word	0x200024e0

08002cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf8:	b672      	cpsid	i
}
 8002cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002cfc:	20c8      	movs	r0, #200	; 0xc8
 8002cfe:	f000 fbd7 	bl	80034b0 <HAL_Delay>
	  NVIC_SystemReset();
 8002d02:	f7ff fbc9 	bl	8002498 <__NVIC_SystemReset>
	...

08002d08 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0

	// TODO: start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <InitOutputs+0x18>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002d14:	2104      	movs	r1, #4
 8002d16:	4802      	ldr	r0, [pc, #8]	; (8002d20 <InitOutputs+0x18>)
 8002d18:	f003 ffaa 	bl	8006c70 <HAL_TIMEx_PWMN_Start>
}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000180 	.word	0x20000180

08002d24 <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

	// CLUTCH

	// Clamping to avoid out of bounds values
	xClutchTargetOut = CLAMP(output->xClutchTarget, xCLUTCH_ABSOLUTE_MAX, xCLUTCH_ABSOLUTE_MIN);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	89db      	ldrh	r3, [r3, #14]
 8002d30:	f640 0233 	movw	r2, #2099	; 0x833
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d808      	bhi.n	8002d4a <WriteOutputs+0x26>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	89db      	ldrh	r3, [r3, #14]
 8002d3c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002d40:	bf38      	it	cc
 8002d42:	f44f 7361 	movcc.w	r3, #900	; 0x384
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	e001      	b.n	8002d4e <WriteOutputs+0x2a>
 8002d4a:	f640 0334 	movw	r3, #2100	; 0x834
 8002d4e:	4a39      	ldr	r2, [pc, #228]	; (8002e34 <WriteOutputs+0x110>)
 8002d50:	8013      	strh	r3, [r2, #0]
	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to

	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	xClutchTargetOut *= 2;
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <WriteOutputs+0x110>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <WriteOutputs+0x110>)
 8002d5c:	801a      	strh	r2, [r3, #0]

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
//	__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, xClutchTargetOut -1 );
 8002d5e:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <WriteOutputs+0x110>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <WriteOutputs+0x114>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <WriteOutputs+0x110>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <WriteOutputs+0x114>)
 8002d74:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, xClutchTargetOut/2);
 8002d76:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <WriteOutputs+0x110>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <WriteOutputs+0x114>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting Ports
	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, output->BUpShiftPortState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7cdb      	ldrb	r3, [r3, #19]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d8e:	482b      	ldr	r0, [pc, #172]	; (8002e3c <WriteOutputs+0x118>)
 8002d90:	f002 fb5f 	bl	8005452 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, output->BDnShiftPortState);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7d1b      	ldrb	r3, [r3, #20]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d9e:	4827      	ldr	r0, [pc, #156]	; (8002e3c <WriteOutputs+0x118>)
 8002da0:	f002 fb57 	bl	8005452 <HAL_GPIO_WritePin>


	// Toggle Switches
	// output->BSWLEDA

	uint8_t BLaunchButtonCANSW = output->BLaunchControl;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002daa:	73fb      	strb	r3, [r7, #15]
	uint8_t BSparkCutCANSW = output->BSparkCut;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002db2:	73bb      	strb	r3, [r7, #14]


	CANTxBuffer[6] = 0;
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <WriteOutputs+0x11c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (BLaunchButtonCANSW				& 0x01) << 0;
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <WriteOutputs+0x11c>)
 8002dbc:	799b      	ldrb	r3, [r3, #6]
 8002dbe:	b25a      	sxtb	r2, r3
 8002dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <WriteOutputs+0x11c>)
 8002dd2:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (BSparkCutCANSW 					& 0x01) << 1;
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <WriteOutputs+0x11c>)
 8002dd6:	799b      	ldrb	r3, [r3, #6]
 8002dd8:	b25a      	sxtb	r2, r3
 8002dda:	7bbb      	ldrb	r3, [r7, #14]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	4313      	orrs	r3, r2
 8002de8:	b25b      	sxtb	r3, r3
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <WriteOutputs+0x11c>)
 8002dee:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0							  	& 0x01) << 2;
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <WriteOutputs+0x11c>)
 8002df2:	799a      	ldrb	r2, [r3, #6]
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <WriteOutputs+0x11c>)
 8002df6:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 3;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <WriteOutputs+0x11c>)
 8002dfa:	799a      	ldrb	r2, [r3, #6]
 8002dfc:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <WriteOutputs+0x11c>)
 8002dfe:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0							    & 0x01) << 4;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <WriteOutputs+0x11c>)
 8002e02:	799a      	ldrb	r2, [r3, #6]
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <WriteOutputs+0x11c>)
 8002e06:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 5;
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <WriteOutputs+0x11c>)
 8002e0a:	799a      	ldrb	r2, [r3, #6]
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <WriteOutputs+0x11c>)
 8002e0e:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 6;
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <WriteOutputs+0x11c>)
 8002e12:	799a      	ldrb	r2, [r3, #6]
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <WriteOutputs+0x11c>)
 8002e16:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 7;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <WriteOutputs+0x11c>)
 8002e1a:	799a      	ldrb	r2, [r3, #6]
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <WriteOutputs+0x11c>)
 8002e1e:	719a      	strb	r2, [r3, #6]


	CAN_TX(ECU_SWITCH_TX_ID, 8 , CANTxBuffer);
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <WriteOutputs+0x11c>)
 8002e22:	2108      	movs	r1, #8
 8002e24:	f240 6066 	movw	r0, #1638	; 0x666
 8002e28:	f000 f80c 	bl	8002e44 <CAN_TX>
	// CAN
	// add the info of the shutDown (DriverKill) in the CAN for others to see
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	200025a8 	.word	0x200025a8
 8002e38:	20000180 	.word	0x20000180
 8002e3c:	40010c00 	.word	0x40010c00
 8002e40:	2000259c 	.word	0x2000259c

08002e44 <CAN_TX>:

void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	; 0x30
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef CanTxHeader;
	uint32_t nCanTxMailbox;

	CanTxHeader.DLC = dlc;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
	CanTxHeader.StdId = ID;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	617b      	str	r3, [r7, #20]
	CanTxHeader.IDE = CAN_ID_STD;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
	CanTxHeader.RTR = CAN_RTR_DATA;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]

	uint32_t wait = __HAL_TIM_GET_COUNTER(&htim2) + CAN_TX_TIMEOUT;
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <CAN_TX+0xc4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	33c8      	adds	r3, #200	; 0xc8
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) && (__HAL_TIM_GET_COUNTER(&htim2) < wait));
 8002e6c:	bf00      	nop
 8002e6e:	4827      	ldr	r0, [pc, #156]	; (8002f0c <CAN_TX+0xc8>)
 8002e70:	f001 facd 	bl	800440e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <CAN_TX+0x42>
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <CAN_TX+0xc4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d8f3      	bhi.n	8002e6e <CAN_TX+0x2a>

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {	// all mailboxes are still filled
 8002e86:	4821      	ldr	r0, [pc, #132]	; (8002f0c <CAN_TX+0xc8>)
 8002e88:	f001 fac1 	bl	800440e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <CAN_TX+0x5a>
		HAL_CAN_AbortTxRequest(&hcan, nCanOldestMailbox);
 8002e92:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <CAN_TX+0xcc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4619      	mov	r1, r3
 8002e98:	481c      	ldr	r0, [pc, #112]	; (8002f0c <CAN_TX+0xc8>)
 8002e9a:	f001 fa74 	bl	8004386 <HAL_CAN_AbortTxRequest>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, data, &nCanTxMailbox) != HAL_OK) {
 8002e9e:	f107 0310 	add.w	r3, r7, #16
 8002ea2:	f107 0114 	add.w	r1, r7, #20
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4818      	ldr	r0, [pc, #96]	; (8002f0c <CAN_TX+0xc8>)
 8002eaa:	f001 f99d 	bl	80041e8 <HAL_CAN_AddTxMessage>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <CAN_TX+0x82>
		print("Failed to Add Message can 1\n");
 8002eb4:	4817      	ldr	r0, [pc, #92]	; (8002f14 <CAN_TX+0xd0>)
 8002eb6:	f7fe fb33 	bl	8001520 <print>
		nCanTxErrorCount++;
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <CAN_TX+0xd4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <CAN_TX+0xd4>)
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e01c      	b.n	8002f00 <CAN_TX+0xbc>
		return;
	}

	// Mailbox aging adjustment
	if(nCanTxMailbox != nCanYoungestMailbox) {
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <CAN_TX+0xd8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d017      	beq.n	8002f00 <CAN_TX+0xbc>

		if(nCanTxMailbox != nCanSecondOldestMailbox) {
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <CAN_TX+0xdc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d00b      	beq.n	8002ef2 <CAN_TX+0xae>
			nCanOldestMailbox = nCanSecondOldestMailbox;
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <CAN_TX+0xdc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <CAN_TX+0xcc>)
 8002ee0:	6013      	str	r3, [r2, #0]
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <CAN_TX+0xd8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <CAN_TX+0xdc>)
 8002ee8:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4a0b      	ldr	r2, [pc, #44]	; (8002f1c <CAN_TX+0xd8>)
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	e006      	b.n	8002f00 <CAN_TX+0xbc>
		}
		else {
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <CAN_TX+0xd8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <CAN_TX+0xdc>)
 8002ef8:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <CAN_TX+0xd8>)
 8002efe:	6013      	str	r3, [r2, #0]
		}
	}

}
 8002f00:	3730      	adds	r7, #48	; 0x30
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200001c8 	.word	0x200001c8
 8002f0c:	20000158 	.word	0x20000158
 8002f10:	20000000 	.word	0x20000000
 8002f14:	08007b3c 	.word	0x08007b3c
 8002f18:	200025a4 	.word	0x200025a4
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	20000004 	.word	0x20000004

08002f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_MspInit+0x5c>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_MspInit+0x5c>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6193      	str	r3, [r2, #24]
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_MspInit+0x5c>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_MspInit+0x5c>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <HAL_MspInit+0x5c>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_MspInit+0x5c>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_MspInit+0x60>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_MspInit+0x60>)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010000 	.word	0x40010000

08002f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0310 	add.w	r3, r7, #16
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_ADC_MspInit+0xc0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d14a      	bne.n	800303e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fa8:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_ADC_MspInit+0xc4>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_ADC_MspInit+0xc4>)
 8002fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb2:	6193      	str	r3, [r2, #24]
 8002fb4:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_ADC_MspInit+0xc4>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_ADC_MspInit+0xc4>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a21      	ldr	r2, [pc, #132]	; (800304c <HAL_ADC_MspInit+0xc4>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_ADC_MspInit+0xc4>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002fd8:	23ff      	movs	r3, #255	; 0xff
 8002fda:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	481a      	ldr	r0, [pc, #104]	; (8003050 <HAL_ADC_MspInit+0xc8>)
 8002fe8:	f002 f898 	bl	800511c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8002fee:	4a1a      	ldr	r2, [pc, #104]	; (8003058 <HAL_ADC_MspInit+0xd0>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8003006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 800300e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003012:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8003016:	2220      	movs	r2, #32
 8003018:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 800301c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003020:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003022:	480c      	ldr	r0, [pc, #48]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8003024:	f001 fe8c 	bl	8004d40 <HAL_DMA_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800302e:	f7ff fe61 	bl	8002cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a07      	ldr	r2, [pc, #28]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 8003036:	621a      	str	r2, [r3, #32]
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <HAL_ADC_MspInit+0xcc>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800303e:	bf00      	nop
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40012400 	.word	0x40012400
 800304c:	40021000 	.word	0x40021000
 8003050:	40010800 	.word	0x40010800
 8003054:	20000114 	.word	0x20000114
 8003058:	40020008 	.word	0x40020008

0800305c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0310 	add.w	r3, r7, #16
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <HAL_CAN_MspInit+0x9c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d139      	bne.n	80030f0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800307c:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <HAL_CAN_MspInit+0xa0>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_CAN_MspInit+0xa0>)
 8003082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003086:	61d3      	str	r3, [r2, #28]
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <HAL_CAN_MspInit+0xa0>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_CAN_MspInit+0xa0>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_CAN_MspInit+0xa0>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	6193      	str	r3, [r2, #24]
 80030a0:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_CAN_MspInit+0xa0>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	4619      	mov	r1, r3
 80030c0:	480f      	ldr	r0, [pc, #60]	; (8003100 <HAL_CAN_MspInit+0xa4>)
 80030c2:	f002 f82b 	bl	800511c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	4619      	mov	r1, r3
 80030da:	4809      	ldr	r0, [pc, #36]	; (8003100 <HAL_CAN_MspInit+0xa4>)
 80030dc:	f002 f81e 	bl	800511c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	2014      	movs	r0, #20
 80030e6:	f001 fdf4 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80030ea:	2014      	movs	r0, #20
 80030ec:	f001 fe0d 	bl	8004d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80030f0:	bf00      	nop
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40006400 	.word	0x40006400
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010800 	.word	0x40010800

08003104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_TIM_Base_MspInit+0x8c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10c      	bne.n	8003130 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 800311c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003120:	6193      	str	r3, [r2, #24]
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800312e:	e02a      	b.n	8003186 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d10c      	bne.n	8003154 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
}
 8003152:	e018      	b.n	8003186 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <HAL_TIM_Base_MspInit+0x94>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d113      	bne.n	8003186 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	61d3      	str	r3, [r2, #28]
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_TIM_Base_MspInit+0x90>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	201d      	movs	r0, #29
 800317c:	f001 fda9 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003180:	201d      	movs	r0, #29
 8003182:	f001 fdc2 	bl	8004d0a <HAL_NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40012c00 	.word	0x40012c00
 8003194:	40021000 	.word	0x40021000
 8003198:	40000400 	.word	0x40000400

0800319c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_TIM_MspPostInit+0x5c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d118      	bne.n	80031ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_TIM_MspPostInit+0x60>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_TIM_MspPostInit+0x60>)
 80031c2:	f043 0308 	orr.w	r3, r3, #8
 80031c6:	6193      	str	r3, [r2, #24]
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_TIM_MspPostInit+0x60>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 80031d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2302      	movs	r3, #2
 80031e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	4619      	mov	r1, r3
 80031e8:	4805      	ldr	r0, [pc, #20]	; (8003200 <HAL_TIM_MspPostInit+0x64>)
 80031ea:	f001 ff97 	bl	800511c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80031ee:	bf00      	nop
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40010c00 	.word	0x40010c00

08003204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0310 	add.w	r3, r7, #16
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_UART_MspInit+0x8c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d131      	bne.n	8003288 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_UART_MspInit+0x90>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <HAL_UART_MspInit+0x90>)
 800322a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322e:	6193      	str	r3, [r2, #24]
 8003230:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_UART_MspInit+0x90>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_UART_MspInit+0x90>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4a14      	ldr	r2, [pc, #80]	; (8003294 <HAL_UART_MspInit+0x90>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6193      	str	r3, [r2, #24]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_UART_MspInit+0x90>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800325e:	2303      	movs	r3, #3
 8003260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	4619      	mov	r1, r3
 8003268:	480b      	ldr	r0, [pc, #44]	; (8003298 <HAL_UART_MspInit+0x94>)
 800326a:	f001 ff57 	bl	800511c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800326e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	4619      	mov	r1, r3
 8003282:	4805      	ldr	r0, [pc, #20]	; (8003298 <HAL_UART_MspInit+0x94>)
 8003284:	f001 ff4a 	bl	800511c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003288:	bf00      	nop
 800328a:	3720      	adds	r7, #32
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013800 	.word	0x40013800
 8003294:	40021000 	.word	0x40021000
 8003298:	40010800 	.word	0x40010800

0800329c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032a0:	e7fe      	b.n	80032a0 <NMI_Handler+0x4>

080032a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <HardFault_Handler+0x4>

080032a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <MemManage_Handler+0x4>

080032ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <BusFault_Handler+0x4>

080032b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <UsageFault_Handler+0x4>

080032ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032e2:	f000 f8c9 	bl	8003478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <DMA1_Channel1_IRQHandler+0x10>)
 80032f2:	f001 fddf 	bl	8004eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000114 	.word	0x20000114

08003300 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003306:	f001 f9fc 	bl	8004702 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000158 	.word	0x20000158

08003314 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <TIM3_IRQHandler+0x10>)
 800331a:	f002 ff73 	bl	8006204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000210 	.word	0x20000210

08003328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <_sbrk+0x5c>)
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <_sbrk+0x60>)
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <_sbrk+0x64>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <_sbrk+0x64>)
 8003346:	4a12      	ldr	r2, [pc, #72]	; (8003390 <_sbrk+0x68>)
 8003348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003358:	f003 ff14 	bl	8007184 <__errno>
 800335c:	4603      	mov	r3, r0
 800335e:	220c      	movs	r2, #12
 8003360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	e009      	b.n	800337c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <_sbrk+0x64>)
 8003378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20005000 	.word	0x20005000
 8003388:	00000400 	.word	0x00000400
 800338c:	200025ac 	.word	0x200025ac
 8003390:	20002700 	.word	0x20002700

08003394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033a0:	f7ff fff8 	bl	8003394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a4:	480b      	ldr	r0, [pc, #44]	; (80033d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033a6:	490c      	ldr	r1, [pc, #48]	; (80033d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033a8:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80033aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033ac:	e002      	b.n	80033b4 <LoopCopyDataInit>

080033ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b2:	3304      	adds	r3, #4

080033b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b8:	d3f9      	bcc.n	80033ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033bc:	4c09      	ldr	r4, [pc, #36]	; (80033e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c0:	e001      	b.n	80033c6 <LoopFillZerobss>

080033c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c4:	3204      	adds	r2, #4

080033c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c8:	d3fb      	bcc.n	80033c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ca:	f003 fee1 	bl	8007190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ce:	f7ff f879 	bl	80024c4 <main>
  bx lr
 80033d2:	4770      	bx	lr
  ldr r0, =_sdata
 80033d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80033dc:	08007cdc 	.word	0x08007cdc
  ldr r2, =_sbss
 80033e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80033e4:	200026fc 	.word	0x200026fc

080033e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033e8:	e7fe      	b.n	80033e8 <ADC1_2_IRQHandler>
	...

080033ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <HAL_Init+0x28>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a07      	ldr	r2, [pc, #28]	; (8003414 <HAL_Init+0x28>)
 80033f6:	f043 0310 	orr.w	r3, r3, #16
 80033fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033fc:	2003      	movs	r0, #3
 80033fe:	f001 fc5d 	bl	8004cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003402:	200f      	movs	r0, #15
 8003404:	f000 f808 	bl	8003418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003408:	f7ff fd8c 	bl	8002f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000

08003418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_InitTick+0x54>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_InitTick+0x58>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fc75 	bl	8004d26 <HAL_SYSTICK_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e00e      	b.n	8003464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b0f      	cmp	r3, #15
 800344a:	d80a      	bhi.n	8003462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800344c:	2200      	movs	r2, #0
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	f001 fc3d 	bl	8004cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003458:	4a06      	ldr	r2, [pc, #24]	; (8003474 <HAL_InitTick+0x5c>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000000c 	.word	0x2000000c
 8003470:	20000014 	.word	0x20000014
 8003474:	20000010 	.word	0x20000010

08003478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_IncTick+0x1c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_IncTick+0x20>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4413      	add	r3, r2
 8003488:	4a03      	ldr	r2, [pc, #12]	; (8003498 <HAL_IncTick+0x20>)
 800348a:	6013      	str	r3, [r2, #0]
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	20000014 	.word	0x20000014
 8003498:	200025b0 	.word	0x200025b0

0800349c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return uwTick;
 80034a0:	4b02      	ldr	r3, [pc, #8]	; (80034ac <HAL_GetTick+0x10>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	200025b0 	.word	0x200025b0

080034b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b8:	f7ff fff0 	bl	800349c <HAL_GetTick>
 80034bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d005      	beq.n	80034d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_Delay+0x44>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034d6:	bf00      	nop
 80034d8:	f7ff ffe0 	bl	800349c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d8f7      	bhi.n	80034d8 <HAL_Delay+0x28>
  {
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000014 	.word	0x20000014

080034f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0be      	b.n	8003698 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fd26 	bl	8002f88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 faf5 	bl	8003b2c <ADC_ConversionStop_Disable>
 8003542:	4603      	mov	r3, r0
 8003544:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 8099 	bne.w	8003686 <HAL_ADC_Init+0x18e>
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8095 	bne.w	8003686 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003564:	f023 0302 	bic.w	r3, r3, #2
 8003568:	f043 0202 	orr.w	r2, r3, #2
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003578:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7b1b      	ldrb	r3, [r3, #12]
 800357e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003580:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003590:	d003      	beq.n	800359a <HAL_ADC_Init+0xa2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d102      	bne.n	80035a0 <HAL_ADC_Init+0xa8>
 800359a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800359e:	e000      	b.n	80035a2 <HAL_ADC_Init+0xaa>
 80035a0:	2300      	movs	r3, #0
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7d1b      	ldrb	r3, [r3, #20]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d119      	bne.n	80035e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7b1b      	ldrb	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	3b01      	subs	r3, #1
 80035be:	035a      	lsls	r2, r3, #13
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e00b      	b.n	80035e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <HAL_ADC_Init+0x1a8>)
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	430b      	orrs	r3, r1
 800360a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003614:	d003      	beq.n	800361e <HAL_ADC_Init+0x126>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d104      	bne.n	8003628 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	3b01      	subs	r3, #1
 8003624:	051b      	lsls	r3, r3, #20
 8003626:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	430a      	orrs	r2, r1
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_ADC_Init+0x1ac>)
 8003644:	4013      	ands	r3, r2
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	429a      	cmp	r2, r3
 800364a:	d10b      	bne.n	8003664 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003662:	e018      	b.n	8003696 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	f023 0312 	bic.w	r3, r3, #18
 800366c:	f043 0210 	orr.w	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003684:	e007      	b.n	8003696 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	f043 0210 	orr.w	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	ffe1f7fd 	.word	0xffe1f7fd
 80036a4:	ff1f0efe 	.word	0xff1f0efe

080036a8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a64      	ldr	r2, [pc, #400]	; (8003850 <HAL_ADC_Start_DMA+0x1a8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_ADC_Start_DMA+0x24>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a63      	ldr	r2, [pc, #396]	; (8003854 <HAL_ADC_Start_DMA+0x1ac>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d106      	bne.n	80036da <HAL_ADC_Start_DMA+0x32>
 80036cc:	4b60      	ldr	r3, [pc, #384]	; (8003850 <HAL_ADC_Start_DMA+0x1a8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f040 80b3 	bne.w	8003840 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_Start_DMA+0x40>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0ae      	b.n	8003846 <HAL_ADC_Start_DMA+0x19e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f9c1 	bl	8003a78 <ADC_Enable>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 809a 	bne.w	8003836 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4e      	ldr	r2, [pc, #312]	; (8003854 <HAL_ADC_Start_DMA+0x1ac>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d105      	bne.n	800372c <HAL_ADC_Start_DMA+0x84>
 8003720:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <HAL_ADC_Start_DMA+0x1a8>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d115      	bne.n	8003758 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	2b00      	cmp	r3, #0
 8003744:	d026      	beq.n	8003794 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800374e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003756:	e01d      	b.n	8003794 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a39      	ldr	r2, [pc, #228]	; (8003850 <HAL_ADC_Start_DMA+0x1a8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_ADC_Start_DMA+0xd0>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_ADC_Start_DMA+0x1ac>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10d      	bne.n	8003794 <HAL_ADC_Start_DMA+0xec>
 8003778:	4b35      	ldr	r3, [pc, #212]	; (8003850 <HAL_ADC_Start_DMA+0x1a8>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800378c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f023 0206 	bic.w	r2, r3, #6
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ac:	e002      	b.n	80037b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <HAL_ADC_Start_DMA+0x1b0>)
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4a24      	ldr	r2, [pc, #144]	; (800385c <HAL_ADC_Start_DMA+0x1b4>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <HAL_ADC_Start_DMA+0x1b8>)
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0202 	mvn.w	r2, #2
 80037dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a18      	ldr	r0, [r3, #32]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	334c      	adds	r3, #76	; 0x4c
 80037f8:	4619      	mov	r1, r3
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f001 faf9 	bl	8004df4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800380c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003810:	d108      	bne.n	8003824 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003820:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003822:	e00f      	b.n	8003844 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003832:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003834:	e006      	b.n	8003844 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800383e:	e001      	b.n	8003844 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40012400 	.word	0x40012400
 8003854:	40012800 	.word	0x40012800
 8003858:	08003baf 	.word	0x08003baf
 800385c:	08003c2b 	.word	0x08003c2b
 8003860:	08003c47 	.word	0x08003c47

08003864 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x20>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0dc      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x1da>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d81c      	bhi.n	80038f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b05      	subs	r3, #5
 80038ca:	221f      	movs	r2, #31
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	4019      	ands	r1, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	3b05      	subs	r3, #5
 80038e4:	fa00 f203 	lsl.w	r2, r0, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	635a      	str	r2, [r3, #52]	; 0x34
 80038f0:	e03c      	b.n	800396c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d81c      	bhi.n	8003934 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	3b23      	subs	r3, #35	; 0x23
 800390c:	221f      	movs	r2, #31
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	4019      	ands	r1, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	3b23      	subs	r3, #35	; 0x23
 8003926:	fa00 f203 	lsl.w	r2, r0, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
 8003932:	e01b      	b.n	800396c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b41      	subs	r3, #65	; 0x41
 8003946:	221f      	movs	r2, #31
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	4019      	ands	r1, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	3b41      	subs	r3, #65	; 0x41
 8003960:	fa00 f203 	lsl.w	r2, r0, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b09      	cmp	r3, #9
 8003972:	d91c      	bls.n	80039ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	3b1e      	subs	r3, #30
 8003986:	2207      	movs	r2, #7
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	4019      	ands	r1, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	6898      	ldr	r0, [r3, #8]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4413      	add	r3, r2
 800399e:	3b1e      	subs	r3, #30
 80039a0:	fa00 f203 	lsl.w	r2, r0, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	e019      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6919      	ldr	r1, [r3, #16]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	2207      	movs	r2, #7
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	4019      	ands	r1, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6898      	ldr	r0, [r3, #8]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	fa00 f203 	lsl.w	r2, r0, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d003      	beq.n	80039f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039ee:	2b11      	cmp	r3, #17
 80039f0:	d132      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_ADC_ConfigChannel+0x1e4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d125      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d126      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d11a      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a28:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2c:	0c9a      	lsrs	r2, r3, #18
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a38:	e002      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f9      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x1b2>
 8003a46:	e007      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	40012400 	.word	0x40012400
 8003a70:	2000000c 	.word	0x2000000c
 8003a74:	431bde83 	.word	0x431bde83

08003a78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d040      	beq.n	8003b18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <ADC_Enable+0xac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1f      	ldr	r2, [pc, #124]	; (8003b28 <ADC_Enable+0xb0>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ab4:	e002      	b.n	8003abc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f9      	bne.n	8003ab6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ac2:	f7ff fceb 	bl	800349c <HAL_GetTick>
 8003ac6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ac8:	e01f      	b.n	8003b0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aca:	f7ff fce7 	bl	800349c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d918      	bls.n	8003b0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d011      	beq.n	8003b0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e007      	b.n	8003b1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d1d8      	bne.n	8003aca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	431bde83 	.word	0x431bde83

08003b2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d12e      	bne.n	8003ba4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b56:	f7ff fca1 	bl	800349c <HAL_GetTick>
 8003b5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b5c:	e01b      	b.n	8003b96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b5e:	f7ff fc9d 	bl	800349c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d914      	bls.n	8003b96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10d      	bne.n	8003b96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	f043 0210 	orr.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f043 0201 	orr.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e007      	b.n	8003ba6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d0dc      	beq.n	8003b5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d127      	bne.n	8003c18 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003bde:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003be2:	d115      	bne.n	8003c10 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d111      	bne.n	8003c10 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff fe27 	bl	8003864 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003c16:	e004      	b.n	8003c22 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7fe fc13 	bl	8002464 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f043 0204 	orr.w	r2, r3, #4
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7ff fe02 	bl	8003876 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_ADCEx_Calibration_Start+0x1e>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e097      	b.n	8003dca <HAL_ADCEx_Calibration_Start+0x14e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ff42 	bl	8003b2c <ADC_ConversionStop_Disable>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fee3 	bl	8003a78 <ADC_Enable>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 8081 	bne.w	8003dc0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cc6:	f023 0302 	bic.w	r3, r3, #2
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <HAL_ADCEx_Calibration_Start+0x158>)
 8003cd4:	681c      	ldr	r4, [r3, #0]
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f002 f89a 	bl	8005e10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003ce2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003ce4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003ce6:	e002      	b.n	8003cee <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f9      	bne.n	8003ce8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0208 	orr.w	r2, r2, #8
 8003d02:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003d04:	f7ff fbca 	bl	800349c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003d0a:	e01b      	b.n	8003d44 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d0c:	f7ff fbc6 	bl	800349c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b0a      	cmp	r3, #10
 8003d18:	d914      	bls.n	8003d44 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00d      	beq.n	8003d44 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f023 0312 	bic.w	r3, r3, #18
 8003d30:	f043 0210 	orr.w	r2, r3, #16
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e042      	b.n	8003dca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1dc      	bne.n	8003d0c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0204 	orr.w	r2, r2, #4
 8003d60:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003d62:	f7ff fb9b 	bl	800349c <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d68:	e01b      	b.n	8003da2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d6a:	f7ff fb97 	bl	800349c <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b0a      	cmp	r3, #10
 8003d76:	d914      	bls.n	8003da2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	f023 0312 	bic.w	r3, r3, #18
 8003d8e:	f043 0210 	orr.w	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e013      	b.n	8003dca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1dc      	bne.n	8003d6a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f023 0303 	bic.w	r3, r3, #3
 8003db8:	f043 0201 	orr.w	r2, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd90      	pop	{r4, r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000000c 	.word	0x2000000c

08003dd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0ed      	b.n	8003fc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff f930 	bl	800305c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e0c:	f7ff fb46 	bl	800349c <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e12:	e012      	b.n	8003e3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e14:	f7ff fb42 	bl	800349c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b0a      	cmp	r3, #10
 8003e20:	d90b      	bls.n	8003e3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2205      	movs	r2, #5
 8003e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0c5      	b.n	8003fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0e5      	beq.n	8003e14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0202 	bic.w	r2, r2, #2
 8003e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e58:	f7ff fb20 	bl	800349c <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e5e:	e012      	b.n	8003e86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e60:	f7ff fb1c 	bl	800349c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b0a      	cmp	r3, #10
 8003e6c:	d90b      	bls.n	8003e86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e09f      	b.n	8003fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	7e1b      	ldrb	r3, [r3, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d108      	bne.n	8003eae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e007      	b.n	8003ebe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7e5b      	ldrb	r3, [r3, #25]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d108      	bne.n	8003ed8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e007      	b.n	8003ee8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7e9b      	ldrb	r3, [r3, #26]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d108      	bne.n	8003f02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0220 	orr.w	r2, r2, #32
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e007      	b.n	8003f12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0220 	bic.w	r2, r2, #32
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7edb      	ldrb	r3, [r3, #27]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0210 	bic.w	r2, r2, #16
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e007      	b.n	8003f3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0210 	orr.w	r2, r2, #16
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7f1b      	ldrb	r3, [r3, #28]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d108      	bne.n	8003f56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0208 	orr.w	r2, r2, #8
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0208 	bic.w	r2, r2, #8
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7f5b      	ldrb	r3, [r3, #29]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d108      	bne.n	8003f80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0204 	orr.w	r2, r2, #4
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e007      	b.n	8003f90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	ea42 0103 	orr.w	r1, r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	1e5a      	subs	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b087      	sub	sp, #28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d003      	beq.n	8003ff4 <HAL_CAN_ConfigFilter+0x26>
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	f040 80aa 	bne.w	8004148 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2201      	movs	r2, #1
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	43db      	mvns	r3, r3
 800401e:	401a      	ands	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d123      	bne.n	8004076 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	43db      	mvns	r3, r3
 8004038:	401a      	ands	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004050:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3248      	adds	r2, #72	; 0x48
 8004056:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800406a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	3348      	adds	r3, #72	; 0x48
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d122      	bne.n	80040c4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	431a      	orrs	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800409e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3248      	adds	r2, #72	; 0x48
 80040a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	3348      	adds	r3, #72	; 0x48
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	440b      	add	r3, r1
 80040c2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	401a      	ands	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040de:	e007      	b.n	80040f0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800410a:	e007      	b.n	800411c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	431a      	orrs	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	431a      	orrs	r2, r3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800413a:	f023 0201 	bic.w	r2, r3, #1
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e006      	b.n	8004156 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d12e      	bne.n	80041d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800418c:	f7ff f986 	bl	800349c <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004192:	e012      	b.n	80041ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004194:	f7ff f982 	bl	800349c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b0a      	cmp	r3, #10
 80041a0:	d90b      	bls.n	80041ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2205      	movs	r2, #5
 80041b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e012      	b.n	80041e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e006      	b.n	80041e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004206:	7ffb      	ldrb	r3, [r7, #31]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d003      	beq.n	8004214 <HAL_CAN_AddTxMessage+0x2c>
 800420c:	7ffb      	ldrb	r3, [r7, #31]
 800420e:	2b02      	cmp	r3, #2
 8004210:	f040 80ad 	bne.w	800436e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8095 	beq.w	800435e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	0e1b      	lsrs	r3, r3, #24
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800423e:	2201      	movs	r2, #1
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	409a      	lsls	r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	6809      	ldr	r1, [r1, #0]
 800425e:	431a      	orrs	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	3318      	adds	r3, #24
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	440b      	add	r3, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e00f      	b.n	800428c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004276:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004280:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3318      	adds	r3, #24
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	440b      	add	r3, r1
 800428a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3318      	adds	r3, #24
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	440b      	add	r3, r1
 800429c:	3304      	adds	r3, #4
 800429e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	7d1b      	ldrb	r3, [r3, #20]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d111      	bne.n	80042cc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3318      	adds	r3, #24
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	4413      	add	r3, r2
 80042b4:	3304      	adds	r3, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	6811      	ldr	r1, [r2, #0]
 80042bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3318      	adds	r3, #24
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	440b      	add	r3, r1
 80042c8:	3304      	adds	r3, #4
 80042ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3307      	adds	r3, #7
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	061a      	lsls	r2, r3, #24
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3306      	adds	r3, #6
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3305      	adds	r3, #5
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	4313      	orrs	r3, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	3204      	adds	r2, #4
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	4610      	mov	r0, r2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	6811      	ldr	r1, [r2, #0]
 80042f4:	ea43 0200 	orr.w	r2, r3, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	440b      	add	r3, r1
 80042fe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004302:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3303      	adds	r3, #3
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	061a      	lsls	r2, r3, #24
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3302      	adds	r3, #2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3301      	adds	r3, #1
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	4313      	orrs	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	4610      	mov	r0, r2
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	6811      	ldr	r1, [r2, #0]
 800432a:	ea43 0200 	orr.w	r2, r3, r0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	440b      	add	r3, r1
 8004334:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004338:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3318      	adds	r3, #24
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	4413      	add	r3, r2
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	6811      	ldr	r1, [r2, #0]
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	3318      	adds	r3, #24
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	440b      	add	r3, r1
 8004358:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e00e      	b.n	800437c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e006      	b.n	800437c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
  }
}
 800437c:	4618      	mov	r0, r3
 800437e:	3724      	adds	r7, #36	; 0x24
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004396:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d002      	beq.n	80043a4 <HAL_CAN_AbortTxRequest+0x1e>
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d128      	bne.n	80043f6 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043bc:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d6:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043f0:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e006      	b.n	8004404 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004420:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004422:	7afb      	ldrb	r3, [r7, #11]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d002      	beq.n	800442e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004428:	7afb      	ldrb	r3, [r7, #11]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d11d      	bne.n	800446a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3301      	adds	r3, #1
 8004454:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d003      	beq.n	800449a <HAL_CAN_GetRxMessage+0x24>
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f040 8103 	bne.w	80046a0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10e      	bne.n	80044be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d116      	bne.n	80044dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0f7      	b.n	80046ae <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0e8      	b.n	80046ae <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	331b      	adds	r3, #27
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4413      	add	r3, r2
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0204 	and.w	r2, r3, #4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	331b      	adds	r3, #27
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0d5b      	lsrs	r3, r3, #21
 800450a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e00b      	b.n	800452c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	331b      	adds	r3, #27
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	4413      	add	r3, r2
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	08db      	lsrs	r3, r3, #3
 8004524:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	331b      	adds	r3, #27
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4413      	add	r3, r2
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0202 	and.w	r2, r3, #2
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	331b      	adds	r3, #27
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2208      	movs	r2, #8
 800455e:	611a      	str	r2, [r3, #16]
 8004560:	e00b      	b.n	800457a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	331b      	adds	r3, #27
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	4413      	add	r3, r2
 800456e:	3304      	adds	r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	331b      	adds	r3, #27
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	b2da      	uxtb	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	331b      	adds	r3, #27
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	4413      	add	r3, r2
 800459e:	3304      	adds	r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	0a1a      	lsrs	r2, r3, #8
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	3301      	adds	r3, #1
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0c1a      	lsrs	r2, r3, #16
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	3302      	adds	r3, #2
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0e1a      	lsrs	r2, r3, #24
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	3303      	adds	r3, #3
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	4413      	add	r3, r2
 8004618:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	3304      	adds	r3, #4
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4413      	add	r3, r2
 8004630:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	0a1a      	lsrs	r2, r3, #8
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	3305      	adds	r3, #5
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	4413      	add	r3, r2
 800464a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0c1a      	lsrs	r2, r3, #16
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	3306      	adds	r3, #6
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	4413      	add	r3, r2
 8004664:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	0e1a      	lsrs	r2, r3, #24
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	3307      	adds	r3, #7
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	e007      	b.n	800469c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0220 	orr.w	r2, r2, #32
 800469a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e006      	b.n	80046ae <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d002      	beq.n	80046d6 <HAL_CAN_ActivateNotification+0x1e>
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d109      	bne.n	80046ea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6959      	ldr	r1, [r3, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e006      	b.n	80046f8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b08a      	sub	sp, #40	; 0x28
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800470a:	2300      	movs	r3, #0
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d07c      	beq.n	8004842 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d023      	beq.n	800479a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2201      	movs	r2, #1
 8004758:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f983 	bl	8004a70 <HAL_CAN_TxMailbox0CompleteCallback>
 800476a:	e016      	b.n	800479a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	e00c      	b.n	800479a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	e002      	b.n	800479a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f986 	bl	8004aa6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d024      	beq.n	80047ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f962 	bl	8004a82 <HAL_CAN_TxMailbox1CompleteCallback>
 80047be:	e016      	b.n	80047ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	e00c      	b.n	80047ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	e002      	b.n	80047ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f965 	bl	8004ab8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d024      	beq.n	8004842 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004800:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f941 	bl	8004a94 <HAL_CAN_TxMailbox2CompleteCallback>
 8004812:	e016      	b.n	8004842 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	e00c      	b.n	8004842 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d004      	beq.n	800483c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e002      	b.n	8004842 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f944 	bl	8004aca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800485c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2210      	movs	r2, #16
 8004864:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d006      	beq.n	8004888 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2208      	movs	r2, #8
 8004880:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f92a 	bl	8004adc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7fd fdb4 	bl	800240e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00c      	beq.n	80048ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2210      	movs	r2, #16
 80048c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	f003 0320 	and.w	r3, r3, #32
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d006      	beq.n	80048ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2208      	movs	r2, #8
 80048e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f901 	bl	8004aee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fd fd8e 	bl	8002426 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2210      	movs	r2, #16
 8004924:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8ea 	bl	8004b00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d006      	beq.n	800494e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2208      	movs	r2, #8
 8004946:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8e2 	bl	8004b12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d07b      	beq.n	8004a50 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d072      	beq.n	8004a48 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f043 0302 	orr.w	r3, r3, #2
 8004998:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d043      	beq.n	8004a48 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03e      	beq.n	8004a48 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049d0:	2b60      	cmp	r3, #96	; 0x60
 80049d2:	d02b      	beq.n	8004a2c <HAL_CAN_IRQHandler+0x32a>
 80049d4:	2b60      	cmp	r3, #96	; 0x60
 80049d6:	d82e      	bhi.n	8004a36 <HAL_CAN_IRQHandler+0x334>
 80049d8:	2b50      	cmp	r3, #80	; 0x50
 80049da:	d022      	beq.n	8004a22 <HAL_CAN_IRQHandler+0x320>
 80049dc:	2b50      	cmp	r3, #80	; 0x50
 80049de:	d82a      	bhi.n	8004a36 <HAL_CAN_IRQHandler+0x334>
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d019      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x316>
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d826      	bhi.n	8004a36 <HAL_CAN_IRQHandler+0x334>
 80049e8:	2b30      	cmp	r3, #48	; 0x30
 80049ea:	d010      	beq.n	8004a0e <HAL_CAN_IRQHandler+0x30c>
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d822      	bhi.n	8004a36 <HAL_CAN_IRQHandler+0x334>
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d002      	beq.n	80049fa <HAL_CAN_IRQHandler+0x2f8>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d005      	beq.n	8004a04 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049f8:	e01d      	b.n	8004a36 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f043 0308 	orr.w	r3, r3, #8
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a02:	e019      	b.n	8004a38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f043 0310 	orr.w	r3, r3, #16
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a0c:	e014      	b.n	8004a38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	f043 0320 	orr.w	r3, r3, #32
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a16:	e00f      	b.n	8004a38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a20:	e00a      	b.n	8004a38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a2a:	e005      	b.n	8004a38 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a34:	e000      	b.n	8004a38 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a36:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a46:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fd fcec 	bl	8002440 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3728      	adds	r7, #40	; 0x28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <__NVIC_SetPriorityGrouping>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b40:	4013      	ands	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b56:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	60d3      	str	r3, [r2, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <__NVIC_GetPriorityGrouping>:
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b70:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <__NVIC_GetPriorityGrouping+0x18>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 0307 	and.w	r3, r3, #7
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_EnableIRQ>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db0b      	blt.n	8004bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	4906      	ldr	r1, [pc, #24]	; (8004bbc <__NVIC_EnableIRQ+0x34>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2001      	movs	r0, #1
 8004baa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	e000e100 	.word	0xe000e100

08004bc0 <__NVIC_SetPriority>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db0a      	blt.n	8004bea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	490c      	ldr	r1, [pc, #48]	; (8004c0c <__NVIC_SetPriority+0x4c>)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	0112      	lsls	r2, r2, #4
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	440b      	add	r3, r1
 8004be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004be8:	e00a      	b.n	8004c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4908      	ldr	r1, [pc, #32]	; (8004c10 <__NVIC_SetPriority+0x50>)
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	3b04      	subs	r3, #4
 8004bf8:	0112      	lsls	r2, r2, #4
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	761a      	strb	r2, [r3, #24]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000e100 	.word	0xe000e100
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <NVIC_EncodePriority>:
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f1c3 0307 	rsb	r3, r3, #7
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	bf28      	it	cs
 8004c32:	2304      	movcs	r3, #4
 8004c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d902      	bls.n	8004c44 <NVIC_EncodePriority+0x30>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3b03      	subs	r3, #3
 8004c42:	e000      	b.n	8004c46 <NVIC_EncodePriority+0x32>
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	401a      	ands	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	43d9      	mvns	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	4313      	orrs	r3, r2
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3724      	adds	r7, #36	; 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c88:	d301      	bcc.n	8004c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00f      	b.n	8004cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <SysTick_Config+0x40>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c96:	210f      	movs	r1, #15
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	f7ff ff90 	bl	8004bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca8:	2207      	movs	r2, #7
 8004caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000e010 	.word	0xe000e010

08004cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff2d 	bl	8004b24 <__NVIC_SetPriorityGrouping>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce4:	f7ff ff42 	bl	8004b6c <__NVIC_GetPriorityGrouping>
 8004ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	6978      	ldr	r0, [r7, #20]
 8004cf0:	f7ff ff90 	bl	8004c14 <NVIC_EncodePriority>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff5f 	bl	8004bc0 <__NVIC_SetPriority>
}
 8004d02:	bf00      	nop
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4603      	mov	r3, r0
 8004d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff ff35 	bl	8004b88 <__NVIC_EnableIRQ>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff ffa2 	bl	8004c78 <SysTick_Config>
 8004d34:	4603      	mov	r3, r0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e043      	b.n	8004dde <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <HAL_DMA_Init+0xa8>)
 8004d5e:	4413      	add	r3, r2
 8004d60:	4a22      	ldr	r2, [pc, #136]	; (8004dec <HAL_DMA_Init+0xac>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	009a      	lsls	r2, r3, #2
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <HAL_DMA_Init+0xb0>)
 8004d72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004db0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	bffdfff8 	.word	0xbffdfff8
 8004dec:	cccccccd 	.word	0xcccccccd
 8004df0:	40020000 	.word	0x40020000

08004df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_DMA_Start_IT+0x20>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e04b      	b.n	8004eac <HAL_DMA_Start_IT+0xb8>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d13a      	bne.n	8004e9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f937 	bl	80050c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 020e 	orr.w	r2, r2, #14
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e00f      	b.n	8004e8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 020a 	orr.w	r2, r2, #10
 8004e8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e005      	b.n	8004eaa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d04f      	beq.n	8004f7c <HAL_DMA_IRQHandler+0xc8>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04a      	beq.n	8004f7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0204 	bic.w	r2, r2, #4
 8004f02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a66      	ldr	r2, [pc, #408]	; (80050a4 <HAL_DMA_IRQHandler+0x1f0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d029      	beq.n	8004f62 <HAL_DMA_IRQHandler+0xae>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a65      	ldr	r2, [pc, #404]	; (80050a8 <HAL_DMA_IRQHandler+0x1f4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xaa>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a63      	ldr	r2, [pc, #396]	; (80050ac <HAL_DMA_IRQHandler+0x1f8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01a      	beq.n	8004f58 <HAL_DMA_IRQHandler+0xa4>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a62      	ldr	r2, [pc, #392]	; (80050b0 <HAL_DMA_IRQHandler+0x1fc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d012      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x9e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a60      	ldr	r2, [pc, #384]	; (80050b4 <HAL_DMA_IRQHandler+0x200>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00a      	beq.n	8004f4c <HAL_DMA_IRQHandler+0x98>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a5f      	ldr	r2, [pc, #380]	; (80050b8 <HAL_DMA_IRQHandler+0x204>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d102      	bne.n	8004f46 <HAL_DMA_IRQHandler+0x92>
 8004f40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f44:	e00e      	b.n	8004f64 <HAL_DMA_IRQHandler+0xb0>
 8004f46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f4a:	e00b      	b.n	8004f64 <HAL_DMA_IRQHandler+0xb0>
 8004f4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f50:	e008      	b.n	8004f64 <HAL_DMA_IRQHandler+0xb0>
 8004f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f56:	e005      	b.n	8004f64 <HAL_DMA_IRQHandler+0xb0>
 8004f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f5c:	e002      	b.n	8004f64 <HAL_DMA_IRQHandler+0xb0>
 8004f5e:	2340      	movs	r3, #64	; 0x40
 8004f60:	e000      	b.n	8004f64 <HAL_DMA_IRQHandler+0xb0>
 8004f62:	2304      	movs	r3, #4
 8004f64:	4a55      	ldr	r2, [pc, #340]	; (80050bc <HAL_DMA_IRQHandler+0x208>)
 8004f66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8094 	beq.w	800509a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004f7a:	e08e      	b.n	800509a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	2202      	movs	r2, #2
 8004f82:	409a      	lsls	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d056      	beq.n	800503a <HAL_DMA_IRQHandler+0x186>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d051      	beq.n	800503a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 020a 	bic.w	r2, r2, #10
 8004fb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a38      	ldr	r2, [pc, #224]	; (80050a4 <HAL_DMA_IRQHandler+0x1f0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d029      	beq.n	800501a <HAL_DMA_IRQHandler+0x166>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a37      	ldr	r2, [pc, #220]	; (80050a8 <HAL_DMA_IRQHandler+0x1f4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_DMA_IRQHandler+0x162>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a35      	ldr	r2, [pc, #212]	; (80050ac <HAL_DMA_IRQHandler+0x1f8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01a      	beq.n	8005010 <HAL_DMA_IRQHandler+0x15c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a34      	ldr	r2, [pc, #208]	; (80050b0 <HAL_DMA_IRQHandler+0x1fc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d012      	beq.n	800500a <HAL_DMA_IRQHandler+0x156>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a32      	ldr	r2, [pc, #200]	; (80050b4 <HAL_DMA_IRQHandler+0x200>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00a      	beq.n	8005004 <HAL_DMA_IRQHandler+0x150>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a31      	ldr	r2, [pc, #196]	; (80050b8 <HAL_DMA_IRQHandler+0x204>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d102      	bne.n	8004ffe <HAL_DMA_IRQHandler+0x14a>
 8004ff8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ffc:	e00e      	b.n	800501c <HAL_DMA_IRQHandler+0x168>
 8004ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005002:	e00b      	b.n	800501c <HAL_DMA_IRQHandler+0x168>
 8005004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005008:	e008      	b.n	800501c <HAL_DMA_IRQHandler+0x168>
 800500a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800500e:	e005      	b.n	800501c <HAL_DMA_IRQHandler+0x168>
 8005010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005014:	e002      	b.n	800501c <HAL_DMA_IRQHandler+0x168>
 8005016:	2320      	movs	r3, #32
 8005018:	e000      	b.n	800501c <HAL_DMA_IRQHandler+0x168>
 800501a:	2302      	movs	r3, #2
 800501c:	4a27      	ldr	r2, [pc, #156]	; (80050bc <HAL_DMA_IRQHandler+0x208>)
 800501e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	d034      	beq.n	800509a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005038:	e02f      	b.n	800509a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2208      	movs	r2, #8
 8005040:	409a      	lsls	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d028      	beq.n	800509c <HAL_DMA_IRQHandler+0x1e8>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d023      	beq.n	800509c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 020e 	bic.w	r2, r2, #14
 8005062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506c:	2101      	movs	r1, #1
 800506e:	fa01 f202 	lsl.w	r2, r1, r2
 8005072:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4798      	blx	r3
    }
  }
  return;
 800509a:	bf00      	nop
 800509c:	bf00      	nop
}
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40020008 	.word	0x40020008
 80050a8:	4002001c 	.word	0x4002001c
 80050ac:	40020030 	.word	0x40020030
 80050b0:	40020044 	.word	0x40020044
 80050b4:	40020058 	.word	0x40020058
 80050b8:	4002006c 	.word	0x4002006c
 80050bc:	40020000 	.word	0x40020000

080050c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	2101      	movs	r1, #1
 80050d8:	fa01 f202 	lsl.w	r2, r1, r2
 80050dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d108      	bne.n	8005100 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050fe:	e007      	b.n	8005110 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	60da      	str	r2, [r3, #12]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr
	...

0800511c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800511c:	b480      	push	{r7}
 800511e:	b08b      	sub	sp, #44	; 0x2c
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005126:	2300      	movs	r3, #0
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800512a:	2300      	movs	r3, #0
 800512c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800512e:	e169      	b.n	8005404 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005130:	2201      	movs	r2, #1
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	f040 8158 	bne.w	80053fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	4a9a      	ldr	r2, [pc, #616]	; (80053bc <HAL_GPIO_Init+0x2a0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d05e      	beq.n	8005216 <HAL_GPIO_Init+0xfa>
 8005158:	4a98      	ldr	r2, [pc, #608]	; (80053bc <HAL_GPIO_Init+0x2a0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d875      	bhi.n	800524a <HAL_GPIO_Init+0x12e>
 800515e:	4a98      	ldr	r2, [pc, #608]	; (80053c0 <HAL_GPIO_Init+0x2a4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d058      	beq.n	8005216 <HAL_GPIO_Init+0xfa>
 8005164:	4a96      	ldr	r2, [pc, #600]	; (80053c0 <HAL_GPIO_Init+0x2a4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d86f      	bhi.n	800524a <HAL_GPIO_Init+0x12e>
 800516a:	4a96      	ldr	r2, [pc, #600]	; (80053c4 <HAL_GPIO_Init+0x2a8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d052      	beq.n	8005216 <HAL_GPIO_Init+0xfa>
 8005170:	4a94      	ldr	r2, [pc, #592]	; (80053c4 <HAL_GPIO_Init+0x2a8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d869      	bhi.n	800524a <HAL_GPIO_Init+0x12e>
 8005176:	4a94      	ldr	r2, [pc, #592]	; (80053c8 <HAL_GPIO_Init+0x2ac>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d04c      	beq.n	8005216 <HAL_GPIO_Init+0xfa>
 800517c:	4a92      	ldr	r2, [pc, #584]	; (80053c8 <HAL_GPIO_Init+0x2ac>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d863      	bhi.n	800524a <HAL_GPIO_Init+0x12e>
 8005182:	4a92      	ldr	r2, [pc, #584]	; (80053cc <HAL_GPIO_Init+0x2b0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d046      	beq.n	8005216 <HAL_GPIO_Init+0xfa>
 8005188:	4a90      	ldr	r2, [pc, #576]	; (80053cc <HAL_GPIO_Init+0x2b0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d85d      	bhi.n	800524a <HAL_GPIO_Init+0x12e>
 800518e:	2b12      	cmp	r3, #18
 8005190:	d82a      	bhi.n	80051e8 <HAL_GPIO_Init+0xcc>
 8005192:	2b12      	cmp	r3, #18
 8005194:	d859      	bhi.n	800524a <HAL_GPIO_Init+0x12e>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_GPIO_Init+0x80>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	08005217 	.word	0x08005217
 80051a0:	080051f1 	.word	0x080051f1
 80051a4:	08005203 	.word	0x08005203
 80051a8:	08005245 	.word	0x08005245
 80051ac:	0800524b 	.word	0x0800524b
 80051b0:	0800524b 	.word	0x0800524b
 80051b4:	0800524b 	.word	0x0800524b
 80051b8:	0800524b 	.word	0x0800524b
 80051bc:	0800524b 	.word	0x0800524b
 80051c0:	0800524b 	.word	0x0800524b
 80051c4:	0800524b 	.word	0x0800524b
 80051c8:	0800524b 	.word	0x0800524b
 80051cc:	0800524b 	.word	0x0800524b
 80051d0:	0800524b 	.word	0x0800524b
 80051d4:	0800524b 	.word	0x0800524b
 80051d8:	0800524b 	.word	0x0800524b
 80051dc:	0800524b 	.word	0x0800524b
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	4a79      	ldr	r2, [pc, #484]	; (80053d0 <HAL_GPIO_Init+0x2b4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80051ee:	e02c      	b.n	800524a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	623b      	str	r3, [r7, #32]
          break;
 80051f6:	e029      	b.n	800524c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	3304      	adds	r3, #4
 80051fe:	623b      	str	r3, [r7, #32]
          break;
 8005200:	e024      	b.n	800524c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	3308      	adds	r3, #8
 8005208:	623b      	str	r3, [r7, #32]
          break;
 800520a:	e01f      	b.n	800524c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	330c      	adds	r3, #12
 8005212:	623b      	str	r3, [r7, #32]
          break;
 8005214:	e01a      	b.n	800524c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800521e:	2304      	movs	r3, #4
 8005220:	623b      	str	r3, [r7, #32]
          break;
 8005222:	e013      	b.n	800524c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d105      	bne.n	8005238 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800522c:	2308      	movs	r3, #8
 800522e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	611a      	str	r2, [r3, #16]
          break;
 8005236:	e009      	b.n	800524c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005238:	2308      	movs	r3, #8
 800523a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	615a      	str	r2, [r3, #20]
          break;
 8005242:	e003      	b.n	800524c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005244:	2300      	movs	r3, #0
 8005246:	623b      	str	r3, [r7, #32]
          break;
 8005248:	e000      	b.n	800524c <HAL_GPIO_Init+0x130>
          break;
 800524a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2bff      	cmp	r3, #255	; 0xff
 8005250:	d801      	bhi.n	8005256 <HAL_GPIO_Init+0x13a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	e001      	b.n	800525a <HAL_GPIO_Init+0x13e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2bff      	cmp	r3, #255	; 0xff
 8005260:	d802      	bhi.n	8005268 <HAL_GPIO_Init+0x14c>
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	e002      	b.n	800526e <HAL_GPIO_Init+0x152>
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	3b08      	subs	r3, #8
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	210f      	movs	r1, #15
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	431a      	orrs	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80b1 	beq.w	80053fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_GPIO_Init+0x2b8>)
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	4a4c      	ldr	r2, [pc, #304]	; (80053d4 <HAL_GPIO_Init+0x2b8>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6193      	str	r3, [r2, #24]
 80052a8:	4b4a      	ldr	r3, [pc, #296]	; (80053d4 <HAL_GPIO_Init+0x2b8>)
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80052b4:	4a48      	ldr	r2, [pc, #288]	; (80053d8 <HAL_GPIO_Init+0x2bc>)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	089b      	lsrs	r3, r3, #2
 80052ba:	3302      	adds	r3, #2
 80052bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	220f      	movs	r2, #15
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4013      	ands	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a40      	ldr	r2, [pc, #256]	; (80053dc <HAL_GPIO_Init+0x2c0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_GPIO_Init+0x1ec>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3f      	ldr	r2, [pc, #252]	; (80053e0 <HAL_GPIO_Init+0x2c4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00d      	beq.n	8005304 <HAL_GPIO_Init+0x1e8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3e      	ldr	r2, [pc, #248]	; (80053e4 <HAL_GPIO_Init+0x2c8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <HAL_GPIO_Init+0x1e4>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a3d      	ldr	r2, [pc, #244]	; (80053e8 <HAL_GPIO_Init+0x2cc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_GPIO_Init+0x1e0>
 80052f8:	2303      	movs	r3, #3
 80052fa:	e006      	b.n	800530a <HAL_GPIO_Init+0x1ee>
 80052fc:	2304      	movs	r3, #4
 80052fe:	e004      	b.n	800530a <HAL_GPIO_Init+0x1ee>
 8005300:	2302      	movs	r3, #2
 8005302:	e002      	b.n	800530a <HAL_GPIO_Init+0x1ee>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <HAL_GPIO_Init+0x1ee>
 8005308:	2300      	movs	r3, #0
 800530a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530c:	f002 0203 	and.w	r2, r2, #3
 8005310:	0092      	lsls	r2, r2, #2
 8005312:	4093      	lsls	r3, r2
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800531a:	492f      	ldr	r1, [pc, #188]	; (80053d8 <HAL_GPIO_Init+0x2bc>)
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	089b      	lsrs	r3, r3, #2
 8005320:	3302      	adds	r3, #2
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d006      	beq.n	8005342 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005334:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	492c      	ldr	r1, [pc, #176]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	608b      	str	r3, [r1, #8]
 8005340:	e006      	b.n	8005350 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005342:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	43db      	mvns	r3, r3
 800534a:	4928      	ldr	r1, [pc, #160]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 800534c:	4013      	ands	r3, r2
 800534e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d006      	beq.n	800536a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800535c:	4b23      	ldr	r3, [pc, #140]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	4922      	ldr	r1, [pc, #136]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	4313      	orrs	r3, r2
 8005366:	60cb      	str	r3, [r1, #12]
 8005368:	e006      	b.n	8005378 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	43db      	mvns	r3, r3
 8005372:	491e      	ldr	r1, [pc, #120]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 8005374:	4013      	ands	r3, r2
 8005376:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d006      	beq.n	8005392 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	4918      	ldr	r1, [pc, #96]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	4313      	orrs	r3, r2
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	e006      	b.n	80053a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005392:	4b16      	ldr	r3, [pc, #88]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	43db      	mvns	r3, r3
 800539a:	4914      	ldr	r1, [pc, #80]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 800539c:	4013      	ands	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d021      	beq.n	80053f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	490e      	ldr	r1, [pc, #56]	; (80053ec <HAL_GPIO_Init+0x2d0>)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
 80053b8:	e021      	b.n	80053fe <HAL_GPIO_Init+0x2e2>
 80053ba:	bf00      	nop
 80053bc:	10320000 	.word	0x10320000
 80053c0:	10310000 	.word	0x10310000
 80053c4:	10220000 	.word	0x10220000
 80053c8:	10210000 	.word	0x10210000
 80053cc:	10120000 	.word	0x10120000
 80053d0:	10110000 	.word	0x10110000
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010800 	.word	0x40010800
 80053e0:	40010c00 	.word	0x40010c00
 80053e4:	40011000 	.word	0x40011000
 80053e8:	40011400 	.word	0x40011400
 80053ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <HAL_GPIO_Init+0x304>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	4909      	ldr	r1, [pc, #36]	; (8005420 <HAL_GPIO_Init+0x304>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	3301      	adds	r3, #1
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	fa22 f303 	lsr.w	r3, r2, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	f47f ae8e 	bne.w	8005130 <HAL_GPIO_Init+0x14>
  }
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	372c      	adds	r7, #44	; 0x2c
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	40010400 	.word	0x40010400

08005424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	887b      	ldrh	r3, [r7, #2]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e001      	b.n	8005446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005446:	7bfb      	ldrb	r3, [r7, #15]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	807b      	strh	r3, [r7, #2]
 800545e:	4613      	mov	r3, r2
 8005460:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005462:	787b      	ldrb	r3, [r7, #1]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005468:	887a      	ldrh	r2, [r7, #2]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800546e:	e003      	b.n	8005478 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005470:	887b      	ldrh	r3, [r7, #2]
 8005472:	041a      	lsls	r2, r3, #16
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	611a      	str	r2, [r3, #16]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
	...

08005484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e272      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 8087 	beq.w	80055b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054a4:	4b92      	ldr	r3, [pc, #584]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 030c 	and.w	r3, r3, #12
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d00c      	beq.n	80054ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054b0:	4b8f      	ldr	r3, [pc, #572]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d112      	bne.n	80054e2 <HAL_RCC_OscConfig+0x5e>
 80054bc:	4b8c      	ldr	r3, [pc, #560]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c8:	d10b      	bne.n	80054e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ca:	4b89      	ldr	r3, [pc, #548]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d06c      	beq.n	80055b0 <HAL_RCC_OscConfig+0x12c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d168      	bne.n	80055b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e24c      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ea:	d106      	bne.n	80054fa <HAL_RCC_OscConfig+0x76>
 80054ec:	4b80      	ldr	r3, [pc, #512]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a7f      	ldr	r2, [pc, #508]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80054f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e02e      	b.n	8005558 <HAL_RCC_OscConfig+0xd4>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0x98>
 8005502:	4b7b      	ldr	r3, [pc, #492]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a7a      	ldr	r2, [pc, #488]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b78      	ldr	r3, [pc, #480]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a77      	ldr	r2, [pc, #476]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e01d      	b.n	8005558 <HAL_RCC_OscConfig+0xd4>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005524:	d10c      	bne.n	8005540 <HAL_RCC_OscConfig+0xbc>
 8005526:	4b72      	ldr	r3, [pc, #456]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a71      	ldr	r2, [pc, #452]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 800552c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	4b6f      	ldr	r3, [pc, #444]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a6e      	ldr	r2, [pc, #440]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e00b      	b.n	8005558 <HAL_RCC_OscConfig+0xd4>
 8005540:	4b6b      	ldr	r3, [pc, #428]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a6a      	ldr	r2, [pc, #424]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	4b68      	ldr	r3, [pc, #416]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a67      	ldr	r2, [pc, #412]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005556:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d013      	beq.n	8005588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7fd ff9c 	bl	800349c <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005568:	f7fd ff98 	bl	800349c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b64      	cmp	r3, #100	; 0x64
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e200      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557a:	4b5d      	ldr	r3, [pc, #372]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0xe4>
 8005586:	e014      	b.n	80055b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fd ff88 	bl	800349c <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005590:	f7fd ff84 	bl	800349c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e1ec      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a2:	4b53      	ldr	r3, [pc, #332]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x10c>
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d063      	beq.n	8005686 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055be:	4b4c      	ldr	r3, [pc, #304]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 030c 	and.w	r3, r3, #12
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055ca:	4b49      	ldr	r3, [pc, #292]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d11c      	bne.n	8005610 <HAL_RCC_OscConfig+0x18c>
 80055d6:	4b46      	ldr	r3, [pc, #280]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d116      	bne.n	8005610 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e2:	4b43      	ldr	r3, [pc, #268]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_RCC_OscConfig+0x176>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d001      	beq.n	80055fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e1c0      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fa:	4b3d      	ldr	r3, [pc, #244]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4939      	ldr	r1, [pc, #228]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 800560a:	4313      	orrs	r3, r2
 800560c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560e:	e03a      	b.n	8005686 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d020      	beq.n	800565a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005618:	4b36      	ldr	r3, [pc, #216]	; (80056f4 <HAL_RCC_OscConfig+0x270>)
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561e:	f7fd ff3d 	bl	800349c <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005626:	f7fd ff39 	bl	800349c <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e1a1      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005638:	4b2d      	ldr	r3, [pc, #180]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005644:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4927      	ldr	r1, [pc, #156]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 8005654:	4313      	orrs	r3, r2
 8005656:	600b      	str	r3, [r1, #0]
 8005658:	e015      	b.n	8005686 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_RCC_OscConfig+0x270>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005660:	f7fd ff1c 	bl	800349c <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005668:	f7fd ff18 	bl	800349c <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e180      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567a:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d03a      	beq.n	8005708 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d019      	beq.n	80056ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800569a:	4b17      	ldr	r3, [pc, #92]	; (80056f8 <HAL_RCC_OscConfig+0x274>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a0:	f7fd fefc 	bl	800349c <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a8:	f7fd fef8 	bl	800349c <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e160      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056c6:	2001      	movs	r0, #1
 80056c8:	f000 face 	bl	8005c68 <RCC_Delay>
 80056cc:	e01c      	b.n	8005708 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <HAL_RCC_OscConfig+0x274>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d4:	f7fd fee2 	bl	800349c <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056da:	e00f      	b.n	80056fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056dc:	f7fd fede 	bl	800349c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d908      	bls.n	80056fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e146      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000
 80056f4:	42420000 	.word	0x42420000
 80056f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fc:	4b92      	ldr	r3, [pc, #584]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e9      	bne.n	80056dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80a6 	beq.w	8005862 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571a:	4b8b      	ldr	r3, [pc, #556]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10d      	bne.n	8005742 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005726:	4b88      	ldr	r3, [pc, #544]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	4a87      	ldr	r2, [pc, #540]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 800572c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005730:	61d3      	str	r3, [r2, #28]
 8005732:	4b85      	ldr	r3, [pc, #532]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	4b82      	ldr	r3, [pc, #520]	; (800594c <HAL_RCC_OscConfig+0x4c8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d118      	bne.n	8005780 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574e:	4b7f      	ldr	r3, [pc, #508]	; (800594c <HAL_RCC_OscConfig+0x4c8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a7e      	ldr	r2, [pc, #504]	; (800594c <HAL_RCC_OscConfig+0x4c8>)
 8005754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575a:	f7fd fe9f 	bl	800349c <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005762:	f7fd fe9b 	bl	800349c <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b64      	cmp	r3, #100	; 0x64
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e103      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005774:	4b75      	ldr	r3, [pc, #468]	; (800594c <HAL_RCC_OscConfig+0x4c8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d106      	bne.n	8005796 <HAL_RCC_OscConfig+0x312>
 8005788:	4b6f      	ldr	r3, [pc, #444]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	4a6e      	ldr	r2, [pc, #440]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	6213      	str	r3, [r2, #32]
 8005794:	e02d      	b.n	80057f2 <HAL_RCC_OscConfig+0x36e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x334>
 800579e:	4b6a      	ldr	r3, [pc, #424]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	4a69      	ldr	r2, [pc, #420]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	6213      	str	r3, [r2, #32]
 80057aa:	4b67      	ldr	r3, [pc, #412]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4a66      	ldr	r2, [pc, #408]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057b0:	f023 0304 	bic.w	r3, r3, #4
 80057b4:	6213      	str	r3, [r2, #32]
 80057b6:	e01c      	b.n	80057f2 <HAL_RCC_OscConfig+0x36e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d10c      	bne.n	80057da <HAL_RCC_OscConfig+0x356>
 80057c0:	4b61      	ldr	r3, [pc, #388]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	4a60      	ldr	r2, [pc, #384]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057c6:	f043 0304 	orr.w	r3, r3, #4
 80057ca:	6213      	str	r3, [r2, #32]
 80057cc:	4b5e      	ldr	r3, [pc, #376]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	4a5d      	ldr	r2, [pc, #372]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	6213      	str	r3, [r2, #32]
 80057d8:	e00b      	b.n	80057f2 <HAL_RCC_OscConfig+0x36e>
 80057da:	4b5b      	ldr	r3, [pc, #364]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	4a5a      	ldr	r2, [pc, #360]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	6213      	str	r3, [r2, #32]
 80057e6:	4b58      	ldr	r3, [pc, #352]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4a57      	ldr	r2, [pc, #348]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d015      	beq.n	8005826 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057fa:	f7fd fe4f 	bl	800349c <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fd fe4b 	bl	800349c <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e0b1      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005818:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ee      	beq.n	8005802 <HAL_RCC_OscConfig+0x37e>
 8005824:	e014      	b.n	8005850 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005826:	f7fd fe39 	bl	800349c <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fd fe35 	bl	800349c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e09b      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005844:	4b40      	ldr	r3, [pc, #256]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ee      	bne.n	800582e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005856:	4b3c      	ldr	r3, [pc, #240]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	4a3b      	ldr	r2, [pc, #236]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005860:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8087 	beq.w	800597a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800586c:	4b36      	ldr	r3, [pc, #216]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b08      	cmp	r3, #8
 8005876:	d061      	beq.n	800593c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d146      	bne.n	800590e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005880:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_RCC_OscConfig+0x4cc>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005886:	f7fd fe09 	bl	800349c <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588e:	f7fd fe05 	bl	800349c <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e06d      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058a0:	4b29      	ldr	r3, [pc, #164]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f0      	bne.n	800588e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b4:	d108      	bne.n	80058c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4921      	ldr	r1, [pc, #132]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058c8:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a19      	ldr	r1, [r3, #32]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	430b      	orrs	r3, r1
 80058da:	491b      	ldr	r1, [pc, #108]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e0:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCC_OscConfig+0x4cc>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e6:	f7fd fdd9 	bl	800349c <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fd fdd5 	bl	800349c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e03d      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f0      	beq.n	80058ee <HAL_RCC_OscConfig+0x46a>
 800590c:	e035      	b.n	800597a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <HAL_RCC_OscConfig+0x4cc>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005914:	f7fd fdc2 	bl	800349c <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591c:	f7fd fdbe 	bl	800349c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e026      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <HAL_RCC_OscConfig+0x4c4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x498>
 800593a:	e01e      	b.n	800597a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e019      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
 8005948:	40021000 	.word	0x40021000
 800594c:	40007000 	.word	0x40007000
 8005950:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005954:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <HAL_RCC_OscConfig+0x500>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	429a      	cmp	r2, r3
 8005966:	d106      	bne.n	8005976 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005972:	429a      	cmp	r2, r3
 8005974:	d001      	beq.n	800597a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40021000 	.word	0x40021000

08005988 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0d0      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800599c:	4b6a      	ldr	r3, [pc, #424]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d910      	bls.n	80059cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059aa:	4b67      	ldr	r3, [pc, #412]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 0207 	bic.w	r2, r3, #7
 80059b2:	4965      	ldr	r1, [pc, #404]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ba:	4b63      	ldr	r3, [pc, #396]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0b8      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d020      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e4:	4b59      	ldr	r3, [pc, #356]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a58      	ldr	r2, [pc, #352]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 80059ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059fc:	4b53      	ldr	r3, [pc, #332]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a52      	ldr	r2, [pc, #328]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005a06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a08:	4b50      	ldr	r3, [pc, #320]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	494d      	ldr	r1, [pc, #308]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d040      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2e:	4b47      	ldr	r3, [pc, #284]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d115      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e07f      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d107      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a46:	4b41      	ldr	r3, [pc, #260]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e073      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a56:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e06b      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a66:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f023 0203 	bic.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4936      	ldr	r1, [pc, #216]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a78:	f7fd fd10 	bl	800349c <HAL_GetTick>
 8005a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a7e:	e00a      	b.n	8005a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a80:	f7fd fd0c 	bl	800349c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e053      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a96:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 020c 	and.w	r2, r3, #12
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d1eb      	bne.n	8005a80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aa8:	4b27      	ldr	r3, [pc, #156]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d210      	bcs.n	8005ad8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab6:	4b24      	ldr	r3, [pc, #144]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 0207 	bic.w	r2, r3, #7
 8005abe:	4922      	ldr	r1, [pc, #136]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e032      	b.n	8005b3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	4916      	ldr	r1, [pc, #88]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b02:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	490e      	ldr	r1, [pc, #56]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b16:	f000 f821 	bl	8005b5c <HAL_RCC_GetSysClockFreq>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	490a      	ldr	r1, [pc, #40]	; (8005b50 <HAL_RCC_ClockConfig+0x1c8>)
 8005b28:	5ccb      	ldrb	r3, [r1, r3]
 8005b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <HAL_RCC_ClockConfig+0x1cc>)
 8005b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <HAL_RCC_ClockConfig+0x1d0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fd fc6e 	bl	8003418 <HAL_InitTick>

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40022000 	.word	0x40022000
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	08007c60 	.word	0x08007c60
 8005b54:	2000000c 	.word	0x2000000c
 8005b58:	20000010 	.word	0x20000010

08005b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b76:	4b1e      	ldr	r3, [pc, #120]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d002      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x30>
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d003      	beq.n	8005b92 <HAL_RCC_GetSysClockFreq+0x36>
 8005b8a:	e027      	b.n	8005bdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b8e:	613b      	str	r3, [r7, #16]
      break;
 8005b90:	e027      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	0c9b      	lsrs	r3, r3, #18
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
 8005b9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d010      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	0c5b      	lsrs	r3, r3, #17
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005bb6:	5cd3      	ldrb	r3, [r2, r3]
 8005bb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bbe:	fb03 f202 	mul.w	r2, r3, r2
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e004      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bd0:	fb02 f303 	mul.w	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	613b      	str	r3, [r7, #16]
      break;
 8005bda:	e002      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bde:	613b      	str	r3, [r7, #16]
      break;
 8005be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be2:	693b      	ldr	r3, [r7, #16]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	007a1200 	.word	0x007a1200
 8005bf8:	08007c78 	.word	0x08007c78
 8005bfc:	08007c88 	.word	0x08007c88
 8005c00:	003d0900 	.word	0x003d0900

08005c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c08:	4b02      	ldr	r3, [pc, #8]	; (8005c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	2000000c 	.word	0x2000000c

08005c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c1c:	f7ff fff2 	bl	8005c04 <HAL_RCC_GetHCLKFreq>
 8005c20:	4602      	mov	r2, r0
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	4903      	ldr	r1, [pc, #12]	; (8005c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	08007c70 	.word	0x08007c70

08005c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c44:	f7ff ffde 	bl	8005c04 <HAL_RCC_GetHCLKFreq>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	0adb      	lsrs	r3, r3, #11
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	4903      	ldr	r1, [pc, #12]	; (8005c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c56:	5ccb      	ldrb	r3, [r1, r3]
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40021000 	.word	0x40021000
 8005c64:	08007c70 	.word	0x08007c70

08005c68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <RCC_Delay+0x34>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <RCC_Delay+0x38>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	0a5b      	lsrs	r3, r3, #9
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c84:	bf00      	nop
  }
  while (Delay --);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	1e5a      	subs	r2, r3, #1
 8005c8a:	60fa      	str	r2, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f9      	bne.n	8005c84 <RCC_Delay+0x1c>
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr
 8005c9c:	2000000c 	.word	0x2000000c
 8005ca0:	10624dd3 	.word	0x10624dd3

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d07d      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc4:	4b4f      	ldr	r3, [pc, #316]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd0:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	4a4b      	ldr	r2, [pc, #300]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cda:	61d3      	str	r3, [r2, #28]
 8005cdc:	4b49      	ldr	r3, [pc, #292]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	4b46      	ldr	r3, [pc, #280]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d118      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cf8:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a42      	ldr	r2, [pc, #264]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d04:	f7fd fbca 	bl	800349c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0a:	e008      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0c:	f7fd fbc6 	bl	800349c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	; 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e06d      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1e:	4b3a      	ldr	r3, [pc, #232]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d2a:	4b36      	ldr	r3, [pc, #216]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d02e      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d027      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d48:	4b2e      	ldr	r3, [pc, #184]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d52:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d58:	4b2c      	ldr	r3, [pc, #176]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d5e:	4a29      	ldr	r2, [pc, #164]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d014      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6e:	f7fd fb95 	bl	800349c <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d74:	e00a      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d76:	f7fd fb91 	bl	800349c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e036      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ee      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d98:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4917      	ldr	r1, [pc, #92]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d105      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db0:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	490b      	ldr	r1, [pc, #44]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4904      	ldr	r1, [pc, #16]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40007000 	.word	0x40007000
 8005e0c:	42420440 	.word	0x42420440

08005e10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	f200 808a 	bhi.w	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d045      	beq.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d075      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005e46:	e082      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005e48:	4b46      	ldr	r3, [pc, #280]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e4e:	4b45      	ldr	r3, [pc, #276]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d07b      	beq.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	0c9b      	lsrs	r3, r3, #18
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	4a41      	ldr	r2, [pc, #260]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005e64:	5cd3      	ldrb	r3, [r2, r3]
 8005e66:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d015      	beq.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e72:	4b3c      	ldr	r3, [pc, #240]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	0c5b      	lsrs	r3, r3, #17
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	4a3b      	ldr	r2, [pc, #236]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005e7e:	5cd3      	ldrb	r3, [r2, r3]
 8005e80:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00d      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e8c:	4a38      	ldr	r2, [pc, #224]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e004      	b.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4a34      	ldr	r2, [pc, #208]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005ea8:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eb4:	d102      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	61bb      	str	r3, [r7, #24]
      break;
 8005eba:	e04a      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4a2d      	ldr	r2, [pc, #180]	; (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	61bb      	str	r3, [r7, #24]
      break;
 8005eca:	e042      	b.n	8005f52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005ecc:	4b25      	ldr	r3, [pc, #148]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005edc:	d108      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eec:	61bb      	str	r3, [r7, #24]
 8005eee:	e01f      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efa:	d109      	bne.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005f08:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	e00f      	b.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f1a:	d11c      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d016      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005f28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005f2c:	61bb      	str	r3, [r7, #24]
      break;
 8005f2e:	e012      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f30:	e011      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005f32:	f7ff fe85 	bl	8005c40 <HAL_RCC_GetPCLK2Freq>
 8005f36:	4602      	mov	r2, r0
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	0b9b      	lsrs	r3, r3, #14
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	3301      	adds	r3, #1
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4a:	61bb      	str	r3, [r7, #24]
      break;
 8005f4c:	e004      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f4e:	bf00      	nop
 8005f50:	e002      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f52:	bf00      	nop
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f56:	bf00      	nop
    }
  }
  return (frequency);
 8005f58:	69bb      	ldr	r3, [r7, #24]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40021000 	.word	0x40021000
 8005f68:	08007c8c 	.word	0x08007c8c
 8005f6c:	08007c9c 	.word	0x08007c9c
 8005f70:	007a1200 	.word	0x007a1200
 8005f74:	003d0900 	.word	0x003d0900
 8005f78:	aaaaaaab 	.word	0xaaaaaaab

08005f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e041      	b.n	8006012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fd f8ae 	bl	8003104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f000 fbd8 	bl	8006770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	d001      	beq.n	8006034 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e032      	b.n	800609a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <HAL_TIM_Base_Start+0x88>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_TIM_Base_Start+0x48>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d009      	beq.n	8006064 <HAL_TIM_Base_Start+0x48>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <HAL_TIM_Base_Start+0x8c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_TIM_Base_Start+0x48>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a13      	ldr	r2, [pc, #76]	; (80060ac <HAL_TIM_Base_Start+0x90>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d111      	bne.n	8006088 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b06      	cmp	r3, #6
 8006074:	d010      	beq.n	8006098 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0201 	orr.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006086:	e007      	b.n	8006098 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800

080060b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d001      	beq.n	80060c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e03a      	b.n	800613e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a18      	ldr	r2, [pc, #96]	; (8006148 <HAL_TIM_Base_Start_IT+0x98>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00e      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x58>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f2:	d009      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x58>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a14      	ldr	r2, [pc, #80]	; (800614c <HAL_TIM_Base_Start_IT+0x9c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x58>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a13      	ldr	r2, [pc, #76]	; (8006150 <HAL_TIM_Base_Start_IT+0xa0>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d111      	bne.n	800612c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b06      	cmp	r3, #6
 8006118:	d010      	beq.n	800613c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612a:	e007      	b.n	800613c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800

08006154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e041      	b.n	80061ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f839 	bl	80061f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f000 faec 	bl	8006770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d122      	bne.n	8006260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b02      	cmp	r3, #2
 8006226:	d11b      	bne.n	8006260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0202 	mvn.w	r2, #2
 8006230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa76 	bl	8006738 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa69 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa78 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b04      	cmp	r3, #4
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b04      	cmp	r3, #4
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0204 	mvn.w	r2, #4
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa4c 	bl	8006738 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa3f 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa4e 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0208 	mvn.w	r2, #8
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2204      	movs	r2, #4
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa22 	bl	8006738 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa15 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa24 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b10      	cmp	r3, #16
 8006314:	d122      	bne.n	800635c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b10      	cmp	r3, #16
 8006322:	d11b      	bne.n	800635c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0210 	mvn.w	r2, #16
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2208      	movs	r2, #8
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f9f8 	bl	8006738 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9eb 	bl	8006726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f9fa 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b01      	cmp	r3, #1
 8006368:	d10e      	bne.n	8006388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d107      	bne.n	8006388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0201 	mvn.w	r2, #1
 8006380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fc fca2 	bl	8002ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d10e      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d107      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fdb4 	bl	8006f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d10e      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d107      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f9be 	bl	800675c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d10e      	bne.n	800640c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d107      	bne.n	800640c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0220 	mvn.w	r2, #32
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fd7f 	bl	8006f0a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800642e:	2302      	movs	r3, #2
 8006430:	e0ae      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b0c      	cmp	r3, #12
 800643e:	f200 809f 	bhi.w	8006580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	0800647d 	.word	0x0800647d
 800644c:	08006581 	.word	0x08006581
 8006450:	08006581 	.word	0x08006581
 8006454:	08006581 	.word	0x08006581
 8006458:	080064bd 	.word	0x080064bd
 800645c:	08006581 	.word	0x08006581
 8006460:	08006581 	.word	0x08006581
 8006464:	08006581 	.word	0x08006581
 8006468:	080064ff 	.word	0x080064ff
 800646c:	08006581 	.word	0x08006581
 8006470:	08006581 	.word	0x08006581
 8006474:	08006581 	.word	0x08006581
 8006478:	0800653f 	.word	0x0800653f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f9d6 	bl	8006834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0208 	orr.w	r2, r2, #8
 8006496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0204 	bic.w	r2, r2, #4
 80064a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6999      	ldr	r1, [r3, #24]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	619a      	str	r2, [r3, #24]
      break;
 80064ba:	e064      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fa1c 	bl	8006900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6999      	ldr	r1, [r3, #24]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	021a      	lsls	r2, r3, #8
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	619a      	str	r2, [r3, #24]
      break;
 80064fc:	e043      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fa65 	bl	80069d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0208 	orr.w	r2, r2, #8
 8006518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0204 	bic.w	r2, r2, #4
 8006528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69d9      	ldr	r1, [r3, #28]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	61da      	str	r2, [r3, #28]
      break;
 800653c:	e023      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 faaf 	bl	8006aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69d9      	ldr	r1, [r3, #28]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	021a      	lsls	r2, r3, #8
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	61da      	str	r2, [r3, #28]
      break;
 800657e:	e002      	b.n	8006586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
      break;
 8006584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_TIM_ConfigClockSource+0x1c>
 80065b0:	2302      	movs	r3, #2
 80065b2:	e0b4      	b.n	800671e <HAL_TIM_ConfigClockSource+0x186>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ec:	d03e      	beq.n	800666c <HAL_TIM_ConfigClockSource+0xd4>
 80065ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f2:	f200 8087 	bhi.w	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fa:	f000 8086 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x172>
 80065fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006602:	d87f      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006604:	2b70      	cmp	r3, #112	; 0x70
 8006606:	d01a      	beq.n	800663e <HAL_TIM_ConfigClockSource+0xa6>
 8006608:	2b70      	cmp	r3, #112	; 0x70
 800660a:	d87b      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 800660c:	2b60      	cmp	r3, #96	; 0x60
 800660e:	d050      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006610:	2b60      	cmp	r3, #96	; 0x60
 8006612:	d877      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006614:	2b50      	cmp	r3, #80	; 0x50
 8006616:	d03c      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0xfa>
 8006618:	2b50      	cmp	r3, #80	; 0x50
 800661a:	d873      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d058      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	d86f      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006624:	2b30      	cmp	r3, #48	; 0x30
 8006626:	d064      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006628:	2b30      	cmp	r3, #48	; 0x30
 800662a:	d86b      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 800662c:	2b20      	cmp	r3, #32
 800662e:	d060      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006630:	2b20      	cmp	r3, #32
 8006632:	d867      	bhi.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
 8006634:	2b00      	cmp	r3, #0
 8006636:	d05c      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006638:	2b10      	cmp	r3, #16
 800663a:	d05a      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0x15a>
 800663c:	e062      	b.n	8006704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800664e:	f000 faf0 	bl	8006c32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	609a      	str	r2, [r3, #8]
      break;
 800666a:	e04f      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800667c:	f000 fad9 	bl	8006c32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800668e:	609a      	str	r2, [r3, #8]
      break;
 8006690:	e03c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	461a      	mov	r2, r3
 80066a0:	f000 fa50 	bl	8006b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2150      	movs	r1, #80	; 0x50
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 faa7 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80066b0:	e02c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066be:	461a      	mov	r2, r3
 80066c0:	f000 fa6e 	bl	8006ba0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2160      	movs	r1, #96	; 0x60
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fa97 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80066d0:	e01c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	461a      	mov	r2, r3
 80066e0:	f000 fa30 	bl	8006b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2140      	movs	r1, #64	; 0x40
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fa87 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 80066f0:	e00c      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	4610      	mov	r0, r2
 80066fe:	f000 fa7e 	bl	8006bfe <TIM_ITRx_SetConfig>
      break;
 8006702:	e003      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	73fb      	strb	r3, [r7, #15]
      break;
 8006708:	e000      	b.n	800670c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800670a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
	...

08006770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a29      	ldr	r2, [pc, #164]	; (8006828 <TIM_Base_SetConfig+0xb8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00b      	beq.n	80067a0 <TIM_Base_SetConfig+0x30>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678e:	d007      	beq.n	80067a0 <TIM_Base_SetConfig+0x30>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a26      	ldr	r2, [pc, #152]	; (800682c <TIM_Base_SetConfig+0xbc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d003      	beq.n	80067a0 <TIM_Base_SetConfig+0x30>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a25      	ldr	r2, [pc, #148]	; (8006830 <TIM_Base_SetConfig+0xc0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d108      	bne.n	80067b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <TIM_Base_SetConfig+0xb8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00b      	beq.n	80067d2 <TIM_Base_SetConfig+0x62>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c0:	d007      	beq.n	80067d2 <TIM_Base_SetConfig+0x62>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a19      	ldr	r2, [pc, #100]	; (800682c <TIM_Base_SetConfig+0xbc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_Base_SetConfig+0x62>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <TIM_Base_SetConfig+0xc0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d108      	bne.n	80067e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a07      	ldr	r2, [pc, #28]	; (8006828 <TIM_Base_SetConfig+0xb8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d103      	bne.n	8006818 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	615a      	str	r2, [r3, #20]
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr
 8006828:	40012c00 	.word	0x40012c00
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800

08006834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	f023 0201 	bic.w	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 0302 	bic.w	r3, r3, #2
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <TIM_OC1_SetConfig+0xc8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10c      	bne.n	80068aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0308 	bic.w	r3, r3, #8
 8006896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 0304 	bic.w	r3, r3, #4
 80068a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a13      	ldr	r2, [pc, #76]	; (80068fc <TIM_OC1_SetConfig+0xc8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d111      	bne.n	80068d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	621a      	str	r2, [r3, #32]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40012c00 	.word	0x40012c00

08006900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f023 0210 	bic.w	r2, r3, #16
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 0320 	bic.w	r3, r3, #32
 800694a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <TIM_OC2_SetConfig+0xd0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d10d      	bne.n	800697c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a14      	ldr	r2, [pc, #80]	; (80069d0 <TIM_OC2_SetConfig+0xd0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d113      	bne.n	80069ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800698a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	621a      	str	r2, [r3, #32]
}
 80069c6:	bf00      	nop
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr
 80069d0:	40012c00 	.word	0x40012c00

080069d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <TIM_OC3_SetConfig+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d10d      	bne.n	8006a4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	021b      	lsls	r3, r3, #8
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a14      	ldr	r2, [pc, #80]	; (8006aa4 <TIM_OC3_SetConfig+0xd0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d113      	bne.n	8006a7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00

08006aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a0f      	ldr	r2, [pc, #60]	; (8006b40 <TIM_OC4_SetConfig+0x98>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d109      	bne.n	8006b1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	019b      	lsls	r3, r3, #6
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr
 8006b40:	40012c00 	.word	0x40012c00

08006b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0201 	bic.w	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f023 030a 	bic.w	r3, r3, #10
 8006b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0210 	bic.w	r2, r3, #16
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	031b      	lsls	r3, r3, #12
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	621a      	str	r2, [r3, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr

08006bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f043 0307 	orr.w	r3, r3, #7
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	609a      	str	r2, [r3, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr

08006c32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b087      	sub	sp, #28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	021a      	lsls	r2, r3, #8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	431a      	orrs	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	609a      	str	r2, [r3, #8]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <HAL_TIMEx_PWMN_Start+0x24>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	bf14      	ite	ne
 8006c8c:	2301      	movne	r3, #1
 8006c8e:	2300      	moveq	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	e022      	b.n	8006cda <HAL_TIMEx_PWMN_Start+0x6a>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d109      	bne.n	8006cae <HAL_TIMEx_PWMN_Start+0x3e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	bf14      	ite	ne
 8006ca6:	2301      	movne	r3, #1
 8006ca8:	2300      	moveq	r3, #0
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	e015      	b.n	8006cda <HAL_TIMEx_PWMN_Start+0x6a>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d109      	bne.n	8006cc8 <HAL_TIMEx_PWMN_Start+0x58>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	e008      	b.n	8006cda <HAL_TIMEx_PWMN_Start+0x6a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	bf14      	ite	ne
 8006cd4:	2301      	movne	r3, #1
 8006cd6:	2300      	moveq	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e059      	b.n	8006d96 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <HAL_TIMEx_PWMN_Start+0x82>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cf0:	e013      	b.n	8006d1a <HAL_TIMEx_PWMN_Start+0xaa>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIMEx_PWMN_Start+0x92>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d00:	e00b      	b.n	8006d1a <HAL_TIMEx_PWMN_Start+0xaa>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d104      	bne.n	8006d12 <HAL_TIMEx_PWMN_Start+0xa2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d10:	e003      	b.n	8006d1a <HAL_TIMEx_PWMN_Start+0xaa>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f903 	bl	8006f2e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a18      	ldr	r2, [pc, #96]	; (8006da0 <HAL_TIMEx_PWMN_Start+0x130>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00e      	beq.n	8006d60 <HAL_TIMEx_PWMN_Start+0xf0>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4a:	d009      	beq.n	8006d60 <HAL_TIMEx_PWMN_Start+0xf0>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <HAL_TIMEx_PWMN_Start+0x134>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_TIMEx_PWMN_Start+0xf0>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a13      	ldr	r2, [pc, #76]	; (8006da8 <HAL_TIMEx_PWMN_Start+0x138>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d111      	bne.n	8006d84 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b06      	cmp	r3, #6
 8006d70:	d010      	beq.n	8006d94 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0201 	orr.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d82:	e007      	b.n	8006d94 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800

08006dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e046      	b.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00e      	beq.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e10:	d009      	beq.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a12      	ldr	r2, [pc, #72]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d10c      	bne.n	8006e40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800

08006e68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e03d      	b.n	8006f00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr

08006f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr

08006f2e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b087      	sub	sp, #28
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	2204      	movs	r2, #4
 8006f42:	fa02 f303 	lsl.w	r3, r2, r3
 8006f46:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	43db      	mvns	r3, r3
 8006f50:	401a      	ands	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a1a      	ldr	r2, [r3, #32]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 031f 	and.w	r3, r3, #31
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	fa01 f303 	lsl.w	r3, r1, r3
 8006f66:	431a      	orrs	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e042      	b.n	800700e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fc f931 	bl	8003204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2224      	movs	r2, #36	; 0x24
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fb8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f82c 	bl	8007018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695a      	ldr	r2, [r3, #20]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fde:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007052:	f023 030c 	bic.w	r3, r3, #12
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	430b      	orrs	r3, r1
 800705e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699a      	ldr	r2, [r3, #24]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2c      	ldr	r2, [pc, #176]	; (800712c <UART_SetConfig+0x114>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d103      	bne.n	8007088 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007080:	f7fe fdde 	bl	8005c40 <HAL_RCC_GetPCLK2Freq>
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	e002      	b.n	800708e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007088:	f7fe fdc6 	bl	8005c18 <HAL_RCC_GetPCLK1Freq>
 800708c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009a      	lsls	r2, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a4:	4a22      	ldr	r2, [pc, #136]	; (8007130 <UART_SetConfig+0x118>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	0119      	lsls	r1, r3, #4
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009a      	lsls	r2, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80070c4:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <UART_SetConfig+0x118>)
 80070c6:	fba3 0302 	umull	r0, r3, r3, r2
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	2064      	movs	r0, #100	; 0x64
 80070ce:	fb00 f303 	mul.w	r3, r0, r3
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	3332      	adds	r3, #50	; 0x32
 80070d8:	4a15      	ldr	r2, [pc, #84]	; (8007130 <UART_SetConfig+0x118>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070e4:	4419      	add	r1, r3
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009a      	lsls	r2, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80070fc:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <UART_SetConfig+0x118>)
 80070fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	2064      	movs	r0, #100	; 0x64
 8007106:	fb00 f303 	mul.w	r3, r0, r3
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	3332      	adds	r3, #50	; 0x32
 8007110:	4a07      	ldr	r2, [pc, #28]	; (8007130 <UART_SetConfig+0x118>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	f003 020f 	and.w	r2, r3, #15
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	440a      	add	r2, r1
 8007122:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40013800 	.word	0x40013800
 8007130:	51eb851f 	.word	0x51eb851f

08007134 <_vsiprintf_r>:
 8007134:	b500      	push	{lr}
 8007136:	b09b      	sub	sp, #108	; 0x6c
 8007138:	9100      	str	r1, [sp, #0]
 800713a:	9104      	str	r1, [sp, #16]
 800713c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007140:	9105      	str	r1, [sp, #20]
 8007142:	9102      	str	r1, [sp, #8]
 8007144:	4905      	ldr	r1, [pc, #20]	; (800715c <_vsiprintf_r+0x28>)
 8007146:	9103      	str	r1, [sp, #12]
 8007148:	4669      	mov	r1, sp
 800714a:	f000 f995 	bl	8007478 <_svfiprintf_r>
 800714e:	2200      	movs	r2, #0
 8007150:	9b00      	ldr	r3, [sp, #0]
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	b01b      	add	sp, #108	; 0x6c
 8007156:	f85d fb04 	ldr.w	pc, [sp], #4
 800715a:	bf00      	nop
 800715c:	ffff0208 	.word	0xffff0208

08007160 <vsiprintf>:
 8007160:	4613      	mov	r3, r2
 8007162:	460a      	mov	r2, r1
 8007164:	4601      	mov	r1, r0
 8007166:	4802      	ldr	r0, [pc, #8]	; (8007170 <vsiprintf+0x10>)
 8007168:	6800      	ldr	r0, [r0, #0]
 800716a:	f7ff bfe3 	b.w	8007134 <_vsiprintf_r>
 800716e:	bf00      	nop
 8007170:	20000064 	.word	0x20000064

08007174 <memset>:
 8007174:	4603      	mov	r3, r0
 8007176:	4402      	add	r2, r0
 8007178:	4293      	cmp	r3, r2
 800717a:	d100      	bne.n	800717e <memset+0xa>
 800717c:	4770      	bx	lr
 800717e:	f803 1b01 	strb.w	r1, [r3], #1
 8007182:	e7f9      	b.n	8007178 <memset+0x4>

08007184 <__errno>:
 8007184:	4b01      	ldr	r3, [pc, #4]	; (800718c <__errno+0x8>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000064 	.word	0x20000064

08007190 <__libc_init_array>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	2600      	movs	r6, #0
 8007194:	4d0c      	ldr	r5, [pc, #48]	; (80071c8 <__libc_init_array+0x38>)
 8007196:	4c0d      	ldr	r4, [pc, #52]	; (80071cc <__libc_init_array+0x3c>)
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	42a6      	cmp	r6, r4
 800719e:	d109      	bne.n	80071b4 <__libc_init_array+0x24>
 80071a0:	f000 fcc0 	bl	8007b24 <_init>
 80071a4:	2600      	movs	r6, #0
 80071a6:	4d0a      	ldr	r5, [pc, #40]	; (80071d0 <__libc_init_array+0x40>)
 80071a8:	4c0a      	ldr	r4, [pc, #40]	; (80071d4 <__libc_init_array+0x44>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	42a6      	cmp	r6, r4
 80071b0:	d105      	bne.n	80071be <__libc_init_array+0x2e>
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b8:	4798      	blx	r3
 80071ba:	3601      	adds	r6, #1
 80071bc:	e7ee      	b.n	800719c <__libc_init_array+0xc>
 80071be:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c2:	4798      	blx	r3
 80071c4:	3601      	adds	r6, #1
 80071c6:	e7f2      	b.n	80071ae <__libc_init_array+0x1e>
 80071c8:	08007cd4 	.word	0x08007cd4
 80071cc:	08007cd4 	.word	0x08007cd4
 80071d0:	08007cd4 	.word	0x08007cd4
 80071d4:	08007cd8 	.word	0x08007cd8

080071d8 <__retarget_lock_acquire_recursive>:
 80071d8:	4770      	bx	lr

080071da <__retarget_lock_release_recursive>:
 80071da:	4770      	bx	lr

080071dc <_free_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4605      	mov	r5, r0
 80071e0:	2900      	cmp	r1, #0
 80071e2:	d040      	beq.n	8007266 <_free_r+0x8a>
 80071e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e8:	1f0c      	subs	r4, r1, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfb8      	it	lt
 80071ee:	18e4      	addlt	r4, r4, r3
 80071f0:	f000 f8dc 	bl	80073ac <__malloc_lock>
 80071f4:	4a1c      	ldr	r2, [pc, #112]	; (8007268 <_free_r+0x8c>)
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	b933      	cbnz	r3, 8007208 <_free_r+0x2c>
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	6014      	str	r4, [r2, #0]
 80071fe:	4628      	mov	r0, r5
 8007200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007204:	f000 b8d8 	b.w	80073b8 <__malloc_unlock>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d908      	bls.n	800721e <_free_r+0x42>
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	1821      	adds	r1, r4, r0
 8007210:	428b      	cmp	r3, r1
 8007212:	bf01      	itttt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	1809      	addeq	r1, r1, r0
 800721a:	6021      	streq	r1, [r4, #0]
 800721c:	e7ed      	b.n	80071fa <_free_r+0x1e>
 800721e:	461a      	mov	r2, r3
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b10b      	cbz	r3, 8007228 <_free_r+0x4c>
 8007224:	42a3      	cmp	r3, r4
 8007226:	d9fa      	bls.n	800721e <_free_r+0x42>
 8007228:	6811      	ldr	r1, [r2, #0]
 800722a:	1850      	adds	r0, r2, r1
 800722c:	42a0      	cmp	r0, r4
 800722e:	d10b      	bne.n	8007248 <_free_r+0x6c>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	4401      	add	r1, r0
 8007234:	1850      	adds	r0, r2, r1
 8007236:	4283      	cmp	r3, r0
 8007238:	6011      	str	r1, [r2, #0]
 800723a:	d1e0      	bne.n	80071fe <_free_r+0x22>
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4408      	add	r0, r1
 8007242:	6010      	str	r0, [r2, #0]
 8007244:	6053      	str	r3, [r2, #4]
 8007246:	e7da      	b.n	80071fe <_free_r+0x22>
 8007248:	d902      	bls.n	8007250 <_free_r+0x74>
 800724a:	230c      	movs	r3, #12
 800724c:	602b      	str	r3, [r5, #0]
 800724e:	e7d6      	b.n	80071fe <_free_r+0x22>
 8007250:	6820      	ldr	r0, [r4, #0]
 8007252:	1821      	adds	r1, r4, r0
 8007254:	428b      	cmp	r3, r1
 8007256:	bf01      	itttt	eq
 8007258:	6819      	ldreq	r1, [r3, #0]
 800725a:	685b      	ldreq	r3, [r3, #4]
 800725c:	1809      	addeq	r1, r1, r0
 800725e:	6021      	streq	r1, [r4, #0]
 8007260:	6063      	str	r3, [r4, #4]
 8007262:	6054      	str	r4, [r2, #4]
 8007264:	e7cb      	b.n	80071fe <_free_r+0x22>
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	200026f4 	.word	0x200026f4

0800726c <sbrk_aligned>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0e      	ldr	r6, [pc, #56]	; (80072a8 <sbrk_aligned+0x3c>)
 8007270:	460c      	mov	r4, r1
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	b911      	cbnz	r1, 800727e <sbrk_aligned+0x12>
 8007278:	f000 fbaa 	bl	80079d0 <_sbrk_r>
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 fba5 	bl	80079d0 <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d00a      	beq.n	80072a0 <sbrk_aligned+0x34>
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d007      	beq.n	80072a4 <sbrk_aligned+0x38>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f000 fb9a 	bl	80079d0 <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d101      	bne.n	80072a4 <sbrk_aligned+0x38>
 80072a0:	f04f 34ff 	mov.w	r4, #4294967295
 80072a4:	4620      	mov	r0, r4
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	200026f8 	.word	0x200026f8

080072ac <_malloc_r>:
 80072ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b0:	1ccd      	adds	r5, r1, #3
 80072b2:	f025 0503 	bic.w	r5, r5, #3
 80072b6:	3508      	adds	r5, #8
 80072b8:	2d0c      	cmp	r5, #12
 80072ba:	bf38      	it	cc
 80072bc:	250c      	movcc	r5, #12
 80072be:	2d00      	cmp	r5, #0
 80072c0:	4607      	mov	r7, r0
 80072c2:	db01      	blt.n	80072c8 <_malloc_r+0x1c>
 80072c4:	42a9      	cmp	r1, r5
 80072c6:	d905      	bls.n	80072d4 <_malloc_r+0x28>
 80072c8:	230c      	movs	r3, #12
 80072ca:	2600      	movs	r6, #0
 80072cc:	603b      	str	r3, [r7, #0]
 80072ce:	4630      	mov	r0, r6
 80072d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073a8 <_malloc_r+0xfc>
 80072d8:	f000 f868 	bl	80073ac <__malloc_lock>
 80072dc:	f8d8 3000 	ldr.w	r3, [r8]
 80072e0:	461c      	mov	r4, r3
 80072e2:	bb5c      	cbnz	r4, 800733c <_malloc_r+0x90>
 80072e4:	4629      	mov	r1, r5
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ffc0 	bl	800726c <sbrk_aligned>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	4604      	mov	r4, r0
 80072f0:	d155      	bne.n	800739e <_malloc_r+0xf2>
 80072f2:	f8d8 4000 	ldr.w	r4, [r8]
 80072f6:	4626      	mov	r6, r4
 80072f8:	2e00      	cmp	r6, #0
 80072fa:	d145      	bne.n	8007388 <_malloc_r+0xdc>
 80072fc:	2c00      	cmp	r4, #0
 80072fe:	d048      	beq.n	8007392 <_malloc_r+0xe6>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	4631      	mov	r1, r6
 8007304:	4638      	mov	r0, r7
 8007306:	eb04 0903 	add.w	r9, r4, r3
 800730a:	f000 fb61 	bl	80079d0 <_sbrk_r>
 800730e:	4581      	cmp	r9, r0
 8007310:	d13f      	bne.n	8007392 <_malloc_r+0xe6>
 8007312:	6821      	ldr	r1, [r4, #0]
 8007314:	4638      	mov	r0, r7
 8007316:	1a6d      	subs	r5, r5, r1
 8007318:	4629      	mov	r1, r5
 800731a:	f7ff ffa7 	bl	800726c <sbrk_aligned>
 800731e:	3001      	adds	r0, #1
 8007320:	d037      	beq.n	8007392 <_malloc_r+0xe6>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	442b      	add	r3, r5
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	f8d8 3000 	ldr.w	r3, [r8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d038      	beq.n	80073a2 <_malloc_r+0xf6>
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	42a2      	cmp	r2, r4
 8007334:	d12b      	bne.n	800738e <_malloc_r+0xe2>
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	e00f      	b.n	800735c <_malloc_r+0xb0>
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	1b52      	subs	r2, r2, r5
 8007340:	d41f      	bmi.n	8007382 <_malloc_r+0xd6>
 8007342:	2a0b      	cmp	r2, #11
 8007344:	d917      	bls.n	8007376 <_malloc_r+0xca>
 8007346:	1961      	adds	r1, r4, r5
 8007348:	42a3      	cmp	r3, r4
 800734a:	6025      	str	r5, [r4, #0]
 800734c:	bf18      	it	ne
 800734e:	6059      	strne	r1, [r3, #4]
 8007350:	6863      	ldr	r3, [r4, #4]
 8007352:	bf08      	it	eq
 8007354:	f8c8 1000 	streq.w	r1, [r8]
 8007358:	5162      	str	r2, [r4, r5]
 800735a:	604b      	str	r3, [r1, #4]
 800735c:	4638      	mov	r0, r7
 800735e:	f104 060b 	add.w	r6, r4, #11
 8007362:	f000 f829 	bl	80073b8 <__malloc_unlock>
 8007366:	f026 0607 	bic.w	r6, r6, #7
 800736a:	1d23      	adds	r3, r4, #4
 800736c:	1af2      	subs	r2, r6, r3
 800736e:	d0ae      	beq.n	80072ce <_malloc_r+0x22>
 8007370:	1b9b      	subs	r3, r3, r6
 8007372:	50a3      	str	r3, [r4, r2]
 8007374:	e7ab      	b.n	80072ce <_malloc_r+0x22>
 8007376:	42a3      	cmp	r3, r4
 8007378:	6862      	ldr	r2, [r4, #4]
 800737a:	d1dd      	bne.n	8007338 <_malloc_r+0x8c>
 800737c:	f8c8 2000 	str.w	r2, [r8]
 8007380:	e7ec      	b.n	800735c <_malloc_r+0xb0>
 8007382:	4623      	mov	r3, r4
 8007384:	6864      	ldr	r4, [r4, #4]
 8007386:	e7ac      	b.n	80072e2 <_malloc_r+0x36>
 8007388:	4634      	mov	r4, r6
 800738a:	6876      	ldr	r6, [r6, #4]
 800738c:	e7b4      	b.n	80072f8 <_malloc_r+0x4c>
 800738e:	4613      	mov	r3, r2
 8007390:	e7cc      	b.n	800732c <_malloc_r+0x80>
 8007392:	230c      	movs	r3, #12
 8007394:	4638      	mov	r0, r7
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	f000 f80e 	bl	80073b8 <__malloc_unlock>
 800739c:	e797      	b.n	80072ce <_malloc_r+0x22>
 800739e:	6025      	str	r5, [r4, #0]
 80073a0:	e7dc      	b.n	800735c <_malloc_r+0xb0>
 80073a2:	605b      	str	r3, [r3, #4]
 80073a4:	deff      	udf	#255	; 0xff
 80073a6:	bf00      	nop
 80073a8:	200026f4 	.word	0x200026f4

080073ac <__malloc_lock>:
 80073ac:	4801      	ldr	r0, [pc, #4]	; (80073b4 <__malloc_lock+0x8>)
 80073ae:	f7ff bf13 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 80073b2:	bf00      	nop
 80073b4:	200026f0 	.word	0x200026f0

080073b8 <__malloc_unlock>:
 80073b8:	4801      	ldr	r0, [pc, #4]	; (80073c0 <__malloc_unlock+0x8>)
 80073ba:	f7ff bf0e 	b.w	80071da <__retarget_lock_release_recursive>
 80073be:	bf00      	nop
 80073c0:	200026f0 	.word	0x200026f0

080073c4 <__ssputs_r>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	461f      	mov	r7, r3
 80073ca:	688e      	ldr	r6, [r1, #8]
 80073cc:	4682      	mov	sl, r0
 80073ce:	42be      	cmp	r6, r7
 80073d0:	460c      	mov	r4, r1
 80073d2:	4690      	mov	r8, r2
 80073d4:	680b      	ldr	r3, [r1, #0]
 80073d6:	d82c      	bhi.n	8007432 <__ssputs_r+0x6e>
 80073d8:	898a      	ldrh	r2, [r1, #12]
 80073da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073de:	d026      	beq.n	800742e <__ssputs_r+0x6a>
 80073e0:	6965      	ldr	r5, [r4, #20]
 80073e2:	6909      	ldr	r1, [r1, #16]
 80073e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e8:	eba3 0901 	sub.w	r9, r3, r1
 80073ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073f0:	1c7b      	adds	r3, r7, #1
 80073f2:	444b      	add	r3, r9
 80073f4:	106d      	asrs	r5, r5, #1
 80073f6:	429d      	cmp	r5, r3
 80073f8:	bf38      	it	cc
 80073fa:	461d      	movcc	r5, r3
 80073fc:	0553      	lsls	r3, r2, #21
 80073fe:	d527      	bpl.n	8007450 <__ssputs_r+0x8c>
 8007400:	4629      	mov	r1, r5
 8007402:	f7ff ff53 	bl	80072ac <_malloc_r>
 8007406:	4606      	mov	r6, r0
 8007408:	b360      	cbz	r0, 8007464 <__ssputs_r+0xa0>
 800740a:	464a      	mov	r2, r9
 800740c:	6921      	ldr	r1, [r4, #16]
 800740e:	f000 fafd 	bl	8007a0c <memcpy>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	6126      	str	r6, [r4, #16]
 8007420:	444e      	add	r6, r9
 8007422:	6026      	str	r6, [r4, #0]
 8007424:	463e      	mov	r6, r7
 8007426:	6165      	str	r5, [r4, #20]
 8007428:	eba5 0509 	sub.w	r5, r5, r9
 800742c:	60a5      	str	r5, [r4, #8]
 800742e:	42be      	cmp	r6, r7
 8007430:	d900      	bls.n	8007434 <__ssputs_r+0x70>
 8007432:	463e      	mov	r6, r7
 8007434:	4632      	mov	r2, r6
 8007436:	4641      	mov	r1, r8
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	f000 faaf 	bl	800799c <memmove>
 800743e:	2000      	movs	r0, #0
 8007440:	68a3      	ldr	r3, [r4, #8]
 8007442:	1b9b      	subs	r3, r3, r6
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	4433      	add	r3, r6
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007450:	462a      	mov	r2, r5
 8007452:	f000 fae9 	bl	8007a28 <_realloc_r>
 8007456:	4606      	mov	r6, r0
 8007458:	2800      	cmp	r0, #0
 800745a:	d1e0      	bne.n	800741e <__ssputs_r+0x5a>
 800745c:	4650      	mov	r0, sl
 800745e:	6921      	ldr	r1, [r4, #16]
 8007460:	f7ff febc 	bl	80071dc <_free_r>
 8007464:	230c      	movs	r3, #12
 8007466:	f8ca 3000 	str.w	r3, [sl]
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f04f 30ff 	mov.w	r0, #4294967295
 8007470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007474:	81a3      	strh	r3, [r4, #12]
 8007476:	e7e9      	b.n	800744c <__ssputs_r+0x88>

08007478 <_svfiprintf_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	4698      	mov	r8, r3
 800747e:	898b      	ldrh	r3, [r1, #12]
 8007480:	4607      	mov	r7, r0
 8007482:	061b      	lsls	r3, r3, #24
 8007484:	460d      	mov	r5, r1
 8007486:	4614      	mov	r4, r2
 8007488:	b09d      	sub	sp, #116	; 0x74
 800748a:	d50e      	bpl.n	80074aa <_svfiprintf_r+0x32>
 800748c:	690b      	ldr	r3, [r1, #16]
 800748e:	b963      	cbnz	r3, 80074aa <_svfiprintf_r+0x32>
 8007490:	2140      	movs	r1, #64	; 0x40
 8007492:	f7ff ff0b 	bl	80072ac <_malloc_r>
 8007496:	6028      	str	r0, [r5, #0]
 8007498:	6128      	str	r0, [r5, #16]
 800749a:	b920      	cbnz	r0, 80074a6 <_svfiprintf_r+0x2e>
 800749c:	230c      	movs	r3, #12
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e0d0      	b.n	8007648 <_svfiprintf_r+0x1d0>
 80074a6:	2340      	movs	r3, #64	; 0x40
 80074a8:	616b      	str	r3, [r5, #20]
 80074aa:	2300      	movs	r3, #0
 80074ac:	9309      	str	r3, [sp, #36]	; 0x24
 80074ae:	2320      	movs	r3, #32
 80074b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074b4:	2330      	movs	r3, #48	; 0x30
 80074b6:	f04f 0901 	mov.w	r9, #1
 80074ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80074be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007660 <_svfiprintf_r+0x1e8>
 80074c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074c6:	4623      	mov	r3, r4
 80074c8:	469a      	mov	sl, r3
 80074ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ce:	b10a      	cbz	r2, 80074d4 <_svfiprintf_r+0x5c>
 80074d0:	2a25      	cmp	r2, #37	; 0x25
 80074d2:	d1f9      	bne.n	80074c8 <_svfiprintf_r+0x50>
 80074d4:	ebba 0b04 	subs.w	fp, sl, r4
 80074d8:	d00b      	beq.n	80074f2 <_svfiprintf_r+0x7a>
 80074da:	465b      	mov	r3, fp
 80074dc:	4622      	mov	r2, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	4638      	mov	r0, r7
 80074e2:	f7ff ff6f 	bl	80073c4 <__ssputs_r>
 80074e6:	3001      	adds	r0, #1
 80074e8:	f000 80a9 	beq.w	800763e <_svfiprintf_r+0x1c6>
 80074ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ee:	445a      	add	r2, fp
 80074f0:	9209      	str	r2, [sp, #36]	; 0x24
 80074f2:	f89a 3000 	ldrb.w	r3, [sl]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80a1 	beq.w	800763e <_svfiprintf_r+0x1c6>
 80074fc:	2300      	movs	r3, #0
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007506:	f10a 0a01 	add.w	sl, sl, #1
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	9307      	str	r3, [sp, #28]
 800750e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007512:	931a      	str	r3, [sp, #104]	; 0x68
 8007514:	4654      	mov	r4, sl
 8007516:	2205      	movs	r2, #5
 8007518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800751c:	4850      	ldr	r0, [pc, #320]	; (8007660 <_svfiprintf_r+0x1e8>)
 800751e:	f000 fa67 	bl	80079f0 <memchr>
 8007522:	9a04      	ldr	r2, [sp, #16]
 8007524:	b9d8      	cbnz	r0, 800755e <_svfiprintf_r+0xe6>
 8007526:	06d0      	lsls	r0, r2, #27
 8007528:	bf44      	itt	mi
 800752a:	2320      	movmi	r3, #32
 800752c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007530:	0711      	lsls	r1, r2, #28
 8007532:	bf44      	itt	mi
 8007534:	232b      	movmi	r3, #43	; 0x2b
 8007536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800753a:	f89a 3000 	ldrb.w	r3, [sl]
 800753e:	2b2a      	cmp	r3, #42	; 0x2a
 8007540:	d015      	beq.n	800756e <_svfiprintf_r+0xf6>
 8007542:	4654      	mov	r4, sl
 8007544:	2000      	movs	r0, #0
 8007546:	f04f 0c0a 	mov.w	ip, #10
 800754a:	9a07      	ldr	r2, [sp, #28]
 800754c:	4621      	mov	r1, r4
 800754e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007552:	3b30      	subs	r3, #48	; 0x30
 8007554:	2b09      	cmp	r3, #9
 8007556:	d94d      	bls.n	80075f4 <_svfiprintf_r+0x17c>
 8007558:	b1b0      	cbz	r0, 8007588 <_svfiprintf_r+0x110>
 800755a:	9207      	str	r2, [sp, #28]
 800755c:	e014      	b.n	8007588 <_svfiprintf_r+0x110>
 800755e:	eba0 0308 	sub.w	r3, r0, r8
 8007562:	fa09 f303 	lsl.w	r3, r9, r3
 8007566:	4313      	orrs	r3, r2
 8007568:	46a2      	mov	sl, r4
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	e7d2      	b.n	8007514 <_svfiprintf_r+0x9c>
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	1d19      	adds	r1, r3, #4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	9103      	str	r1, [sp, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	bfbb      	ittet	lt
 800757a:	425b      	neglt	r3, r3
 800757c:	f042 0202 	orrlt.w	r2, r2, #2
 8007580:	9307      	strge	r3, [sp, #28]
 8007582:	9307      	strlt	r3, [sp, #28]
 8007584:	bfb8      	it	lt
 8007586:	9204      	strlt	r2, [sp, #16]
 8007588:	7823      	ldrb	r3, [r4, #0]
 800758a:	2b2e      	cmp	r3, #46	; 0x2e
 800758c:	d10c      	bne.n	80075a8 <_svfiprintf_r+0x130>
 800758e:	7863      	ldrb	r3, [r4, #1]
 8007590:	2b2a      	cmp	r3, #42	; 0x2a
 8007592:	d134      	bne.n	80075fe <_svfiprintf_r+0x186>
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	3402      	adds	r4, #2
 8007598:	1d1a      	adds	r2, r3, #4
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	9203      	str	r2, [sp, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfb8      	it	lt
 80075a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007664 <_svfiprintf_r+0x1ec>
 80075ac:	2203      	movs	r2, #3
 80075ae:	4650      	mov	r0, sl
 80075b0:	7821      	ldrb	r1, [r4, #0]
 80075b2:	f000 fa1d 	bl	80079f0 <memchr>
 80075b6:	b138      	cbz	r0, 80075c8 <_svfiprintf_r+0x150>
 80075b8:	2240      	movs	r2, #64	; 0x40
 80075ba:	9b04      	ldr	r3, [sp, #16]
 80075bc:	eba0 000a 	sub.w	r0, r0, sl
 80075c0:	4082      	lsls	r2, r0
 80075c2:	4313      	orrs	r3, r2
 80075c4:	3401      	adds	r4, #1
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075cc:	2206      	movs	r2, #6
 80075ce:	4826      	ldr	r0, [pc, #152]	; (8007668 <_svfiprintf_r+0x1f0>)
 80075d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075d4:	f000 fa0c 	bl	80079f0 <memchr>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d038      	beq.n	800764e <_svfiprintf_r+0x1d6>
 80075dc:	4b23      	ldr	r3, [pc, #140]	; (800766c <_svfiprintf_r+0x1f4>)
 80075de:	bb1b      	cbnz	r3, 8007628 <_svfiprintf_r+0x1b0>
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	3307      	adds	r3, #7
 80075e4:	f023 0307 	bic.w	r3, r3, #7
 80075e8:	3308      	adds	r3, #8
 80075ea:	9303      	str	r3, [sp, #12]
 80075ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ee:	4433      	add	r3, r6
 80075f0:	9309      	str	r3, [sp, #36]	; 0x24
 80075f2:	e768      	b.n	80074c6 <_svfiprintf_r+0x4e>
 80075f4:	460c      	mov	r4, r1
 80075f6:	2001      	movs	r0, #1
 80075f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075fc:	e7a6      	b.n	800754c <_svfiprintf_r+0xd4>
 80075fe:	2300      	movs	r3, #0
 8007600:	f04f 0c0a 	mov.w	ip, #10
 8007604:	4619      	mov	r1, r3
 8007606:	3401      	adds	r4, #1
 8007608:	9305      	str	r3, [sp, #20]
 800760a:	4620      	mov	r0, r4
 800760c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007610:	3a30      	subs	r2, #48	; 0x30
 8007612:	2a09      	cmp	r2, #9
 8007614:	d903      	bls.n	800761e <_svfiprintf_r+0x1a6>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0c6      	beq.n	80075a8 <_svfiprintf_r+0x130>
 800761a:	9105      	str	r1, [sp, #20]
 800761c:	e7c4      	b.n	80075a8 <_svfiprintf_r+0x130>
 800761e:	4604      	mov	r4, r0
 8007620:	2301      	movs	r3, #1
 8007622:	fb0c 2101 	mla	r1, ip, r1, r2
 8007626:	e7f0      	b.n	800760a <_svfiprintf_r+0x192>
 8007628:	ab03      	add	r3, sp, #12
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	462a      	mov	r2, r5
 800762e:	4638      	mov	r0, r7
 8007630:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <_svfiprintf_r+0x1f8>)
 8007632:	a904      	add	r1, sp, #16
 8007634:	f3af 8000 	nop.w
 8007638:	1c42      	adds	r2, r0, #1
 800763a:	4606      	mov	r6, r0
 800763c:	d1d6      	bne.n	80075ec <_svfiprintf_r+0x174>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	065b      	lsls	r3, r3, #25
 8007642:	f53f af2d 	bmi.w	80074a0 <_svfiprintf_r+0x28>
 8007646:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007648:	b01d      	add	sp, #116	; 0x74
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	ab03      	add	r3, sp, #12
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	462a      	mov	r2, r5
 8007654:	4638      	mov	r0, r7
 8007656:	4b06      	ldr	r3, [pc, #24]	; (8007670 <_svfiprintf_r+0x1f8>)
 8007658:	a904      	add	r1, sp, #16
 800765a:	f000 f87d 	bl	8007758 <_printf_i>
 800765e:	e7eb      	b.n	8007638 <_svfiprintf_r+0x1c0>
 8007660:	08007c9e 	.word	0x08007c9e
 8007664:	08007ca4 	.word	0x08007ca4
 8007668:	08007ca8 	.word	0x08007ca8
 800766c:	00000000 	.word	0x00000000
 8007670:	080073c5 	.word	0x080073c5

08007674 <_printf_common>:
 8007674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	4616      	mov	r6, r2
 800767a:	4699      	mov	r9, r3
 800767c:	688a      	ldr	r2, [r1, #8]
 800767e:	690b      	ldr	r3, [r1, #16]
 8007680:	4607      	mov	r7, r0
 8007682:	4293      	cmp	r3, r2
 8007684:	bfb8      	it	lt
 8007686:	4613      	movlt	r3, r2
 8007688:	6033      	str	r3, [r6, #0]
 800768a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800768e:	460c      	mov	r4, r1
 8007690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007694:	b10a      	cbz	r2, 800769a <_printf_common+0x26>
 8007696:	3301      	adds	r3, #1
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	0699      	lsls	r1, r3, #26
 800769e:	bf42      	ittt	mi
 80076a0:	6833      	ldrmi	r3, [r6, #0]
 80076a2:	3302      	addmi	r3, #2
 80076a4:	6033      	strmi	r3, [r6, #0]
 80076a6:	6825      	ldr	r5, [r4, #0]
 80076a8:	f015 0506 	ands.w	r5, r5, #6
 80076ac:	d106      	bne.n	80076bc <_printf_common+0x48>
 80076ae:	f104 0a19 	add.w	sl, r4, #25
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	6832      	ldr	r2, [r6, #0]
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	dc2b      	bgt.n	8007714 <_printf_common+0xa0>
 80076bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c0:	1e13      	subs	r3, r2, #0
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	bf18      	it	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	0692      	lsls	r2, r2, #26
 80076ca:	d430      	bmi.n	800772e <_printf_common+0xba>
 80076cc:	4649      	mov	r1, r9
 80076ce:	4638      	mov	r0, r7
 80076d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d023      	beq.n	8007722 <_printf_common+0xae>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	f003 0306 	and.w	r3, r3, #6
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	bf14      	ite	ne
 80076e6:	2500      	movne	r5, #0
 80076e8:	6833      	ldreq	r3, [r6, #0]
 80076ea:	f04f 0600 	mov.w	r6, #0
 80076ee:	bf08      	it	eq
 80076f0:	68e5      	ldreq	r5, [r4, #12]
 80076f2:	f104 041a 	add.w	r4, r4, #26
 80076f6:	bf08      	it	eq
 80076f8:	1aed      	subeq	r5, r5, r3
 80076fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076fe:	bf08      	it	eq
 8007700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007704:	4293      	cmp	r3, r2
 8007706:	bfc4      	itt	gt
 8007708:	1a9b      	subgt	r3, r3, r2
 800770a:	18ed      	addgt	r5, r5, r3
 800770c:	42b5      	cmp	r5, r6
 800770e:	d11a      	bne.n	8007746 <_printf_common+0xd2>
 8007710:	2000      	movs	r0, #0
 8007712:	e008      	b.n	8007726 <_printf_common+0xb2>
 8007714:	2301      	movs	r3, #1
 8007716:	4652      	mov	r2, sl
 8007718:	4649      	mov	r1, r9
 800771a:	4638      	mov	r0, r7
 800771c:	47c0      	blx	r8
 800771e:	3001      	adds	r0, #1
 8007720:	d103      	bne.n	800772a <_printf_common+0xb6>
 8007722:	f04f 30ff 	mov.w	r0, #4294967295
 8007726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772a:	3501      	adds	r5, #1
 800772c:	e7c1      	b.n	80076b2 <_printf_common+0x3e>
 800772e:	2030      	movs	r0, #48	; 0x30
 8007730:	18e1      	adds	r1, r4, r3
 8007732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800773c:	4422      	add	r2, r4
 800773e:	3302      	adds	r3, #2
 8007740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007744:	e7c2      	b.n	80076cc <_printf_common+0x58>
 8007746:	2301      	movs	r3, #1
 8007748:	4622      	mov	r2, r4
 800774a:	4649      	mov	r1, r9
 800774c:	4638      	mov	r0, r7
 800774e:	47c0      	blx	r8
 8007750:	3001      	adds	r0, #1
 8007752:	d0e6      	beq.n	8007722 <_printf_common+0xae>
 8007754:	3601      	adds	r6, #1
 8007756:	e7d9      	b.n	800770c <_printf_common+0x98>

08007758 <_printf_i>:
 8007758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	7e0f      	ldrb	r7, [r1, #24]
 800775e:	4691      	mov	r9, r2
 8007760:	2f78      	cmp	r7, #120	; 0x78
 8007762:	4680      	mov	r8, r0
 8007764:	460c      	mov	r4, r1
 8007766:	469a      	mov	sl, r3
 8007768:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800776a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800776e:	d807      	bhi.n	8007780 <_printf_i+0x28>
 8007770:	2f62      	cmp	r7, #98	; 0x62
 8007772:	d80a      	bhi.n	800778a <_printf_i+0x32>
 8007774:	2f00      	cmp	r7, #0
 8007776:	f000 80d5 	beq.w	8007924 <_printf_i+0x1cc>
 800777a:	2f58      	cmp	r7, #88	; 0x58
 800777c:	f000 80c1 	beq.w	8007902 <_printf_i+0x1aa>
 8007780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007788:	e03a      	b.n	8007800 <_printf_i+0xa8>
 800778a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800778e:	2b15      	cmp	r3, #21
 8007790:	d8f6      	bhi.n	8007780 <_printf_i+0x28>
 8007792:	a101      	add	r1, pc, #4	; (adr r1, 8007798 <_printf_i+0x40>)
 8007794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007798:	080077f1 	.word	0x080077f1
 800779c:	08007805 	.word	0x08007805
 80077a0:	08007781 	.word	0x08007781
 80077a4:	08007781 	.word	0x08007781
 80077a8:	08007781 	.word	0x08007781
 80077ac:	08007781 	.word	0x08007781
 80077b0:	08007805 	.word	0x08007805
 80077b4:	08007781 	.word	0x08007781
 80077b8:	08007781 	.word	0x08007781
 80077bc:	08007781 	.word	0x08007781
 80077c0:	08007781 	.word	0x08007781
 80077c4:	0800790b 	.word	0x0800790b
 80077c8:	08007831 	.word	0x08007831
 80077cc:	080078c5 	.word	0x080078c5
 80077d0:	08007781 	.word	0x08007781
 80077d4:	08007781 	.word	0x08007781
 80077d8:	0800792d 	.word	0x0800792d
 80077dc:	08007781 	.word	0x08007781
 80077e0:	08007831 	.word	0x08007831
 80077e4:	08007781 	.word	0x08007781
 80077e8:	08007781 	.word	0x08007781
 80077ec:	080078cd 	.word	0x080078cd
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	1d1a      	adds	r2, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	602a      	str	r2, [r5, #0]
 80077f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007800:	2301      	movs	r3, #1
 8007802:	e0a0      	b.n	8007946 <_printf_i+0x1ee>
 8007804:	6820      	ldr	r0, [r4, #0]
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	0607      	lsls	r7, r0, #24
 800780a:	f103 0104 	add.w	r1, r3, #4
 800780e:	6029      	str	r1, [r5, #0]
 8007810:	d501      	bpl.n	8007816 <_printf_i+0xbe>
 8007812:	681e      	ldr	r6, [r3, #0]
 8007814:	e003      	b.n	800781e <_printf_i+0xc6>
 8007816:	0646      	lsls	r6, r0, #25
 8007818:	d5fb      	bpl.n	8007812 <_printf_i+0xba>
 800781a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800781e:	2e00      	cmp	r6, #0
 8007820:	da03      	bge.n	800782a <_printf_i+0xd2>
 8007822:	232d      	movs	r3, #45	; 0x2d
 8007824:	4276      	negs	r6, r6
 8007826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800782a:	230a      	movs	r3, #10
 800782c:	4859      	ldr	r0, [pc, #356]	; (8007994 <_printf_i+0x23c>)
 800782e:	e012      	b.n	8007856 <_printf_i+0xfe>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	6820      	ldr	r0, [r4, #0]
 8007834:	1d19      	adds	r1, r3, #4
 8007836:	6029      	str	r1, [r5, #0]
 8007838:	0605      	lsls	r5, r0, #24
 800783a:	d501      	bpl.n	8007840 <_printf_i+0xe8>
 800783c:	681e      	ldr	r6, [r3, #0]
 800783e:	e002      	b.n	8007846 <_printf_i+0xee>
 8007840:	0641      	lsls	r1, r0, #25
 8007842:	d5fb      	bpl.n	800783c <_printf_i+0xe4>
 8007844:	881e      	ldrh	r6, [r3, #0]
 8007846:	2f6f      	cmp	r7, #111	; 0x6f
 8007848:	bf0c      	ite	eq
 800784a:	2308      	moveq	r3, #8
 800784c:	230a      	movne	r3, #10
 800784e:	4851      	ldr	r0, [pc, #324]	; (8007994 <_printf_i+0x23c>)
 8007850:	2100      	movs	r1, #0
 8007852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007856:	6865      	ldr	r5, [r4, #4]
 8007858:	2d00      	cmp	r5, #0
 800785a:	bfa8      	it	ge
 800785c:	6821      	ldrge	r1, [r4, #0]
 800785e:	60a5      	str	r5, [r4, #8]
 8007860:	bfa4      	itt	ge
 8007862:	f021 0104 	bicge.w	r1, r1, #4
 8007866:	6021      	strge	r1, [r4, #0]
 8007868:	b90e      	cbnz	r6, 800786e <_printf_i+0x116>
 800786a:	2d00      	cmp	r5, #0
 800786c:	d04b      	beq.n	8007906 <_printf_i+0x1ae>
 800786e:	4615      	mov	r5, r2
 8007870:	fbb6 f1f3 	udiv	r1, r6, r3
 8007874:	fb03 6711 	mls	r7, r3, r1, r6
 8007878:	5dc7      	ldrb	r7, [r0, r7]
 800787a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800787e:	4637      	mov	r7, r6
 8007880:	42bb      	cmp	r3, r7
 8007882:	460e      	mov	r6, r1
 8007884:	d9f4      	bls.n	8007870 <_printf_i+0x118>
 8007886:	2b08      	cmp	r3, #8
 8007888:	d10b      	bne.n	80078a2 <_printf_i+0x14a>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	07de      	lsls	r6, r3, #31
 800788e:	d508      	bpl.n	80078a2 <_printf_i+0x14a>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6861      	ldr	r1, [r4, #4]
 8007894:	4299      	cmp	r1, r3
 8007896:	bfde      	ittt	le
 8007898:	2330      	movle	r3, #48	; 0x30
 800789a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800789e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078a2:	1b52      	subs	r2, r2, r5
 80078a4:	6122      	str	r2, [r4, #16]
 80078a6:	464b      	mov	r3, r9
 80078a8:	4621      	mov	r1, r4
 80078aa:	4640      	mov	r0, r8
 80078ac:	f8cd a000 	str.w	sl, [sp]
 80078b0:	aa03      	add	r2, sp, #12
 80078b2:	f7ff fedf 	bl	8007674 <_printf_common>
 80078b6:	3001      	adds	r0, #1
 80078b8:	d14a      	bne.n	8007950 <_printf_i+0x1f8>
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	b004      	add	sp, #16
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	f043 0320 	orr.w	r3, r3, #32
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	2778      	movs	r7, #120	; 0x78
 80078ce:	4832      	ldr	r0, [pc, #200]	; (8007998 <_printf_i+0x240>)
 80078d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	6829      	ldr	r1, [r5, #0]
 80078d8:	061f      	lsls	r7, r3, #24
 80078da:	f851 6b04 	ldr.w	r6, [r1], #4
 80078de:	d402      	bmi.n	80078e6 <_printf_i+0x18e>
 80078e0:	065f      	lsls	r7, r3, #25
 80078e2:	bf48      	it	mi
 80078e4:	b2b6      	uxthmi	r6, r6
 80078e6:	07df      	lsls	r7, r3, #31
 80078e8:	bf48      	it	mi
 80078ea:	f043 0320 	orrmi.w	r3, r3, #32
 80078ee:	6029      	str	r1, [r5, #0]
 80078f0:	bf48      	it	mi
 80078f2:	6023      	strmi	r3, [r4, #0]
 80078f4:	b91e      	cbnz	r6, 80078fe <_printf_i+0x1a6>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	f023 0320 	bic.w	r3, r3, #32
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	2310      	movs	r3, #16
 8007900:	e7a6      	b.n	8007850 <_printf_i+0xf8>
 8007902:	4824      	ldr	r0, [pc, #144]	; (8007994 <_printf_i+0x23c>)
 8007904:	e7e4      	b.n	80078d0 <_printf_i+0x178>
 8007906:	4615      	mov	r5, r2
 8007908:	e7bd      	b.n	8007886 <_printf_i+0x12e>
 800790a:	682b      	ldr	r3, [r5, #0]
 800790c:	6826      	ldr	r6, [r4, #0]
 800790e:	1d18      	adds	r0, r3, #4
 8007910:	6961      	ldr	r1, [r4, #20]
 8007912:	6028      	str	r0, [r5, #0]
 8007914:	0635      	lsls	r5, r6, #24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	d501      	bpl.n	800791e <_printf_i+0x1c6>
 800791a:	6019      	str	r1, [r3, #0]
 800791c:	e002      	b.n	8007924 <_printf_i+0x1cc>
 800791e:	0670      	lsls	r0, r6, #25
 8007920:	d5fb      	bpl.n	800791a <_printf_i+0x1c2>
 8007922:	8019      	strh	r1, [r3, #0]
 8007924:	2300      	movs	r3, #0
 8007926:	4615      	mov	r5, r2
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	e7bc      	b.n	80078a6 <_printf_i+0x14e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	2100      	movs	r1, #0
 8007930:	1d1a      	adds	r2, r3, #4
 8007932:	602a      	str	r2, [r5, #0]
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	4628      	mov	r0, r5
 800793a:	f000 f859 	bl	80079f0 <memchr>
 800793e:	b108      	cbz	r0, 8007944 <_printf_i+0x1ec>
 8007940:	1b40      	subs	r0, r0, r5
 8007942:	6060      	str	r0, [r4, #4]
 8007944:	6863      	ldr	r3, [r4, #4]
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	2300      	movs	r3, #0
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794e:	e7aa      	b.n	80078a6 <_printf_i+0x14e>
 8007950:	462a      	mov	r2, r5
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	47d0      	blx	sl
 800795a:	3001      	adds	r0, #1
 800795c:	d0ad      	beq.n	80078ba <_printf_i+0x162>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	079b      	lsls	r3, r3, #30
 8007962:	d413      	bmi.n	800798c <_printf_i+0x234>
 8007964:	68e0      	ldr	r0, [r4, #12]
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	4298      	cmp	r0, r3
 800796a:	bfb8      	it	lt
 800796c:	4618      	movlt	r0, r3
 800796e:	e7a6      	b.n	80078be <_printf_i+0x166>
 8007970:	2301      	movs	r3, #1
 8007972:	4632      	mov	r2, r6
 8007974:	4649      	mov	r1, r9
 8007976:	4640      	mov	r0, r8
 8007978:	47d0      	blx	sl
 800797a:	3001      	adds	r0, #1
 800797c:	d09d      	beq.n	80078ba <_printf_i+0x162>
 800797e:	3501      	adds	r5, #1
 8007980:	68e3      	ldr	r3, [r4, #12]
 8007982:	9903      	ldr	r1, [sp, #12]
 8007984:	1a5b      	subs	r3, r3, r1
 8007986:	42ab      	cmp	r3, r5
 8007988:	dcf2      	bgt.n	8007970 <_printf_i+0x218>
 800798a:	e7eb      	b.n	8007964 <_printf_i+0x20c>
 800798c:	2500      	movs	r5, #0
 800798e:	f104 0619 	add.w	r6, r4, #25
 8007992:	e7f5      	b.n	8007980 <_printf_i+0x228>
 8007994:	08007caf 	.word	0x08007caf
 8007998:	08007cc0 	.word	0x08007cc0

0800799c <memmove>:
 800799c:	4288      	cmp	r0, r1
 800799e:	b510      	push	{r4, lr}
 80079a0:	eb01 0402 	add.w	r4, r1, r2
 80079a4:	d902      	bls.n	80079ac <memmove+0x10>
 80079a6:	4284      	cmp	r4, r0
 80079a8:	4623      	mov	r3, r4
 80079aa:	d807      	bhi.n	80079bc <memmove+0x20>
 80079ac:	1e43      	subs	r3, r0, #1
 80079ae:	42a1      	cmp	r1, r4
 80079b0:	d008      	beq.n	80079c4 <memmove+0x28>
 80079b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ba:	e7f8      	b.n	80079ae <memmove+0x12>
 80079bc:	4601      	mov	r1, r0
 80079be:	4402      	add	r2, r0
 80079c0:	428a      	cmp	r2, r1
 80079c2:	d100      	bne.n	80079c6 <memmove+0x2a>
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079ce:	e7f7      	b.n	80079c0 <memmove+0x24>

080079d0 <_sbrk_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	2300      	movs	r3, #0
 80079d4:	4d05      	ldr	r5, [pc, #20]	; (80079ec <_sbrk_r+0x1c>)
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	f7fb fca4 	bl	8003328 <_sbrk>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_sbrk_r+0x1a>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_sbrk_r+0x1a>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	200026ec 	.word	0x200026ec

080079f0 <memchr>:
 80079f0:	4603      	mov	r3, r0
 80079f2:	b510      	push	{r4, lr}
 80079f4:	b2c9      	uxtb	r1, r1
 80079f6:	4402      	add	r2, r0
 80079f8:	4293      	cmp	r3, r2
 80079fa:	4618      	mov	r0, r3
 80079fc:	d101      	bne.n	8007a02 <memchr+0x12>
 80079fe:	2000      	movs	r0, #0
 8007a00:	e003      	b.n	8007a0a <memchr+0x1a>
 8007a02:	7804      	ldrb	r4, [r0, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	428c      	cmp	r4, r1
 8007a08:	d1f6      	bne.n	80079f8 <memchr+0x8>
 8007a0a:	bd10      	pop	{r4, pc}

08007a0c <memcpy>:
 8007a0c:	440a      	add	r2, r1
 8007a0e:	4291      	cmp	r1, r2
 8007a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a14:	d100      	bne.n	8007a18 <memcpy+0xc>
 8007a16:	4770      	bx	lr
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a1e:	4291      	cmp	r1, r2
 8007a20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a24:	d1f9      	bne.n	8007a1a <memcpy+0xe>
 8007a26:	bd10      	pop	{r4, pc}

08007a28 <_realloc_r>:
 8007a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	4614      	mov	r4, r2
 8007a30:	460e      	mov	r6, r1
 8007a32:	b921      	cbnz	r1, 8007a3e <_realloc_r+0x16>
 8007a34:	4611      	mov	r1, r2
 8007a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3a:	f7ff bc37 	b.w	80072ac <_malloc_r>
 8007a3e:	b92a      	cbnz	r2, 8007a4c <_realloc_r+0x24>
 8007a40:	f7ff fbcc 	bl	80071dc <_free_r>
 8007a44:	4625      	mov	r5, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a4c:	f000 f81b 	bl	8007a86 <_malloc_usable_size_r>
 8007a50:	4284      	cmp	r4, r0
 8007a52:	4607      	mov	r7, r0
 8007a54:	d802      	bhi.n	8007a5c <_realloc_r+0x34>
 8007a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a5a:	d812      	bhi.n	8007a82 <_realloc_r+0x5a>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f7ff fc24 	bl	80072ac <_malloc_r>
 8007a64:	4605      	mov	r5, r0
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d0ed      	beq.n	8007a46 <_realloc_r+0x1e>
 8007a6a:	42bc      	cmp	r4, r7
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4631      	mov	r1, r6
 8007a70:	bf28      	it	cs
 8007a72:	463a      	movcs	r2, r7
 8007a74:	f7ff ffca 	bl	8007a0c <memcpy>
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	f7ff fbae 	bl	80071dc <_free_r>
 8007a80:	e7e1      	b.n	8007a46 <_realloc_r+0x1e>
 8007a82:	4635      	mov	r5, r6
 8007a84:	e7df      	b.n	8007a46 <_realloc_r+0x1e>

08007a86 <_malloc_usable_size_r>:
 8007a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a8a:	1f18      	subs	r0, r3, #4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bfbc      	itt	lt
 8007a90:	580b      	ldrlt	r3, [r1, r0]
 8007a92:	18c0      	addlt	r0, r0, r3
 8007a94:	4770      	bx	lr
	...

08007a98 <round>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a9e:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8007aa2:	2a13      	cmp	r2, #19
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	dc18      	bgt.n	8007ade <round+0x46>
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	da09      	bge.n	8007ac4 <round+0x2c>
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007ab6:	d103      	bne.n	8007ac0 <round+0x28>
 8007ab8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007abc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	e029      	b.n	8007b18 <round+0x80>
 8007ac4:	4816      	ldr	r0, [pc, #88]	; (8007b20 <round+0x88>)
 8007ac6:	4110      	asrs	r0, r2
 8007ac8:	4001      	ands	r1, r0
 8007aca:	4329      	orrs	r1, r5
 8007acc:	d011      	beq.n	8007af2 <round+0x5a>
 8007ace:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007ad2:	fa41 f202 	asr.w	r2, r1, r2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	ea23 0300 	bic.w	r3, r3, r0
 8007adc:	e7f0      	b.n	8007ac0 <round+0x28>
 8007ade:	2a33      	cmp	r2, #51	; 0x33
 8007ae0:	dd0a      	ble.n	8007af8 <round+0x60>
 8007ae2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007ae6:	d104      	bne.n	8007af2 <round+0x5a>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	f7f8 fb35 	bl	8000158 <__adddf3>
 8007aee:	4605      	mov	r5, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	4628      	mov	r0, r5
 8007af4:	4621      	mov	r1, r4
 8007af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b00:	40f8      	lsrs	r0, r7
 8007b02:	4228      	tst	r0, r5
 8007b04:	d0f5      	beq.n	8007af2 <round+0x5a>
 8007b06:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	408a      	lsls	r2, r1
 8007b0e:	1952      	adds	r2, r2, r5
 8007b10:	bf28      	it	cs
 8007b12:	3301      	addcs	r3, #1
 8007b14:	ea22 0200 	bic.w	r2, r2, r0
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	e7e7      	b.n	8007aee <round+0x56>
 8007b1e:	bf00      	nop
 8007b20:	000fffff 	.word	0x000fffff

08007b24 <_init>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr

08007b30 <_fini>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr
