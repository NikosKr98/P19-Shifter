
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007340  08007340  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007340  08007340  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007340  08007340  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002534  2000000c  08007354  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002540  08007354  00022540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133b5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dbb  00000000  00000000  0003342d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  000361e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d06  00000000  00000000  000372a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fd5  00000000  00000000  00037fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014786  00000000  00000000  00051f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094100  00000000  00000000  00066701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004824  00000000  00000000  000fa804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ff028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080071e4 	.word	0x080071e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080071e4 	.word	0x080071e4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_frsub>:
 8000a1c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a20:	e002      	b.n	8000a28 <__addsf3>
 8000a22:	bf00      	nop

08000a24 <__aeabi_fsub>:
 8000a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a28 <__addsf3>:
 8000a28:	0042      	lsls	r2, r0, #1
 8000a2a:	bf1f      	itttt	ne
 8000a2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a30:	ea92 0f03 	teqne	r2, r3
 8000a34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3c:	d06a      	beq.n	8000b14 <__addsf3+0xec>
 8000a3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a46:	bfc1      	itttt	gt
 8000a48:	18d2      	addgt	r2, r2, r3
 8000a4a:	4041      	eorgt	r1, r0
 8000a4c:	4048      	eorgt	r0, r1
 8000a4e:	4041      	eorgt	r1, r0
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	2b19      	cmp	r3, #25
 8000a56:	bf88      	it	hi
 8000a58:	4770      	bxhi	lr
 8000a5a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a6e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a72:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a76:	bf18      	it	ne
 8000a78:	4249      	negne	r1, r1
 8000a7a:	ea92 0f03 	teq	r2, r3
 8000a7e:	d03f      	beq.n	8000b00 <__addsf3+0xd8>
 8000a80:	f1a2 0201 	sub.w	r2, r2, #1
 8000a84:	fa41 fc03 	asr.w	ip, r1, r3
 8000a88:	eb10 000c 	adds.w	r0, r0, ip
 8000a8c:	f1c3 0320 	rsb	r3, r3, #32
 8000a90:	fa01 f103 	lsl.w	r1, r1, r3
 8000a94:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__addsf3+0x78>
 8000a9a:	4249      	negs	r1, r1
 8000a9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aa0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aa4:	d313      	bcc.n	8000ace <__addsf3+0xa6>
 8000aa6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aaa:	d306      	bcc.n	8000aba <__addsf3+0x92>
 8000aac:	0840      	lsrs	r0, r0, #1
 8000aae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ab2:	f102 0201 	add.w	r2, r2, #1
 8000ab6:	2afe      	cmp	r2, #254	; 0xfe
 8000ab8:	d251      	bcs.n	8000b5e <__addsf3+0x136>
 8000aba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000abe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ac2:	bf08      	it	eq
 8000ac4:	f020 0001 	biceq.w	r0, r0, #1
 8000ac8:	ea40 0003 	orr.w	r0, r0, r3
 8000acc:	4770      	bx	lr
 8000ace:	0049      	lsls	r1, r1, #1
 8000ad0:	eb40 0000 	adc.w	r0, r0, r0
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000adc:	d2ed      	bcs.n	8000aba <__addsf3+0x92>
 8000ade:	fab0 fc80 	clz	ip, r0
 8000ae2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ae6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aee:	bfaa      	itet	ge
 8000af0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000af4:	4252      	neglt	r2, r2
 8000af6:	4318      	orrge	r0, r3
 8000af8:	bfbc      	itt	lt
 8000afa:	40d0      	lsrlt	r0, r2
 8000afc:	4318      	orrlt	r0, r3
 8000afe:	4770      	bx	lr
 8000b00:	f092 0f00 	teq	r2, #0
 8000b04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b08:	bf06      	itte	eq
 8000b0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b0e:	3201      	addeq	r2, #1
 8000b10:	3b01      	subne	r3, #1
 8000b12:	e7b5      	b.n	8000a80 <__addsf3+0x58>
 8000b14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b1c:	bf18      	it	ne
 8000b1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b22:	d021      	beq.n	8000b68 <__addsf3+0x140>
 8000b24:	ea92 0f03 	teq	r2, r3
 8000b28:	d004      	beq.n	8000b34 <__addsf3+0x10c>
 8000b2a:	f092 0f00 	teq	r2, #0
 8000b2e:	bf08      	it	eq
 8000b30:	4608      	moveq	r0, r1
 8000b32:	4770      	bx	lr
 8000b34:	ea90 0f01 	teq	r0, r1
 8000b38:	bf1c      	itt	ne
 8000b3a:	2000      	movne	r0, #0
 8000b3c:	4770      	bxne	lr
 8000b3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b42:	d104      	bne.n	8000b4e <__addsf3+0x126>
 8000b44:	0040      	lsls	r0, r0, #1
 8000b46:	bf28      	it	cs
 8000b48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	4770      	bx	lr
 8000b4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b52:	bf3c      	itt	cc
 8000b54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bxcc	lr
 8000b5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	4770      	bx	lr
 8000b68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b6c:	bf16      	itet	ne
 8000b6e:	4608      	movne	r0, r1
 8000b70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b74:	4601      	movne	r1, r0
 8000b76:	0242      	lsls	r2, r0, #9
 8000b78:	bf06      	itte	eq
 8000b7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b7e:	ea90 0f01 	teqeq	r0, r1
 8000b82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_ui2f>:
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	e004      	b.n	8000b98 <__aeabi_i2f+0x8>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_i2f>:
 8000b90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	bf48      	it	mi
 8000b96:	4240      	negmi	r0, r0
 8000b98:	ea5f 0c00 	movs.w	ip, r0
 8000b9c:	bf08      	it	eq
 8000b9e:	4770      	bxeq	lr
 8000ba0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	e01c      	b.n	8000be6 <__aeabi_l2f+0x2a>

08000bac <__aeabi_ul2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <__aeabi_l2f+0x14>
 8000bba:	bf00      	nop

08000bbc <__aeabi_l2f>:
 8000bbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc0:	bf08      	it	eq
 8000bc2:	4770      	bxeq	lr
 8000bc4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc8:	d502      	bpl.n	8000bd0 <__aeabi_l2f+0x14>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	ea5f 0c01 	movs.w	ip, r1
 8000bd4:	bf02      	ittt	eq
 8000bd6:	4684      	moveq	ip, r0
 8000bd8:	4601      	moveq	r1, r0
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000be0:	bf08      	it	eq
 8000be2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000be6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bea:	fabc f28c 	clz	r2, ip
 8000bee:	3a08      	subs	r2, #8
 8000bf0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bf4:	db10      	blt.n	8000c18 <__aeabi_l2f+0x5c>
 8000bf6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f102 0220 	add.w	r2, r2, #32
 8000c1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c28:	fa21 f202 	lsr.w	r2, r1, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_fmul>:
 8000c38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c40:	bf1e      	ittt	ne
 8000c42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c46:	ea92 0f0c 	teqne	r2, ip
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d06f      	beq.n	8000d30 <__aeabi_fmul+0xf8>
 8000c50:	441a      	add	r2, r3
 8000c52:	ea80 0c01 	eor.w	ip, r0, r1
 8000c56:	0240      	lsls	r0, r0, #9
 8000c58:	bf18      	it	ne
 8000c5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c5e:	d01e      	beq.n	8000c9e <__aeabi_fmul+0x66>
 8000c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c78:	bf3e      	ittt	cc
 8000c7a:	0049      	lslcc	r1, r1, #1
 8000c7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c80:	005b      	lslcc	r3, r3, #1
 8000c82:	ea40 0001 	orr.w	r0, r0, r1
 8000c86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c8a:	2afd      	cmp	r2, #253	; 0xfd
 8000c8c:	d81d      	bhi.n	8000cca <__aeabi_fmul+0x92>
 8000c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	4770      	bx	lr
 8000c9e:	f090 0f00 	teq	r0, #0
 8000ca2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca6:	bf08      	it	eq
 8000ca8:	0249      	lsleq	r1, r1, #9
 8000caa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cb2:	3a7f      	subs	r2, #127	; 0x7f
 8000cb4:	bfc2      	ittt	gt
 8000cb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cbe:	4770      	bxgt	lr
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	dc5d      	bgt.n	8000d88 <__aeabi_fmul+0x150>
 8000ccc:	f112 0f19 	cmn.w	r2, #25
 8000cd0:	bfdc      	itt	le
 8000cd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cd6:	4770      	bxle	lr
 8000cd8:	f1c2 0200 	rsb	r2, r2, #0
 8000cdc:	0041      	lsls	r1, r0, #1
 8000cde:	fa21 f102 	lsr.w	r1, r1, r2
 8000ce2:	f1c2 0220 	rsb	r2, r2, #32
 8000ce6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cee:	f140 0000 	adc.w	r0, r0, #0
 8000cf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cf6:	bf08      	it	eq
 8000cf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cfc:	4770      	bx	lr
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d06:	bf02      	ittt	eq
 8000d08:	0040      	lsleq	r0, r0, #1
 8000d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d0e:	3a01      	subeq	r2, #1
 8000d10:	d0f9      	beq.n	8000d06 <__aeabi_fmul+0xce>
 8000d12:	ea40 000c 	orr.w	r0, r0, ip
 8000d16:	f093 0f00 	teq	r3, #0
 8000d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0049      	lsleq	r1, r1, #1
 8000d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d26:	3b01      	subeq	r3, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xe6>
 8000d2a:	ea41 010c 	orr.w	r1, r1, ip
 8000d2e:	e78f      	b.n	8000c50 <__aeabi_fmul+0x18>
 8000d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d34:	ea92 0f0c 	teq	r2, ip
 8000d38:	bf18      	it	ne
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d00a      	beq.n	8000d56 <__aeabi_fmul+0x11e>
 8000d40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d44:	bf18      	it	ne
 8000d46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	d1d8      	bne.n	8000cfe <__aeabi_fmul+0xc6>
 8000d4c:	ea80 0001 	eor.w	r0, r0, r1
 8000d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d54:	4770      	bx	lr
 8000d56:	f090 0f00 	teq	r0, #0
 8000d5a:	bf17      	itett	ne
 8000d5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d60:	4608      	moveq	r0, r1
 8000d62:	f091 0f00 	teqne	r1, #0
 8000d66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d6a:	d014      	beq.n	8000d96 <__aeabi_fmul+0x15e>
 8000d6c:	ea92 0f0c 	teq	r2, ip
 8000d70:	d101      	bne.n	8000d76 <__aeabi_fmul+0x13e>
 8000d72:	0242      	lsls	r2, r0, #9
 8000d74:	d10f      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d76:	ea93 0f0c 	teq	r3, ip
 8000d7a:	d103      	bne.n	8000d84 <__aeabi_fmul+0x14c>
 8000d7c:	024b      	lsls	r3, r1, #9
 8000d7e:	bf18      	it	ne
 8000d80:	4608      	movne	r0, r1
 8000d82:	d108      	bne.n	8000d96 <__aeabi_fmul+0x15e>
 8000d84:	ea80 0001 	eor.w	r0, r0, r1
 8000d88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d9e:	4770      	bx	lr

08000da0 <__aeabi_fdiv>:
 8000da0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da8:	bf1e      	ittt	ne
 8000daa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dae:	ea92 0f0c 	teqne	r2, ip
 8000db2:	ea93 0f0c 	teqne	r3, ip
 8000db6:	d069      	beq.n	8000e8c <__aeabi_fdiv+0xec>
 8000db8:	eba2 0203 	sub.w	r2, r2, r3
 8000dbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc0:	0249      	lsls	r1, r1, #9
 8000dc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dc6:	d037      	beq.n	8000e38 <__aeabi_fdiv+0x98>
 8000dc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dcc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	bf38      	it	cc
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000de2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000de6:	428b      	cmp	r3, r1
 8000de8:	bf24      	itt	cs
 8000dea:	1a5b      	subcs	r3, r3, r1
 8000dec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000df0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000df4:	bf24      	itt	cs
 8000df6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e02:	bf24      	itt	cs
 8000e04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e10:	bf24      	itt	cs
 8000e12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	bf18      	it	ne
 8000e1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e22:	d1e0      	bne.n	8000de6 <__aeabi_fdiv+0x46>
 8000e24:	2afd      	cmp	r2, #253	; 0xfd
 8000e26:	f63f af50 	bhi.w	8000cca <__aeabi_fmul+0x92>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e40:	327f      	adds	r2, #127	; 0x7f
 8000e42:	bfc2      	ittt	gt
 8000e44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4c:	4770      	bxgt	lr
 8000e4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	3a01      	subs	r2, #1
 8000e58:	e737      	b.n	8000cca <__aeabi_fmul+0x92>
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fdiv+0xc2>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xda>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e795      	b.n	8000db8 <__aeabi_fdiv+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d108      	bne.n	8000ea8 <__aeabi_fdiv+0x108>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	f47f af7d 	bne.w	8000d96 <__aeabi_fmul+0x15e>
 8000e9c:	ea93 0f0c 	teq	r3, ip
 8000ea0:	f47f af70 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e776      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fdiv+0x118>
 8000eae:	024b      	lsls	r3, r1, #9
 8000eb0:	f43f af4c 	beq.w	8000d4c <__aeabi_fmul+0x114>
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	e76e      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000eb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ebc:	bf18      	it	ne
 8000ebe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	d1ca      	bne.n	8000e5a <__aeabi_fdiv+0xba>
 8000ec4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec8:	f47f af5c 	bne.w	8000d84 <__aeabi_fmul+0x14c>
 8000ecc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ed0:	f47f af3c 	bne.w	8000d4c <__aeabi_fmul+0x114>
 8000ed4:	e75f      	b.n	8000d96 <__aeabi_fmul+0x15e>
 8000ed6:	bf00      	nop

08000ed8 <__gesf2>:
 8000ed8:	f04f 3cff 	mov.w	ip, #4294967295
 8000edc:	e006      	b.n	8000eec <__cmpsf2+0x4>
 8000ede:	bf00      	nop

08000ee0 <__lesf2>:
 8000ee0:	f04f 0c01 	mov.w	ip, #1
 8000ee4:	e002      	b.n	8000eec <__cmpsf2+0x4>
 8000ee6:	bf00      	nop

08000ee8 <__cmpsf2>:
 8000ee8:	f04f 0c01 	mov.w	ip, #1
 8000eec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	bf18      	it	ne
 8000efe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f02:	d011      	beq.n	8000f28 <__cmpsf2+0x40>
 8000f04:	b001      	add	sp, #4
 8000f06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f0a:	bf18      	it	ne
 8000f0c:	ea90 0f01 	teqne	r0, r1
 8000f10:	bf58      	it	pl
 8000f12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f16:	bf88      	it	hi
 8000f18:	17c8      	asrhi	r0, r1, #31
 8000f1a:	bf38      	it	cc
 8000f1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f20:	bf18      	it	ne
 8000f22:	f040 0001 	orrne.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	d102      	bne.n	8000f34 <__cmpsf2+0x4c>
 8000f2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f32:	d105      	bne.n	8000f40 <__cmpsf2+0x58>
 8000f34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f38:	d1e4      	bne.n	8000f04 <__cmpsf2+0x1c>
 8000f3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f3e:	d0e1      	beq.n	8000f04 <__cmpsf2+0x1c>
 8000f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__aeabi_cfrcmple>:
 8000f48:	4684      	mov	ip, r0
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	4661      	mov	r1, ip
 8000f4e:	e7ff      	b.n	8000f50 <__aeabi_cfcmpeq>

08000f50 <__aeabi_cfcmpeq>:
 8000f50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f52:	f7ff ffc9 	bl	8000ee8 <__cmpsf2>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	bf48      	it	mi
 8000f5a:	f110 0f00 	cmnmi.w	r0, #0
 8000f5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f60 <__aeabi_fcmpeq>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff fff4 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f68:	bf0c      	ite	eq
 8000f6a:	2001      	moveq	r0, #1
 8000f6c:	2000      	movne	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmplt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffea 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmple>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffe0 	bl	8000f50 <__aeabi_cfcmpeq>
 8000f90:	bf94      	ite	ls
 8000f92:	2001      	movls	r0, #1
 8000f94:	2000      	movhi	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmpge>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffd2 	bl	8000f48 <__aeabi_cfrcmple>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpgt>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffc8 	bl	8000f48 <__aeabi_cfrcmple>
 8000fb8:	bf34      	ite	cc
 8000fba:	2001      	movcc	r0, #1
 8000fbc:	2000      	movcs	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_f2uiz>:
 8000fc4:	0042      	lsls	r2, r0, #1
 8000fc6:	d20e      	bcs.n	8000fe6 <__aeabi_f2uiz+0x22>
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fcc:	d30b      	bcc.n	8000fe6 <__aeabi_f2uiz+0x22>
 8000fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d409      	bmi.n	8000fec <__aeabi_f2uiz+0x28>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff0:	d101      	bne.n	8000ff6 <__aeabi_f2uiz+0x32>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	d102      	bne.n	8000ffc <__aeabi_f2uiz+0x38>
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffa:	4770      	bx	lr
 8000ffc:	f04f 0000 	mov.w	r0, #0
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <InitController+0x24>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <InitController+0x28>)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	6013      	str	r3, [r2, #0]

	IDLE_Entry();
 800101a:	f000 f945 	bl	80012a8 <IDLE_Entry>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000028 	.word	0x20000028
 800102c:	2000002c 	.word	0x2000002c

08001030 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 800103a:	f002 fb5b 	bl	80036f4 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	4a92      	ldr	r2, [pc, #584]	; (800128c <Controller+0x25c>)
 8001042:	6013      	str	r3, [r2, #0]

	// ANTISTALL
		#ifdef ANTISTALL_ACTIVE

			// if the shut down is activated and we are at gear greater than neutral
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError) {
 8001044:	4b92      	ldr	r3, [pc, #584]	; (8001290 <Controller+0x260>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800104c:	2b00      	cmp	r3, #0
 800104e:	f040 8091 	bne.w	8001174 <Controller+0x144>
 8001052:	4b8f      	ldr	r3, [pc, #572]	; (8001290 <Controller+0x260>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 808a 	beq.w	8001174 <Controller+0x144>
 8001060:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <Controller+0x260>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	f040 8083 	bne.w	8001174 <Controller+0x144>
 800106e:	4b88      	ldr	r3, [pc, #544]	; (8001290 <Controller+0x260>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001076:	2b00      	cmp	r3, #0
 8001078:	d17c      	bne.n	8001174 <Controller+0x144>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 800107a:	4b86      	ldr	r3, [pc, #536]	; (8001294 <Controller+0x264>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001082:	2b02      	cmp	r3, #2
 8001084:	d03c      	beq.n	8001100 <Controller+0xd0>
 8001086:	4b82      	ldr	r3, [pc, #520]	; (8001290 <Controller+0x260>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 800108e:	461a      	mov	r2, r3
 8001090:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <Controller+0x260>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001098:	4619      	mov	r1, r3
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <Controller+0x268>)
 800109c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dc2d      	bgt.n	8001100 <Controller+0xd0>
 80010a4:	4b7a      	ldr	r3, [pc, #488]	; (8001290 <Controller+0x260>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 80010ac:	2b27      	cmp	r3, #39	; 0x27
 80010ae:	dc27      	bgt.n	8001100 <Controller+0xd0>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 80010b0:	4b78      	ldr	r3, [pc, #480]	; (8001294 <Controller+0x264>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d109      	bne.n	80010d0 <Controller+0xa0>
						MyOutputs->NAntistallState = Init;
 80010bc:	4b75      	ldr	r3, [pc, #468]	; (8001294 <Controller+0x264>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						tAntistallTimmer = HAL_GetTick();
 80010c6:	f002 fb15 	bl	80036f4 <HAL_GetTick>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a73      	ldr	r2, [pc, #460]	; (800129c <Controller+0x26c>)
 80010ce:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 80010d0:	4b70      	ldr	r3, [pc, #448]	; (8001294 <Controller+0x264>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d111      	bne.n	8001100 <Controller+0xd0>
 80010dc:	4b6f      	ldr	r3, [pc, #444]	; (800129c <Controller+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80010e4:	4b69      	ldr	r3, [pc, #420]	; (800128c <Controller+0x25c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d209      	bcs.n	8001100 <Controller+0xd0>
						MyOutputs->NAntistallState = Active;
 80010ec:	4b69      	ldr	r3, [pc, #420]	; (8001294 <Controller+0x264>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2202      	movs	r2, #2
 80010f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						MyOutputs->xClutchTargetProtection = xCLUTCH_ABSOLUTE_MAX;
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <Controller+0x264>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f640 0234 	movw	r2, #2100	; 0x834
 80010fe:	809a      	strh	r2, [r3, #4]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8001100:	4b64      	ldr	r3, [pc, #400]	; (8001294 <Controller+0x264>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001108:	2b01      	cmp	r3, #1
 800110a:	d11d      	bne.n	8001148 <Controller+0x118>
 800110c:	4b60      	ldr	r3, [pc, #384]	; (8001290 <Controller+0x260>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001114:	461a      	mov	r2, r3
 8001116:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <Controller+0x260>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800111e:	4619      	mov	r1, r3
 8001120:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <Controller+0x268>)
 8001122:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001126:	429a      	cmp	r2, r3
 8001128:	dc05      	bgt.n	8001136 <Controller+0x106>
 800112a:	4b59      	ldr	r3, [pc, #356]	; (8001290 <Controller+0x260>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8001132:	2b5f      	cmp	r3, #95	; 0x5f
 8001134:	dd08      	ble.n	8001148 <Controller+0x118>
					MyOutputs->NAntistallState = Off;
 8001136:	4b57      	ldr	r3, [pc, #348]	; (8001294 <Controller+0x264>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					MyOutputs->xClutchTargetProtection = 0;
 8001140:	4b54      	ldr	r3, [pc, #336]	; (8001294 <Controller+0x264>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	809a      	strh	r2, [r3, #4]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8001148:	4b52      	ldr	r3, [pc, #328]	; (8001294 <Controller+0x264>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001150:	2b02      	cmp	r3, #2
 8001152:	d119      	bne.n	8001188 <Controller+0x158>
 8001154:	4b4e      	ldr	r3, [pc, #312]	; (8001290 <Controller+0x260>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 800115c:	2b5f      	cmp	r3, #95	; 0x5f
 800115e:	dd13      	ble.n	8001188 <Controller+0x158>
					MyOutputs->NAntistallState = Off;
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <Controller+0x264>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					MyOutputs->xClutchTargetProtection = 0;
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <Controller+0x264>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	809a      	strh	r2, [r3, #4]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8001172:	e009      	b.n	8001188 <Controller+0x158>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <Controller+0x264>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				MyOutputs->xClutchTargetProtection = 0;
 800117e:	4b45      	ldr	r3, [pc, #276]	; (8001294 <Controller+0x264>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2200      	movs	r2, #0
 8001184:	809a      	strh	r2, [r3, #4]
 8001186:	e000      	b.n	800118a <Controller+0x15a>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8001188:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <Controller+0x260>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d114      	bne.n	80011c0 <Controller+0x190>
			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_MAX_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8001196:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <Controller+0x260>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fcf6 	bl	8000b90 <__aeabi_i2f>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <Controller+0x264>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3308      	adds	r3, #8
 80011ac:	f04f 0100 	mov.w	r1, #0
 80011b0:	9101      	str	r1, [sp, #4]
 80011b2:	f04f 0100 	mov.w	r1, #0
 80011b6:	9100      	str	r1, [sp, #0]
 80011b8:	4939      	ldr	r1, [pc, #228]	; (80012a0 <Controller+0x270>)
 80011ba:	200b      	movs	r0, #11
 80011bc:	f001 fb30 	bl	8002820 <My2DMapInterpolate>
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MAX(MyOutputs->xClutchTargetProtection, MAX((uint16_t)MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift));
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <Controller+0x264>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	899c      	ldrh	r4, [r3, #12]
 80011c6:	4b33      	ldr	r3, [pc, #204]	; (8001294 <Controller+0x264>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fef9 	bl	8000fc4 <__aeabi_f2uiz>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	42a3      	cmp	r3, r4
 80011d8:	bf38      	it	cc
 80011da:	4623      	movcc	r3, r4
 80011dc:	b299      	uxth	r1, r3
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <Controller+0x264>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	889a      	ldrh	r2, [r3, #4]
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <Controller+0x264>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	428a      	cmp	r2, r1
 80011ea:	bf38      	it	cc
 80011ec:	460a      	movcc	r2, r1
 80011ee:	b292      	uxth	r2, r2
 80011f0:	81da      	strh	r2, [r3, #14]


	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES & LEDS
		MyOutputs->BSWLEDA = MyInputs->NToggleSwitch01State;
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <Controller+0x260>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b27      	ldr	r3, [pc, #156]	; (8001294 <Controller+0x264>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f892 2079 	ldrb.w	r2, [r2, #121]	; 0x79
 80011fe:	f883 2020 	strb.w	r2, [r3, #32]
		MyOutputs->BSWLEDB = MyInputs->NToggleSwitch02State;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <Controller+0x260>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <Controller+0x264>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		MyOutputs->BSWLEDC = MyInputs->NToggleSwitch03State;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <Controller+0x260>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <Controller+0x264>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 800121e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <Controller+0x274>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d82c      	bhi.n	8001284 <Controller+0x254>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <Controller+0x200>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	08001249 	.word	0x08001249
 8001234:	08001253 	.word	0x08001253
 8001238:	0800125d 	.word	0x0800125d
 800123c:	08001267 	.word	0x08001267
 8001240:	08001271 	.word	0x08001271
 8001244:	0800127b 	.word	0x0800127b

		case IDLE_STATE:
			IDLE_Run();
 8001248:	f000 f870 	bl	800132c <IDLE_Run>
			IDLE_Event();
 800124c:	f000 f844 	bl	80012d8 <IDLE_Event>
			break;
 8001250:	e018      	b.n	8001284 <Controller+0x254>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 8001252:	f000 f8ed 	bl	8001430 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 8001256:	f000 f88b 	bl	8001370 <PRE_UPSHIFT_Event>
			break;
 800125a:	e013      	b.n	8001284 <Controller+0x254>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 800125c:	f000 f9ca 	bl	80015f4 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 8001260:	f000 f97a 	bl	8001558 <PRE_DNSHIFT_Event>
			break;
 8001264:	e00e      	b.n	8001284 <Controller+0x254>
		case SHIFTING_STATE:
			SHIFTING_Run();
 8001266:	f000 fadb 	bl	8001820 <SHIFTING_Run>
			SHIFTING_Event();
 800126a:	f000 fab3 	bl	80017d4 <SHIFTING_Event>
			break;
 800126e:	e009      	b.n	8001284 <Controller+0x254>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 8001270:	f000 fb0e 	bl	8001890 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 8001274:	f000 fb04 	bl	8001880 <POSTSHIFT_Event>
			break;
 8001278:	e004      	b.n	8001284 <Controller+0x254>
		case ERROR_STATE:
			ERROR_Run();
 800127a:	f000 fb39 	bl	80018f0 <ERROR_Run>
			ERROR_Event();
 800127e:	f000 fb25 	bl	80018cc <ERROR_Event>
			break;
 8001282:	bf00      	nop
		}

}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	20000034 	.word	0x20000034
 8001290:	20000028 	.word	0x20000028
 8001294:	2000002c 	.word	0x2000002c
 8001298:	08007254 	.word	0x08007254
 800129c:	20000044 	.word	0x20000044
 80012a0:	080071fc 	.word	0x080071fc
 80012a4:	20000030 	.word	0x20000030

080012a8 <IDLE_Entry>:


void IDLE_Entry(void) {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <IDLE_Entry+0x1c>)
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <IDLE_Entry+0x20>)
 80012b2:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <IDLE_Entry+0x1c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000030 	.word	0x20000030
 80012c8:	20000031 	.word	0x20000031

080012cc <IDLE_Exit>:
void IDLE_Exit(void) {
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <IDLE_Event>:
void IDLE_Event(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <IDLE_Event+0x50>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 f903 	bl	80024ec <CheckFaults>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <IDLE_Event+0x1e>
		IDLE_Exit();
 80012ec:	f7ff ffee 	bl	80012cc <IDLE_Exit>
		ERROR_Entry();
 80012f0:	f000 fad4 	bl	800189c <ERROR_Entry>
		return;
 80012f4:	e017      	b.n	8001326 <IDLE_Event+0x4e>
	}

	// TODO: do we need to also check controller errors here? I think no...

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <IDLE_Event+0x50>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <IDLE_Event+0x36>
        IDLE_Exit();
 8001304:	f7ff ffe2 	bl	80012cc <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8001308:	f000 f816 	bl	8001338 <PRE_UPSHIFT_Entry>
        return;
 800130c:	e00b      	b.n	8001326 <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <IDLE_Event+0x50>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <IDLE_Event+0x4e>
        IDLE_Exit();
 800131c:	f7ff ffd6 	bl	80012cc <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8001320:	f000 f8fe 	bl	8001520 <PRE_DNSHIFT_Entry>
        return;
 8001324:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000028 	.word	0x20000028

0800132c <IDLE_Run>:
void IDLE_Run(void) {
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0

}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <PRE_UPSHIFT_Entry+0x20>)
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <PRE_UPSHIFT_Entry+0x24>)
 8001342:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <PRE_UPSHIFT_Entry+0x20>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 800134a:	f002 f9d3 	bl	80036f4 <HAL_GetTick>
 800134e:	4603      	mov	r3, r0
 8001350:	4a03      	ldr	r2, [pc, #12]	; (8001360 <PRE_UPSHIFT_Entry+0x28>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000030 	.word	0x20000030
 800135c:	20000031 	.word	0x20000031
 8001360:	20000038 	.word	0x20000038

08001364 <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 8001370:	b598      	push	{r3, r4, r7, lr}
 8001372:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <PRE_UPSHIFT_Event+0xb0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f8b7 	bl	80024ec <CheckFaults>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <PRE_UPSHIFT_Event+0x1e>
		PRE_UPSHIFT_Exit();
 8001384:	f7ff ffee 	bl	8001364 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8001388:	f000 fa88 	bl	800189c <ERROR_Entry>
		return;
 800138c:	e046      	b.n	800141c <PRE_UPSHIFT_Event+0xac>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d12e      	bne.n	80013f6 <PRE_UPSHIFT_Event+0x86>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <PRE_UPSHIFT_Event+0xb0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80013a0:	4b20      	ldr	r3, [pc, #128]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3201      	adds	r2, #1
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_UPSHIFT || MyOutputs->BOverrideActuateClutchOnUpShift) {		// we check for clutch strategy during shift
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d011      	beq.n	80013da <PRE_UPSHIFT_Event+0x6a>
			MyOutputs->xClutchTargetShift = xClutchTargetUpShiftMap[MyInputs->NGear];
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <PRE_UPSHIFT_Event+0xb0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80013be:	461a      	mov	r2, r3
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <PRE_UPSHIFT_Event+0xb8>)
 80013c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b292      	uxth	r2, r2
 80013cc:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnUpShift = 0; 									// reset the strat for the next gear
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80013d8:	e003      	b.n	80013e2 <PRE_UPSHIFT_Event+0x72>
		}
		else {
			MyOutputs->xClutchTargetShift = 0;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	819a      	strh	r2, [r3, #12]
		}

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		PRE_UPSHIFT_Exit();
 80013ec:	f7ff ffba 	bl	8001364 <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 80013f0:	f000 f978 	bl	80016e4 <SHIFTING_Entry>
		return;
 80013f4:	e012      	b.n	800141c <PRE_UPSHIFT_Event+0xac>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <PRE_UPSHIFT_Event+0xb4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00d      	beq.n	800141c <PRE_UPSHIFT_Event+0xac>
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <PRE_UPSHIFT_Event+0xbc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001408:	f002 f974 	bl	80036f4 <HAL_GetTick>
 800140c:	4603      	mov	r3, r0
 800140e:	429c      	cmp	r4, r3
 8001410:	d804      	bhi.n	800141c <PRE_UPSHIFT_Event+0xac>
		PRE_UPSHIFT_Exit();
 8001412:	f7ff ffa7 	bl	8001364 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8001416:	f000 fa41 	bl	800189c <ERROR_Entry>
		return;
 800141a:	bf00      	nop
	}


}
 800141c:	bd98      	pop	{r3, r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	20000028 	.word	0x20000028
 8001424:	2000002c 	.word	0x2000002c
 8001428:	08007278 	.word	0x08007278
 800142c:	20000038 	.word	0x20000038

08001430 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <PRE_UPSHIFT_Run+0xe4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800143c:	2b00      	cmp	r3, #0
 800143e:	d113      	bne.n	8001468 <PRE_UPSHIFT_Run+0x38>
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <PRE_UPSHIFT_Run+0xe4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8001448:	2b5a      	cmp	r3, #90	; 0x5a
 800144a:	dc0d      	bgt.n	8001468 <PRE_UPSHIFT_Run+0x38>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0202 	orr.w	r2, r2, #2
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2201      	movs	r2, #1
 8001464:	705a      	strb	r2, [r3, #1]
 8001466:	e008      	b.n	800147a <PRE_UPSHIFT_Run+0x4a>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0202 	bic.w	r2, r2, #2
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift up with too low rpm
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <PRE_UPSHIFT_Run+0xe4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001482:	461a      	mov	r2, r3
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <PRE_UPSHIFT_Run+0xe4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800148c:	4619      	mov	r1, r3
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <PRE_UPSHIFT_Run+0xec>)
 8001490:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001494:	429a      	cmp	r2, r3
 8001496:	da13      	bge.n	80014c0 <PRE_UPSHIFT_Run+0x90>
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <PRE_UPSHIFT_Run+0xe4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10d      	bne.n	80014c0 <PRE_UPSHIFT_Run+0x90>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0208 	orr.w	r2, r2, #8
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2203      	movs	r2, #3
 80014bc:	705a      	strb	r2, [r3, #1]
 80014be:	e008      	b.n	80014d2 <PRE_UPSHIFT_Run+0xa2>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0208 	bic.w	r2, r2, #8
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <PRE_UPSHIFT_Run+0xe4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d90d      	bls.n	80014fa <PRE_UPSHIFT_Run+0xca>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0210 	orr.w	r2, r2, #16
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2204      	movs	r2, #4
 80014f6:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
}
 80014f8:	e008      	b.n	800150c <PRE_UPSHIFT_Run+0xdc>
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <PRE_UPSHIFT_Run+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0210 	bic.w	r2, r2, #16
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	20000028 	.word	0x20000028
 8001518:	2000002c 	.word	0x2000002c
 800151c:	08007260 	.word	0x08007260

08001520 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <PRE_DNSHIFT_Entry+0x20>)
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <PRE_DNSHIFT_Entry+0x24>)
 800152a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <PRE_DNSHIFT_Entry+0x20>)
 800152e:	2202      	movs	r2, #2
 8001530:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8001532:	f002 f8df 	bl	80036f4 <HAL_GetTick>
 8001536:	4603      	mov	r3, r0
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <PRE_DNSHIFT_Entry+0x28>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000030 	.word	0x20000030
 8001544:	20000031 	.word	0x20000031
 8001548:	20000038 	.word	0x20000038

0800154c <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 8001558:	b598      	push	{r3, r4, r7, lr}
 800155a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <PRE_DNSHIFT_Event+0x8c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 ffc3 	bl	80024ec <CheckFaults>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <PRE_DNSHIFT_Event+0x1e>
		PRE_DNSHIFT_Exit();
 800156c:	f7ff ffee 	bl	800154c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 8001570:	f000 f994 	bl	800189c <ERROR_Entry>
		return;
 8001574:	e035      	b.n	80015e2 <PRE_DNSHIFT_Event+0x8a>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <PRE_DNSHIFT_Event+0x90>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d11d      	bne.n	80015bc <PRE_DNSHIFT_Event+0x64>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <PRE_DNSHIFT_Event+0x8c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <PRE_DNSHIFT_Event+0x90>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3a01      	subs	r2, #1
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_DNSHIFT || MyOutputs->BOverrideActuateClutchOnDnShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetDnShiftMap[MyInputs->NGear];
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <PRE_DNSHIFT_Event+0x8c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800159a:	4619      	mov	r1, r3
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <PRE_DNSHIFT_Event+0x90>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <PRE_DNSHIFT_Event+0x94>)
 80015a2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80015a6:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnDnShift = 0; 									// reset the strat for the next gear
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <PRE_DNSHIFT_Event+0x90>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			MyOutputs->xClutchTargetShift = 0;
		}

		if(ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 80015b2:	f7ff ffcb 	bl	800154c <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 80015b6:	f000 f895 	bl	80016e4 <SHIFTING_Entry>
		return;
 80015ba:	e012      	b.n	80015e2 <PRE_DNSHIFT_Event+0x8a>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <PRE_DNSHIFT_Event+0x90>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00d      	beq.n	80015e2 <PRE_DNSHIFT_Event+0x8a>
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <PRE_DNSHIFT_Event+0x98>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 80015ce:	f002 f891 	bl	80036f4 <HAL_GetTick>
 80015d2:	4603      	mov	r3, r0
 80015d4:	429c      	cmp	r4, r3
 80015d6:	d804      	bhi.n	80015e2 <PRE_DNSHIFT_Event+0x8a>
		PRE_DNSHIFT_Exit();
 80015d8:	f7ff ffb8 	bl	800154c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 80015dc:	f000 f95e 	bl	800189c <ERROR_Entry>
		return;
 80015e0:	bf00      	nop
	}

}
 80015e2:	bd98      	pop	{r3, r4, r7, pc}
 80015e4:	20000028 	.word	0x20000028
 80015e8:	2000002c 	.word	0x2000002c
 80015ec:	0800728c 	.word	0x0800728c
 80015f0:	20000038 	.word	0x20000038

080015f4 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH) {	// trying to put neutral gear without clutch
 80015f8:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <PRE_DNSHIFT_Run+0xe4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d113      	bne.n	800162c <PRE_DNSHIFT_Run+0x38>
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <PRE_DNSHIFT_Run+0xe4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 800160c:	2b5a      	cmp	r3, #90	; 0x5a
 800160e:	dc0d      	bgt.n	800162c <PRE_DNSHIFT_Run+0x38>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 8001610:	4b32      	ldr	r3, [pc, #200]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0204 	orr.w	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2202      	movs	r2, #2
 8001628:	705a      	strb	r2, [r3, #1]
 800162a:	e008      	b.n	800163e <PRE_DNSHIFT_Run+0x4a>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0204 	bic.w	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift down with too high rpm
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <PRE_DNSHIFT_Run+0xe4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001646:	461a      	mov	r2, r3
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <PRE_DNSHIFT_Run+0xe4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001650:	4619      	mov	r1, r3
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <PRE_DNSHIFT_Run+0xec>)
 8001654:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001658:	429a      	cmp	r2, r3
 800165a:	dd13      	ble.n	8001684 <PRE_DNSHIFT_Run+0x90>
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <PRE_DNSHIFT_Run+0xe4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10d      	bne.n	8001684 <PRE_DNSHIFT_Run+0x90>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0220 	orr.w	r2, r2, #32
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2205      	movs	r2, #5
 8001680:	705a      	strb	r2, [r3, #1]
 8001682:	e008      	b.n	8001696 <PRE_DNSHIFT_Run+0xa2>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0220 	bic.w	r2, r2, #32
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <PRE_DNSHIFT_Run+0xe4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10d      	bne.n	80016be <PRE_DNSHIFT_Run+0xca>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2206      	movs	r2, #6
 80016ba:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }

}
 80016bc:	e008      	b.n	80016d0 <PRE_DNSHIFT_Run+0xdc>
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <PRE_DNSHIFT_Run+0xe8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	701a      	strb	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000028 	.word	0x20000028
 80016dc:	2000002c 	.word	0x2000002c
 80016e0:	0800726c 	.word	0x0800726c

080016e4 <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <SHIFTING_Entry+0xc0>)
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <SHIFTING_Entry+0xc4>)
 80016ee:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <SHIFTING_Entry+0xc0>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	701a      	strb	r2, [r3, #0]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <SHIFTING_Entry+0xc4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d11b      	bne.n	8001736 <SHIFTING_Entry+0x52>
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <SHIFTING_Entry+0xc8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001706:	461a      	mov	r2, r3
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <SHIFTING_Entry+0xcc>)
 800170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <SHIFTING_Entry+0xd0>)
 8001710:	6013      	str	r3, [r2, #0]
		NShiftRequest = Up;
 8001712:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <SHIFTING_Entry+0xd4>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <SHIFTING_Entry+0xd8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	78db      	ldrb	r3, [r3, #3]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d104      	bne.n	800172c <SHIFTING_Entry+0x48>
			MyOutputs->BDnShiftPortState = 1;
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <SHIFTING_Entry+0xd8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	749a      	strb	r2, [r3, #18]
 800172a:	e034      	b.n	8001796 <SHIFTING_Entry+0xb2>
		}
		else {									// all other upshifts are normal
			MyOutputs->BUpShiftPortState = 1;
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <SHIFTING_Entry+0xd8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	745a      	strb	r2, [r3, #17]
 8001734:	e02f      	b.n	8001796 <SHIFTING_Entry+0xb2>
		}

	}
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <SHIFTING_Entry+0xc4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d11b      	bne.n	8001776 <SHIFTING_Entry+0x92>
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear];
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <SHIFTING_Entry+0xc8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001746:	461a      	mov	r2, r3
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <SHIFTING_Entry+0xdc>)
 800174a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174e:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <SHIFTING_Entry+0xd0>)
 8001750:	6013      	str	r3, [r2, #0]
		NShiftRequest = Down;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <SHIFTING_Entry+0xd4>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <SHIFTING_Entry+0xd8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	78db      	ldrb	r3, [r3, #3]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d104      	bne.n	800176c <SHIFTING_Entry+0x88>
			MyOutputs->BUpShiftPortState = 1;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <SHIFTING_Entry+0xd8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	745a      	strb	r2, [r3, #17]
 800176a:	e014      	b.n	8001796 <SHIFTING_Entry+0xb2>
		}
		else {									// all other downshifts are normal
			MyOutputs->BDnShiftPortState = 1;
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <SHIFTING_Entry+0xd8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	749a      	strb	r2, [r3, #18]
 8001774:	e00f      	b.n	8001796 <SHIFTING_Entry+0xb2>
		}

	}
	else {
		NCurrentState = Unknown;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <SHIFTING_Entry+0xc0>)
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <SHIFTING_Entry+0xd8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <SHIFTING_Entry+0xd8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <SHIFTING_Entry+0xd8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2207      	movs	r2, #7
 8001794:	705a      	strb	r2, [r3, #1]
	}

	tShiftTimer = HAL_GetTick();
 8001796:	f001 ffad 	bl	80036f4 <HAL_GetTick>
 800179a:	4603      	mov	r3, r0
 800179c:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <SHIFTING_Entry+0xe0>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000030 	.word	0x20000030
 80017a8:	20000031 	.word	0x20000031
 80017ac:	20000028 	.word	0x20000028
 80017b0:	08007298 	.word	0x08007298
 80017b4:	20000040 	.word	0x20000040
 80017b8:	20000032 	.word	0x20000032
 80017bc:	2000002c 	.word	0x2000002c
 80017c0:	080072ac 	.word	0x080072ac
 80017c4:	2000003c 	.word	0x2000003c

080017c8 <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <SHIFTING_Event+0x3c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fe85 	bl	80024ec <CheckFaults>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <SHIFTING_Event+0x1e>
		SHIFTING_Exit();
 80017e8:	f7ff ffee 	bl	80017c8 <SHIFTING_Exit>
		ERROR_Entry();
 80017ec:	f000 f856 	bl	800189c <ERROR_Entry>
		return;
 80017f0:	e00d      	b.n	800180e <SHIFTING_Event+0x3a>
	}

	// TODO: keep checking for control errors


	if((tShiftTimer + tShifterMaxTransitTime) < tControllerTimmer) {	// the max time for the gear has expired
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <SHIFTING_Event+0x40>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <SHIFTING_Event+0x44>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	441a      	add	r2, r3
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <SHIFTING_Event+0x48>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d204      	bcs.n	800180e <SHIFTING_Event+0x3a>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 8001804:	f7ff ffe0 	bl	80017c8 <SHIFTING_Exit>
		POSTSHIFT_Entry();
 8001808:	f000 f810 	bl	800182c <POSTSHIFT_Entry>
		return;
 800180c:	bf00      	nop
	}

}
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000028 	.word	0x20000028
 8001814:	2000003c 	.word	0x2000003c
 8001818:	20000040 	.word	0x20000040
 800181c:	20000034 	.word	0x20000034

08001820 <SHIFTING_Run>:
void SHIFTING_Run(void) {
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
	// PID


	// FEED FORWARD

}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <POSTSHIFT_Entry+0x3c>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <POSTSHIFT_Entry+0x40>)
 8001836:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <POSTSHIFT_Entry+0x3c>)
 800183a:	2204      	movs	r2, #4
 800183c:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <POSTSHIFT_Entry+0x44>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	745a      	strb	r2, [r3, #17]
	MyOutputs->BDnShiftPortState = 0;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <POSTSHIFT_Entry+0x44>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2200      	movs	r2, #0
 800184c:	749a      	strb	r2, [r3, #18]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShift = 0;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <POSTSHIFT_Entry+0x44>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	819a      	strh	r2, [r3, #12]
	MyOutputs->BSparkCut = 0;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <POSTSHIFT_Entry+0x44>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000030 	.word	0x20000030
 800186c:	20000031 	.word	0x20000031
 8001870:	2000002c 	.word	0x2000002c

08001874 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

	// TODO: probably here we need to set the MyOutputs->NGear = MyInputs->NGear

}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0


	// think about the condition
	POSTSHIFT_Exit();
 8001884:	f7ff fff6 	bl	8001874 <POSTSHIFT_Exit>
	IDLE_Entry();
 8001888:	f7ff fd0e 	bl	80012a8 <IDLE_Entry>
	return;
 800188c:	bf00      	nop
	// remember return in all functions
}
 800188e:	bd80      	pop	{r7, pc}

08001890 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

	// maybe we need to spend sometime here to let the shifting system stabilize and then determine the new current gear
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <ERROR_Entry>:


void ERROR_Entry(void) {
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <ERROR_Entry+0x1c>)
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <ERROR_Entry+0x20>)
 80018a6:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <ERROR_Entry+0x1c>)
 80018aa:	2205      	movs	r2, #5
 80018ac:	701a      	strb	r2, [r3, #0]

	// TODO: evaluate if it is correct to stop all output actions here...maybe not
	// clutch should always work... if we enter here during an actuation, not sure if it is correct to interrupt it
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000030 	.word	0x20000030
 80018bc:	20000031 	.word	0x20000031

080018c0 <ERROR_Exit>:

void ERROR_Exit(void) {
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <ERROR_Event>:
void ERROR_Event(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

	// check that all faults are cleared
	if(!CheckFaults(MyInputs)) {
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <ERROR_Event+0x20>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fe09 	bl	80024ec <CheckFaults>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <ERROR_Event+0x1e>
		ERROR_Exit();
 80018e0:	f7ff ffee 	bl	80018c0 <ERROR_Exit>
		IDLE_Entry();
 80018e4:	f7ff fce0 	bl	80012a8 <IDLE_Entry>
		return;
 80018e8:	bf00      	nop
	// TODO: it must not be completely blocking to be able to comeback from an error.
	// the concept is to keep a counter for the number of errors of each type and after a certain point come back and continue normal running with less features
	// check that all control errors are cleared
	// and do not zero the logged error status
	// remember return in all functions
}
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000028 	.word	0x20000028

080018f0 <ERROR_Run>:
void ERROR_Run(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <ERROR_Run+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]


	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle

}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	2000002c 	.word	0x2000002c

08001908 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af02      	add	r7, sp, #8
 800190e:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 8001916:	f001 feed 	bl	80036f4 <HAL_GetTick>
 800191a:	4603      	mov	r3, r0
 800191c:	4ac2      	ldr	r2, [pc, #776]	; (8001c28 <ReadInputs+0x320>)
 800191e:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);
 8001920:	4bc2      	ldr	r3, [pc, #776]	; (8001c2c <ReadInputs+0x324>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	2300      	movs	r3, #0
 8001928:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800192c:	48c0      	ldr	r0, [pc, #768]	; (8001c30 <ReadInputs+0x328>)
 800192e:	f000 fe9d 	bl	800266c <MyHalfBufferAverage>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);
 800193a:	4bbc      	ldr	r3, [pc, #752]	; (8001c2c <ReadInputs+0x324>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	2301      	movs	r3, #1
 8001942:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001946:	48ba      	ldr	r0, [pc, #744]	; (8001c30 <ReadInputs+0x328>)
 8001948:	f000 fe90 	bl	800266c <MyHalfBufferAverage>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);
 8001954:	4bb5      	ldr	r3, [pc, #724]	; (8001c2c <ReadInputs+0x324>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	2302      	movs	r3, #2
 800195c:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001960:	48b3      	ldr	r0, [pc, #716]	; (8001c30 <ReadInputs+0x328>)
 8001962:	f000 fe83 	bl	800266c <MyHalfBufferAverage>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);
 800196e:	4baf      	ldr	r3, [pc, #700]	; (8001c2c <ReadInputs+0x324>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	2303      	movs	r3, #3
 8001976:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800197a:	48ad      	ldr	r0, [pc, #692]	; (8001c30 <ReadInputs+0x328>)
 800197c:	f000 fe76 	bl	800266c <MyHalfBufferAverage>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);
 8001988:	4ba8      	ldr	r3, [pc, #672]	; (8001c2c <ReadInputs+0x324>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	2305      	movs	r3, #5
 8001990:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001994:	48a6      	ldr	r0, [pc, #664]	; (8001c30 <ReadInputs+0x328>)
 8001996:	f000 fe69 	bl	800266c <MyHalfBufferAverage>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);
 80019a2:	4ba2      	ldr	r3, [pc, #648]	; (8001c2c <ReadInputs+0x324>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	2304      	movs	r3, #4
 80019aa:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80019ae:	48a0      	ldr	r0, [pc, #640]	; (8001c30 <ReadInputs+0x328>)
 80019b0:	f000 fe5c 	bl	800266c <MyHalfBufferAverage>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	865a      	strh	r2, [r3, #50]	; 0x32
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);
 80019bc:	4b9b      	ldr	r3, [pc, #620]	; (8001c2c <ReadInputs+0x324>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	2307      	movs	r3, #7
 80019c4:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80019c8:	4899      	ldr	r0, [pc, #612]	; (8001c30 <ReadInputs+0x328>)
 80019ca:	f000 fe4f 	bl	800266c <MyHalfBufferAverage>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	869a      	strh	r2, [r3, #52]	; 0x34
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);
 80019d6:	4b95      	ldr	r3, [pc, #596]	; (8001c2c <ReadInputs+0x324>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	2306      	movs	r3, #6
 80019de:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80019e2:	4893      	ldr	r0, [pc, #588]	; (8001c30 <ReadInputs+0x328>)
 80019e4:	f000 fe42 	bl	800266c <MyHalfBufferAverage>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	86da      	strh	r2, [r3, #54]	; 0x36

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * 3.3 / 4095.0);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fcfd 	bl	80003f4 <__aeabi_i2d>
 80019fa:	a387      	add	r3, pc, #540	; (adr r3, 8001c18 <ReadInputs+0x310>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fd62 	bl	80004c8 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	a384      	add	r3, pc, #528	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fe83 	bl	800071c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7fe ffad 	bl	800097c <__aeabi_d2f>
 8001a22:	4602      	mov	r2, r0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * 3.3 / 4095.0);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fce1 	bl	80003f4 <__aeabi_i2d>
 8001a32:	a379      	add	r3, pc, #484	; (adr r3, 8001c18 <ReadInputs+0x310>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fd46 	bl	80004c8 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	a376      	add	r3, pc, #472	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fe67 	bl	800071c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7fe ff91 	bl	800097c <__aeabi_d2f>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * 3.3 / 4095.0);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fcc5 	bl	80003f4 <__aeabi_i2d>
 8001a6a:	a36b      	add	r3, pc, #428	; (adr r3, 8001c18 <ReadInputs+0x310>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fd2a 	bl	80004c8 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	a368      	add	r3, pc, #416	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fe4b 	bl	800071c <__aeabi_ddiv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7fe ff75 	bl	800097c <__aeabi_d2f>
 8001a92:	4602      	mov	r2, r0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * 3.3 / 4095.0);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fca9 	bl	80003f4 <__aeabi_i2d>
 8001aa2:	a35d      	add	r3, pc, #372	; (adr r3, 8001c18 <ReadInputs+0x310>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fd0e 	bl	80004c8 <__aeabi_dmul>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	a35a      	add	r3, pc, #360	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fe2f 	bl	800071c <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ff59 	bl	800097c <__aeabi_d2f>
 8001aca:	4602      	mov	r2, r0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * 3.3 / 4095.0);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fc8d 	bl	80003f4 <__aeabi_i2d>
 8001ada:	a34f      	add	r3, pc, #316	; (adr r3, 8001c18 <ReadInputs+0x310>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fcf2 	bl	80004c8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	a34c      	add	r3, pc, #304	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fe13 	bl	800071c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe ff3d 	bl	800097c <__aeabi_d2f>
 8001b02:	4602      	mov	r2, r0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * 3.3 / 4095.0);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fc71 	bl	80003f4 <__aeabi_i2d>
 8001b12:	a341      	add	r3, pc, #260	; (adr r3, 8001c18 <ReadInputs+0x310>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fcd6 	bl	80004c8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	a33e      	add	r3, pc, #248	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fdf7 	bl	800071c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7fe ff21 	bl	800097c <__aeabi_d2f>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * 3.3 / 4095.0);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc55 	bl	80003f4 <__aeabi_i2d>
 8001b4a:	a333      	add	r3, pc, #204	; (adr r3, 8001c18 <ReadInputs+0x310>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fcba 	bl	80004c8 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	a330      	add	r3, pc, #192	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe fddb 	bl	800071c <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe ff05 	bl	800097c <__aeabi_d2f>
 8001b72:	4602      	mov	r2, r0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	621a      	str	r2, [r3, #32]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * 3.3 / 4095.0);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc39 	bl	80003f4 <__aeabi_i2d>
 8001b82:	a325      	add	r3, pc, #148	; (adr r3, 8001c18 <ReadInputs+0x310>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fc9e 	bl	80004c8 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	a322      	add	r3, pc, #136	; (adr r3, 8001c20 <ReadInputs+0x318>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fdbf 	bl	800071c <__aeabi_ddiv>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe fee9 	bl	800097c <__aeabi_d2f>
 8001baa:	4602      	mov	r2, r0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

	//Digital Inputs
	if(inputs->tDigitalInputs < tInputsTimmer) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <ReadInputs+0x320>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d229      	bcs.n	8001c10 <ReadInputs+0x308>
		inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	481d      	ldr	r0, [pc, #116]	; (8001c34 <ReadInputs+0x32c>)
 8001bc0:	f003 fc16 	bl	80053f0 <HAL_GPIO_ReadPin>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4818      	ldr	r0, [pc, #96]	; (8001c34 <ReadInputs+0x32c>)
 8001bd2:	f003 fc0d 	bl	80053f0 <HAL_GPIO_ReadPin>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 8001be0:	2120      	movs	r1, #32
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <ReadInputs+0x32c>)
 8001be4:	f003 fc04 	bl	80053f0 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 8001bf2:	2140      	movs	r1, #64	; 0x40
 8001bf4:	480f      	ldr	r0, [pc, #60]	; (8001c34 <ReadInputs+0x32c>)
 8001bf6:	f003 fbfb 	bl	80053f0 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

		inputs->tDigitalInputs = tInputsTimmer + DIN_DEBOUNCING;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <ReadInputs+0x320>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f103 0214 	add.w	r2, r3, #20
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <ReadInputs+0x330>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	e012      	b.n	8001c3c <ReadInputs+0x334>
 8001c16:	bf00      	nop
 8001c18:	66666666 	.word	0x66666666
 8001c1c:	400a6666 	.word	0x400a6666
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40affe00 	.word	0x40affe00
 8001c28:	20000048 	.word	0x20000048
 8001c2c:	2000007c 	.word	0x2000007c
 8001c30:	20000240 	.word	0x20000240
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	20000065 	.word	0x20000065
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	inputs->BSWButtonB = BButtonBCAN;
 8001c44:	4b99      	ldr	r3, [pc, #612]	; (8001eac <ReadInputs+0x5a4>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	inputs->BSWButtonC = BButtonCCAN;
 8001c50:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <ReadInputs+0x5a8>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	inputs->BSWButtonD = BButtonDCAN;
 8001c5c:	4b95      	ldr	r3, [pc, #596]	; (8001eb4 <ReadInputs+0x5ac>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	inputs->BSWButtonE = BButtonECAN;
 8001c68:	4b93      	ldr	r3, [pc, #588]	; (8001eb8 <ReadInputs+0x5b0>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	inputs->BSWButtonF = BButtonFCAN;
 8001c74:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <ReadInputs+0x5b4>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	// or, do them at the same time and compare inputs

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

	inputs->BDriverKill = !inputs->NSHIFTERDIN04;	// inverted logic: 12V (1) Not Driver kill, 0V (0) Driver Kill
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	// ---------------------------------------------------------------------------------------------------
	// NGear Conditioning

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	645a      	str	r2, [r3, #68]	; 0x44

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3348      	adds	r3, #72	; 0x48
 8001ca8:	4985      	ldr	r1, [pc, #532]	; (8001ec0 <ReadInputs+0x5b8>)
 8001caa:	9101      	str	r1, [sp, #4]
 8001cac:	4984      	ldr	r1, [pc, #528]	; (8001ec0 <ReadInputs+0x5b8>)
 8001cae:	9100      	str	r1, [sp, #0]
 8001cb0:	4984      	ldr	r1, [pc, #528]	; (8001ec4 <ReadInputs+0x5bc>)
 8001cb2:	2006      	movs	r0, #6
 8001cb4:	f000 fdb4 	bl	8002820 <My2DMapInterpolate>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// TODO: think about checking the float NGear for +-0.2 to define false neutral

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fba6 	bl	8000418 <__aeabi_f2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f005 fa40 	bl	8007158 <round>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe fe2c 	bl	800093c <__aeabi_d2uiz>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	bf28      	it	cs
 8001cf8:	2305      	movcs	r3, #5
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// check for errors
	if(inputs->BNGearInError) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <ReadInputs+0x412>
		RaiseFault(inputs, NGEAR_FAULT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	e005      	b.n	8001d26 <ReadInputs+0x41e>
		// inputs->NGear = 1; // TODO: is it correct??? not sure. I would put 1 to be able trigger antistall and to be generic for all functions
	}
	else ClearFault(inputs, NGEAR_FAULT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f023 0201 	bic.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 8001d26:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <ReadInputs+0x5c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <ReadInputs+0x5c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d20a      	bcs.n	8001d4c <ReadInputs+0x444>
		inputs->BSteeringWheelFitted = 0;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		RaiseFault(inputs, STEERING_WHEEL_FAULT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	e009      	b.n	8001d60 <ReadInputs+0x458>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		ClearFault(inputs, STEERING_WHEEL_FAULT);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 0202 	bic.w	r2, r3, #2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	605a      	str	r2, [r3, #4]
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <ReadInputs+0x478>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		inputs->BDeclutchRequestInError = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001d7e:	e007      	b.n	8001d90 <ReadInputs+0x488>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Conditioning

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 8001d90:	4b4f      	ldr	r3, [pc, #316]	; (8001ed0 <ReadInputs+0x5c8>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <ReadInputs+0x5cc>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b25a      	sxtb	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	665a      	str	r2, [r3, #100]	; 0x64
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_MARGIN_MIN, VrCLUTCH_MARGIN_MAX);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3368      	adds	r3, #104	; 0x68
 8001dba:	4947      	ldr	r1, [pc, #284]	; (8001ed8 <ReadInputs+0x5d0>)
 8001dbc:	9101      	str	r1, [sp, #4]
 8001dbe:	4946      	ldr	r1, [pc, #280]	; (8001ed8 <ReadInputs+0x5d0>)
 8001dc0:	9100      	str	r1, [sp, #0]
 8001dc2:	4946      	ldr	r1, [pc, #280]	; (8001edc <ReadInputs+0x5d4>)
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f000 fd2b 	bl	8002820 <My2DMapInterpolate>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <ReadInputs+0x4fc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <ReadInputs+0x4fc>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f993 2060 	ldrsb.w	r2, [r3, #96]	; 0x60
 8001dee:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <ReadInputs+0x5d8>)
 8001df0:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		inputs->BrClutchPaddleInError = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001e02:	e029      	b.n	8001e58 <ReadInputs+0x550>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11d      	bne.n	8001e4a <ReadInputs+0x542>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb00 	bl	8000418 <__aeabi_f2d>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f005 f99a 	bl	8007158 <round>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fd5e 	bl	80008ec <__aeabi_d2iz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b25a      	sxtb	r2, r3
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <ReadInputs+0x5d8>)
 8001e36:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		inputs->BrClutchPaddleInError = 0;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001e48:	e006      	b.n	8001e58 <ReadInputs+0x550>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 8001e52:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <ReadInputs+0x5d8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <ReadInputs+0x56e>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <ReadInputs+0x568>
 8001e6c:	2264      	movs	r2, #100	; 0x64
 8001e6e:	e000      	b.n	8001e72 <ReadInputs+0x56a>
 8001e70:	2200      	movs	r2, #0
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <ReadInputs+0x5dc>)
 8001e74:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <ReadInputs+0x5dc>)
 8001e78:	f993 2000 	ldrsb.w	r2, [r3]
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <ReadInputs+0x5d8>)
 8001e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	bfb8      	it	lt
 8001e86:	4613      	movlt	r3, r2
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	2b63      	cmp	r3, #99	; 0x63
 8001e8c:	dc2c      	bgt.n	8001ee8 <ReadInputs+0x5e0>
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <ReadInputs+0x5dc>)
 8001e90:	f993 2000 	ldrsb.w	r2, [r3]
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <ReadInputs+0x5d8>)
 8001e96:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	bfb8      	it	lt
 8001e9e:	4613      	movlt	r3, r2
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ea6:	b25a      	sxtb	r2, r3
 8001ea8:	e01f      	b.n	8001eea <ReadInputs+0x5e2>
 8001eaa:	bf00      	nop
 8001eac:	20000066 	.word	0x20000066
 8001eb0:	20000067 	.word	0x20000067
 8001eb4:	20000068 	.word	0x20000068
 8001eb8:	20000069 	.word	0x20000069
 8001ebc:	2000006a 	.word	0x2000006a
 8001ec0:	3e4ccccd 	.word	0x3e4ccccd
 8001ec4:	080072c0 	.word	0x080072c0
 8001ec8:	20000070 	.word	0x20000070
 8001ecc:	20000048 	.word	0x20000048
 8001ed0:	2000006c 	.word	0x2000006c
 8001ed4:	2000006b 	.word	0x2000006b
 8001ed8:	3dcccccd 	.word	0x3dcccccd
 8001edc:	080072f0 	.word	0x080072f0
 8001ee0:	2000007d 	.word	0x2000007d
 8001ee4:	2000007e 	.word	0x2000007e
 8001ee8:	2264      	movs	r2, #100	; 0x64
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Conditioning

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8001ef0:	4b89      	ldr	r3, [pc, #548]	; (8002118 <ReadInputs+0x810>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8001efc:	4b87      	ldr	r3, [pc, #540]	; (800211c <ReadInputs+0x814>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8001f08:	4b85      	ldr	r3, [pc, #532]	; (8002120 <ReadInputs+0x818>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8001f14:	4b83      	ldr	r3, [pc, #524]	; (8002124 <ReadInputs+0x81c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	// Analog Input
	// TODO: Debouncing and STUCK detection ???
	inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fe2e 	bl	8000b90 <__aeabi_i2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	497c      	ldr	r1, [pc, #496]	; (8002128 <ReadInputs+0x820>)
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f82f 	bl	8000f9c <__aeabi_fcmpge>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <ReadInputs+0x64e>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001f54:	e05a      	b.n	800200c <ReadInputs+0x704>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	4974      	ldr	r1, [pc, #464]	; (800212c <ReadInputs+0x824>)
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f813 	bl	8000f88 <__aeabi_fcmple>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d012      	beq.n	8001f8e <ReadInputs+0x686>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff f813 	bl	8000f9c <__aeabi_fcmpge>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <ReadInputs+0x686>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001f8c:	e03e      	b.n	800200c <ReadInputs+0x704>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	4967      	ldr	r1, [pc, #412]	; (8002130 <ReadInputs+0x828>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fff7 	bl	8000f88 <__aeabi_fcmple>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <ReadInputs+0x6be>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fff7 	bl	8000f9c <__aeabi_fcmpge>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <ReadInputs+0x6be>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001fc4:	e022      	b.n	800200c <ReadInputs+0x704>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	495a      	ldr	r1, [pc, #360]	; (8002134 <ReadInputs+0x82c>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe ffdb 	bl	8000f88 <__aeabi_fcmple>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d011      	beq.n	8001ffc <ReadInputs+0x6f4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	4956      	ldr	r1, [pc, #344]	; (8002138 <ReadInputs+0x830>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe ffdc 	bl	8000f9c <__aeabi_fcmpge>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d008      	beq.n	8001ffc <ReadInputs+0x6f4>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001ffa:	e007      	b.n	800200c <ReadInputs+0x704>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002012:	2b00      	cmp	r3, #0
 8002014:	d013      	beq.n	800203e <ReadInputs+0x736>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10e      	bne.n	800203e <ReadInputs+0x736>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->NBUpshiftRequestSource = CAN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		inputs->BUpShiftRequestInError = 0;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800203c:	e021      	b.n	8002082 <ReadInputs+0x77a>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002044:	2b00      	cmp	r3, #0
 8002046:	d114      	bne.n	8002072 <ReadInputs+0x76a>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800204e:	2b01      	cmp	r3, #1
 8002050:	bf0c      	ite	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	2300      	movne	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->NBUpshiftRequestSource = Analog;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		inputs->BUpShiftRequestInError = 0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8002070:	e007      	b.n	8002082 <ReadInputs+0x77a>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <ReadInputs+0x7ac>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10e      	bne.n	80020b4 <ReadInputs+0x7ac>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		inputs->NBDnshiftRequestSource = CAN;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		inputs->BDnShiftRequestInError = 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80020b2:	e021      	b.n	80020f8 <ReadInputs+0x7f0>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d114      	bne.n	80020e8 <ReadInputs+0x7e0>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		inputs->NBDnshiftRequestSource = Analog;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
		inputs->BDnShiftRequestInError = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80020e6:	e007      	b.n	80020f8 <ReadInputs+0x7f0>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	// ---------------------------------------------------------------------------------------------------
	// Launch

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01c      	beq.n	800213c <ReadInputs+0x834>
		inputs->BLaunchRequest = inputs->BSWButtonD;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		inputs->BLaunchRequestInError = 0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002116:	e019      	b.n	800214c <ReadInputs+0x844>
 8002118:	20000062 	.word	0x20000062
 800211c:	20000064 	.word	0x20000064
 8002120:	20000061 	.word	0x20000061
 8002124:	20000063 	.word	0x20000063
 8002128:	404ccccd 	.word	0x404ccccd
 800212c:	3f99999a 	.word	0x3f99999a
 8002130:	400ccccd 	.word	0x400ccccd
 8002134:	3f733333 	.word	0x3f733333
 8002138:	3f6e147b 	.word	0x3f6e147b
	}
	else {
		inputs->BLaunchRequestInError = 1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	// ---------------------------------------------------------------------------------------------------
	// Toggle Switches

	// Toggle 1
	if(inputs->BSWButtonA && tToggleSwitch01 < tInputsTimmer) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002152:	2b00      	cmp	r3, #0
 8002154:	d014      	beq.n	8002180 <ReadInputs+0x878>
 8002156:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <ReadInputs+0xa98>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b92      	ldr	r3, [pc, #584]	; (80023a4 <ReadInputs+0xa9c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d20e      	bcs.n	8002180 <ReadInputs+0x878>
		inputs->NToggleSwitch01State ^= 1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		tToggleSwitch01 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8002174:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <ReadInputs+0xa9c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800217c:	4a88      	ldr	r2, [pc, #544]	; (80023a0 <ReadInputs+0xa98>)
 800217e:	6013      	str	r3, [r2, #0]
	}

	// Toggle 2
	if(inputs->BSWButtonB && tToggleSwitch02 < tInputsTimmer) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002186:	2b00      	cmp	r3, #0
 8002188:	d014      	beq.n	80021b4 <ReadInputs+0x8ac>
 800218a:	4b87      	ldr	r3, [pc, #540]	; (80023a8 <ReadInputs+0xaa0>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b85      	ldr	r3, [pc, #532]	; (80023a4 <ReadInputs+0xa9c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d20e      	bcs.n	80021b4 <ReadInputs+0x8ac>
		inputs->NToggleSwitch02State ^= 1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		tToggleSwitch02 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 80021a8:	4b7e      	ldr	r3, [pc, #504]	; (80023a4 <ReadInputs+0xa9c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021b0:	4a7d      	ldr	r2, [pc, #500]	; (80023a8 <ReadInputs+0xaa0>)
 80021b2:	6013      	str	r3, [r2, #0]
	}

	// Toggle 3
	if(inputs->BSWButtonC && tToggleSwitch03 < tInputsTimmer) {
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d014      	beq.n	80021e8 <ReadInputs+0x8e0>
 80021be:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <ReadInputs+0xaa4>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <ReadInputs+0xa9c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20e      	bcs.n	80021e8 <ReadInputs+0x8e0>
		inputs->NToggleSwitch03State ^= 1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80021d0:	f083 0301 	eor.w	r3, r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		tToggleSwitch03 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 80021dc:	4b71      	ldr	r3, [pc, #452]	; (80023a4 <ReadInputs+0xa9c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021e4:	4a71      	ldr	r2, [pc, #452]	; (80023ac <ReadInputs+0xaa4>)
 80021e6:	6013      	str	r3, [r2, #0]
	}

	// Toggle 4
	if(inputs->BSWButtonE && tToggleSwitch04 < tInputsTimmer) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d014      	beq.n	800221c <ReadInputs+0x914>
 80021f2:	4b6f      	ldr	r3, [pc, #444]	; (80023b0 <ReadInputs+0xaa8>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <ReadInputs+0xa9c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d20e      	bcs.n	800221c <ReadInputs+0x914>
		inputs->NToggleSwitch04State ^= 1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002204:	f083 0301 	eor.w	r3, r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		tToggleSwitch04 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8002210:	4b64      	ldr	r3, [pc, #400]	; (80023a4 <ReadInputs+0xa9c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002218:	4a65      	ldr	r2, [pc, #404]	; (80023b0 <ReadInputs+0xaa8>)
 800221a:	6013      	str	r3, [r2, #0]


	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSHIFTERAnalog01 * VSUPPLY_DIVIDER_GAIN;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4964      	ldr	r1, [pc, #400]	; (80023b4 <ReadInputs+0xaac>)
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fd08 	bl	8000c38 <__aeabi_fmul>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	// ---------------------------------------------------------------------------------------------------
	// nEngine Conditioning

	// CAN Input

	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 8002232:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <ReadInputs+0xab0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800223a:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <ReadInputs+0xa9c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d20c      	bcs.n	800225c <ReadInputs+0x954>
		inputs->BnEngineInError = 1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		inputs->BnEngineReliable = 0;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		inputs->nEngine = 0; 		// we force to zero if in error
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800225a:	e00d      	b.n	8002278 <ReadInputs+0x970>
//			RaiseFault(inputs, ECU_COMMS_FAULT); // TODO: we temporarily comment if for testing without the ECU
	}
	else {
		inputs->BnEngineInError = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		inputs->BnEngineReliable = 1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		ClearFault(inputs, ECU_COMMS_FAULT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	605a      	str	r2, [r3, #4]
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <ReadInputs+0xab4>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	b21a      	sxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <ReadInputs+0x990>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8002298:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <ReadInputs+0xab8>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 80022a4:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <ReadInputs+0xabc>)
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d112      	bne.n	80022e2 <ReadInputs+0x9da>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <ReadInputs+0x9da>
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <ReadInputs+0xac0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <ReadInputs+0x9da>
		BUpShiftRequested = 1;
 80022ce:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <ReadInputs+0xac0>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e016      	b.n	8002310 <ReadInputs+0xa08>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <ReadInputs+0xa08>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <ReadInputs+0xa08>
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <ReadInputs+0xac0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <ReadInputs+0xa08>
		BUpShiftRequested = 0;
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <ReadInputs+0xac0>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f043 0202 	orr.w	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002316:	2b00      	cmp	r3, #0
 8002318:	d112      	bne.n	8002340 <ReadInputs+0xa38>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <ReadInputs+0xa38>
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <ReadInputs+0xac4>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <ReadInputs+0xa38>
		BDnShiftRequested = 1;
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <ReadInputs+0xac4>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f043 0204 	orr.w	r2, r3, #4
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e016      	b.n	800236e <ReadInputs+0xa66>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8002346:	2b00      	cmp	r3, #0
 8002348:	d111      	bne.n	800236e <ReadInputs+0xa66>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10c      	bne.n	800236e <ReadInputs+0xa66>
 8002354:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <ReadInputs+0xac4>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <ReadInputs+0xa66>
		BDnShiftRequested = 0;
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <ReadInputs+0xac4>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f043 0208 	orr.w	r2, r3, #8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002374:	2b00      	cmp	r3, #0
 8002376:	d12d      	bne.n	80023d4 <ReadInputs+0xacc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800237e:	2b00      	cmp	r3, #0
 8002380:	d028      	beq.n	80023d4 <ReadInputs+0xacc>
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <ReadInputs+0xac8>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d124      	bne.n	80023d4 <ReadInputs+0xacc>
		BLaunchRequested = 1;
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <ReadInputs+0xac8>)
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f043 0210 	orr.w	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e031      	b.n	8002402 <ReadInputs+0xafa>
 800239e:	bf00      	nop
 80023a0:	2000004c 	.word	0x2000004c
 80023a4:	20000048 	.word	0x20000048
 80023a8:	20000050 	.word	0x20000050
 80023ac:	20000054 	.word	0x20000054
 80023b0:	20000058 	.word	0x20000058
 80023b4:	3e6c4ef9 	.word	0x3e6c4ef9
 80023b8:	20000074 	.word	0x20000074
 80023bc:	2000006e 	.word	0x2000006e
 80023c0:	20000078 	.word	0x20000078
 80023c4:	2000007a 	.word	0x2000007a
 80023c8:	2000005c 	.word	0x2000005c
 80023cc:	2000005d 	.word	0x2000005d
 80023d0:	2000005e 	.word	0x2000005e
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d111      	bne.n	8002402 <ReadInputs+0xafa>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10c      	bne.n	8002402 <ReadInputs+0xafa>
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <ReadInputs+0xbb4>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <ReadInputs+0xafa>
		BLaunchRequested = 0;
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <ReadInputs+0xbb4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002408:	2b00      	cmp	r3, #0
 800240a:	d112      	bne.n	8002432 <ReadInputs+0xb2a>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <ReadInputs+0xb2a>
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <ReadInputs+0xbb8>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <ReadInputs+0xb2a>
		BDeclutchRequested = 1;
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <ReadInputs+0xbb8>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e016      	b.n	8002460 <ReadInputs+0xb58>
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002438:	2b00      	cmp	r3, #0
 800243a:	d111      	bne.n	8002460 <ReadInputs+0xb58>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <ReadInputs+0xb58>
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <ReadInputs+0xbb8>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <ReadInputs+0xb58>
		BDeclutchRequested = 0;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <ReadInputs+0xbb8>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d124      	bne.n	80024b4 <ReadInputs+0xbac>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8002470:	2b4f      	cmp	r3, #79	; 0x4f
 8002472:	dd0d      	ble.n	8002490 <ReadInputs+0xb88>
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <ReadInputs+0xbbc>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <ReadInputs+0xb88>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <ReadInputs+0xbbc>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]



	// ---------------------------------------------------------------------------------------------------

}
 800248e:	e011      	b.n	80024b4 <ReadInputs+0xbac>
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8002496:	2b00      	cmp	r3, #0
 8002498:	dc0c      	bgt.n	80024b4 <ReadInputs+0xbac>
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <ReadInputs+0xbbc>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <ReadInputs+0xbac>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <ReadInputs+0xbbc>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2000005e 	.word	0x2000005e
 80024c0:	2000005f 	.word	0x2000005f
 80024c4:	20000060 	.word	0x20000060

080024c8 <InitInputs>:

void InitInputs(void) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 80024cc:	4805      	ldr	r0, [pc, #20]	; (80024e4 <InitInputs+0x1c>)
 80024ce:	f001 fd01 	bl	8003ed4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 80024d2:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 80024d6:	4904      	ldr	r1, [pc, #16]	; (80024e8 <InitInputs+0x20>)
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <InitInputs+0x1c>)
 80024da:	f001 fa11 	bl	8003900 <HAL_ADC_Start_DMA>
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000084 	.word	0x20000084
 80024e8:	20000240 	.word	0x20000240

080024ec <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <CheckFaults+0x14>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <CheckFaults+0x16>
	return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	; 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 8002516:	f107 030c 	add.w	r3, r7, #12
 800251a:	f107 0214 	add.w	r2, r7, #20
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f001 ff8d 	bl	8004440 <HAL_CAN_GetRxMessage>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 800252c:	4b3f      	ldr	r3, [pc, #252]	; (800262c <CAN_RX+0x120>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29b      	uxth	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <CAN_RX+0x120>)
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	e074      	b.n	8002626 <CAN_RX+0x11a>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002542:	d004      	beq.n	800254e <CAN_RX+0x42>
 8002544:	f240 3211 	movw	r2, #785	; 0x311
 8002548:	4293      	cmp	r3, r2
 800254a:	d05c      	beq.n	8002606 <CAN_RX+0xfa>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
		 break;

	 default:
		 break;
 800254c:	e06b      	b.n	8002626 <CAN_RX+0x11a>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 800254e:	f001 f8d1 	bl	80036f4 <HAL_GetTick>
 8002552:	4603      	mov	r3, r0
 8002554:	4a36      	ldr	r2, [pc, #216]	; (8002630 <CAN_RX+0x124>)
 8002556:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 8002558:	7b3b      	ldrb	r3, [r7, #12]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <CAN_RX+0x128>)
 8002562:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 8002564:	7b3b      	ldrb	r3, [r7, #12]
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b31      	ldr	r3, [pc, #196]	; (8002638 <CAN_RX+0x12c>)
 8002572:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 8002574:	7b3b      	ldrb	r3, [r7, #12]
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	b2db      	uxtb	r3, r3
 800257a:	b25b      	sxtb	r3, r3
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	b25a      	sxtb	r2, r3
 8002582:	4b2e      	ldr	r3, [pc, #184]	; (800263c <CAN_RX+0x130>)
 8002584:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 8002586:	7b7b      	ldrb	r3, [r7, #13]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <CAN_RX+0x134>)
 8002590:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 8002592:	7b7b      	ldrb	r3, [r7, #13]
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <CAN_RX+0x138>)
 80025a0:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 80025a2:	7b7b      	ldrb	r3, [r7, #13]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <CAN_RX+0x13c>)
 80025b0:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 80025b2:	7b7b      	ldrb	r3, [r7, #13]
 80025b4:	08db      	lsrs	r3, r3, #3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <CAN_RX+0x140>)
 80025c0:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 80025c2:	7b7b      	ldrb	r3, [r7, #13]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <CAN_RX+0x144>)
 80025d0:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 80025d2:	7b7b      	ldrb	r3, [r7, #13]
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <CAN_RX+0x148>)
 80025e0:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 80025e2:	7b7b      	ldrb	r3, [r7, #13]
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <CAN_RX+0x14c>)
 80025f0:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 80025f2:	7b7b      	ldrb	r3, [r7, #13]
 80025f4:	09db      	lsrs	r3, r3, #7
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <CAN_RX+0x150>)
 80025fa:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 80025fc:	7bbb      	ldrb	r3, [r7, #14]
 80025fe:	b25a      	sxtb	r2, r3
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <CAN_RX+0x154>)
 8002602:	701a      	strb	r2, [r3, #0]
		 break;
 8002604:	e00f      	b.n	8002626 <CAN_RX+0x11a>
		 tCANECULastSeen = HAL_GetTick();
 8002606:	f001 f875 	bl	80036f4 <HAL_GetTick>
 800260a:	4603      	mov	r3, r0
 800260c:	4a15      	ldr	r2, [pc, #84]	; (8002664 <CAN_RX+0x158>)
 800260e:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
 8002610:	7b3b      	ldrb	r3, [r7, #12]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	b21a      	sxth	r2, r3
 8002616:	7b7b      	ldrb	r3, [r7, #13]
 8002618:	b21b      	sxth	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b21b      	sxth	r3, r3
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <CAN_RX+0x15c>)
 8002622:	801a      	strh	r2, [r3, #0]
		 break;
 8002624:	bf00      	nop
	 }
}
 8002626:	3730      	adds	r7, #48	; 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000007a 	.word	0x2000007a
 8002630:	20000070 	.word	0x20000070
 8002634:	20000062 	.word	0x20000062
 8002638:	20000064 	.word	0x20000064
 800263c:	2000006c 	.word	0x2000006c
 8002640:	20000061 	.word	0x20000061
 8002644:	20000063 	.word	0x20000063
 8002648:	20000065 	.word	0x20000065
 800264c:	20000066 	.word	0x20000066
 8002650:	20000067 	.word	0x20000067
 8002654:	20000068 	.word	0x20000068
 8002658:	20000069 	.word	0x20000069
 800265c:	2000006a 	.word	0x2000006a
 8002660:	2000006b 	.word	0x2000006b
 8002664:	20000074 	.word	0x20000074
 8002668:	2000006e 	.word	0x2000006e

0800266c <MyHalfBufferAverage>:
    }
    return 1; // If no match found, return error!
}


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4603      	mov	r3, r0
 800267c:	807b      	strh	r3, [r7, #2]
 800267e:	460b      	mov	r3, r1
 8002680:	707b      	strb	r3, [r7, #1]
 8002682:	4613      	mov	r3, r2
 8002684:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 800268a:	787b      	ldrb	r3, [r7, #1]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <MyHalfBufferAverage+0x28>
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	e000      	b.n	8002696 <MyHalfBufferAverage+0x2a>
 8002694:	2300      	movs	r3, #0
 8002696:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8002698:	887b      	ldrh	r3, [r7, #2]
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 800269e:	2300      	movs	r3, #0
 80026a0:	827b      	strh	r3, [r7, #18]
 80026a2:	e010      	b.n	80026c6 <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 80026a4:	8a7b      	ldrh	r3, [r7, #18]
 80026a6:	00da      	lsls	r2, r3, #3
 80026a8:	783b      	ldrb	r3, [r7, #0]
 80026aa:	441a      	add	r2, r3
 80026ac:	8a3b      	ldrh	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4413      	add	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 80026c0:	8a7b      	ldrh	r3, [r7, #18]
 80026c2:	3301      	adds	r3, #1
 80026c4:	827b      	strh	r3, [r7, #18]
 80026c6:	8a7a      	ldrh	r2, [r7, #18]
 80026c8:	89fb      	ldrh	r3, [r7, #14]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d3ea      	bcc.n	80026a4 <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 80026ce:	89fb      	ldrh	r3, [r7, #14]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	b29b      	uxth	r3, r3

}
 80026dc:	4618      	mov	r0, r3
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 80026ee:	2100      	movs	r1, #0
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff0b 	bl	800250c <CAN_RX>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 8002706:	2101      	movs	r1, #1
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff feff 	bl	800250c <CAN_RX>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_CAN_ErrorCallback+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	3301      	adds	r3, #1
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_CAN_ErrorCallback+0x20>)
 800272c:	701a      	strb	r2, [r3, #0]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000078 	.word	0x20000078

0800273c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f083 0301 	eor.w	r3, r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800275a:	701a      	strb	r2, [r3, #0]
	}
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000084 	.word	0x20000084
 800276c:	2000007c 	.word	0x2000007c

08002770 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0

	// TODO: start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <InitOutputs+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800277c:	2104      	movs	r1, #4
 800277e:	4802      	ldr	r0, [pc, #8]	; (8002788 <InitOutputs+0x18>)
 8002780:	f004 fa5c 	bl	8006c3c <HAL_TIMEx_PWMN_Start>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000120 	.word	0x20000120

0800278c <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

	// CLUTCH

	// Clamping to avoid out of bounds values
	xClutchTargetOut = CLAMP(output->xClutchTarget, xCLUTCH_ABSOLUTE_MIN, xCLUTCH_ABSOLUTE_MAX);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	89db      	ldrh	r3, [r3, #14]
 8002798:	f640 0233 	movw	r2, #2099	; 0x833
 800279c:	4293      	cmp	r3, r2
 800279e:	d808      	bhi.n	80027b2 <WriteOutputs+0x26>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	89db      	ldrh	r3, [r3, #14]
 80027a4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80027a8:	bf38      	it	cc
 80027aa:	f44f 7361 	movcc.w	r3, #900	; 0x384
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	e001      	b.n	80027b6 <WriteOutputs+0x2a>
 80027b2:	f640 0334 	movw	r3, #2100	; 0x834
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <WriteOutputs+0x88>)
 80027b8:	8013      	strh	r3, [r2, #0]
	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to

	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	xClutchTargetOut *= 2;
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <WriteOutputs+0x88>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <WriteOutputs+0x88>)
 80027c4:	801a      	strh	r2, [r3, #0]

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
//	__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, xClutchTargetOut -1 );
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <WriteOutputs+0x88>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <WriteOutputs+0x8c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <WriteOutputs+0x88>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	461a      	mov	r2, r3
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <WriteOutputs+0x8c>)
 80027dc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, xClutchTargetOut/2);
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <WriteOutputs+0x88>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <WriteOutputs+0x8c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting Ports
	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, output->BUpShiftPortState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7c5b      	ldrb	r3, [r3, #17]
 80027f0:	461a      	mov	r2, r3
 80027f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f6:	4809      	ldr	r0, [pc, #36]	; (800281c <WriteOutputs+0x90>)
 80027f8:	f002 fe11 	bl	800541e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, output->BDnShiftPortState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7c9b      	ldrb	r3, [r3, #18]
 8002800:	461a      	mov	r2, r3
 8002802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <WriteOutputs+0x90>)
 8002808:	f002 fe09 	bl	800541e <HAL_GPIO_WritePin>


	// CAN
	// add the info of the shutDown (DriverKill) in the CAN for others to see
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000080 	.word	0x20000080
 8002818:	20000120 	.word	0x20000120
 800281c:	40010c00 	.word	0x40010c00

08002820 <My2DMapInterpolate>:
#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	68fe      	ldr	r6, [r7, #12]
 8002830:	1e73      	subs	r3, r6, #1
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	4632      	mov	r2, r6
 8002836:	2300      	movs	r3, #0
 8002838:	4614      	mov	r4, r2
 800283a:	461d      	mov	r5, r3
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	016b      	lsls	r3, r5, #5
 8002846:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800284a:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f8e6 	bl	8000a24 <__aeabi_fsub>
 8002858:	4603      	mov	r3, r0
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7fe fb89 	bl	8000f74 <__aeabi_fcmplt>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8002868:	4633      	mov	r3, r6
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	4413      	add	r3, r2
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	601a      	str	r2, [r3, #0]
		return 1;
 8002876:	2301      	movs	r3, #1
 8002878:	e07a      	b.n	8002970 <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe f8ce 	bl	8000a28 <__addsf3>
 800288c:	4603      	mov	r3, r0
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fe fb8d 	bl	8000fb0 <__aeabi_fcmpgt>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 800289c:	4633      	mov	r3, r6
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	4413      	add	r3, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	3a01      	subs	r2, #1
 80028a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	601a      	str	r2, [r3, #0]
		return 1;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e05d      	b.n	8002970 <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e00e      	b.n	80028d8 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fb54 	bl	8000f74 <__aeabi_fcmplt>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d108      	bne.n	80028e4 <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	3b01      	subs	r3, #1
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	429a      	cmp	r2, r3
 80028e0:	dbeb      	blt.n	80028ba <My2DMapInterpolate+0x9a>
 80028e2:	e000      	b.n	80028e6 <My2DMapInterpolate+0xc6>
			break;
 80028e4:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f893 	bl	8000a24 <__aeabi_fsub>
 80028fe:	4603      	mov	r3, r0
 8002900:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 8002902:	4633      	mov	r3, r6
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4413      	add	r3, r2
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	3201      	adds	r2, #1
 800290e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002912:	4633      	mov	r3, r6
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4413      	add	r3, r2
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002920:	4619      	mov	r1, r3
 8002922:	f7fe f87f 	bl	8000a24 <__aeabi_fsub>
 8002926:	4603      	mov	r3, r0
 8002928:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 800292a:	4633      	mov	r3, r6
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4413      	add	r3, r2
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	4619      	mov	r1, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe f86e 	bl	8000a24 <__aeabi_fsub>
 8002948:	4603      	mov	r3, r0
 800294a:	6939      	ldr	r1, [r7, #16]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe f973 	bl	8000c38 <__aeabi_fmul>
 8002952:	4603      	mov	r3, r0
 8002954:	6979      	ldr	r1, [r7, #20]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fa22 	bl	8000da0 <__aeabi_fdiv>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	4620      	mov	r0, r4
 8002962:	f7fe f861 	bl	8000a28 <__addsf3>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	601a      	str	r2, [r3, #0]
	return 0;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3724      	adds	r7, #36	; 0x24
 8002974:	46bd      	mov	sp, r7
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002978 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800297c:	f3bf 8f4f 	dsb	sy
}
 8002980:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <__NVIC_SystemReset+0x24>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800298a:	4904      	ldr	r1, [pc, #16]	; (800299c <__NVIC_SystemReset+0x24>)
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <__NVIC_SystemReset+0x28>)
 800298e:	4313      	orrs	r3, r2
 8002990:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002992:	f3bf 8f4f 	dsb	sy
}
 8002996:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <__NVIC_SystemReset+0x20>
 800299c:	e000ed00 	.word	0xe000ed00
 80029a0:	05fa0004 	.word	0x05fa0004

080029a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029a8:	f000 fe4c 	bl	8003644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ac:	f000 f83e 	bl	8002a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b0:	f000 fba4 	bl	80030fc <MX_GPIO_Init>
  MX_DMA_Init();
 80029b4:	f000 fb84 	bl	80030c0 <MX_DMA_Init>
  MX_TIM3_Init();
 80029b8:	f000 fb0a 	bl	8002fd0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80029bc:	f000 f892 	bl	8002ae4 <MX_ADC1_Init>
  MX_CAN_Init();
 80029c0:	f000 f932 	bl	8002c28 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80029c4:	f000 fb52 	bl	800306c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80029c8:	f000 fab6 	bl	8002f38 <MX_TIM2_Init>
  MX_TIM1_Init();
 80029cc:	f000 fa14 	bl	8002df8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 80029d0:	4811      	ldr	r0, [pc, #68]	; (8002a18 <main+0x74>)
 80029d2:	f003 fb53 	bl	800607c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 80029d6:	4811      	ldr	r0, [pc, #68]	; (8002a1c <main+0x78>)
 80029d8:	f003 fb06 	bl	8005fe8 <HAL_TIM_Base_Start>

  InitInputs();
 80029dc:	f7ff fd74 	bl	80024c8 <InitInputs>
  InitController(&Inputs,&Outputs);
 80029e0:	490f      	ldr	r1, [pc, #60]	; (8002a20 <main+0x7c>)
 80029e2:	4810      	ldr	r0, [pc, #64]	; (8002a24 <main+0x80>)
 80029e4:	f7fe fb0e 	bl	8001004 <InitController>
  InitOutputs();
 80029e8:	f7ff fec2 	bl	8002770 <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 80029ec:	2032      	movs	r0, #50	; 0x32
 80029ee:	f000 fe8b 	bl	8003708 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <main+0x84>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0fa      	beq.n	80029f2 <main+0x4e>
		  BCycleTimerFlag = 0;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <main+0x84>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 8002a02:	4808      	ldr	r0, [pc, #32]	; (8002a24 <main+0x80>)
 8002a04:	f7fe ff80 	bl	8001908 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 8002a08:	4905      	ldr	r1, [pc, #20]	; (8002a20 <main+0x7c>)
 8002a0a:	4806      	ldr	r0, [pc, #24]	; (8002a24 <main+0x80>)
 8002a0c:	f7fe fb10 	bl	8001030 <Controller>
		  WriteOutputs(&Outputs);
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <main+0x7c>)
 8002a12:	f7ff febb 	bl	800278c <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002a16:	e7ec      	b.n	80029f2 <main+0x4e>
 8002a18:	200001b0 	.word	0x200001b0
 8002a1c:	20000168 	.word	0x20000168
 8002a20:	20002510 	.word	0x20002510
 8002a24:	20002484 	.word	0x20002484
 8002a28:	20002480 	.word	0x20002480

08002a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b094      	sub	sp, #80	; 0x50
 8002a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a36:	2228      	movs	r2, #40	; 0x28
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fb60 	bl	8007100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 fce4 	bl	8005450 <HAL_RCC_OscConfig>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002a8e:	f000 fba1 	bl	80031d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	230f      	movs	r3, #15
 8002a94:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 ff50 	bl	8005954 <HAL_RCC_ClockConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002aba:	f000 fb8b 	bl	80031d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002ac2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 f8d0 	bl	8005c70 <HAL_RCCEx_PeriphCLKConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002ad6:	f000 fb7d 	bl	80031d4 <Error_Handler>
  }
}
 8002ada:	bf00      	nop
 8002adc:	3750      	adds	r7, #80	; 0x50
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002af4:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002af6:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <MX_ADC1_Init+0x140>)
 8002af8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002afa:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b08:	4b45      	ldr	r3, [pc, #276]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b0e:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b10:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002b14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b16:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b1e:	2208      	movs	r2, #8
 8002b20:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b22:	483f      	ldr	r0, [pc, #252]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b24:	f000 fe14 	bl	8003750 <HAL_ADC_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002b2e:	f000 fb51 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4837      	ldr	r0, [pc, #220]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b44:	f000 ffcc 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002b4e:	f000 fb41 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b56:	2302      	movs	r3, #2
 8002b58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4830      	ldr	r0, [pc, #192]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b60:	f000 ffbe 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002b6a:	f000 fb33 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b72:	2303      	movs	r3, #3
 8002b74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4829      	ldr	r0, [pc, #164]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b7c:	f000 ffb0 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002b86:	f000 fb25 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4822      	ldr	r0, [pc, #136]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002b98:	f000 ffa2 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002ba2:	f000 fb17 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002baa:	2305      	movs	r3, #5
 8002bac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	481b      	ldr	r0, [pc, #108]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002bb4:	f000 ff94 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002bbe:	f000 fb09 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4814      	ldr	r0, [pc, #80]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002bd0:	f000 ff86 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002bda:	f000 fafb 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002bde:	2306      	movs	r3, #6
 8002be0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002be2:	2307      	movs	r3, #7
 8002be4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	480d      	ldr	r0, [pc, #52]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002bec:	f000 ff78 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002bf6:	f000 faed 	bl	80031d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4806      	ldr	r0, [pc, #24]	; (8002c20 <MX_ADC1_Init+0x13c>)
 8002c08:	f000 ff6a 	bl	8003ae0 <HAL_ADC_ConfigChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002c12:	f000 fadf 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000084 	.word	0x20000084
 8002c24:	40012400 	.word	0x40012400

08002c28 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0a8      	sub	sp, #160	; 0xa0
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002c2e:	4b70      	ldr	r3, [pc, #448]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c30:	4a70      	ldr	r2, [pc, #448]	; (8002df4 <MX_CAN_Init+0x1cc>)
 8002c32:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002c34:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c36:	2204      	movs	r2, #4
 8002c38:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002c46:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c48:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002c4c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002c4e:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c54:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002c56:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002c5c:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002c6e:	4b60      	ldr	r3, [pc, #384]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002c74:	4b5e      	ldr	r3, [pc, #376]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002c7a:	485d      	ldr	r0, [pc, #372]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002c7c:	f001 f9d8 	bl	8004030 <HAL_CAN_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002c86:	f000 faa5 	bl	80031d4 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_RX_ID << 5 ;
 8002c8a:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8002c94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8002cc6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4848      	ldr	r0, [pc, #288]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002cce:	f001 faaa 	bl	8004226 <HAL_CAN_ConfigFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8002cd8:	f000 fa7c 	bl	80031d4 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_RX_ID << 5 ;
 8002cdc:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002ce0:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8002ce6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cea:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d00:	2301      	movs	r3, #1
 8002d02:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8002d04:	2301      	movs	r3, #1
 8002d06:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8002d08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4838      	ldr	r0, [pc, #224]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002d10:	f001 fa89 	bl	8004226 <HAL_CAN_ConfigFilter>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_CAN_Init+0xf6>
 	  Error_Handler();
 8002d1a:	f000 fa5b 	bl	80031d4 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 8002d1e:	f246 2320 	movw	r3, #25120	; 0x6220
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8002d28:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 8002d36:	2302      	movs	r3, #2
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d42:	2301      	movs	r3, #1
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8002d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4827      	ldr	r0, [pc, #156]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002d52:	f001 fa68 	bl	8004226 <HAL_CAN_ConfigFilter>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_CAN_Init+0x138>
 	  Error_Handler();
 8002d5c:	f000 fa3a 	bl	80031d4 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 8002d60:	f246 2320 	movw	r3, #25120	; 0x6220
 8002d64:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 8002d6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d6e:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d84:	2301      	movs	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4817      	ldr	r0, [pc, #92]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002d92:	f001 fa48 	bl	8004226 <HAL_CAN_ConfigFilter>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_CAN_Init+0x178>
 	  Error_Handler();
 8002d9c:	f000 fa1a 	bl	80031d4 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002da0:	2102      	movs	r1, #2
 8002da2:	4813      	ldr	r0, [pc, #76]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002da4:	f001 fc6d 	bl	8004682 <HAL_CAN_ActivateNotification>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_CAN_Init+0x18a>
	   Error_Handler();
 8002dae:	f000 fa11 	bl	80031d4 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8002db2:	2110      	movs	r1, #16
 8002db4:	480e      	ldr	r0, [pc, #56]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002db6:	f001 fc64 	bl	8004682 <HAL_CAN_ActivateNotification>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8002dc0:	f000 fa08 	bl	80031d4 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8002dc4:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002dca:	f001 fc5a 	bl	8004682 <HAL_CAN_ActivateNotification>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8002dd4:	f000 f9fe 	bl	80031d4 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_CAN_Init+0x1c8>)
 8002dda:	f001 faed 	bl	80043b8 <HAL_CAN_Start>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8002de4:	f000 f9f6 	bl	80031d4 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	37a0      	adds	r7, #160	; 0xa0
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200000f8 	.word	0x200000f8
 8002df4:	40006400 	.word	0x40006400

08002df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b096      	sub	sp, #88	; 0x58
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	615a      	str	r2, [r3, #20]
 8002e28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 f965 	bl	8007100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e38:	4a3e      	ldr	r2, [pc, #248]	; (8002f34 <MX_TIM1_Init+0x13c>)
 8002e3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e3e:	2247      	movs	r2, #71	; 0x47
 8002e40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e42:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e4a:	f240 52db 	movw	r2, #1499	; 0x5db
 8002e4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e50:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e62:	4833      	ldr	r0, [pc, #204]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e64:	f003 f870 	bl	8005f48 <HAL_TIM_Base_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002e6e:	f000 f9b1 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	482c      	ldr	r0, [pc, #176]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e80:	f003 fb70 	bl	8006564 <HAL_TIM_ConfigClockSource>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e8a:	f000 f9a3 	bl	80031d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e8e:	4828      	ldr	r0, [pc, #160]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002e90:	f003 f946 	bl	8006120 <HAL_TIM_PWM_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002e9a:	f000 f99b 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4820      	ldr	r0, [pc, #128]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002eae:	f003 ff63 	bl	8006d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002eb8:	f000 f98c 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ebc:	2360      	movs	r3, #96	; 0x60
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ecc:	2304      	movs	r3, #4
 8002ece:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002edc:	2204      	movs	r2, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4813      	ldr	r0, [pc, #76]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002ee2:	f003 fa7d 	bl	80063e0 <HAL_TIM_PWM_ConfigChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002eec:	f000 f972 	bl	80031d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4807      	ldr	r0, [pc, #28]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002f14:	f003 ff8e 	bl	8006e34 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002f1e:	f000 f959 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f22:	4803      	ldr	r0, [pc, #12]	; (8002f30 <MX_TIM1_Init+0x138>)
 8002f24:	f000 fa9c 	bl	8003460 <HAL_TIM_MspPostInit>

}
 8002f28:	bf00      	nop
 8002f2a:	3758      	adds	r7, #88	; 0x58
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000120 	.word	0x20000120
 8002f34:	40012c00 	.word	0x40012c00

08002f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3e:	f107 0308 	add.w	r3, r7, #8
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f5e:	2247      	movs	r2, #71	; 0x47
 8002f60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f62:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f7c:	4813      	ldr	r0, [pc, #76]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f7e:	f002 ffe3 	bl	8005f48 <HAL_TIM_Base_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f88:	f000 f924 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	4619      	mov	r1, r3
 8002f98:	480c      	ldr	r0, [pc, #48]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002f9a:	f003 fae3 	bl	8006564 <HAL_TIM_ConfigClockSource>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002fa4:	f000 f916 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_TIM2_Init+0x94>)
 8002fb6:	f003 fedf 	bl	8006d78 <HAL_TIMEx_MasterConfigSynchronization>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fc0:	f000 f908 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000168 	.word	0x20000168

08002fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <MX_TIM3_Init+0x94>)
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <MX_TIM3_Init+0x98>)
 8002ff0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <MX_TIM3_Init+0x94>)
 8002ff4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002ff8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <MX_TIM3_Init+0x94>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <MX_TIM3_Init+0x94>)
 8003002:	2263      	movs	r2, #99	; 0x63
 8003004:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003006:	4b17      	ldr	r3, [pc, #92]	; (8003064 <MX_TIM3_Init+0x94>)
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <MX_TIM3_Init+0x94>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003012:	4814      	ldr	r0, [pc, #80]	; (8003064 <MX_TIM3_Init+0x94>)
 8003014:	f002 ff98 	bl	8005f48 <HAL_TIM_Base_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800301e:	f000 f8d9 	bl	80031d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003026:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003028:	f107 0308 	add.w	r3, r7, #8
 800302c:	4619      	mov	r1, r3
 800302e:	480d      	ldr	r0, [pc, #52]	; (8003064 <MX_TIM3_Init+0x94>)
 8003030:	f003 fa98 	bl	8006564 <HAL_TIM_ConfigClockSource>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800303a:	f000 f8cb 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003046:	463b      	mov	r3, r7
 8003048:	4619      	mov	r1, r3
 800304a:	4806      	ldr	r0, [pc, #24]	; (8003064 <MX_TIM3_Init+0x94>)
 800304c:	f003 fe94 	bl	8006d78 <HAL_TIMEx_MasterConfigSynchronization>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003056:	f000 f8bd 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200001b0 	.word	0x200001b0
 8003068:	40000400 	.word	0x40000400

0800306c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800307c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003092:	220c      	movs	r2, #12
 8003094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a2:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_USART1_UART_Init+0x4c>)
 80030a4:	f003 ff4d 	bl	8006f42 <HAL_UART_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030ae:	f000 f891 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200001f8 	.word	0x200001f8
 80030bc:	40013800 	.word	0x40013800

080030c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <MX_DMA_Init+0x38>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <MX_DMA_Init+0x38>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6153      	str	r3, [r2, #20]
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <MX_DMA_Init+0x38>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	200b      	movs	r0, #11
 80030e4:	f001 fddb 	bl	8004c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030e8:	200b      	movs	r0, #11
 80030ea:	f001 fdf4 	bl	8004cd6 <HAL_NVIC_EnableIRQ>

}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <MX_GPIO_Init+0xa8>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <MX_GPIO_Init+0xa8>)
 8003116:	f043 0320 	orr.w	r3, r3, #32
 800311a:	6193      	str	r3, [r2, #24]
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <MX_GPIO_Init+0xa8>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <MX_GPIO_Init+0xa8>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <MX_GPIO_Init+0xa8>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6193      	str	r3, [r2, #24]
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <MX_GPIO_Init+0xa8>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <MX_GPIO_Init+0xa8>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <MX_GPIO_Init+0xa8>)
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	6193      	str	r3, [r2, #24]
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <MX_GPIO_Init+0xa8>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 800315e:	4812      	ldr	r0, [pc, #72]	; (80031a8 <MX_GPIO_Init+0xac>)
 8003160:	f002 f95d 	bl	800541e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8003164:	237b      	movs	r3, #123	; 0x7b
 8003166:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	4619      	mov	r1, r3
 8003176:	480c      	ldr	r0, [pc, #48]	; (80031a8 <MX_GPIO_Init+0xac>)
 8003178:	f001 ffb6 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 800317c:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8003180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003182:	2301      	movs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2302      	movs	r3, #2
 800318c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	4619      	mov	r1, r3
 8003194:	4804      	ldr	r0, [pc, #16]	; (80031a8 <MX_GPIO_Init+0xac>)
 8003196:	f001 ffa7 	bl	80050e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800319a:	bf00      	nop
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010c00 	.word	0x40010c00

080031ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a05      	ldr	r2, [pc, #20]	; (80031cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80031be:	2201      	movs	r2, #1
 80031c0:	701a      	strb	r2, [r3, #0]
	}
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	200001b0 	.word	0x200001b0
 80031d0:	20002480 	.word	0x20002480

080031d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 80031dc:	20c8      	movs	r0, #200	; 0xc8
 80031de:	f000 fa93 	bl	8003708 <HAL_Delay>
	  NVIC_SystemReset();
 80031e2:	f7ff fbc9 	bl	8002978 <__NVIC_SystemReset>
	...

080031e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_MspInit+0x5c>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_MspInit+0x5c>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6193      	str	r3, [r2, #24]
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_MspInit+0x5c>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_MspInit+0x5c>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_MspInit+0x5c>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	61d3      	str	r3, [r2, #28]
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_MspInit+0x5c>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_MspInit+0x60>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_MspInit+0x60>)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	40021000 	.word	0x40021000
 8003248:	40010000 	.word	0x40010000

0800324c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a29      	ldr	r2, [pc, #164]	; (800330c <HAL_ADC_MspInit+0xc0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d14a      	bne.n	8003302 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_ADC_MspInit+0xc4>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_ADC_MspInit+0xc4>)
 8003272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003276:	6193      	str	r3, [r2, #24]
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_ADC_MspInit+0xc4>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_ADC_MspInit+0xc4>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_ADC_MspInit+0xc4>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6193      	str	r3, [r2, #24]
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_ADC_MspInit+0xc4>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800329c:	23ff      	movs	r3, #255	; 0xff
 800329e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a0:	2303      	movs	r3, #3
 80032a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	4619      	mov	r1, r3
 80032aa:	481a      	ldr	r0, [pc, #104]	; (8003314 <HAL_ADC_MspInit+0xc8>)
 80032ac:	f001 ff1c 	bl	80050e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032b2:	4a1a      	ldr	r2, [pc, #104]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032da:	2220      	movs	r2, #32
 80032dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032e6:	480c      	ldr	r0, [pc, #48]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032e8:	f001 fd10 	bl	8004d0c <HAL_DMA_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80032f2:	f7ff ff6f 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032fa:	621a      	str	r2, [r3, #32]
 80032fc:	4a06      	ldr	r2, [pc, #24]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003302:	bf00      	nop
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40012400 	.word	0x40012400
 8003310:	40021000 	.word	0x40021000
 8003314:	40010800 	.word	0x40010800
 8003318:	200000b4 	.word	0x200000b4
 800331c:	40020008 	.word	0x40020008

08003320 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_CAN_MspInit+0x9c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d139      	bne.n	80033b4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <HAL_CAN_MspInit+0xa0>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <HAL_CAN_MspInit+0xa0>)
 8003346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800334a:	61d3      	str	r3, [r2, #28]
 800334c:	4b1c      	ldr	r3, [pc, #112]	; (80033c0 <HAL_CAN_MspInit+0xa0>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_CAN_MspInit+0xa0>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_CAN_MspInit+0xa0>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <HAL_CAN_MspInit+0xa0>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003374:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	4619      	mov	r1, r3
 8003384:	480f      	ldr	r0, [pc, #60]	; (80033c4 <HAL_CAN_MspInit+0xa4>)
 8003386:	f001 feaf 	bl	80050e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800338a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	4619      	mov	r1, r3
 800339e:	4809      	ldr	r0, [pc, #36]	; (80033c4 <HAL_CAN_MspInit+0xa4>)
 80033a0:	f001 fea2 	bl	80050e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	2014      	movs	r0, #20
 80033aa:	f001 fc78 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80033ae:	2014      	movs	r0, #20
 80033b0:	f001 fc91 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40006400 	.word	0x40006400
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010800 	.word	0x40010800

080033c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_TIM_Base_MspInit+0x8c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033da:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 80033e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e4:	6193      	str	r3, [r2, #24]
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033f2:	e02a      	b.n	800344a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d10c      	bne.n	8003418 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	61d3      	str	r3, [r2, #28]
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	693b      	ldr	r3, [r7, #16]
}
 8003416:	e018      	b.n	800344a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_TIM_Base_MspInit+0x94>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d113      	bne.n	800344a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	61d3      	str	r3, [r2, #28]
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_TIM_Base_MspInit+0x90>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	201d      	movs	r0, #29
 8003440:	f001 fc2d 	bl	8004c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003444:	201d      	movs	r0, #29
 8003446:	f001 fc46 	bl	8004cd6 <HAL_NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40000400 	.word	0x40000400

08003460 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <HAL_TIM_MspPostInit+0x5c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d118      	bne.n	80034b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_TIM_MspPostInit+0x60>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <HAL_TIM_MspPostInit+0x60>)
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	6193      	str	r3, [r2, #24]
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_TIM_MspPostInit+0x60>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 8003498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800349c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349e:	2302      	movs	r3, #2
 80034a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	4619      	mov	r1, r3
 80034ac:	4805      	ldr	r0, [pc, #20]	; (80034c4 <HAL_TIM_MspPostInit+0x64>)
 80034ae:	f001 fe1b 	bl	80050e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034b2:	bf00      	nop
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010c00 	.word	0x40010c00

080034c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0310 	add.w	r3, r7, #16
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1c      	ldr	r2, [pc, #112]	; (8003554 <HAL_UART_MspInit+0x8c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d131      	bne.n	800354c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e8:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_UART_MspInit+0x90>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_UART_MspInit+0x90>)
 80034ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f2:	6193      	str	r3, [r2, #24]
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_UART_MspInit+0x90>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003500:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_UART_MspInit+0x90>)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <HAL_UART_MspInit+0x90>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	6193      	str	r3, [r2, #24]
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_UART_MspInit+0x90>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800351c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003522:	2303      	movs	r3, #3
 8003524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4619      	mov	r1, r3
 800352c:	480b      	ldr	r0, [pc, #44]	; (800355c <HAL_UART_MspInit+0x94>)
 800352e:	f001 fddb 	bl	80050e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	4619      	mov	r1, r3
 8003546:	4805      	ldr	r0, [pc, #20]	; (800355c <HAL_UART_MspInit+0x94>)
 8003548:	f001 fdce 	bl	80050e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800354c:	bf00      	nop
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40013800 	.word	0x40013800
 8003558:	40021000 	.word	0x40021000
 800355c:	40010800 	.word	0x40010800

08003560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003564:	e7fe      	b.n	8003564 <NMI_Handler+0x4>

08003566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <HardFault_Handler+0x4>

0800356c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <MemManage_Handler+0x4>

08003572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003576:	e7fe      	b.n	8003576 <BusFault_Handler+0x4>

08003578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800357c:	e7fe      	b.n	800357c <UsageFault_Handler+0x4>

0800357e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800358a:	b480      	push	{r7}
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a6:	f000 f893 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA1_Channel1_IRQHandler+0x10>)
 80035b6:	f001 fc63 	bl	8004e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200000b4 	.word	0x200000b4

080035c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80035ca:	f001 f87f 	bl	80046cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200000f8 	.word	0x200000f8

080035d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <TIM3_IRQHandler+0x10>)
 80035de:	f002 fdf7 	bl	80061d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200001b0 	.word	0x200001b0

080035ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035f8:	f7ff fff8 	bl	80035ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035fc:	480b      	ldr	r0, [pc, #44]	; (800362c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035fe:	490c      	ldr	r1, [pc, #48]	; (8003630 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003600:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003604:	e002      	b.n	800360c <LoopCopyDataInit>

08003606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360a:	3304      	adds	r3, #4

0800360c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800360c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800360e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003610:	d3f9      	bcc.n	8003606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003614:	4c09      	ldr	r4, [pc, #36]	; (800363c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003618:	e001      	b.n	800361e <LoopFillZerobss>

0800361a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800361c:	3204      	adds	r2, #4

0800361e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800361e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003620:	d3fb      	bcc.n	800361a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003622:	f003 fd75 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003626:	f7ff f9bd 	bl	80029a4 <main>
  bx lr
 800362a:	4770      	bx	lr
  ldr r0, =_sdata
 800362c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003630:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003634:	08007348 	.word	0x08007348
  ldr r2, =_sbss
 8003638:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800363c:	20002540 	.word	0x20002540

08003640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003640:	e7fe      	b.n	8003640 <ADC1_2_IRQHandler>
	...

08003644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_Init+0x28>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_Init+0x28>)
 800364e:	f043 0310 	orr.w	r3, r3, #16
 8003652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003654:	2003      	movs	r0, #3
 8003656:	f001 fb17 	bl	8004c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365a:	200f      	movs	r0, #15
 800365c:	f000 f808 	bl	8003670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003660:	f7ff fdc2 	bl	80031e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_InitTick+0x54>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_InitTick+0x58>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f001 fb2f 	bl	8004cf2 <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00e      	b.n	80036bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d80a      	bhi.n	80036ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f001 faf7 	bl	8004c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_InitTick+0x5c>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000008 	.word	0x20000008
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_IncTick+0x1c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_IncTick+0x20>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a03      	ldr	r2, [pc, #12]	; (80036f0 <HAL_IncTick+0x20>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	20000008 	.word	0x20000008
 80036f0:	2000253c 	.word	0x2000253c

080036f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <HAL_GetTick+0x10>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	2000253c 	.word	0x2000253c

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff fff0 	bl	80036f4 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffe0 	bl	80036f4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000008 	.word	0x20000008

08003750 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0be      	b.n	80038f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fd5c 	bl	800324c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 faf5 	bl	8003d84 <ADC_ConversionStop_Disable>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8099 	bne.w	80038de <HAL_ADC_Init+0x18e>
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f040 8095 	bne.w	80038de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037bc:	f023 0302 	bic.w	r3, r3, #2
 80037c0:	f043 0202 	orr.w	r2, r3, #2
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7b1b      	ldrb	r3, [r3, #12]
 80037d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80037d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e8:	d003      	beq.n	80037f2 <HAL_ADC_Init+0xa2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_ADC_Init+0xa8>
 80037f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f6:	e000      	b.n	80037fa <HAL_ADC_Init+0xaa>
 80037f8:	2300      	movs	r3, #0
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7d1b      	ldrb	r3, [r3, #20]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d119      	bne.n	800383c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7b1b      	ldrb	r3, [r3, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	3b01      	subs	r3, #1
 8003816:	035a      	lsls	r2, r3, #13
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e00b      	b.n	800383c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <HAL_ADC_Init+0x1a8>)
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	430b      	orrs	r3, r1
 8003862:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386c:	d003      	beq.n	8003876 <HAL_ADC_Init+0x126>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d104      	bne.n	8003880 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	3b01      	subs	r3, #1
 800387c:	051b      	lsls	r3, r3, #20
 800387e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	430a      	orrs	r2, r1
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_ADC_Init+0x1ac>)
 800389c:	4013      	ands	r3, r2
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d10b      	bne.n	80038bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038ba:	e018      	b.n	80038ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	f023 0312 	bic.w	r3, r3, #18
 80038c4:	f043 0210 	orr.w	r2, r3, #16
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038dc:	e007      	b.n	80038ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	f043 0210 	orr.w	r2, r3, #16
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	ffe1f7fd 	.word	0xffe1f7fd
 80038fc:	ff1f0efe 	.word	0xff1f0efe

08003900 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a64      	ldr	r2, [pc, #400]	; (8003aa8 <HAL_ADC_Start_DMA+0x1a8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_ADC_Start_DMA+0x24>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a63      	ldr	r2, [pc, #396]	; (8003aac <HAL_ADC_Start_DMA+0x1ac>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d106      	bne.n	8003932 <HAL_ADC_Start_DMA+0x32>
 8003924:	4b60      	ldr	r3, [pc, #384]	; (8003aa8 <HAL_ADC_Start_DMA+0x1a8>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 80b3 	bne.w	8003a98 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_ADC_Start_DMA+0x40>
 800393c:	2302      	movs	r3, #2
 800393e:	e0ae      	b.n	8003a9e <HAL_ADC_Start_DMA+0x19e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f9c1 	bl	8003cd0 <ADC_Enable>
 800394e:	4603      	mov	r3, r0
 8003950:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 809a 	bne.w	8003a8e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4e      	ldr	r2, [pc, #312]	; (8003aac <HAL_ADC_Start_DMA+0x1ac>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d105      	bne.n	8003984 <HAL_ADC_Start_DMA+0x84>
 8003978:	4b4b      	ldr	r3, [pc, #300]	; (8003aa8 <HAL_ADC_Start_DMA+0x1a8>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d115      	bne.n	80039b0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d026      	beq.n	80039ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039ae:	e01d      	b.n	80039ec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a39      	ldr	r2, [pc, #228]	; (8003aa8 <HAL_ADC_Start_DMA+0x1a8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <HAL_ADC_Start_DMA+0xd0>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a38      	ldr	r2, [pc, #224]	; (8003aac <HAL_ADC_Start_DMA+0x1ac>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10d      	bne.n	80039ec <HAL_ADC_Start_DMA+0xec>
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <HAL_ADC_Start_DMA+0x1a8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d006      	beq.n	8003a06 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f023 0206 	bic.w	r2, r3, #6
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <HAL_ADC_Start_DMA+0x1b0>)
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <HAL_ADC_Start_DMA+0x1b4>)
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <HAL_ADC_Start_DMA+0x1b8>)
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0202 	mvn.w	r2, #2
 8003a34:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a44:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a18      	ldr	r0, [r3, #32]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	334c      	adds	r3, #76	; 0x4c
 8003a50:	4619      	mov	r1, r3
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f001 f9b3 	bl	8004dc0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003a64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003a68:	d108      	bne.n	8003a7c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003a78:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003a7a:	e00f      	b.n	8003a9c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003a8a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003a8c:	e006      	b.n	8003a9c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003a96:	e001      	b.n	8003a9c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40012400 	.word	0x40012400
 8003aac:	40012800 	.word	0x40012800
 8003ab0:	08003e07 	.word	0x08003e07
 8003ab4:	08003e83 	.word	0x08003e83
 8003ab8:	08003e9f 	.word	0x08003e9f

08003abc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x20>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0dc      	b.n	8003cba <HAL_ADC_ConfigChannel+0x1da>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d81c      	bhi.n	8003b4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b05      	subs	r3, #5
 8003b22:	221f      	movs	r2, #31
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	4019      	ands	r1, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	3b05      	subs	r3, #5
 8003b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	635a      	str	r2, [r3, #52]	; 0x34
 8003b48:	e03c      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d81c      	bhi.n	8003b8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	3b23      	subs	r3, #35	; 0x23
 8003b64:	221f      	movs	r2, #31
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	4019      	ands	r1, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3b23      	subs	r3, #35	; 0x23
 8003b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8a:	e01b      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3b41      	subs	r3, #65	; 0x41
 8003b9e:	221f      	movs	r2, #31
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	4019      	ands	r1, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b41      	subs	r3, #65	; 0x41
 8003bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b09      	cmp	r3, #9
 8003bca:	d91c      	bls.n	8003c06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68d9      	ldr	r1, [r3, #12]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	3b1e      	subs	r3, #30
 8003bde:	2207      	movs	r2, #7
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	4019      	ands	r1, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6898      	ldr	r0, [r3, #8]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3b1e      	subs	r3, #30
 8003bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	e019      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6919      	ldr	r1, [r3, #16]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	2207      	movs	r2, #7
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	4019      	ands	r1, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6898      	ldr	r0, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d003      	beq.n	8003c4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c46:	2b11      	cmp	r3, #17
 8003c48:	d132      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d125      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d126      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d11a      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <HAL_ADC_ConfigChannel+0x1ec>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	0c9a      	lsrs	r2, r3, #18
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c90:	e002      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f9      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x1b2>
 8003c9e:	e007      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40012400 	.word	0x40012400
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	431bde83 	.word	0x431bde83

08003cd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d040      	beq.n	8003d70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <ADC_Enable+0xac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <ADC_Enable+0xb0>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	0c9b      	lsrs	r3, r3, #18
 8003d0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d0c:	e002      	b.n	8003d14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f9      	bne.n	8003d0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d1a:	f7ff fceb 	bl	80036f4 <HAL_GetTick>
 8003d1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d20:	e01f      	b.n	8003d62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d22:	f7ff fce7 	bl	80036f4 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d918      	bls.n	8003d62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d011      	beq.n	8003d62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f043 0210 	orr.w	r2, r3, #16
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	f043 0201 	orr.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e007      	b.n	8003d72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d1d8      	bne.n	8003d22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	431bde83 	.word	0x431bde83

08003d84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d12e      	bne.n	8003dfc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0201 	bic.w	r2, r2, #1
 8003dac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dae:	f7ff fca1 	bl	80036f4 <HAL_GetTick>
 8003db2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003db4:	e01b      	b.n	8003dee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003db6:	f7ff fc9d 	bl	80036f4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d914      	bls.n	8003dee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d10d      	bne.n	8003dee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	f043 0210 	orr.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e007      	b.n	8003dfe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d0dc      	beq.n	8003db6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d127      	bne.n	8003e70 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003e36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e3a:	d115      	bne.n	8003e68 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d111      	bne.n	8003e68 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f043 0201 	orr.w	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fe27 	bl	8003abc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003e6e:	e004      	b.n	8003e7a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7fe fc53 	bl	800273c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff fe02 	bl	8003ace <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADCEx_Calibration_Start+0x1e>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e097      	b.n	8004022 <HAL_ADCEx_Calibration_Start+0x14e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ff42 	bl	8003d84 <ADC_ConversionStop_Disable>
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fee3 	bl	8003cd0 <ADC_Enable>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 8081 	bne.w	8004018 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f1e:	f023 0302 	bic.w	r3, r3, #2
 8003f22:	f043 0202 	orr.w	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003f2a:	4b40      	ldr	r3, [pc, #256]	; (800402c <HAL_ADCEx_Calibration_Start+0x158>)
 8003f2c:	681c      	ldr	r4, [r3, #0]
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f001 ff54 	bl	8005ddc <HAL_RCCEx_GetPeriphCLKFreq>
 8003f34:	4603      	mov	r3, r0
 8003f36:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003f3a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003f3c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003f3e:	e002      	b.n	8003f46 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f9      	bne.n	8003f40 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0208 	orr.w	r2, r2, #8
 8003f5a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003f5c:	f7ff fbca 	bl	80036f4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003f62:	e01b      	b.n	8003f9c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003f64:	f7ff fbc6 	bl	80036f4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b0a      	cmp	r3, #10
 8003f70:	d914      	bls.n	8003f9c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	f023 0312 	bic.w	r3, r3, #18
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e042      	b.n	8004022 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1dc      	bne.n	8003f64 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0204 	orr.w	r2, r2, #4
 8003fb8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003fba:	f7ff fb9b 	bl	80036f4 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003fc0:	e01b      	b.n	8003ffa <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003fc2:	f7ff fb97 	bl	80036f4 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b0a      	cmp	r3, #10
 8003fce:	d914      	bls.n	8003ffa <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	f023 0312 	bic.w	r3, r3, #18
 8003fe6:	f043 0210 	orr.w	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e013      	b.n	8004022 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1dc      	bne.n	8003fc2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	f023 0303 	bic.w	r3, r3, #3
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
}
 8004022:	4618      	mov	r0, r3
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	bd90      	pop	{r4, r7, pc}
 800402a:	bf00      	nop
 800402c:	20000000 	.word	0x20000000

08004030 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e0ed      	b.n	800421e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff f966 	bl	8003320 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004064:	f7ff fb46 	bl	80036f4 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800406a:	e012      	b.n	8004092 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800406c:	f7ff fb42 	bl	80036f4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b0a      	cmp	r3, #10
 8004078:	d90b      	bls.n	8004092 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2205      	movs	r2, #5
 800408a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0c5      	b.n	800421e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0e5      	beq.n	800406c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0202 	bic.w	r2, r2, #2
 80040ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b0:	f7ff fb20 	bl	80036f4 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040b6:	e012      	b.n	80040de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040b8:	f7ff fb1c 	bl	80036f4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b0a      	cmp	r3, #10
 80040c4:	d90b      	bls.n	80040de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2205      	movs	r2, #5
 80040d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e09f      	b.n	800421e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e5      	bne.n	80040b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7e1b      	ldrb	r3, [r3, #24]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d108      	bne.n	8004106 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e007      	b.n	8004116 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7e5b      	ldrb	r3, [r3, #25]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d108      	bne.n	8004130 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e007      	b.n	8004140 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7e9b      	ldrb	r3, [r3, #26]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d108      	bne.n	800415a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0220 	orr.w	r2, r2, #32
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e007      	b.n	800416a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0220 	bic.w	r2, r2, #32
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7edb      	ldrb	r3, [r3, #27]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d108      	bne.n	8004184 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0210 	bic.w	r2, r2, #16
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e007      	b.n	8004194 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0210 	orr.w	r2, r2, #16
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7f1b      	ldrb	r3, [r3, #28]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d108      	bne.n	80041ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e007      	b.n	80041be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0208 	bic.w	r2, r2, #8
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7f5b      	ldrb	r3, [r3, #29]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d108      	bne.n	80041d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0204 	orr.w	r2, r2, #4
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e007      	b.n	80041e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	ea42 0103 	orr.w	r1, r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	1e5a      	subs	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d003      	beq.n	800424c <HAL_CAN_ConfigFilter+0x26>
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b02      	cmp	r3, #2
 8004248:	f040 80aa 	bne.w	80043a0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 031f 	and.w	r3, r3, #31
 8004264:	2201      	movs	r2, #1
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d123      	bne.n	80042ce <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	401a      	ands	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	3248      	adds	r2, #72	; 0x48
 80042ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042c4:	6979      	ldr	r1, [r7, #20]
 80042c6:	3348      	adds	r3, #72	; 0x48
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	440b      	add	r3, r1
 80042cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d122      	bne.n	800431c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	431a      	orrs	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80042f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3248      	adds	r2, #72	; 0x48
 80042fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004310:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004312:	6979      	ldr	r1, [r7, #20]
 8004314:	3348      	adds	r3, #72	; 0x48
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	43db      	mvns	r3, r3
 800432e:	401a      	ands	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004336:	e007      	b.n	8004348 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	431a      	orrs	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004362:	e007      	b.n	8004374 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	431a      	orrs	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d107      	bne.n	800438c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	431a      	orrs	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004392:	f023 0201 	bic.w	r2, r3, #1
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e006      	b.n	80043ae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d12e      	bne.n	800442a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e4:	f7ff f986 	bl	80036f4 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80043ea:	e012      	b.n	8004412 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043ec:	f7ff f982 	bl	80036f4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b0a      	cmp	r3, #10
 80043f8:	d90b      	bls.n	8004412 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2205      	movs	r2, #5
 800440a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e012      	b.n	8004438 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e006      	b.n	8004438 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004454:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d003      	beq.n	8004464 <HAL_CAN_GetRxMessage+0x24>
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b02      	cmp	r3, #2
 8004460:	f040 8103 	bne.w	800466a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10e      	bne.n	8004488 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0f7      	b.n	8004678 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0e8      	b.n	8004678 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	331b      	adds	r3, #27
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	4413      	add	r3, r2
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0204 	and.w	r2, r3, #4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10c      	bne.n	80044de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	331b      	adds	r3, #27
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	4413      	add	r3, r2
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	0d5b      	lsrs	r3, r3, #21
 80044d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e00b      	b.n	80044f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	331b      	adds	r3, #27
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4413      	add	r3, r2
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	08db      	lsrs	r3, r3, #3
 80044ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	331b      	adds	r3, #27
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0202 	and.w	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	331b      	adds	r3, #27
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4413      	add	r3, r2
 8004518:	3304      	adds	r3, #4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2208      	movs	r2, #8
 8004528:	611a      	str	r2, [r3, #16]
 800452a:	e00b      	b.n	8004544 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	331b      	adds	r3, #27
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 020f 	and.w	r2, r3, #15
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	331b      	adds	r3, #27
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4413      	add	r3, r2
 8004550:	3304      	adds	r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	331b      	adds	r3, #27
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	4413      	add	r3, r2
 800457e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0a1a      	lsrs	r2, r3, #8
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	3301      	adds	r3, #1
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0c1a      	lsrs	r2, r3, #16
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3302      	adds	r3, #2
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0e1a      	lsrs	r2, r3, #24
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	3303      	adds	r3, #3
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3304      	adds	r3, #4
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0a1a      	lsrs	r2, r3, #8
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3305      	adds	r3, #5
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4413      	add	r3, r2
 8004614:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0c1a      	lsrs	r2, r3, #16
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3306      	adds	r3, #6
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0e1a      	lsrs	r2, r3, #24
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3307      	adds	r3, #7
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d108      	bne.n	8004656 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0220 	orr.w	r2, r2, #32
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e007      	b.n	8004666 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0220 	orr.w	r2, r2, #32
 8004664:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e006      	b.n	8004678 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004692:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d002      	beq.n	80046a0 <HAL_CAN_ActivateNotification+0x1e>
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d109      	bne.n	80046b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6959      	ldr	r1, [r3, #20]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e006      	b.n	80046c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
  }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d07c      	beq.n	800480c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d023      	beq.n	8004764 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f983 	bl	8004a3a <HAL_CAN_TxMailbox0CompleteCallback>
 8004734:	e016      	b.n	8004764 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	e00c      	b.n	8004764 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	e002      	b.n	8004764 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f986 	bl	8004a70 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d024      	beq.n	80047b8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004776:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f962 	bl	8004a4c <HAL_CAN_TxMailbox1CompleteCallback>
 8004788:	e016      	b.n	80047b8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	e00c      	b.n	80047b8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	e002      	b.n	80047b8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f965 	bl	8004a82 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d024      	beq.n	800480c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f941 	bl	8004a5e <HAL_CAN_TxMailbox2CompleteCallback>
 80047dc:	e016      	b.n	800480c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	e00c      	b.n	800480c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	e002      	b.n	800480c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f944 	bl	8004a94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004826:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2210      	movs	r2, #16
 800482e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f92a 	bl	8004aa6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d009      	beq.n	8004870 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd ff3b 	bl	80026e6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800488a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2210      	movs	r2, #16
 8004892:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d006      	beq.n	80048b6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2208      	movs	r2, #8
 80048ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f901 	bl	8004ab8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd ff15 	bl	80026fe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2210      	movs	r2, #16
 80048ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8ea 	bl	8004aca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d006      	beq.n	8004918 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2208      	movs	r2, #8
 8004910:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8e2 	bl	8004adc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d07b      	beq.n	8004a1a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d072      	beq.n	8004a12 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004986:	2b00      	cmp	r3, #0
 8004988:	d043      	beq.n	8004a12 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004990:	2b00      	cmp	r3, #0
 8004992:	d03e      	beq.n	8004a12 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800499a:	2b60      	cmp	r3, #96	; 0x60
 800499c:	d02b      	beq.n	80049f6 <HAL_CAN_IRQHandler+0x32a>
 800499e:	2b60      	cmp	r3, #96	; 0x60
 80049a0:	d82e      	bhi.n	8004a00 <HAL_CAN_IRQHandler+0x334>
 80049a2:	2b50      	cmp	r3, #80	; 0x50
 80049a4:	d022      	beq.n	80049ec <HAL_CAN_IRQHandler+0x320>
 80049a6:	2b50      	cmp	r3, #80	; 0x50
 80049a8:	d82a      	bhi.n	8004a00 <HAL_CAN_IRQHandler+0x334>
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d019      	beq.n	80049e2 <HAL_CAN_IRQHandler+0x316>
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d826      	bhi.n	8004a00 <HAL_CAN_IRQHandler+0x334>
 80049b2:	2b30      	cmp	r3, #48	; 0x30
 80049b4:	d010      	beq.n	80049d8 <HAL_CAN_IRQHandler+0x30c>
 80049b6:	2b30      	cmp	r3, #48	; 0x30
 80049b8:	d822      	bhi.n	8004a00 <HAL_CAN_IRQHandler+0x334>
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d002      	beq.n	80049c4 <HAL_CAN_IRQHandler+0x2f8>
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d005      	beq.n	80049ce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049c2:	e01d      	b.n	8004a00 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049cc:	e019      	b.n	8004a02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	f043 0310 	orr.w	r3, r3, #16
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049d6:	e014      	b.n	8004a02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f043 0320 	orr.w	r3, r3, #32
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049e0:	e00f      	b.n	8004a02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ea:	e00a      	b.n	8004a02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049f4:	e005      	b.n	8004a02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049fe:	e000      	b.n	8004a02 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2204      	movs	r2, #4
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fd fe73 	bl	8002718 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a32:	bf00      	nop
 8004a34:	3728      	adds	r7, #40	; 0x28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc80      	pop	{r7}
 8004a80:	4770      	bx	lr

08004a82 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
	...

08004af0 <__NVIC_SetPriorityGrouping>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <__NVIC_SetPriorityGrouping+0x44>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b22:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <__NVIC_SetPriorityGrouping+0x44>)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	60d3      	str	r3, [r2, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <__NVIC_GetPriorityGrouping>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b3c:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <__NVIC_GetPriorityGrouping+0x18>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	f003 0307 	and.w	r3, r3, #7
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <__NVIC_EnableIRQ>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	db0b      	blt.n	8004b7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	f003 021f 	and.w	r2, r3, #31
 8004b6c:	4906      	ldr	r1, [pc, #24]	; (8004b88 <__NVIC_EnableIRQ+0x34>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2001      	movs	r0, #1
 8004b76:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <__NVIC_SetPriority>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	db0a      	blt.n	8004bb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	490c      	ldr	r1, [pc, #48]	; (8004bd8 <__NVIC_SetPriority+0x4c>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bb4:	e00a      	b.n	8004bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4908      	ldr	r1, [pc, #32]	; (8004bdc <__NVIC_SetPriority+0x50>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	761a      	strb	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e100 	.word	0xe000e100
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <NVIC_EncodePriority>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf28      	it	cs
 8004bfe:	2304      	movcs	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d902      	bls.n	8004c10 <NVIC_EncodePriority+0x30>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3b03      	subs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <NVIC_EncodePriority+0x32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c28:	f04f 31ff 	mov.w	r1, #4294967295
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43d9      	mvns	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	4313      	orrs	r3, r2
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3724      	adds	r7, #36	; 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c54:	d301      	bcc.n	8004c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c56:	2301      	movs	r3, #1
 8004c58:	e00f      	b.n	8004c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <SysTick_Config+0x40>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c62:	210f      	movs	r1, #15
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	f7ff ff90 	bl	8004b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <SysTick_Config+0x40>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c72:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <SysTick_Config+0x40>)
 8004c74:	2207      	movs	r2, #7
 8004c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	e000e010 	.word	0xe000e010

08004c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff2d 	bl	8004af0 <__NVIC_SetPriorityGrouping>
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb0:	f7ff ff42 	bl	8004b38 <__NVIC_GetPriorityGrouping>
 8004cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7ff ff90 	bl	8004be0 <NVIC_EncodePriority>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff5f 	bl	8004b8c <__NVIC_SetPriority>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff35 	bl	8004b54 <__NVIC_EnableIRQ>
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffa2 	bl	8004c44 <SysTick_Config>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e043      	b.n	8004daa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <HAL_DMA_Init+0xa8>)
 8004d2a:	4413      	add	r3, r2
 8004d2c:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <HAL_DMA_Init+0xac>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	009a      	lsls	r2, r3, #2
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_DMA_Init+0xb0>)
 8004d3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	bffdfff8 	.word	0xbffdfff8
 8004db8:	cccccccd 	.word	0xcccccccd
 8004dbc:	40020000 	.word	0x40020000

08004dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_DMA_Start_IT+0x20>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e04b      	b.n	8004e78 <HAL_DMA_Start_IT+0xb8>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d13a      	bne.n	8004e6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f937 	bl	800508c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 020e 	orr.w	r2, r2, #14
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e00f      	b.n	8004e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0204 	bic.w	r2, r2, #4
 8004e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 020a 	orr.w	r2, r2, #10
 8004e56:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e005      	b.n	8004e76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
 8004e74:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d04f      	beq.n	8004f48 <HAL_DMA_IRQHandler+0xc8>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d04a      	beq.n	8004f48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0204 	bic.w	r2, r2, #4
 8004ece:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a66      	ldr	r2, [pc, #408]	; (8005070 <HAL_DMA_IRQHandler+0x1f0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d029      	beq.n	8004f2e <HAL_DMA_IRQHandler+0xae>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a65      	ldr	r2, [pc, #404]	; (8005074 <HAL_DMA_IRQHandler+0x1f4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d022      	beq.n	8004f2a <HAL_DMA_IRQHandler+0xaa>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a63      	ldr	r2, [pc, #396]	; (8005078 <HAL_DMA_IRQHandler+0x1f8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01a      	beq.n	8004f24 <HAL_DMA_IRQHandler+0xa4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a62      	ldr	r2, [pc, #392]	; (800507c <HAL_DMA_IRQHandler+0x1fc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d012      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x9e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a60      	ldr	r2, [pc, #384]	; (8005080 <HAL_DMA_IRQHandler+0x200>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00a      	beq.n	8004f18 <HAL_DMA_IRQHandler+0x98>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5f      	ldr	r2, [pc, #380]	; (8005084 <HAL_DMA_IRQHandler+0x204>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d102      	bne.n	8004f12 <HAL_DMA_IRQHandler+0x92>
 8004f0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f10:	e00e      	b.n	8004f30 <HAL_DMA_IRQHandler+0xb0>
 8004f12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f16:	e00b      	b.n	8004f30 <HAL_DMA_IRQHandler+0xb0>
 8004f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f1c:	e008      	b.n	8004f30 <HAL_DMA_IRQHandler+0xb0>
 8004f1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f22:	e005      	b.n	8004f30 <HAL_DMA_IRQHandler+0xb0>
 8004f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f28:	e002      	b.n	8004f30 <HAL_DMA_IRQHandler+0xb0>
 8004f2a:	2340      	movs	r3, #64	; 0x40
 8004f2c:	e000      	b.n	8004f30 <HAL_DMA_IRQHandler+0xb0>
 8004f2e:	2304      	movs	r3, #4
 8004f30:	4a55      	ldr	r2, [pc, #340]	; (8005088 <HAL_DMA_IRQHandler+0x208>)
 8004f32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8094 	beq.w	8005066 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004f46:	e08e      	b.n	8005066 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d056      	beq.n	8005006 <HAL_DMA_IRQHandler+0x186>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d051      	beq.n	8005006 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 020a 	bic.w	r2, r2, #10
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a38      	ldr	r2, [pc, #224]	; (8005070 <HAL_DMA_IRQHandler+0x1f0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d029      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x166>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a37      	ldr	r2, [pc, #220]	; (8005074 <HAL_DMA_IRQHandler+0x1f4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d022      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x162>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a35      	ldr	r2, [pc, #212]	; (8005078 <HAL_DMA_IRQHandler+0x1f8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01a      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x15c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a34      	ldr	r2, [pc, #208]	; (800507c <HAL_DMA_IRQHandler+0x1fc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d012      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x156>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a32      	ldr	r2, [pc, #200]	; (8005080 <HAL_DMA_IRQHandler+0x200>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x150>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a31      	ldr	r2, [pc, #196]	; (8005084 <HAL_DMA_IRQHandler+0x204>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d102      	bne.n	8004fca <HAL_DMA_IRQHandler+0x14a>
 8004fc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fc8:	e00e      	b.n	8004fe8 <HAL_DMA_IRQHandler+0x168>
 8004fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fce:	e00b      	b.n	8004fe8 <HAL_DMA_IRQHandler+0x168>
 8004fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fd4:	e008      	b.n	8004fe8 <HAL_DMA_IRQHandler+0x168>
 8004fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fda:	e005      	b.n	8004fe8 <HAL_DMA_IRQHandler+0x168>
 8004fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fe0:	e002      	b.n	8004fe8 <HAL_DMA_IRQHandler+0x168>
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	e000      	b.n	8004fe8 <HAL_DMA_IRQHandler+0x168>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	4a27      	ldr	r2, [pc, #156]	; (8005088 <HAL_DMA_IRQHandler+0x208>)
 8004fea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d034      	beq.n	8005066 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005004:	e02f      	b.n	8005066 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2208      	movs	r2, #8
 800500c:	409a      	lsls	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4013      	ands	r3, r2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d028      	beq.n	8005068 <HAL_DMA_IRQHandler+0x1e8>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d023      	beq.n	8005068 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 020e 	bic.w	r2, r2, #14
 800502e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005038:	2101      	movs	r1, #1
 800503a:	fa01 f202 	lsl.w	r2, r1, r2
 800503e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
    }
  }
  return;
 8005066:	bf00      	nop
 8005068:	bf00      	nop
}
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40020008 	.word	0x40020008
 8005074:	4002001c 	.word	0x4002001c
 8005078:	40020030 	.word	0x40020030
 800507c:	40020044 	.word	0x40020044
 8005080:	40020058 	.word	0x40020058
 8005084:	4002006c 	.word	0x4002006c
 8005088:	40020000 	.word	0x40020000

0800508c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	2101      	movs	r1, #1
 80050a4:	fa01 f202 	lsl.w	r2, r1, r2
 80050a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d108      	bne.n	80050cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80050ca:	e007      	b.n	80050dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80050f6:	2300      	movs	r3, #0
 80050f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050fa:	e169      	b.n	80053d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80050fc:	2201      	movs	r2, #1
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	429a      	cmp	r2, r3
 8005116:	f040 8158 	bne.w	80053ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4a9a      	ldr	r2, [pc, #616]	; (8005388 <HAL_GPIO_Init+0x2a0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d05e      	beq.n	80051e2 <HAL_GPIO_Init+0xfa>
 8005124:	4a98      	ldr	r2, [pc, #608]	; (8005388 <HAL_GPIO_Init+0x2a0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d875      	bhi.n	8005216 <HAL_GPIO_Init+0x12e>
 800512a:	4a98      	ldr	r2, [pc, #608]	; (800538c <HAL_GPIO_Init+0x2a4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d058      	beq.n	80051e2 <HAL_GPIO_Init+0xfa>
 8005130:	4a96      	ldr	r2, [pc, #600]	; (800538c <HAL_GPIO_Init+0x2a4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d86f      	bhi.n	8005216 <HAL_GPIO_Init+0x12e>
 8005136:	4a96      	ldr	r2, [pc, #600]	; (8005390 <HAL_GPIO_Init+0x2a8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d052      	beq.n	80051e2 <HAL_GPIO_Init+0xfa>
 800513c:	4a94      	ldr	r2, [pc, #592]	; (8005390 <HAL_GPIO_Init+0x2a8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d869      	bhi.n	8005216 <HAL_GPIO_Init+0x12e>
 8005142:	4a94      	ldr	r2, [pc, #592]	; (8005394 <HAL_GPIO_Init+0x2ac>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04c      	beq.n	80051e2 <HAL_GPIO_Init+0xfa>
 8005148:	4a92      	ldr	r2, [pc, #584]	; (8005394 <HAL_GPIO_Init+0x2ac>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d863      	bhi.n	8005216 <HAL_GPIO_Init+0x12e>
 800514e:	4a92      	ldr	r2, [pc, #584]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d046      	beq.n	80051e2 <HAL_GPIO_Init+0xfa>
 8005154:	4a90      	ldr	r2, [pc, #576]	; (8005398 <HAL_GPIO_Init+0x2b0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d85d      	bhi.n	8005216 <HAL_GPIO_Init+0x12e>
 800515a:	2b12      	cmp	r3, #18
 800515c:	d82a      	bhi.n	80051b4 <HAL_GPIO_Init+0xcc>
 800515e:	2b12      	cmp	r3, #18
 8005160:	d859      	bhi.n	8005216 <HAL_GPIO_Init+0x12e>
 8005162:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <HAL_GPIO_Init+0x80>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	080051e3 	.word	0x080051e3
 800516c:	080051bd 	.word	0x080051bd
 8005170:	080051cf 	.word	0x080051cf
 8005174:	08005211 	.word	0x08005211
 8005178:	08005217 	.word	0x08005217
 800517c:	08005217 	.word	0x08005217
 8005180:	08005217 	.word	0x08005217
 8005184:	08005217 	.word	0x08005217
 8005188:	08005217 	.word	0x08005217
 800518c:	08005217 	.word	0x08005217
 8005190:	08005217 	.word	0x08005217
 8005194:	08005217 	.word	0x08005217
 8005198:	08005217 	.word	0x08005217
 800519c:	08005217 	.word	0x08005217
 80051a0:	08005217 	.word	0x08005217
 80051a4:	08005217 	.word	0x08005217
 80051a8:	08005217 	.word	0x08005217
 80051ac:	080051c5 	.word	0x080051c5
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	4a79      	ldr	r2, [pc, #484]	; (800539c <HAL_GPIO_Init+0x2b4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80051ba:	e02c      	b.n	8005216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	623b      	str	r3, [r7, #32]
          break;
 80051c2:	e029      	b.n	8005218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	3304      	adds	r3, #4
 80051ca:	623b      	str	r3, [r7, #32]
          break;
 80051cc:	e024      	b.n	8005218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	3308      	adds	r3, #8
 80051d4:	623b      	str	r3, [r7, #32]
          break;
 80051d6:	e01f      	b.n	8005218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	330c      	adds	r3, #12
 80051de:	623b      	str	r3, [r7, #32]
          break;
 80051e0:	e01a      	b.n	8005218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80051ea:	2304      	movs	r3, #4
 80051ec:	623b      	str	r3, [r7, #32]
          break;
 80051ee:	e013      	b.n	8005218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d105      	bne.n	8005204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051f8:	2308      	movs	r3, #8
 80051fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	611a      	str	r2, [r3, #16]
          break;
 8005202:	e009      	b.n	8005218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005204:	2308      	movs	r3, #8
 8005206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	615a      	str	r2, [r3, #20]
          break;
 800520e:	e003      	b.n	8005218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005210:	2300      	movs	r3, #0
 8005212:	623b      	str	r3, [r7, #32]
          break;
 8005214:	e000      	b.n	8005218 <HAL_GPIO_Init+0x130>
          break;
 8005216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	2bff      	cmp	r3, #255	; 0xff
 800521c:	d801      	bhi.n	8005222 <HAL_GPIO_Init+0x13a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	e001      	b.n	8005226 <HAL_GPIO_Init+0x13e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2bff      	cmp	r3, #255	; 0xff
 800522c:	d802      	bhi.n	8005234 <HAL_GPIO_Init+0x14c>
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	e002      	b.n	800523a <HAL_GPIO_Init+0x152>
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	3b08      	subs	r3, #8
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	210f      	movs	r1, #15
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	401a      	ands	r2, r3
 800524c:	6a39      	ldr	r1, [r7, #32]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	431a      	orrs	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80b1 	beq.w	80053ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005268:	4b4d      	ldr	r3, [pc, #308]	; (80053a0 <HAL_GPIO_Init+0x2b8>)
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	4a4c      	ldr	r2, [pc, #304]	; (80053a0 <HAL_GPIO_Init+0x2b8>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6193      	str	r3, [r2, #24]
 8005274:	4b4a      	ldr	r3, [pc, #296]	; (80053a0 <HAL_GPIO_Init+0x2b8>)
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005280:	4a48      	ldr	r2, [pc, #288]	; (80053a4 <HAL_GPIO_Init+0x2bc>)
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	3302      	adds	r3, #2
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	220f      	movs	r2, #15
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4013      	ands	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a40      	ldr	r2, [pc, #256]	; (80053a8 <HAL_GPIO_Init+0x2c0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <HAL_GPIO_Init+0x1ec>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3f      	ldr	r2, [pc, #252]	; (80053ac <HAL_GPIO_Init+0x2c4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00d      	beq.n	80052d0 <HAL_GPIO_Init+0x1e8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3e      	ldr	r2, [pc, #248]	; (80053b0 <HAL_GPIO_Init+0x2c8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <HAL_GPIO_Init+0x1e4>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3d      	ldr	r2, [pc, #244]	; (80053b4 <HAL_GPIO_Init+0x2cc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_GPIO_Init+0x1e0>
 80052c4:	2303      	movs	r3, #3
 80052c6:	e006      	b.n	80052d6 <HAL_GPIO_Init+0x1ee>
 80052c8:	2304      	movs	r3, #4
 80052ca:	e004      	b.n	80052d6 <HAL_GPIO_Init+0x1ee>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e002      	b.n	80052d6 <HAL_GPIO_Init+0x1ee>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <HAL_GPIO_Init+0x1ee>
 80052d4:	2300      	movs	r3, #0
 80052d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d8:	f002 0203 	and.w	r2, r2, #3
 80052dc:	0092      	lsls	r2, r2, #2
 80052de:	4093      	lsls	r3, r2
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80052e6:	492f      	ldr	r1, [pc, #188]	; (80053a4 <HAL_GPIO_Init+0x2bc>)
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	3302      	adds	r3, #2
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005300:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	492c      	ldr	r1, [pc, #176]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	4313      	orrs	r3, r2
 800530a:	608b      	str	r3, [r1, #8]
 800530c:	e006      	b.n	800531c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800530e:	4b2a      	ldr	r3, [pc, #168]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	43db      	mvns	r3, r3
 8005316:	4928      	ldr	r1, [pc, #160]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005318:	4013      	ands	r3, r2
 800531a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005328:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	4922      	ldr	r1, [pc, #136]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4313      	orrs	r3, r2
 8005332:	60cb      	str	r3, [r1, #12]
 8005334:	e006      	b.n	8005344 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	43db      	mvns	r3, r3
 800533e:	491e      	ldr	r1, [pc, #120]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005340:	4013      	ands	r3, r2
 8005342:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d006      	beq.n	800535e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	4918      	ldr	r1, [pc, #96]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4313      	orrs	r3, r2
 800535a:	604b      	str	r3, [r1, #4]
 800535c:	e006      	b.n	800536c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800535e:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	43db      	mvns	r3, r3
 8005366:	4914      	ldr	r1, [pc, #80]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 8005368:	4013      	ands	r3, r2
 800536a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d021      	beq.n	80053bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	490e      	ldr	r1, [pc, #56]	; (80053b8 <HAL_GPIO_Init+0x2d0>)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]
 8005384:	e021      	b.n	80053ca <HAL_GPIO_Init+0x2e2>
 8005386:	bf00      	nop
 8005388:	10320000 	.word	0x10320000
 800538c:	10310000 	.word	0x10310000
 8005390:	10220000 	.word	0x10220000
 8005394:	10210000 	.word	0x10210000
 8005398:	10120000 	.word	0x10120000
 800539c:	10110000 	.word	0x10110000
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40010800 	.word	0x40010800
 80053ac:	40010c00 	.word	0x40010c00
 80053b0:	40011000 	.word	0x40011000
 80053b4:	40011400 	.word	0x40011400
 80053b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_GPIO_Init+0x304>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	4909      	ldr	r1, [pc, #36]	; (80053ec <HAL_GPIO_Init+0x304>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	3301      	adds	r3, #1
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f47f ae8e 	bne.w	80050fc <HAL_GPIO_Init+0x14>
  }
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	372c      	adds	r7, #44	; 0x2c
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40010400 	.word	0x40010400

080053f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	4013      	ands	r3, r2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e001      	b.n	8005412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	807b      	strh	r3, [r7, #2]
 800542a:	4613      	mov	r3, r2
 800542c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800542e:	787b      	ldrb	r3, [r7, #1]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005434:	887a      	ldrh	r2, [r7, #2]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800543a:	e003      	b.n	8005444 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	041a      	lsls	r2, r3, #16
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	611a      	str	r2, [r3, #16]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
	...

08005450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e272      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8087 	beq.w	800557e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005470:	4b92      	ldr	r3, [pc, #584]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b04      	cmp	r3, #4
 800547a:	d00c      	beq.n	8005496 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800547c:	4b8f      	ldr	r3, [pc, #572]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 030c 	and.w	r3, r3, #12
 8005484:	2b08      	cmp	r3, #8
 8005486:	d112      	bne.n	80054ae <HAL_RCC_OscConfig+0x5e>
 8005488:	4b8c      	ldr	r3, [pc, #560]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d10b      	bne.n	80054ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005496:	4b89      	ldr	r3, [pc, #548]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d06c      	beq.n	800557c <HAL_RCC_OscConfig+0x12c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d168      	bne.n	800557c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e24c      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x76>
 80054b8:	4b80      	ldr	r3, [pc, #512]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a7f      	ldr	r2, [pc, #508]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	e02e      	b.n	8005524 <HAL_RCC_OscConfig+0xd4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x98>
 80054ce:	4b7b      	ldr	r3, [pc, #492]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a7a      	ldr	r2, [pc, #488]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	4b78      	ldr	r3, [pc, #480]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a77      	ldr	r2, [pc, #476]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e01d      	b.n	8005524 <HAL_RCC_OscConfig+0xd4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0xbc>
 80054f2:	4b72      	ldr	r3, [pc, #456]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a71      	ldr	r2, [pc, #452]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80054f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6e      	ldr	r2, [pc, #440]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0xd4>
 800550c:	4b6b      	ldr	r3, [pc, #428]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6a      	ldr	r2, [pc, #424]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b68      	ldr	r3, [pc, #416]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a67      	ldr	r2, [pc, #412]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 800551e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005522:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fe f8e2 	bl	80036f4 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005534:	f7fe f8de 	bl	80036f4 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e200      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	4b5d      	ldr	r3, [pc, #372]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0xe4>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fe f8ce 	bl	80036f4 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800555c:	f7fe f8ca 	bl	80036f4 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e1ec      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556e:	4b53      	ldr	r3, [pc, #332]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x10c>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d063      	beq.n	8005652 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800558a:	4b4c      	ldr	r3, [pc, #304]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005596:	4b49      	ldr	r3, [pc, #292]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d11c      	bne.n	80055dc <HAL_RCC_OscConfig+0x18c>
 80055a2:	4b46      	ldr	r3, [pc, #280]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d116      	bne.n	80055dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ae:	4b43      	ldr	r3, [pc, #268]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCC_OscConfig+0x176>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e1c0      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b3d      	ldr	r3, [pc, #244]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4939      	ldr	r1, [pc, #228]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	e03a      	b.n	8005652 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e4:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <HAL_RCC_OscConfig+0x270>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ea:	f7fe f883 	bl	80036f4 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f2:	f7fe f87f 	bl	80036f4 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1a1      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005604:	4b2d      	ldr	r3, [pc, #180]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4927      	ldr	r1, [pc, #156]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]
 8005624:	e015      	b.n	8005652 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005626:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <HAL_RCC_OscConfig+0x270>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562c:	f7fe f862 	bl	80036f4 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005634:	f7fe f85e 	bl	80036f4 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e180      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005646:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d03a      	beq.n	80056d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d019      	beq.n	800569a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005666:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <HAL_RCC_OscConfig+0x274>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800566c:	f7fe f842 	bl	80036f4 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005674:	f7fe f83e 	bl	80036f4 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e160      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <HAL_RCC_OscConfig+0x26c>)
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005692:	2001      	movs	r0, #1
 8005694:	f000 face 	bl	8005c34 <RCC_Delay>
 8005698:	e01c      	b.n	80056d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <HAL_RCC_OscConfig+0x274>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a0:	f7fe f828 	bl	80036f4 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a6:	e00f      	b.n	80056c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a8:	f7fe f824 	bl	80036f4 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d908      	bls.n	80056c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e146      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	42420000 	.word	0x42420000
 80056c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	4b92      	ldr	r3, [pc, #584]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e9      	bne.n	80056a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80a6 	beq.w	800582e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056e6:	4b8b      	ldr	r3, [pc, #556]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	4b88      	ldr	r3, [pc, #544]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4a87      	ldr	r2, [pc, #540]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fc:	61d3      	str	r3, [r2, #28]
 80056fe:	4b85      	ldr	r3, [pc, #532]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005706:	60bb      	str	r3, [r7, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570e:	4b82      	ldr	r3, [pc, #520]	; (8005918 <HAL_RCC_OscConfig+0x4c8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d118      	bne.n	800574c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800571a:	4b7f      	ldr	r3, [pc, #508]	; (8005918 <HAL_RCC_OscConfig+0x4c8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7e      	ldr	r2, [pc, #504]	; (8005918 <HAL_RCC_OscConfig+0x4c8>)
 8005720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005726:	f7fd ffe5 	bl	80036f4 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572e:	f7fd ffe1 	bl	80036f4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e103      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	4b75      	ldr	r3, [pc, #468]	; (8005918 <HAL_RCC_OscConfig+0x4c8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d106      	bne.n	8005762 <HAL_RCC_OscConfig+0x312>
 8005754:	4b6f      	ldr	r3, [pc, #444]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	4a6e      	ldr	r2, [pc, #440]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	6213      	str	r3, [r2, #32]
 8005760:	e02d      	b.n	80057be <HAL_RCC_OscConfig+0x36e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10c      	bne.n	8005784 <HAL_RCC_OscConfig+0x334>
 800576a:	4b6a      	ldr	r3, [pc, #424]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	4a69      	ldr	r2, [pc, #420]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	6213      	str	r3, [r2, #32]
 8005776:	4b67      	ldr	r3, [pc, #412]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	4a66      	ldr	r2, [pc, #408]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800577c:	f023 0304 	bic.w	r3, r3, #4
 8005780:	6213      	str	r3, [r2, #32]
 8005782:	e01c      	b.n	80057be <HAL_RCC_OscConfig+0x36e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b05      	cmp	r3, #5
 800578a:	d10c      	bne.n	80057a6 <HAL_RCC_OscConfig+0x356>
 800578c:	4b61      	ldr	r3, [pc, #388]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	4a60      	ldr	r2, [pc, #384]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005792:	f043 0304 	orr.w	r3, r3, #4
 8005796:	6213      	str	r3, [r2, #32]
 8005798:	4b5e      	ldr	r3, [pc, #376]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	4a5d      	ldr	r2, [pc, #372]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	6213      	str	r3, [r2, #32]
 80057a4:	e00b      	b.n	80057be <HAL_RCC_OscConfig+0x36e>
 80057a6:	4b5b      	ldr	r3, [pc, #364]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4a5a      	ldr	r2, [pc, #360]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	6213      	str	r3, [r2, #32]
 80057b2:	4b58      	ldr	r3, [pc, #352]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4a57      	ldr	r2, [pc, #348]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057b8:	f023 0304 	bic.w	r3, r3, #4
 80057bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d015      	beq.n	80057f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c6:	f7fd ff95 	bl	80036f4 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057cc:	e00a      	b.n	80057e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7fd ff91 	bl	80036f4 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e0b1      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e4:	4b4b      	ldr	r3, [pc, #300]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ee      	beq.n	80057ce <HAL_RCC_OscConfig+0x37e>
 80057f0:	e014      	b.n	800581c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f2:	f7fd ff7f 	bl	80036f4 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057fa:	f7fd ff7b 	bl	80036f4 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	; 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e09b      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005810:	4b40      	ldr	r3, [pc, #256]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1ee      	bne.n	80057fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005822:	4b3c      	ldr	r3, [pc, #240]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	4a3b      	ldr	r2, [pc, #236]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800582c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 8087 	beq.w	8005946 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005838:	4b36      	ldr	r3, [pc, #216]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 030c 	and.w	r3, r3, #12
 8005840:	2b08      	cmp	r3, #8
 8005842:	d061      	beq.n	8005908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d146      	bne.n	80058da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584c:	4b33      	ldr	r3, [pc, #204]	; (800591c <HAL_RCC_OscConfig+0x4cc>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fd ff4f 	bl	80036f4 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800585a:	f7fd ff4b 	bl	80036f4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e06d      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800586c:	4b29      	ldr	r3, [pc, #164]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005880:	d108      	bne.n	8005894 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005882:	4b24      	ldr	r3, [pc, #144]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	4921      	ldr	r1, [pc, #132]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005894:	4b1f      	ldr	r3, [pc, #124]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a19      	ldr	r1, [r3, #32]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	430b      	orrs	r3, r1
 80058a6:	491b      	ldr	r1, [pc, #108]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <HAL_RCC_OscConfig+0x4cc>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b2:	f7fd ff1f 	bl	80036f4 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fd ff1b 	bl	80036f4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e03d      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0f0      	beq.n	80058ba <HAL_RCC_OscConfig+0x46a>
 80058d8:	e035      	b.n	8005946 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <HAL_RCC_OscConfig+0x4cc>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fd ff08 	bl	80036f4 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e8:	f7fd ff04 	bl	80036f4 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e026      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <HAL_RCC_OscConfig+0x4c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x498>
 8005906:	e01e      	b.n	8005946 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d107      	bne.n	8005920 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e019      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
 8005914:	40021000 	.word	0x40021000
 8005918:	40007000 	.word	0x40007000
 800591c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_RCC_OscConfig+0x500>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	429a      	cmp	r2, r3
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0d0      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005968:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d910      	bls.n	8005998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 0207 	bic.w	r2, r3, #7
 800597e:	4965      	ldr	r1, [pc, #404]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b63      	ldr	r3, [pc, #396]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b8      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b0:	4b59      	ldr	r3, [pc, #356]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a58      	ldr	r2, [pc, #352]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c8:	4b53      	ldr	r3, [pc, #332]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a52      	ldr	r2, [pc, #328]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	494d      	ldr	r1, [pc, #308]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d040      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b47      	ldr	r3, [pc, #284]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d115      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e07f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d107      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a12:	4b41      	ldr	r3, [pc, #260]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e073      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a22:	4b3d      	ldr	r3, [pc, #244]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e06b      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a32:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f023 0203 	bic.w	r2, r3, #3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4936      	ldr	r1, [pc, #216]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a44:	f7fd fe56 	bl	80036f4 <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4c:	f7fd fe52 	bl	80036f4 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e053      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	4b2d      	ldr	r3, [pc, #180]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 020c 	and.w	r2, r3, #12
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d1eb      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a74:	4b27      	ldr	r3, [pc, #156]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d210      	bcs.n	8005aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a82:	4b24      	ldr	r3, [pc, #144]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 0207 	bic.w	r2, r3, #7
 8005a8a:	4922      	ldr	r1, [pc, #136]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e032      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4916      	ldr	r1, [pc, #88]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ace:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	490e      	ldr	r1, [pc, #56]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ae2:	f000 f821 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	490a      	ldr	r1, [pc, #40]	; (8005b1c <HAL_RCC_ClockConfig+0x1c8>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <HAL_RCC_ClockConfig+0x1cc>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCC_ClockConfig+0x1d0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd fdb4 	bl	8003670 <HAL_InitTick>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40022000 	.word	0x40022000
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	08007300 	.word	0x08007300
 8005b20:	20000000 	.word	0x20000000
 8005b24:	20000004 	.word	0x20000004

08005b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 030c 	and.w	r3, r3, #12
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d002      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0x30>
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d003      	beq.n	8005b5e <HAL_RCC_GetSysClockFreq+0x36>
 8005b56:	e027      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b58:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b5a:	613b      	str	r3, [r7, #16]
      break;
 8005b5c:	e027      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	0c9b      	lsrs	r3, r3, #18
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b68:	5cd3      	ldrb	r3, [r2, r3]
 8005b6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d010      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x94>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	0c5b      	lsrs	r3, r3, #17
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b8a:	fb03 f202 	mul.w	r2, r3, r2
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e004      	b.n	8005ba2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0c      	ldr	r2, [pc, #48]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	613b      	str	r3, [r7, #16]
      break;
 8005ba6:	e002      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ba8:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005baa:	613b      	str	r3, [r7, #16]
      break;
 8005bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bae:	693b      	ldr	r3, [r7, #16]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	007a1200 	.word	0x007a1200
 8005bc4:	08007318 	.word	0x08007318
 8005bc8:	08007328 	.word	0x08007328
 8005bcc:	003d0900 	.word	0x003d0900

08005bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bd4:	4b02      	ldr	r3, [pc, #8]	; (8005be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	20000000 	.word	0x20000000

08005be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005be8:	f7ff fff2 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8005bec:	4602      	mov	r2, r0
 8005bee:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4903      	ldr	r1, [pc, #12]	; (8005c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000
 8005c08:	08007310 	.word	0x08007310

08005c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c10:	f7ff ffde 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	0adb      	lsrs	r3, r3, #11
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4903      	ldr	r1, [pc, #12]	; (8005c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	08007310 	.word	0x08007310

08005c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <RCC_Delay+0x34>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <RCC_Delay+0x38>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	0a5b      	lsrs	r3, r3, #9
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c50:	bf00      	nop
  }
  while (Delay --);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1e5a      	subs	r2, r3, #1
 8005c56:	60fa      	str	r2, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f9      	bne.n	8005c50 <RCC_Delay+0x1c>
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	20000000 	.word	0x20000000
 8005c6c:	10624dd3 	.word	0x10624dd3

08005c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d07d      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c90:	4b4f      	ldr	r3, [pc, #316]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4a4b      	ldr	r2, [pc, #300]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	61d3      	str	r3, [r2, #28]
 8005ca8:	4b49      	ldr	r3, [pc, #292]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	4b46      	ldr	r3, [pc, #280]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d118      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc4:	4b43      	ldr	r3, [pc, #268]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a42      	ldr	r2, [pc, #264]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cd0:	f7fd fd10 	bl	80036f4 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd8:	f7fd fd0c 	bl	80036f4 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	; 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e06d      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cea:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cf6:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d02e      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d027      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d14:	4b2e      	ldr	r3, [pc, #184]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d24:	4b2c      	ldr	r3, [pc, #176]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d2a:	4a29      	ldr	r2, [pc, #164]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d014      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3a:	f7fd fcdb 	bl	80036f4 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d40:	e00a      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d42:	f7fd fcd7 	bl	80036f4 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e036      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d58:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ee      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4917      	ldr	r1, [pc, #92]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d105      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	490b      	ldr	r1, [pc, #44]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005db2:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4904      	ldr	r1, [pc, #16]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	40007000 	.word	0x40007000
 8005dd8:	42420440 	.word	0x42420440

08005ddc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	f200 808a 	bhi.w	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d045      	beq.n	8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d075      	beq.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005e12:	e082      	b.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005e14:	4b46      	ldr	r3, [pc, #280]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005e1a:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d07b      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	0c9b      	lsrs	r3, r3, #18
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	4a41      	ldr	r2, [pc, #260]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005e30:	5cd3      	ldrb	r3, [r2, r3]
 8005e32:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d015      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e3e:	4b3c      	ldr	r3, [pc, #240]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	0c5b      	lsrs	r3, r3, #17
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	4a3b      	ldr	r2, [pc, #236]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005e4a:	5cd3      	ldrb	r3, [r2, r3]
 8005e4c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005e58:	4a38      	ldr	r2, [pc, #224]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
 8005e72:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005e74:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e80:	d102      	bne.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	61bb      	str	r3, [r7, #24]
      break;
 8005e86:	e04a      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4a2d      	ldr	r2, [pc, #180]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
      break;
 8005e96:	e042      	b.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005e98:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea8:	d108      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	e01f      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec6:	d109      	bne.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ec8:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005ed4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e00f      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee6:	d11c      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d016      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005ef4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005ef8:	61bb      	str	r3, [r7, #24]
      break;
 8005efa:	e012      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005efc:	e011      	b.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005efe:	f7ff fe85 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8005f02:	4602      	mov	r2, r0
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	0b9b      	lsrs	r3, r3, #14
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	61bb      	str	r3, [r7, #24]
      break;
 8005f18:	e004      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f1a:	bf00      	nop
 8005f1c:	e002      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f1e:	bf00      	nop
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005f22:	bf00      	nop
    }
  }
  return (frequency);
 8005f24:	69bb      	ldr	r3, [r7, #24]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	0800732c 	.word	0x0800732c
 8005f38:	0800733c 	.word	0x0800733c
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	003d0900 	.word	0x003d0900
 8005f44:	aaaaaaab 	.word	0xaaaaaaab

08005f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e041      	b.n	8005fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fd fa2a 	bl	80033c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f000 fbd8 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d001      	beq.n	8006000 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e032      	b.n	8006066 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a18      	ldr	r2, [pc, #96]	; (8006070 <HAL_TIM_Base_Start+0x88>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_TIM_Base_Start+0x48>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d009      	beq.n	8006030 <HAL_TIM_Base_Start+0x48>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a14      	ldr	r2, [pc, #80]	; (8006074 <HAL_TIM_Base_Start+0x8c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_TIM_Base_Start+0x48>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a13      	ldr	r2, [pc, #76]	; (8006078 <HAL_TIM_Base_Start+0x90>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d111      	bne.n	8006054 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b06      	cmp	r3, #6
 8006040:	d010      	beq.n	8006064 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0201 	orr.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006052:	e007      	b.n	8006064 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800

0800607c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	d001      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e03a      	b.n	800610a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a18      	ldr	r2, [pc, #96]	; (8006114 <HAL_TIM_Base_Start_IT+0x98>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x58>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x58>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a14      	ldr	r2, [pc, #80]	; (8006118 <HAL_TIM_Base_Start_IT+0x9c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x58>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a13      	ldr	r2, [pc, #76]	; (800611c <HAL_TIM_Base_Start_IT+0xa0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d111      	bne.n	80060f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d010      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	e007      	b.n	8006108 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800

08006120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e041      	b.n	80061b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f839 	bl	80061be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f000 faec 	bl	800673c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0202 	mvn.w	r2, #2
 80061fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fa76 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa69 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fa78 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b04      	cmp	r3, #4
 8006238:	d122      	bne.n	8006280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b04      	cmp	r3, #4
 8006246:	d11b      	bne.n	8006280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0204 	mvn.w	r2, #4
 8006250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa4c 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 800626c:	e005      	b.n	800627a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa3f 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa4e 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b08      	cmp	r3, #8
 800628c:	d122      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b08      	cmp	r3, #8
 800629a:	d11b      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0208 	mvn.w	r2, #8
 80062a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2204      	movs	r2, #4
 80062aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa22 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa15 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fa24 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d122      	bne.n	8006328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b10      	cmp	r3, #16
 80062ee:	d11b      	bne.n	8006328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f06f 0210 	mvn.w	r2, #16
 80062f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2208      	movs	r2, #8
 80062fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9f8 	bl	8006704 <HAL_TIM_IC_CaptureCallback>
 8006314:	e005      	b.n	8006322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f9eb 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f9fa 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b01      	cmp	r3, #1
 8006334:	d10e      	bne.n	8006354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d107      	bne.n	8006354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0201 	mvn.w	r2, #1
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fc ff2c 	bl	80031ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b80      	cmp	r3, #128	; 0x80
 8006360:	d10e      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d107      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fdb4 	bl	8006ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d10e      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d107      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9be 	bl	8006728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d10e      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d107      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0220 	mvn.w	r2, #32
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fd7f 	bl	8006ed6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e0ae      	b.n	800655c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b0c      	cmp	r3, #12
 800640a:	f200 809f 	bhi.w	800654c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006449 	.word	0x08006449
 8006418:	0800654d 	.word	0x0800654d
 800641c:	0800654d 	.word	0x0800654d
 8006420:	0800654d 	.word	0x0800654d
 8006424:	08006489 	.word	0x08006489
 8006428:	0800654d 	.word	0x0800654d
 800642c:	0800654d 	.word	0x0800654d
 8006430:	0800654d 	.word	0x0800654d
 8006434:	080064cb 	.word	0x080064cb
 8006438:	0800654d 	.word	0x0800654d
 800643c:	0800654d 	.word	0x0800654d
 8006440:	0800654d 	.word	0x0800654d
 8006444:	0800650b 	.word	0x0800650b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 f9d6 	bl	8006800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0208 	orr.w	r2, r2, #8
 8006462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0204 	bic.w	r2, r2, #4
 8006472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6999      	ldr	r1, [r3, #24]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	619a      	str	r2, [r3, #24]
      break;
 8006486:	e064      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fa1c 	bl	80068cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6999      	ldr	r1, [r3, #24]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	021a      	lsls	r2, r3, #8
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	619a      	str	r2, [r3, #24]
      break;
 80064c8:	e043      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fa65 	bl	80069a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0208 	orr.w	r2, r2, #8
 80064e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0204 	bic.w	r2, r2, #4
 80064f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69d9      	ldr	r1, [r3, #28]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	61da      	str	r2, [r3, #28]
      break;
 8006508:	e023      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 faaf 	bl	8006a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69d9      	ldr	r1, [r3, #28]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	021a      	lsls	r2, r3, #8
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	61da      	str	r2, [r3, #28]
      break;
 800654a:	e002      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	75fb      	strb	r3, [r7, #23]
      break;
 8006550:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_TIM_ConfigClockSource+0x1c>
 800657c:	2302      	movs	r3, #2
 800657e:	e0b4      	b.n	80066ea <HAL_TIM_ConfigClockSource+0x186>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800659e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b8:	d03e      	beq.n	8006638 <HAL_TIM_ConfigClockSource+0xd4>
 80065ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065be:	f200 8087 	bhi.w	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c6:	f000 8086 	beq.w	80066d6 <HAL_TIM_ConfigClockSource+0x172>
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d87f      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b70      	cmp	r3, #112	; 0x70
 80065d2:	d01a      	beq.n	800660a <HAL_TIM_ConfigClockSource+0xa6>
 80065d4:	2b70      	cmp	r3, #112	; 0x70
 80065d6:	d87b      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b60      	cmp	r3, #96	; 0x60
 80065da:	d050      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x11a>
 80065dc:	2b60      	cmp	r3, #96	; 0x60
 80065de:	d877      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b50      	cmp	r3, #80	; 0x50
 80065e2:	d03c      	beq.n	800665e <HAL_TIM_ConfigClockSource+0xfa>
 80065e4:	2b50      	cmp	r3, #80	; 0x50
 80065e6:	d873      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d058      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x13a>
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d86f      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d064      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d86b      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d060      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d867      	bhi.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05c      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 8006604:	2b10      	cmp	r3, #16
 8006606:	d05a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x15a>
 8006608:	e062      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800661a:	f000 faf0 	bl	8006bfe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800662c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	609a      	str	r2, [r3, #8]
      break;
 8006636:	e04f      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006648:	f000 fad9 	bl	8006bfe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800665a:	609a      	str	r2, [r3, #8]
      break;
 800665c:	e03c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666a:	461a      	mov	r2, r3
 800666c:	f000 fa50 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2150      	movs	r1, #80	; 0x50
 8006676:	4618      	mov	r0, r3
 8006678:	f000 faa7 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800667c:	e02c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800668a:	461a      	mov	r2, r3
 800668c:	f000 fa6e 	bl	8006b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2160      	movs	r1, #96	; 0x60
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fa97 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 800669c:	e01c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fa30 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fa87 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 80066bc:	e00c      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f000 fa7e 	bl	8006bca <TIM_ITRx_SetConfig>
      break;
 80066ce:	e003      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
      break;
 80066d4:	e000      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr

08006716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr
	...

0800673c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a29      	ldr	r2, [pc, #164]	; (80067f4 <TIM_Base_SetConfig+0xb8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00b      	beq.n	800676c <TIM_Base_SetConfig+0x30>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675a:	d007      	beq.n	800676c <TIM_Base_SetConfig+0x30>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a26      	ldr	r2, [pc, #152]	; (80067f8 <TIM_Base_SetConfig+0xbc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_Base_SetConfig+0x30>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a25      	ldr	r2, [pc, #148]	; (80067fc <TIM_Base_SetConfig+0xc0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d108      	bne.n	800677e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <TIM_Base_SetConfig+0xb8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00b      	beq.n	800679e <TIM_Base_SetConfig+0x62>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800678c:	d007      	beq.n	800679e <TIM_Base_SetConfig+0x62>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <TIM_Base_SetConfig+0xbc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_Base_SetConfig+0x62>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a18      	ldr	r2, [pc, #96]	; (80067fc <TIM_Base_SetConfig+0xc0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d108      	bne.n	80067b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a07      	ldr	r2, [pc, #28]	; (80067f4 <TIM_Base_SetConfig+0xb8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d103      	bne.n	80067e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	615a      	str	r2, [r3, #20]
}
 80067ea:	bf00      	nop
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40000800 	.word	0x40000800

08006800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f023 0201 	bic.w	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f023 0302 	bic.w	r3, r3, #2
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <TIM_OC1_SetConfig+0xc8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10c      	bne.n	8006876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0308 	bic.w	r3, r3, #8
 8006862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 0304 	bic.w	r3, r3, #4
 8006874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a13      	ldr	r2, [pc, #76]	; (80068c8 <TIM_OC1_SetConfig+0xc8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d111      	bne.n	80068a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800688c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40012c00 	.word	0x40012c00

080068cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f023 0210 	bic.w	r2, r3, #16
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f023 0320 	bic.w	r3, r3, #32
 8006916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4313      	orrs	r3, r2
 8006922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a1d      	ldr	r2, [pc, #116]	; (800699c <TIM_OC2_SetConfig+0xd0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d10d      	bne.n	8006948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a14      	ldr	r2, [pc, #80]	; (800699c <TIM_OC2_SetConfig+0xd0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d113      	bne.n	8006978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800695e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr
 800699c:	40012c00 	.word	0x40012c00

080069a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	021b      	lsls	r3, r3, #8
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1d      	ldr	r2, [pc, #116]	; (8006a70 <TIM_OC3_SetConfig+0xd0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d10d      	bne.n	8006a1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <TIM_OC3_SetConfig+0xd0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d113      	bne.n	8006a4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40012c00 	.word	0x40012c00

08006a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	031b      	lsls	r3, r3, #12
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a0f      	ldr	r2, [pc, #60]	; (8006b0c <TIM_OC4_SetConfig+0x98>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d109      	bne.n	8006ae8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	019b      	lsls	r3, r3, #6
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	40012c00 	.word	0x40012c00

08006b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 030a 	bic.w	r3, r3, #10
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f023 0210 	bic.w	r2, r3, #16
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	031b      	lsls	r3, r3, #12
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f043 0307 	orr.w	r3, r3, #7
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	609a      	str	r2, [r3, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr

08006bfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b087      	sub	sp, #28
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	60f8      	str	r0, [r7, #12]
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	021a      	lsls	r2, r3, #8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	609a      	str	r2, [r3, #8]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d109      	bne.n	8006c60 <HAL_TIMEx_PWMN_Start+0x24>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	bf14      	ite	ne
 8006c58:	2301      	movne	r3, #1
 8006c5a:	2300      	moveq	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	e022      	b.n	8006ca6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d109      	bne.n	8006c7a <HAL_TIMEx_PWMN_Start+0x3e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	bf14      	ite	ne
 8006c72:	2301      	movne	r3, #1
 8006c74:	2300      	moveq	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	e015      	b.n	8006ca6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d109      	bne.n	8006c94 <HAL_TIMEx_PWMN_Start+0x58>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	bf14      	ite	ne
 8006c8c:	2301      	movne	r3, #1
 8006c8e:	2300      	moveq	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	e008      	b.n	8006ca6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	bf14      	ite	ne
 8006ca0:	2301      	movne	r3, #1
 8006ca2:	2300      	moveq	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e059      	b.n	8006d62 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIMEx_PWMN_Start+0x82>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cbc:	e013      	b.n	8006ce6 <HAL_TIMEx_PWMN_Start+0xaa>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b04      	cmp	r3, #4
 8006cc2:	d104      	bne.n	8006cce <HAL_TIMEx_PWMN_Start+0x92>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ccc:	e00b      	b.n	8006ce6 <HAL_TIMEx_PWMN_Start+0xaa>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d104      	bne.n	8006cde <HAL_TIMEx_PWMN_Start+0xa2>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cdc:	e003      	b.n	8006ce6 <HAL_TIMEx_PWMN_Start+0xaa>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2204      	movs	r2, #4
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 f903 	bl	8006efa <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a18      	ldr	r2, [pc, #96]	; (8006d6c <HAL_TIMEx_PWMN_Start+0x130>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00e      	beq.n	8006d2c <HAL_TIMEx_PWMN_Start+0xf0>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d16:	d009      	beq.n	8006d2c <HAL_TIMEx_PWMN_Start+0xf0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <HAL_TIMEx_PWMN_Start+0x134>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <HAL_TIMEx_PWMN_Start+0xf0>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a13      	ldr	r2, [pc, #76]	; (8006d74 <HAL_TIMEx_PWMN_Start+0x138>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d111      	bne.n	8006d50 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b06      	cmp	r3, #6
 8006d3c:	d010      	beq.n	8006d60 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4e:	e007      	b.n	8006d60 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0201 	orr.w	r2, r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40012c00 	.word	0x40012c00
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800

08006d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e046      	b.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a16      	ldr	r2, [pc, #88]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a12      	ldr	r2, [pc, #72]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10c      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800

08006e34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e03d      	b.n	8006ecc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr

08006efa <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b087      	sub	sp, #28
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1a      	ldr	r2, [r3, #32]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	43db      	mvns	r3, r3
 8006f1c:	401a      	ands	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a1a      	ldr	r2, [r3, #32]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	431a      	orrs	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	621a      	str	r2, [r3, #32]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr

08006f42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e042      	b.n	8006fda <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d106      	bne.n	8006f6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7fc faad 	bl	80034c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2224      	movs	r2, #36	; 0x24
 8006f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f82c 	bl	8006fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695a      	ldr	r2, [r3, #20]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006faa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800701e:	f023 030c 	bic.w	r3, r3, #12
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	430b      	orrs	r3, r1
 800702a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a2c      	ldr	r2, [pc, #176]	; (80070f8 <UART_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d103      	bne.n	8007054 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800704c:	f7fe fdde 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	e002      	b.n	800705a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007054:	f7fe fdc6 	bl	8005be4 <HAL_RCC_GetPCLK1Freq>
 8007058:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009a      	lsls	r2, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007070:	4a22      	ldr	r2, [pc, #136]	; (80070fc <UART_SetConfig+0x118>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	0119      	lsls	r1, r3, #4
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009a      	lsls	r2, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007090:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <UART_SetConfig+0x118>)
 8007092:	fba3 0302 	umull	r0, r3, r3, r2
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2064      	movs	r0, #100	; 0x64
 800709a:	fb00 f303 	mul.w	r3, r0, r3
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	3332      	adds	r3, #50	; 0x32
 80070a4:	4a15      	ldr	r2, [pc, #84]	; (80070fc <UART_SetConfig+0x118>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070b0:	4419      	add	r1, r3
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009a      	lsls	r2, r3, #2
 80070bc:	441a      	add	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <UART_SetConfig+0x118>)
 80070ca:	fba3 0302 	umull	r0, r3, r3, r2
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	2064      	movs	r0, #100	; 0x64
 80070d2:	fb00 f303 	mul.w	r3, r0, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	3332      	adds	r3, #50	; 0x32
 80070dc:	4a07      	ldr	r2, [pc, #28]	; (80070fc <UART_SetConfig+0x118>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	f003 020f 	and.w	r2, r3, #15
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	440a      	add	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40013800 	.word	0x40013800
 80070fc:	51eb851f 	.word	0x51eb851f

08007100 <memset>:
 8007100:	4603      	mov	r3, r0
 8007102:	4402      	add	r2, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	d100      	bne.n	800710a <memset+0xa>
 8007108:	4770      	bx	lr
 800710a:	f803 1b01 	strb.w	r1, [r3], #1
 800710e:	e7f9      	b.n	8007104 <memset+0x4>

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	2600      	movs	r6, #0
 8007114:	4d0c      	ldr	r5, [pc, #48]	; (8007148 <__libc_init_array+0x38>)
 8007116:	4c0d      	ldr	r4, [pc, #52]	; (800714c <__libc_init_array+0x3c>)
 8007118:	1b64      	subs	r4, r4, r5
 800711a:	10a4      	asrs	r4, r4, #2
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	f000 f860 	bl	80071e4 <_init>
 8007124:	2600      	movs	r6, #0
 8007126:	4d0a      	ldr	r5, [pc, #40]	; (8007150 <__libc_init_array+0x40>)
 8007128:	4c0a      	ldr	r4, [pc, #40]	; (8007154 <__libc_init_array+0x44>)
 800712a:	1b64      	subs	r4, r4, r5
 800712c:	10a4      	asrs	r4, r4, #2
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	08007340 	.word	0x08007340
 800714c:	08007340 	.word	0x08007340
 8007150:	08007340 	.word	0x08007340
 8007154:	08007344 	.word	0x08007344

08007158 <round>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800715e:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8007162:	2a13      	cmp	r2, #19
 8007164:	460b      	mov	r3, r1
 8007166:	4605      	mov	r5, r0
 8007168:	460c      	mov	r4, r1
 800716a:	dc18      	bgt.n	800719e <round+0x46>
 800716c:	2a00      	cmp	r2, #0
 800716e:	da09      	bge.n	8007184 <round+0x2c>
 8007170:	3201      	adds	r2, #1
 8007172:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007176:	d103      	bne.n	8007180 <round+0x28>
 8007178:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800717c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007180:	2200      	movs	r2, #0
 8007182:	e029      	b.n	80071d8 <round+0x80>
 8007184:	4816      	ldr	r0, [pc, #88]	; (80071e0 <round+0x88>)
 8007186:	4110      	asrs	r0, r2
 8007188:	4001      	ands	r1, r0
 800718a:	4329      	orrs	r1, r5
 800718c:	d011      	beq.n	80071b2 <round+0x5a>
 800718e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007192:	fa41 f202 	asr.w	r2, r1, r2
 8007196:	4413      	add	r3, r2
 8007198:	ea23 0300 	bic.w	r3, r3, r0
 800719c:	e7f0      	b.n	8007180 <round+0x28>
 800719e:	2a33      	cmp	r2, #51	; 0x33
 80071a0:	dd0a      	ble.n	80071b8 <round+0x60>
 80071a2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80071a6:	d104      	bne.n	80071b2 <round+0x5a>
 80071a8:	4602      	mov	r2, r0
 80071aa:	f7f8 ffd7 	bl	800015c <__adddf3>
 80071ae:	4605      	mov	r5, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	4628      	mov	r0, r5
 80071b4:	4621      	mov	r1, r4
 80071b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80071c0:	40f8      	lsrs	r0, r7
 80071c2:	4228      	tst	r0, r5
 80071c4:	d0f5      	beq.n	80071b2 <round+0x5a>
 80071c6:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 80071ca:	2201      	movs	r2, #1
 80071cc:	408a      	lsls	r2, r1
 80071ce:	1952      	adds	r2, r2, r5
 80071d0:	bf28      	it	cs
 80071d2:	3301      	addcs	r3, #1
 80071d4:	ea22 0200 	bic.w	r2, r2, r0
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	e7e7      	b.n	80071ae <round+0x56>
 80071de:	bf00      	nop
 80071e0:	000fffff 	.word	0x000fffff

080071e4 <_init>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr

080071f0 <_fini>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr
