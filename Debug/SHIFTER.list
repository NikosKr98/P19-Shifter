
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f50  08003f50  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f50  08003f50  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000002c  08003f84  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003f84  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010282  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a2  00000000  00000000  0003031a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00032ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb5  00000000  00000000  000339c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dfc  00000000  00000000  0003457d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d82  00000000  00000000  0004d379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091c25  00000000  00000000  0005f0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e90  00000000  00000000  000f0d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f4bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ef8 	.word	0x08003ef8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08003ef8 	.word	0x08003ef8

0800014c <Application_init>:
 *      Author: NikosKr
 */

#include "application.h"

void Application_init(ApplicationStruct *application){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	application->current_gear = 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	701a      	strb	r2, [r3, #0]
	application->target_gear = 0;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	705a      	strb	r2, [r3, #1]
	application->up_port_state = 0;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	709a      	strb	r2, [r3, #2]
	application->down_port_state = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	70da      	strb	r2, [r3, #3]
	application->shift_end_time= 0;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	605a      	str	r2, [r3, #4]
	application->up_button_out= 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	721a      	strb	r2, [r3, #8]
	application->down_button_out= 0;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2200      	movs	r2, #0
 800017c:	725a      	strb	r2, [r3, #9]
	application->clutch_position =0;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	819a      	strh	r2, [r3, #12]
	application->actual_gear =0;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2200      	movs	r2, #0
 8000188:	611a      	str	r2, [r3, #16]
}
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <calculateActualGear>:
    {400, 600}     // Gear 5

};


uint16_t calculateActualGear(InputStruct *input) {
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]

    for (int gear = 0; gear < sizeof(gearTable) / sizeof(gearTable[0]); ++gear) {
 800019c:	2300      	movs	r3, #0
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	e016      	b.n	80001d0 <calculateActualGear+0x3c>
        if (input ->actual_gear > gearTable[gear][0] && input->actual_gear < gearTable[gear][1]) {
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	68db      	ldr	r3, [r3, #12]
 80001a6:	490f      	ldr	r1, [pc, #60]	; (80001e4 <calculateActualGear+0x50>)
 80001a8:	68fa      	ldr	r2, [r7, #12]
 80001aa:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80001ae:	4293      	cmp	r3, r2
 80001b0:	d90b      	bls.n	80001ca <calculateActualGear+0x36>
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	68da      	ldr	r2, [r3, #12]
 80001b6:	490b      	ldr	r1, [pc, #44]	; (80001e4 <calculateActualGear+0x50>)
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	440b      	add	r3, r1
 80001be:	885b      	ldrh	r3, [r3, #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d202      	bcs.n	80001ca <calculateActualGear+0x36>
            return gear;
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	e006      	b.n	80001d8 <calculateActualGear+0x44>
    for (int gear = 0; gear < sizeof(gearTable) / sizeof(gearTable[0]); ++gear) {
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	3301      	adds	r3, #1
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	2b05      	cmp	r3, #5
 80001d4:	d9e5      	bls.n	80001a2 <calculateActualGear+0xe>
        }
    }
    return 255; // If no match found, return 255!
 80001d6:	23ff      	movs	r3, #255	; 0xff
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3714      	adds	r7, #20
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000

080001e8 <Application>:


void Application(InputStruct *input, ApplicationStruct *application){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
//		application->target_gear = application -> actual_gear;
//	}


	// UP BUTTON REQUEST CONFIRMATION CHECK !
	if(input->up_button_request && !application->up_button_status && button_previous<current && !application-> up_port_state){
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d01f      	beq.n	800023a <Application+0x52>
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	7a9b      	ldrb	r3, [r3, #10]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d11b      	bne.n	800023a <Application+0x52>
 8000202:	4b3b      	ldr	r3, [pc, #236]	; (80002f0 <Application+0x108>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b3b      	ldr	r3, [pc, #236]	; (80002f4 <Application+0x10c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	429a      	cmp	r2, r3
 800020c:	d215      	bcs.n	800023a <Application+0x52>
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	789b      	ldrb	r3, [r3, #2]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d111      	bne.n	800023a <Application+0x52>
		button_previous=current;
 8000216:	4b37      	ldr	r3, [pc, #220]	; (80002f4 <Application+0x10c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a35      	ldr	r2, [pc, #212]	; (80002f0 <Application+0x108>)
 800021c:	6013      	str	r3, [r2, #0]
		button_previous+=button_interval;
 800021e:	4b34      	ldr	r3, [pc, #208]	; (80002f0 <Application+0x108>)
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <Application+0x110>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4413      	add	r3, r2
 8000228:	4a31      	ldr	r2, [pc, #196]	; (80002f0 <Application+0x108>)
 800022a:	6013      	str	r3, [r2, #0]
		application->up_button_out = 1;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	2201      	movs	r2, #1
 8000230:	721a      	strb	r2, [r3, #8]
		application->up_button_status=1;
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2201      	movs	r2, #1
 8000236:	729a      	strb	r2, [r3, #10]
 8000238:	e00d      	b.n	8000256 <Application+0x6e>
	}
	else if(!input->up_button_request && application->up_button_status){
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d109      	bne.n	8000256 <Application+0x6e>
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	7a9b      	ldrb	r3, [r3, #10]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d005      	beq.n	8000256 <Application+0x6e>
		application->up_button_out =0;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2200      	movs	r2, #0
 800024e:	721a      	strb	r2, [r3, #8]
		application->up_button_status=0;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	2200      	movs	r2, #0
 8000254:	729a      	strb	r2, [r3, #10]
	}


	// DOWNM BUTTON REQUEST CONFIRMATION CHECK !
	if(input-> down_button_request && !application->down_button_status && button_previous<current && !application-> down_port_state){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	785b      	ldrb	r3, [r3, #1]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d01f      	beq.n	800029e <Application+0xb6>
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	7adb      	ldrb	r3, [r3, #11]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d11b      	bne.n	800029e <Application+0xb6>
 8000266:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <Application+0x108>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b22      	ldr	r3, [pc, #136]	; (80002f4 <Application+0x10c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d215      	bcs.n	800029e <Application+0xb6>
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	78db      	ldrb	r3, [r3, #3]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d111      	bne.n	800029e <Application+0xb6>
		button_previous=current;
 800027a:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <Application+0x10c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <Application+0x108>)
 8000280:	6013      	str	r3, [r2, #0]
		button_previous+=button_interval;
 8000282:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <Application+0x108>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <Application+0x110>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4413      	add	r3, r2
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <Application+0x108>)
 800028e:	6013      	str	r3, [r2, #0]
		application->down_button_out = 1;
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	2201      	movs	r2, #1
 8000294:	725a      	strb	r2, [r3, #9]
		application->down_button_status=1;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2201      	movs	r2, #1
 800029a:	72da      	strb	r2, [r3, #11]
 800029c:	e00d      	b.n	80002ba <Application+0xd2>

	}
	else if(!input->down_button_request && application->down_button_status){
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	785b      	ldrb	r3, [r3, #1]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d109      	bne.n	80002ba <Application+0xd2>
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	7adb      	ldrb	r3, [r3, #11]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d005      	beq.n	80002ba <Application+0xd2>
		application->down_button_out =0;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2200      	movs	r2, #0
 80002b2:	725a      	strb	r2, [r3, #9]
		application->down_button_status=0;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2200      	movs	r2, #0
 80002b8:	72da      	strb	r2, [r3, #11]

	}


	application->clutch_position = input->clutch_position;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	889a      	ldrh	r2, [r3, #4]
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	819a      	strh	r2, [r3, #12]

	application->clutch_detection = (application->clutch_position > clutch_detection_threshold) ? 1 : 0;
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	899b      	ldrh	r3, [r3, #12]
 80002c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002ca:	bf8c      	ite	hi
 80002cc:	2301      	movhi	r3, #1
 80002ce:	2300      	movls	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	461a      	mov	r2, r3
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	751a      	strb	r2, [r3, #20]
	//CLUTCH REACHED THE THRESHOLD

	application->actual_gear = calculateActualGear(input);
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f7ff ff5b 	bl	8000194 <calculateActualGear>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	611a      	str	r2, [r3, #16]
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000178 	.word	0x20000178
 80002f4:	20000174 	.word	0x20000174
 80002f8:	20000018 	.word	0x20000018

080002fc <Input_init>:
 *      Author: NikosKr
 */

#include "input.h"

void Input_init(InputStruct *input){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]

	input->up_button_request=0;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
	input->down_button_request=0;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2200      	movs	r2, #0
 800030e:	705a      	strb	r2, [r3, #1]
	input->launch_button_request=0;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	709a      	strb	r2, [r3, #2]
	input->adc_counter=0;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	821a      	strh	r2, [r3, #16]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
	...

08000328 <Input_Read>:

void Input_Read(InputStruct *input){
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

	HAL_ADC_PollForConversion(&hadc1,100);
 8000330:	2164      	movs	r1, #100	; 0x64
 8000332:	4821      	ldr	r0, [pc, #132]	; (80003b8 <Input_Read+0x90>)
 8000334:	f000 ffe4 	bl	8001300 <HAL_ADC_PollForConversion>
	uint16_t gear_value = HAL_ADC_GetValue(&hadc1);
 8000338:	481f      	ldr	r0, [pc, #124]	; (80003b8 <Input_Read+0x90>)
 800033a:	f001 f8e7 	bl	800150c <HAL_ADC_GetValue>
 800033e:	4603      	mov	r3, r0
 8000340:	81fb      	strh	r3, [r7, #14]

	input->adc_counter++;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	8a1b      	ldrh	r3, [r3, #16]
 8000346:	3301      	adds	r3, #1
 8000348:	b29a      	uxth	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	821a      	strh	r2, [r3, #16]

	/* Normal Averaging */
	if(input->adc_counter < adc_counter_const){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	8a1b      	ldrh	r3, [r3, #16]
 8000352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000356:	d206      	bcs.n	8000366 <Input_Read+0x3e>
		input->gear_value1 += gear_value;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	89fb      	ldrh	r3, [r7, #14]
 800035e:	441a      	add	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	e00f      	b.n	8000386 <Input_Read+0x5e>
	}
	else{
		input->actual_gear = input->gear_value1 / input->adc_counter;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	8a12      	ldrh	r2, [r2, #16]
 800036e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	60da      	str	r2, [r3, #12]
		gear_value = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	81fb      	strh	r3, [r7, #14]
		input->gear_value1=0;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
		input->adc_counter = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	821a      	strh	r2, [r3, #16]
	}

	input->up_button_request = RxData[0]; //UP BUTTON REQUEST!
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <Input_Read+0x94>)
 8000388:	781a      	ldrb	r2, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	701a      	strb	r2, [r3, #0]

	input->down_button_request = RxData[1];//DOWN BUTTON REQUEST!
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <Input_Read+0x94>)
 8000390:	785a      	ldrb	r2, [r3, #1]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	705a      	strb	r2, [r3, #1]

	input->clutch_position = (( RxData[2] << 8) | RxData[3]); // CLUTCH POSITION CALCUILATIONS!
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <Input_Read+0x94>)
 8000398:	789b      	ldrb	r3, [r3, #2]
 800039a:	021b      	lsls	r3, r3, #8
 800039c:	b21a      	sxth	r2, r3
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <Input_Read+0x94>)
 80003a0:	78db      	ldrb	r3, [r3, #3]
 80003a2:	b21b      	sxth	r3, r3
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b21b      	sxth	r3, r3
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	809a      	strh	r2, [r3, #4]
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000048 	.word	0x20000048
 80003bc:	200001bc 	.word	0x200001bc

080003c0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80003ca:	4a08      	ldr	r2, [pc, #32]	; (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f001 fd12 	bl	8001df8 <HAL_CAN_GetRxMessage>

	switch(RxHeader.StdId) {
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80003dc:	d100      	bne.n	80003e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>

	 case FROM_STEERING_ID :

	 break;
 80003de:	bf00      	nop

	 }
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200001bc 	.word	0x200001bc
 80003ec:	20000188 	.word	0x20000188

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003f4:	f000 fd9c 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f8:	f000 f834 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fc:	f000 f9fa 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000400:	f000 f9da 	bl	80007b8 <MX_DMA_Init>
  MX_TIM2_Init();
 8000404:	f000 f960 	bl	80006c8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000408:	f000 f888 	bl	800051c <MX_ADC1_Init>
  MX_CAN_Init();
 800040c:	f000 f8de 	bl	80005cc <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000410:	f000 f9a8 	bl	8000764 <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(VCC_GPIO_Port, VCC_Pin, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2101      	movs	r1, #1
 8000418:	480d      	ldr	r0, [pc, #52]	; (8000450 <main+0x60>)
 800041a:	f002 fc49 	bl	8002cb0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <main+0x64>)
 8000420:	f000 fec0 	bl	80011a4 <HAL_ADC_Start>
  Input_init(&myInput);
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <main+0x68>)
 8000426:	f7ff ff69 	bl	80002fc <Input_init>
  Application_init(&myApplication);
 800042a:	480c      	ldr	r0, [pc, #48]	; (800045c <main+0x6c>)
 800042c:	f7ff fe8e 	bl	800014c <Application_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  current=HAL_GetTick();
 8000430:	f000 fdd6 	bl	8000fe0 <HAL_GetTick>
 8000434:	4603      	mov	r3, r0
 8000436:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <main+0x70>)
 8000438:	6013      	str	r3, [r2, #0]
	  Input_Read(&myInput);
 800043a:	4807      	ldr	r0, [pc, #28]	; (8000458 <main+0x68>)
 800043c:	f7ff ff74 	bl	8000328 <Input_Read>
	  Application(&myInput,&myApplication);
 8000440:	4906      	ldr	r1, [pc, #24]	; (800045c <main+0x6c>)
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <main+0x68>)
 8000444:	f7ff fed0 	bl	80001e8 <Application>
	  Output(&myApplication);
 8000448:	4804      	ldr	r0, [pc, #16]	; (800045c <main+0x6c>)
 800044a:	f000 fa3f 	bl	80008cc <Output>
	  current=HAL_GetTick();
 800044e:	e7ef      	b.n	8000430 <main+0x40>
 8000450:	40010800 	.word	0x40010800
 8000454:	20000048 	.word	0x20000048
 8000458:	200001cc 	.word	0x200001cc
 800045c:	200001e0 	.word	0x200001e0
 8000460:	20000174 	.word	0x20000174

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b094      	sub	sp, #80	; 0x50
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f003 fd14 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000494:	2301      	movs	r3, #1
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	2301      	movs	r3, #1
 80004a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a6:	2302      	movs	r3, #2
 80004a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fc2a 	bl	8002d14 <HAL_RCC_OscConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004c6:	f000 f9fb 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	230f      	movs	r3, #15
 80004cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ce:	2302      	movs	r3, #2
 80004d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 fe96 	bl	8003218 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004f2:	f000 f9e5 	bl	80008c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004f6:	2302      	movs	r3, #2
 80004f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4618      	mov	r0, r3
 8000504:	f003 f816 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800050e:	f000 f9d7 	bl	80008c0 <Error_Handler>
  }
}
 8000512:	bf00      	nop
 8000514:	3750      	adds	r7, #80	; 0x50
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_ADC1_Init+0xa8>)
 800052e:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <MX_ADC1_Init+0xac>)
 8000530:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_ADC1_Init+0xa8>)
 8000534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000538:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_ADC1_Init+0xa8>)
 800053c:	2201      	movs	r2, #1
 800053e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_ADC1_Init+0xa8>)
 8000542:	2200      	movs	r2, #0
 8000544:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_ADC1_Init+0xa8>)
 8000548:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800054c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_ADC1_Init+0xa8>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_ADC1_Init+0xa8>)
 8000556:	2203      	movs	r2, #3
 8000558:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800055a:	481a      	ldr	r0, [pc, #104]	; (80005c4 <MX_ADC1_Init+0xa8>)
 800055c:	f000 fd4a 	bl	8000ff4 <HAL_ADC_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000566:	f000 f9ab 	bl	80008c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800056a:	2301      	movs	r3, #1
 800056c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800056e:	2301      	movs	r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4619      	mov	r1, r3
 800057a:	4812      	ldr	r0, [pc, #72]	; (80005c4 <MX_ADC1_Init+0xa8>)
 800057c:	f000 ffd2 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 f99b 	bl	80008c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800058a:	2302      	movs	r3, #2
 800058c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <MX_ADC1_Init+0xa8>)
 8000594:	f000 ffc6 	bl	8001524 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800059e:	f000 f98f 	bl	80008c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005a2:	2303      	movs	r3, #3
 80005a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <MX_ADC1_Init+0xa8>)
 80005ac:	f000 ffba 	bl	8001524 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80005b6:	f000 f983 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000048 	.word	0x20000048
 80005c8:	40012400 	.word	0x40012400

080005cc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005d2:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <MX_CAN_Init+0xf0>)
 80005d4:	4a3a      	ldr	r2, [pc, #232]	; (80006c0 <MX_CAN_Init+0xf4>)
 80005d6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80005d8:	4b38      	ldr	r3, [pc, #224]	; (80006bc <MX_CAN_Init+0xf0>)
 80005da:	2204      	movs	r2, #4
 80005dc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <MX_CAN_Init+0xf0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e4:	4b35      	ldr	r3, [pc, #212]	; (80006bc <MX_CAN_Init+0xf0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005ea:	4b34      	ldr	r3, [pc, #208]	; (80006bc <MX_CAN_Init+0xf0>)
 80005ec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80005f0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_CAN_Init+0xf0>)
 80005f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005f8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005fa:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_CAN_Init+0xf0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000600:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <MX_CAN_Init+0xf0>)
 8000602:	2201      	movs	r2, #1
 8000604:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_CAN_Init+0xf0>)
 8000608:	2200      	movs	r2, #0
 800060a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_CAN_Init+0xf0>)
 800060e:	2200      	movs	r2, #0
 8000610:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_CAN_Init+0xf0>)
 8000614:	2200      	movs	r2, #0
 8000616:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_CAN_Init+0xf0>)
 800061a:	2200      	movs	r2, #0
 800061c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800061e:	4827      	ldr	r0, [pc, #156]	; (80006bc <MX_CAN_Init+0xf0>)
 8000620:	f001 f913 	bl	800184a <HAL_CAN_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800062a:	f000 f949 	bl	80008c0 <Error_Handler>


  	// FILTER FOR STEERING WHEEL

   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = FROM_STEERING_ID << 5 ;
 800062e:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000632:	603b      	str	r3, [r7, #0]
   FilterConfig0.FilterIdLow = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
   FilterConfig0.FilterMaskIdHigh = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
   FilterConfig0.FilterMaskIdLow = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
   FilterConfig0.FilterBank = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
   FilterConfig0.SlaveStartFilterBank = 14;
 8000648:	230e      	movs	r3, #14
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000650:	2301      	movs	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
   FilterConfig0.FilterActivation = ENABLE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <MX_CAN_Init+0xf0>)
 800065e:	f001 f9ef 	bl	8001a40 <HAL_CAN_ConfigFilter>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d007      	beq.n	8000678 <MX_CAN_Init+0xac>
 	  Error_Handler();
 8000668:	f000 f92a 	bl	80008c0 <Error_Handler>
 	  can_errors++;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_CAN_Init+0xf8>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	3301      	adds	r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_CAN_Init+0xf8>)
 8000676:	701a      	strb	r2, [r3, #0]
 	}
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <MX_CAN_Init+0xf0>)
 800067a:	f001 faaa 	bl	8001bd2 <HAL_CAN_Start>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d007      	beq.n	8000694 <MX_CAN_Init+0xc8>
 	  Error_Handler();
 8000684:	f000 f91c 	bl	80008c0 <Error_Handler>
 	  can_errors++;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_CAN_Init+0xf8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_CAN_Init+0xf8>)
 8000692:	701a      	strb	r2, [r3, #0]
   }
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000694:	2102      	movs	r1, #2
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_CAN_Init+0xf0>)
 8000698:	f001 fccf 	bl	800203a <HAL_CAN_ActivateNotification>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d007      	beq.n	80006b2 <MX_CAN_Init+0xe6>
 	{
	   Error_Handler();
 80006a2:	f000 f90d 	bl	80008c0 <Error_Handler>
	   can_errors++;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_CAN_Init+0xf8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MX_CAN_Init+0xf8>)
 80006b0:	701a      	strb	r2, [r3, #0]
 	}

  /* USER CODE END CAN_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000bc 	.word	0x200000bc
 80006c0:	40006400 	.word	0x40006400
 80006c4:	20000184 	.word	0x20000184

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_TIM2_Init+0x98>)
 80006e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_TIM2_Init+0x98>)
 80006ee:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80006f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_TIM2_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_TIM2_Init+0x98>)
 80006fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_TIM2_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_TIM2_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <MX_TIM2_Init+0x98>)
 8000710:	f003 f87c 	bl	800380c <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800071a:	f000 f8d1 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4619      	mov	r1, r3
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_TIM2_Init+0x98>)
 800072c:	f003 f8bd 	bl	80038aa <HAL_TIM_ConfigClockSource>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000736:	f000 f8c3 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_TIM2_Init+0x98>)
 8000748:	f003 fa6e 	bl	8003c28 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000752:	f000 f8b5 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000e4 	.word	0x200000e4

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART1_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800079c:	f003 faa2 	bl	8003ce4 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f88b 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000012c 	.word	0x2000012c
 80007b4:	40013800 	.word	0x40013800

080007b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_DMA_Init+0x38>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200b      	movs	r0, #11
 80007dc:	f001 ff4d 	bl	800267a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	200b      	movs	r0, #11
 80007e2:	f001 ff66 	bl	80026b2 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <MX_GPIO_Init+0xc0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <MX_GPIO_Init+0xc0>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <MX_GPIO_Init+0xc0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0310 	and.w	r3, r3, #16
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MX_GPIO_Init+0xc0>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <MX_GPIO_Init+0xc0>)
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_GPIO_Init+0xc0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_GPIO_Init+0xc0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <MX_GPIO_Init+0xc0>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_GPIO_Init+0xc0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4818      	ldr	r0, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xc4>)
 8000858:	f002 fa2a 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VCC_Pin|DOWN_PORT_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2141      	movs	r1, #65	; 0x41
 8000860:	4816      	ldr	r0, [pc, #88]	; (80008bc <MX_GPIO_Init+0xc8>)
 8000862:	f002 fa25 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UP_PORT_GPIO_Port, UP_PORT_Pin, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	4814      	ldr	r0, [pc, #80]	; (80008bc <MX_GPIO_Init+0xc8>)
 800086c:	f002 fa20 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2302      	movs	r3, #2
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <MX_GPIO_Init+0xc4>)
 800088a:	f002 f88d 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_Pin DOWN_PORT_Pin UP_PORT_Pin */
  GPIO_InitStruct.Pin = VCC_Pin|DOWN_PORT_Pin|UP_PORT_Pin;
 800088e:	23c1      	movs	r3, #193	; 0xc1
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_GPIO_Init+0xc8>)
 80008a6:	f002 f87f 	bl	80029a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40010800 	.word	0x40010800

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <Output>:
 */

#include "output.h"


void Output( ApplicationStruct *application){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	end_of_shift(application);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f93b 	bl	8000b50 <end_of_shift>


	if(application->up_button_out){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7a1b      	ldrb	r3, [r3, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d044      	beq.n	800096c <Output+0xa0>
		application->target_gear++;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	3301      	adds	r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	b25a      	sxtb	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	705a      	strb	r2, [r3, #1]

		if(application->target_gear!=application->current_gear+1){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80008fa:	461a      	mov	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f993 3000 	ldrsb.w	r3, [r3]
 8000902:	3301      	adds	r3, #1
 8000904:	429a      	cmp	r2, r3
 8000906:	d008      	beq.n	800091a <Output+0x4e>
			application->target_gear--;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	3b01      	subs	r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	b25a      	sxtb	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	705a      	strb	r2, [r3, #1]
		}

		if(application->target_gear > total_gears){
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000920:	2b05      	cmp	r3, #5
 8000922:	dd03      	ble.n	800092c <Output+0x60>
			application->target_gear=5;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2205      	movs	r2, #5
 8000928:	705a      	strb	r2, [r3, #1]
 800092a:	e01f      	b.n	800096c <Output+0xa0>
		}
		else if(application->target_gear > 1 && application->target_gear <= 5){
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000932:	2b01      	cmp	r3, #1
 8000934:	dd08      	ble.n	8000948 <Output+0x7c>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800093c:	2b05      	cmp	r3, #5
 800093e:	dc03      	bgt.n	8000948 <Output+0x7c>
			shiftup_activation(application);
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f000 f8b3 	bl	8000aac <shiftup_activation>
 8000946:	e011      	b.n	800096c <Output+0xa0>
		}
		else if(application->target_gear == 1 && application->clutch_detection){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d107      	bne.n	8000962 <Output+0x96>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7d1b      	ldrb	r3, [r3, #20]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <Output+0x96>
			shiftdown_activation(application);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f8c2 	bl	8000ae4 <shiftdown_activation>
 8000960:	e004      	b.n	800096c <Output+0xa0>
		}
		else {
			application->target_gear = application-> current_gear;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f993 2000 	ldrsb.w	r2, [r3]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	705a      	strb	r2, [r3, #1]
		}
	}


	if(application->down_button_out){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7a5b      	ldrb	r3, [r3, #9]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d03a      	beq.n	80009ea <Output+0x11e>
		application->target_gear--;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	3b01      	subs	r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	b25a      	sxtb	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	705a      	strb	r2, [r3, #1]

		if(application->target_gear!= application->current_gear-1){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800098c:	461a      	mov	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f993 3000 	ldrsb.w	r3, [r3]
 8000994:	3b01      	subs	r3, #1
 8000996:	429a      	cmp	r2, r3
 8000998:	d008      	beq.n	80009ac <Output+0xe0>
			application->target_gear++;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	b25a      	sxtb	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	705a      	strb	r2, [r3, #1]
		}

		if(application->target_gear < 0){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da08      	bge.n	80009c8 <Output+0xfc>
			application->target_gear=0;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	705a      	strb	r2, [r3, #1]
			application->current_gear=application->target_gear;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	e010      	b.n	80009ea <Output+0x11e>
		}
		else if(application->target_gear<1){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	dc03      	bgt.n	80009da <Output+0x10e>
			neutral_activation(application);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 f8a2 	bl	8000b1c <neutral_activation>
 80009d8:	e007      	b.n	80009ea <Output+0x11e>
		}
		else if(application->target_gear>=1){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dd02      	ble.n	80009ea <Output+0x11e>
			shiftdown_activation(application);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f87d 	bl	8000ae4 <shiftdown_activation>
		}
	}


	if(msg_previous<current){
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <Output+0x188>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <Output+0x18c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d229      	bcs.n	8000a4a <Output+0x17e>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4818      	ldr	r0, [pc, #96]	; (8000a5c <Output+0x190>)
 80009fc:	f002 f970 	bl	8002ce0 <HAL_GPIO_TogglePin>

		TxData[0]=(application->down_port_state || application->up_port_state);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d103      	bne.n	8000a10 <Output+0x144>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <Output+0x148>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <Output+0x14a>
 8000a14:	2300      	movs	r3, #0
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <Output+0x194>)
 8000a1a:	701a      	strb	r2, [r3, #0]
		TxData[1]=application->current_gear;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <Output+0x194>)
 8000a26:	705a      	strb	r2, [r3, #1]

		msg_previous=current;
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <Output+0x18c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <Output+0x188>)
 8000a2e:	6013      	str	r3, [r2, #0]
		msg_previous+=msg_interval;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <Output+0x188>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <Output+0x198>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <Output+0x188>)
 8000a3c:	6013      	str	r3, [r2, #0]

		CAN_Tx(STEERING_ID,2,TxData);
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <Output+0x194>)
 8000a40:	2102      	movs	r1, #2
 8000a42:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a46:	f000 f80f 	bl	8000a68 <CAN_Tx>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000017c 	.word	0x2000017c
 8000a58:	20000174 	.word	0x20000174
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	200001c4 	.word	0x200001c4
 8000a64:	2000001c 	.word	0x2000001c

08000a68 <CAN_Tx>:

void CAN_Tx(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	460b      	mov	r3, r1
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	72fb      	strb	r3, [r7, #11]

	uint32_t TxMailbox;

	TxHeader.DLC = dlc;
 8000a76:	7afb      	ldrb	r3, [r7, #11]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <CAN_Tx+0x3c>)
 8000a7a:	6113      	str	r3, [r2, #16]
	TxHeader.StdId = ID;
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <CAN_Tx+0x3c>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6013      	str	r3, [r2, #0]
	TxHeader.IDE = CAN_ID_STD;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <CAN_Tx+0x3c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <CAN_Tx+0x3c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]

	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4903      	ldr	r1, [pc, #12]	; (8000aa4 <CAN_Tx+0x3c>)
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <CAN_Tx+0x40>)
 8000a98:	f001 f8df 	bl	8001c5a <HAL_CAN_AddTxMessage>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200001a4 	.word	0x200001a4
 8000aa8:	200000bc 	.word	0x200000bc

08000aac <shiftup_activation>:


void shiftup_activation(ApplicationStruct *application){ // Shift up function
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <shiftup_activation+0x30>)
 8000aba:	f002 f8f9 	bl	8002cb0 <HAL_GPIO_WritePin>

	application->up_port_state = 1;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + shifting_interval;
 8000ac4:	f000 fa8c 	bl	8000fe0 <HAL_GetTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <shiftup_activation+0x34>)
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	20000180 	.word	0x20000180

08000ae4 <shiftdown_activation>:

void shiftdown_activation(ApplicationStruct *application){ // Shift down function
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <shiftdown_activation+0x30>)
 8000af2:	f002 f8dd 	bl	8002cb0 <HAL_GPIO_WritePin>

	application->down_port_state = 1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2201      	movs	r2, #1
 8000afa:	70da      	strb	r2, [r3, #3]

	shift_end_time = HAL_GetTick() + shifting_interval;
 8000afc:	f000 fa70 	bl	8000fe0 <HAL_GetTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <shiftdown_activation+0x34>)
 8000b08:	6013      	str	r3, [r2, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010800 	.word	0x40010800
 8000b18:	20000180 	.word	0x20000180

08000b1c <neutral_activation>:

void neutral_activation(ApplicationStruct *application){ //Neutral shift function
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <neutral_activation+0x2c>)
 8000b2a:	f002 f8c1 	bl	8002cb0 <HAL_GPIO_WritePin>

	application->up_port_state = 1;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2201      	movs	r2, #1
 8000b32:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + neutral_interval;
 8000b34:	f000 fa54 	bl	8000fe0 <HAL_GetTick>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	330a      	adds	r3, #10
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <neutral_activation+0x30>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	20000180 	.word	0x20000180

08000b50 <end_of_shift>:



void end_of_shift(ApplicationStruct *application) {  //Shift Handling
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	// Check if a shift is in progress and if the delay has ended
	if ((application->up_port_state || application->down_port_state) && HAL_GetTick() >= shift_end_time) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d103      	bne.n	8000b68 <end_of_shift+0x18>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d01b      	beq.n	8000ba0 <end_of_shift+0x50>
 8000b68:	f000 fa3a 	bl	8000fe0 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <end_of_shift+0x58>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d314      	bcc.n	8000ba0 <end_of_shift+0x50>

		// Reset the port action and update the current gear

		HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <end_of_shift+0x5c>)
 8000b7c:	f002 f898 	bl	8002cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <end_of_shift+0x5c>)
 8000b86:	f002 f893 	bl	8002cb0 <HAL_GPIO_WritePin>

		application-> current_gear = application->target_gear;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	701a      	strb	r2, [r3, #0]
		application->up_port_state = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	709a      	strb	r2, [r3, #2]
		application->down_port_state=0;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	70da      	strb	r2, [r3, #3]
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000180 	.word	0x20000180
 8000bac:	40010800 	.word	0x40010800

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x60>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_MspInit+0x60>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000

08000c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <HAL_ADC_MspInit+0xc0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d14a      	bne.n	8000cca <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_ADC_MspInit+0xc4>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <HAL_ADC_MspInit+0xc4>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_ADC_MspInit+0xc4>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_ADC_MspInit+0xc4>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <HAL_ADC_MspInit+0xc4>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_ADC_MspInit+0xc4>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c64:	2302      	movs	r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	481a      	ldr	r0, [pc, #104]	; (8000cdc <HAL_ADC_MspInit+0xc8>)
 8000c74:	f001 fe98 	bl	80029a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_ADC_MspInit+0xd0>)
 8000c7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000cb0:	f001 fd1a 	bl	80026e8 <HAL_DMA_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000cba:	f7ff fe01 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000cc2:	621a      	str	r2, [r3, #32]
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_ADC_MspInit+0xcc>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40012400 	.word	0x40012400
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	20000078 	.word	0x20000078
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <HAL_CAN_MspInit+0x9c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d139      	bne.n	8000d7c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_CAN_MspInit+0xa0>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <HAL_CAN_MspInit+0xa0>)
 8000d0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d12:	61d3      	str	r3, [r2, #28]
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_CAN_MspInit+0xa0>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_CAN_MspInit+0xa0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <HAL_CAN_MspInit+0xa0>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_CAN_MspInit+0xa0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480f      	ldr	r0, [pc, #60]	; (8000d8c <HAL_CAN_MspInit+0xa4>)
 8000d4e:	f001 fe2b 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <HAL_CAN_MspInit+0xa4>)
 8000d68:	f001 fe1e 	bl	80029a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2014      	movs	r0, #20
 8000d72:	f001 fc82 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d76:	2014      	movs	r0, #20
 8000d78:	f001 fc9b 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40006400 	.word	0x40006400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010800 	.word	0x40010800

08000d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da0:	d10b      	bne.n	8000dba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_TIM_Base_MspInit+0x34>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_TIM_Base_MspInit+0x34>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_TIM_Base_MspInit+0x34>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <HAL_UART_MspInit+0x8c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d131      	bne.n	8000e4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <HAL_UART_MspInit+0x94>)
 8000e2e:	f001 fdbb 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_UART_MspInit+0x94>)
 8000e48:	f001 fdae 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f889 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <DMA1_Channel1_IRQHandler+0x10>)
 8000eb6:	f001 fc71 	bl	800279c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000078 	.word	0x20000078

08000ec4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000eca:	f001 f8db 	bl	8002084 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000bc 	.word	0x200000bc

08000ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee4:	f7ff fff8 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eea:	490c      	ldr	r1, [pc, #48]	; (8000f1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f00:	4c09      	ldr	r4, [pc, #36]	; (8000f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f002 ffcf 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f12:	f7ff fa6d 	bl	80003f0 <main>
  bx lr
 8000f16:	4770      	bx	lr
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f20:	08003f58 	.word	0x08003f58
  ldr r2, =_sbss
 8000f24:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000f28:	200001fc 	.word	0x200001fc

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x28>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x28>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f001 fb8f 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	200f      	movs	r0, #15
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fe30 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fba7 	bl	80026ce <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f001 fb6f 	bl	800267a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000020 	.word	0x20000020
 8000fb4:	20000028 	.word	0x20000028
 8000fb8:	20000024 	.word	0x20000024

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x1c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x20>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000028 	.word	0x20000028
 8000fdc:	200001f8 	.word	0x200001f8

08000fe0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <HAL_GetTick+0x10>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	200001f8 	.word	0x200001f8

08000ff4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0be      	b.n	8001194 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fdee 	bl	8000c14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fbc5 	bl	80017c8 <ADC_ConversionStop_Disable>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 8099 	bne.w	8001182 <HAL_ADC_Init+0x18e>
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 8095 	bne.w	8001182 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001060:	f023 0302 	bic.w	r3, r3, #2
 8001064:	f043 0202 	orr.w	r2, r3, #2
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001074:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7b1b      	ldrb	r3, [r3, #12]
 800107a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800107c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	4313      	orrs	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800108c:	d003      	beq.n	8001096 <HAL_ADC_Init+0xa2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d102      	bne.n	800109c <HAL_ADC_Init+0xa8>
 8001096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109a:	e000      	b.n	800109e <HAL_ADC_Init+0xaa>
 800109c:	2300      	movs	r3, #0
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7d1b      	ldrb	r3, [r3, #20]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d119      	bne.n	80010e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7b1b      	ldrb	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	035a      	lsls	r2, r3, #13
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	e00b      	b.n	80010e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	f043 0220 	orr.w	r2, r3, #32
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_ADC_Init+0x1a8>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	430b      	orrs	r3, r1
 8001106:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001110:	d003      	beq.n	800111a <HAL_ADC_Init+0x126>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d104      	bne.n	8001124 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	3b01      	subs	r3, #1
 8001120:	051b      	lsls	r3, r3, #20
 8001122:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	430a      	orrs	r2, r1
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_ADC_Init+0x1ac>)
 8001140:	4013      	ands	r3, r2
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	429a      	cmp	r2, r3
 8001146:	d10b      	bne.n	8001160 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f023 0303 	bic.w	r3, r3, #3
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800115e:	e018      	b.n	8001192 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	f023 0312 	bic.w	r3, r3, #18
 8001168:	f043 0210 	orr.w	r2, r3, #16
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001180:	e007      	b.n	8001192 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	f043 0210 	orr.w	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	ffe1f7fd 	.word	0xffe1f7fd
 80011a0:	ff1f0efe 	.word	0xff1f0efe

080011a4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Start+0x1a>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e098      	b.n	80012f0 <HAL_ADC_Start+0x14c>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 faa4 	bl	8001714 <ADC_Enable>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 8087 	bne.w	80012e6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a41      	ldr	r2, [pc, #260]	; (80012f8 <HAL_ADC_Start+0x154>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d105      	bne.n	8001202 <HAL_ADC_Start+0x5e>
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ADC_Start+0x158>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d115      	bne.n	800122e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001218:	2b00      	cmp	r3, #0
 800121a:	d026      	beq.n	800126a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001224:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800122c:	e01d      	b.n	800126a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001232:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <HAL_ADC_Start+0x158>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d004      	beq.n	800124e <HAL_ADC_Start+0xaa>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2b      	ldr	r2, [pc, #172]	; (80012f8 <HAL_ADC_Start+0x154>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10d      	bne.n	800126a <HAL_ADC_Start+0xc6>
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <HAL_ADC_Start+0x158>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001262:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d006      	beq.n	8001284 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	f023 0206 	bic.w	r2, r3, #6
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
 8001282:	e002      	b.n	800128a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f06f 0202 	mvn.w	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80012a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012aa:	d113      	bne.n	80012d4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <HAL_ADC_Start+0x154>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d105      	bne.n	80012c2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_ADC_Start+0x158>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d108      	bne.n	80012d4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	e00c      	b.n	80012ee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	e003      	b.n	80012ee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40012800 	.word	0x40012800
 80012fc:	40012400 	.word	0x40012400

08001300 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001316:	f7ff fe63 	bl	8000fe0 <HAL_GetTick>
 800131a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132e:	f043 0220 	orr.w	r2, r3, #32
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0d3      	b.n	80014ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134c:	2b00      	cmp	r3, #0
 800134e:	d131      	bne.n	80013b4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12a      	bne.n	80013b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800135e:	e021      	b.n	80013a4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001366:	d01d      	beq.n	80013a4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_ADC_PollForConversion+0x7e>
 800136e:	f7ff fe37 	bl	8000fe0 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d212      	bcs.n	80013a4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10b      	bne.n	80013a4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f043 0204 	orr.w	r2, r3, #4
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0a2      	b.n	80014ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0d6      	beq.n	8001360 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013b2:	e070      	b.n	8001496 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_ADC_PollForConversion+0x1f4>)
 80013b6:	681c      	ldr	r4, [r3, #0]
 80013b8:	2002      	movs	r0, #2
 80013ba:	f002 f971 	bl	80036a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80013be:	4603      	mov	r3, r0
 80013c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6919      	ldr	r1, [r3, #16]
 80013ca:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <HAL_ADC_PollForConversion+0x1f8>)
 80013cc:	400b      	ands	r3, r1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d118      	bne.n	8001404 <HAL_ADC_PollForConversion+0x104>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68d9      	ldr	r1, [r3, #12]
 80013d8:	4b48      	ldr	r3, [pc, #288]	; (80014fc <HAL_ADC_PollForConversion+0x1fc>)
 80013da:	400b      	ands	r3, r1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d111      	bne.n	8001404 <HAL_ADC_PollForConversion+0x104>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6919      	ldr	r1, [r3, #16]
 80013e6:	4b46      	ldr	r3, [pc, #280]	; (8001500 <HAL_ADC_PollForConversion+0x200>)
 80013e8:	400b      	ands	r3, r1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d108      	bne.n	8001400 <HAL_ADC_PollForConversion+0x100>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68d9      	ldr	r1, [r3, #12]
 80013f4:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_ADC_PollForConversion+0x204>)
 80013f6:	400b      	ands	r3, r1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_PollForConversion+0x100>
 80013fc:	2314      	movs	r3, #20
 80013fe:	e020      	b.n	8001442 <HAL_ADC_PollForConversion+0x142>
 8001400:	2329      	movs	r3, #41	; 0x29
 8001402:	e01e      	b.n	8001442 <HAL_ADC_PollForConversion+0x142>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <HAL_ADC_PollForConversion+0x200>)
 800140c:	400b      	ands	r3, r1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_ADC_PollForConversion+0x120>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68d9      	ldr	r1, [r3, #12]
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <HAL_ADC_PollForConversion+0x204>)
 800141a:	400b      	ands	r3, r1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00d      	beq.n	800143c <HAL_ADC_PollForConversion+0x13c>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6919      	ldr	r1, [r3, #16]
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_ADC_PollForConversion+0x208>)
 8001428:	400b      	ands	r3, r1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d108      	bne.n	8001440 <HAL_ADC_PollForConversion+0x140>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68d9      	ldr	r1, [r3, #12]
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_ADC_PollForConversion+0x208>)
 8001436:	400b      	ands	r3, r1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_ADC_PollForConversion+0x140>
 800143c:	2354      	movs	r3, #84	; 0x54
 800143e:	e000      	b.n	8001442 <HAL_ADC_PollForConversion+0x142>
 8001440:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001448:	e021      	b.n	800148e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d01a      	beq.n	8001488 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <HAL_ADC_PollForConversion+0x168>
 8001458:	f7ff fdc2 	bl	8000fe0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d20f      	bcs.n	8001488 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d90b      	bls.n	8001488 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f043 0204 	orr.w	r2, r3, #4
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e030      	b.n	80014ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	429a      	cmp	r2, r3
 8001494:	d8d9      	bhi.n	800144a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f06f 0212 	mvn.w	r2, #18
 800149e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014ba:	d115      	bne.n	80014e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d111      	bne.n	80014e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000020 	.word	0x20000020
 80014f8:	24924924 	.word	0x24924924
 80014fc:	00924924 	.word	0x00924924
 8001500:	12492492 	.word	0x12492492
 8001504:	00492492 	.word	0x00492492
 8001508:	00249249 	.word	0x00249249

0800150c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x20>
 8001540:	2302      	movs	r3, #2
 8001542:	e0dc      	b.n	80016fe <HAL_ADC_ConfigChannel+0x1da>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b06      	cmp	r3, #6
 8001552:	d81c      	bhi.n	800158e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	3b05      	subs	r3, #5
 8001566:	221f      	movs	r2, #31
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	4019      	ands	r1, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b05      	subs	r3, #5
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	635a      	str	r2, [r3, #52]	; 0x34
 800158c:	e03c      	b.n	8001608 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d81c      	bhi.n	80015d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b23      	subs	r3, #35	; 0x23
 80015a8:	221f      	movs	r2, #31
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	4019      	ands	r1, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b23      	subs	r3, #35	; 0x23
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
 80015ce:	e01b      	b.n	8001608 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b41      	subs	r3, #65	; 0x41
 80015e2:	221f      	movs	r2, #31
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4019      	ands	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b41      	subs	r3, #65	; 0x41
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b09      	cmp	r3, #9
 800160e:	d91c      	bls.n	800164a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68d9      	ldr	r1, [r3, #12]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	3b1e      	subs	r3, #30
 8001622:	2207      	movs	r2, #7
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	4019      	ands	r1, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6898      	ldr	r0, [r3, #8]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	3b1e      	subs	r3, #30
 800163c:	fa00 f203 	lsl.w	r2, r0, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	e019      	b.n	800167e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6919      	ldr	r1, [r3, #16]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	2207      	movs	r2, #7
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	4019      	ands	r1, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6898      	ldr	r0, [r3, #8]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	fa00 f203 	lsl.w	r2, r0, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b10      	cmp	r3, #16
 8001684:	d003      	beq.n	800168e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800168a:	2b11      	cmp	r3, #17
 800168c:	d132      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_ADC_ConfigChannel+0x1e4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d125      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d126      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d11a      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_ADC_ConfigChannel+0x1e8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <HAL_ADC_ConfigChannel+0x1ec>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	0c9a      	lsrs	r2, r3, #18
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016d4:	e002      	b.n	80016dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x1b2>
 80016e2:	e007      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	f043 0220 	orr.w	r2, r3, #32
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	40012400 	.word	0x40012400
 800170c:	20000020 	.word	0x20000020
 8001710:	431bde83 	.word	0x431bde83

08001714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d040      	beq.n	80017b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <ADC_Enable+0xac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <ADC_Enable+0xb0>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	0c9b      	lsrs	r3, r3, #18
 800174e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001750:	e002      	b.n	8001758 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3b01      	subs	r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f9      	bne.n	8001752 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800175e:	f7ff fc3f 	bl	8000fe0 <HAL_GetTick>
 8001762:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001764:	e01f      	b.n	80017a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001766:	f7ff fc3b 	bl	8000fe0 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d918      	bls.n	80017a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d011      	beq.n	80017a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e007      	b.n	80017b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d1d8      	bne.n	8001766 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000020 	.word	0x20000020
 80017c4:	431bde83 	.word	0x431bde83

080017c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d12e      	bne.n	8001840 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f2:	f7ff fbf5 	bl	8000fe0 <HAL_GetTick>
 80017f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017f8:	e01b      	b.n	8001832 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017fa:	f7ff fbf1 	bl	8000fe0 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d914      	bls.n	8001832 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10d      	bne.n	8001832 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	f043 0210 	orr.w	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e007      	b.n	8001842 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d0dc      	beq.n	80017fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0ed      	b.n	8001a38 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fa3d 	bl	8000ce8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800187e:	f7ff fbaf 	bl	8000fe0 <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001884:	e012      	b.n	80018ac <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001886:	f7ff fbab 	bl	8000fe0 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b0a      	cmp	r3, #10
 8001892:	d90b      	bls.n	80018ac <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2205      	movs	r2, #5
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0c5      	b.n	8001a38 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0e5      	beq.n	8001886 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0202 	bic.w	r2, r2, #2
 80018c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ca:	f7ff fb89 	bl	8000fe0 <HAL_GetTick>
 80018ce:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018d0:	e012      	b.n	80018f8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d2:	f7ff fb85 	bl	8000fe0 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b0a      	cmp	r3, #10
 80018de:	d90b      	bls.n	80018f8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2205      	movs	r2, #5
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e09f      	b.n	8001a38 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e5      	bne.n	80018d2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7e1b      	ldrb	r3, [r3, #24]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d108      	bne.n	8001920 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e007      	b.n	8001930 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7e5b      	ldrb	r3, [r3, #25]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d108      	bne.n	800194a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e007      	b.n	800195a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7e9b      	ldrb	r3, [r3, #26]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e007      	b.n	8001984 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0220 	bic.w	r2, r2, #32
 8001982:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7edb      	ldrb	r3, [r3, #27]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d108      	bne.n	800199e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0210 	bic.w	r2, r2, #16
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e007      	b.n	80019ae <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0210 	orr.w	r2, r2, #16
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7f1b      	ldrb	r3, [r3, #28]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0208 	orr.w	r2, r2, #8
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e007      	b.n	80019d8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0208 	bic.w	r2, r2, #8
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7f5b      	ldrb	r3, [r3, #29]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d108      	bne.n	80019f2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0204 	orr.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e007      	b.n	8001a02 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0204 	bic.w	r2, r2, #4
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	ea42 0103 	orr.w	r1, r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	1e5a      	subs	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a56:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a58:	7cfb      	ldrb	r3, [r7, #19]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d003      	beq.n	8001a66 <HAL_CAN_ConfigFilter+0x26>
 8001a5e:	7cfb      	ldrb	r3, [r7, #19]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	f040 80aa 	bne.w	8001bba <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2201      	movs	r2, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	401a      	ands	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d123      	bne.n	8001ae8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ac2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3248      	adds	r2, #72	; 0x48
 8001ac8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001adc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ade:	6979      	ldr	r1, [r7, #20]
 8001ae0:	3348      	adds	r3, #72	; 0x48
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d122      	bne.n	8001b36 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3248      	adds	r2, #72	; 0x48
 8001b16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b2c:	6979      	ldr	r1, [r7, #20]
 8001b2e:	3348      	adds	r3, #72	; 0x48
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b50:	e007      	b.n	8001b62 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	401a      	ands	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b7c:	e007      	b.n	8001b8e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bac:	f023 0201 	bic.w	r2, r3, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e006      	b.n	8001bc8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12e      	bne.n	8001c44 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bfe:	f7ff f9ef 	bl	8000fe0 <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c04:	e012      	b.n	8001c2c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c06:	f7ff f9eb 	bl	8000fe0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b0a      	cmp	r3, #10
 8001c12:	d90b      	bls.n	8001c2c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2205      	movs	r2, #5
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e012      	b.n	8001c52 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e5      	bne.n	8001c06 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e006      	b.n	8001c52 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b089      	sub	sp, #36	; 0x24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d003      	beq.n	8001c86 <HAL_CAN_AddTxMessage+0x2c>
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	f040 80ad 	bne.w	8001de0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 8095 	beq.w	8001dd0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	0e1b      	lsrs	r3, r3, #24
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ccc:	68f9      	ldr	r1, [r7, #12]
 8001cce:	6809      	ldr	r1, [r1, #0]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3318      	adds	r3, #24
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	440b      	add	r3, r1
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e00f      	b.n	8001cfe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ce8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001cf2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	440b      	add	r3, r1
 8001cfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3318      	adds	r3, #24
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3304      	adds	r3, #4
 8001d10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	7d1b      	ldrb	r3, [r3, #20]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d111      	bne.n	8001d3e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3318      	adds	r3, #24
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	6811      	ldr	r1, [r2, #0]
 8001d2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3318      	adds	r3, #24
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	440b      	add	r3, r1
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3307      	adds	r3, #7
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	061a      	lsls	r2, r3, #24
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3306      	adds	r3, #6
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3305      	adds	r3, #5
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	3204      	adds	r2, #4
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	4610      	mov	r0, r2
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	6811      	ldr	r1, [r2, #0]
 8001d66:	ea43 0200 	orr.w	r2, r3, r0
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	440b      	add	r3, r1
 8001d70:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3303      	adds	r3, #3
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	061a      	lsls	r2, r3, #24
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3302      	adds	r3, #2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	4313      	orrs	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	4610      	mov	r0, r2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	6811      	ldr	r1, [r2, #0]
 8001d9c:	ea43 0200 	orr.w	r2, r3, r0
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001daa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3318      	adds	r3, #24
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	6811      	ldr	r1, [r2, #0]
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	440b      	add	r3, r1
 8001dca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e00e      	b.n	8001dee <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e006      	b.n	8001dee <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
  }
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d003      	beq.n	8001e1c <HAL_CAN_GetRxMessage+0x24>
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	f040 8103 	bne.w	8002022 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10e      	bne.n	8001e40 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d116      	bne.n	8001e5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0f7      	b.n	8002030 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0e8      	b.n	8002030 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	331b      	adds	r3, #27
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0204 	and.w	r2, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10c      	bne.n	8001e96 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	331b      	adds	r3, #27
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4413      	add	r3, r2
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0d5b      	lsrs	r3, r3, #21
 8001e8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e00b      	b.n	8001eae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	331b      	adds	r3, #27
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	331b      	adds	r3, #27
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0202 	and.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	331b      	adds	r3, #27
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2208      	movs	r2, #8
 8001ee0:	611a      	str	r2, [r3, #16]
 8001ee2:	e00b      	b.n	8001efc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	331b      	adds	r3, #27
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	331b      	adds	r3, #27
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	331b      	adds	r3, #27
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0a1a      	lsrs	r2, r3, #8
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0c1a      	lsrs	r2, r3, #16
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	3302      	adds	r3, #2
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0e1a      	lsrs	r2, r3, #24
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	3303      	adds	r3, #3
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0a1a      	lsrs	r2, r3, #8
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	3305      	adds	r3, #5
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0c1a      	lsrs	r2, r3, #16
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	3306      	adds	r3, #6
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e1a      	lsrs	r2, r3, #24
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d108      	bne.n	800200e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	e007      	b.n	800201e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0220 	orr.w	r2, r2, #32
 800201c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e006      	b.n	8002030 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d002      	beq.n	8002058 <HAL_CAN_ActivateNotification+0x1e>
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d109      	bne.n	800206c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6959      	ldr	r1, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	e006      	b.n	800207a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d07c      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d023      	beq.n	800211c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2201      	movs	r2, #1
 80020da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f983 	bl	80023f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80020ec:	e016      	b.n	800211c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d004      	beq.n	8002102 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	e00c      	b.n	800211c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
 8002114:	e002      	b.n	800211c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f986 	bl	8002428 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f962 	bl	8002404 <HAL_CAN_TxMailbox1CompleteCallback>
 8002140:	e016      	b.n	8002170 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	e00c      	b.n	8002170 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
 8002168:	e002      	b.n	8002170 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f965 	bl	800243a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d024      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002182:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f941 	bl	8002416 <HAL_CAN_TxMailbox2CompleteCallback>
 8002194:	e016      	b.n	80021c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	e00c      	b.n	80021c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
 80021bc:	e002      	b.n	80021c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f944 	bl	800244c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2210      	movs	r2, #16
 80021e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2208      	movs	r2, #8
 8002202:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f92a 	bl	800245e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe f8cc 	bl	80003c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002242:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2210      	movs	r2, #16
 800224a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f90a 	bl	8002482 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8f2 	bl	8002470 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2210      	movs	r2, #16
 80022a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f8f3 	bl	8002494 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2208      	movs	r2, #8
 80022c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8eb 	bl	80024a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d07b      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d072      	beq.n	80023ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	2b00      	cmp	r3, #0
 8002308:	d008      	beq.n	800231c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233e:	2b00      	cmp	r3, #0
 8002340:	d043      	beq.n	80023ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d03e      	beq.n	80023ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002352:	2b60      	cmp	r3, #96	; 0x60
 8002354:	d02b      	beq.n	80023ae <HAL_CAN_IRQHandler+0x32a>
 8002356:	2b60      	cmp	r3, #96	; 0x60
 8002358:	d82e      	bhi.n	80023b8 <HAL_CAN_IRQHandler+0x334>
 800235a:	2b50      	cmp	r3, #80	; 0x50
 800235c:	d022      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x320>
 800235e:	2b50      	cmp	r3, #80	; 0x50
 8002360:	d82a      	bhi.n	80023b8 <HAL_CAN_IRQHandler+0x334>
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d019      	beq.n	800239a <HAL_CAN_IRQHandler+0x316>
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d826      	bhi.n	80023b8 <HAL_CAN_IRQHandler+0x334>
 800236a:	2b30      	cmp	r3, #48	; 0x30
 800236c:	d010      	beq.n	8002390 <HAL_CAN_IRQHandler+0x30c>
 800236e:	2b30      	cmp	r3, #48	; 0x30
 8002370:	d822      	bhi.n	80023b8 <HAL_CAN_IRQHandler+0x334>
 8002372:	2b10      	cmp	r3, #16
 8002374:	d002      	beq.n	800237c <HAL_CAN_IRQHandler+0x2f8>
 8002376:	2b20      	cmp	r3, #32
 8002378:	d005      	beq.n	8002386 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800237a:	e01d      	b.n	80023b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f043 0308 	orr.w	r3, r3, #8
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002384:	e019      	b.n	80023ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800238e:	e014      	b.n	80023ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002398:	e00f      	b.n	80023ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023a2:	e00a      	b.n	80023ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023ac:	e005      	b.n	80023ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b6:	e000      	b.n	80023ba <HAL_CAN_IRQHandler+0x336>
            break;
 80023b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2204      	movs	r2, #4
 80023d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f867 	bl	80024b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	; 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
	...

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4906      	ldr	r1, [pc, #24]	; (8002564 <__NVIC_EnableIRQ+0x34>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002630:	d301      	bcc.n	8002636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002632:	2301      	movs	r3, #1
 8002634:	e00f      	b.n	8002656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <SysTick_Config+0x40>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263e:	210f      	movs	r1, #15
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f7ff ff90 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <SysTick_Config+0x40>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <SysTick_Config+0x40>)
 8002650:	2207      	movs	r2, #7
 8002652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	e000e010 	.word	0xe000e010

08002664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff2d 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff42 	bl	8002514 <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff90 	bl	80025bc <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5f 	bl	8002568 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff35 	bl	8002530 <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa2 	bl	8002620 <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e043      	b.n	8002786 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_DMA_Init+0xa8>)
 8002706:	4413      	add	r3, r2
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_DMA_Init+0xac>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_DMA_Init+0xb0>)
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002732:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002736:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	bffdfff8 	.word	0xbffdfff8
 8002794:	cccccccd 	.word	0xcccccccd
 8002798:	40020000 	.word	0x40020000

0800279c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2204      	movs	r2, #4
 80027ba:	409a      	lsls	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d04f      	beq.n	8002864 <HAL_DMA_IRQHandler+0xc8>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d04a      	beq.n	8002864 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0204 	bic.w	r2, r2, #4
 80027ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a66      	ldr	r2, [pc, #408]	; (800298c <HAL_DMA_IRQHandler+0x1f0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d029      	beq.n	800284a <HAL_DMA_IRQHandler+0xae>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a65      	ldr	r2, [pc, #404]	; (8002990 <HAL_DMA_IRQHandler+0x1f4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d022      	beq.n	8002846 <HAL_DMA_IRQHandler+0xaa>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a63      	ldr	r2, [pc, #396]	; (8002994 <HAL_DMA_IRQHandler+0x1f8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01a      	beq.n	8002840 <HAL_DMA_IRQHandler+0xa4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a62      	ldr	r2, [pc, #392]	; (8002998 <HAL_DMA_IRQHandler+0x1fc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d012      	beq.n	800283a <HAL_DMA_IRQHandler+0x9e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a60      	ldr	r2, [pc, #384]	; (800299c <HAL_DMA_IRQHandler+0x200>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00a      	beq.n	8002834 <HAL_DMA_IRQHandler+0x98>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_DMA_IRQHandler+0x204>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d102      	bne.n	800282e <HAL_DMA_IRQHandler+0x92>
 8002828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800282c:	e00e      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 800282e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002832:	e00b      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 8002834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002838:	e008      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 800283a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800283e:	e005      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 8002840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002844:	e002      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 8002846:	2340      	movs	r3, #64	; 0x40
 8002848:	e000      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 800284a:	2304      	movs	r3, #4
 800284c:	4a55      	ldr	r2, [pc, #340]	; (80029a4 <HAL_DMA_IRQHandler+0x208>)
 800284e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8094 	beq.w	8002982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002862:	e08e      	b.n	8002982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2202      	movs	r2, #2
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d056      	beq.n	8002922 <HAL_DMA_IRQHandler+0x186>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d051      	beq.n	8002922 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 020a 	bic.w	r2, r2, #10
 800289a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a38      	ldr	r2, [pc, #224]	; (800298c <HAL_DMA_IRQHandler+0x1f0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d029      	beq.n	8002902 <HAL_DMA_IRQHandler+0x166>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a37      	ldr	r2, [pc, #220]	; (8002990 <HAL_DMA_IRQHandler+0x1f4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_IRQHandler+0x162>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <HAL_DMA_IRQHandler+0x1f8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01a      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x15c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a34      	ldr	r2, [pc, #208]	; (8002998 <HAL_DMA_IRQHandler+0x1fc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d012      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x156>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a32      	ldr	r2, [pc, #200]	; (800299c <HAL_DMA_IRQHandler+0x200>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x150>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_DMA_IRQHandler+0x204>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d102      	bne.n	80028e6 <HAL_DMA_IRQHandler+0x14a>
 80028e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e4:	e00e      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	e00b      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f0:	e008      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f6:	e005      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028fc:	e002      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028fe:	2320      	movs	r3, #32
 8002900:	e000      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 8002902:	2302      	movs	r3, #2
 8002904:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <HAL_DMA_IRQHandler+0x208>)
 8002906:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d034      	beq.n	8002982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002920:	e02f      	b.n	8002982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2208      	movs	r2, #8
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d028      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1e8>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 020e 	bic.w	r2, r2, #14
 800294a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
    }
  }
  return;
 8002982:	bf00      	nop
 8002984:	bf00      	nop
}
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40020008 	.word	0x40020008
 8002990:	4002001c 	.word	0x4002001c
 8002994:	40020030 	.word	0x40020030
 8002998:	40020044 	.word	0x40020044
 800299c:	40020058 	.word	0x40020058
 80029a0:	4002006c 	.word	0x4002006c
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b08b      	sub	sp, #44	; 0x2c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ba:	e169      	b.n	8002c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029bc:	2201      	movs	r2, #1
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 8158 	bne.w	8002c8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a9a      	ldr	r2, [pc, #616]	; (8002c48 <HAL_GPIO_Init+0x2a0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d05e      	beq.n	8002aa2 <HAL_GPIO_Init+0xfa>
 80029e4:	4a98      	ldr	r2, [pc, #608]	; (8002c48 <HAL_GPIO_Init+0x2a0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d875      	bhi.n	8002ad6 <HAL_GPIO_Init+0x12e>
 80029ea:	4a98      	ldr	r2, [pc, #608]	; (8002c4c <HAL_GPIO_Init+0x2a4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d058      	beq.n	8002aa2 <HAL_GPIO_Init+0xfa>
 80029f0:	4a96      	ldr	r2, [pc, #600]	; (8002c4c <HAL_GPIO_Init+0x2a4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d86f      	bhi.n	8002ad6 <HAL_GPIO_Init+0x12e>
 80029f6:	4a96      	ldr	r2, [pc, #600]	; (8002c50 <HAL_GPIO_Init+0x2a8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d052      	beq.n	8002aa2 <HAL_GPIO_Init+0xfa>
 80029fc:	4a94      	ldr	r2, [pc, #592]	; (8002c50 <HAL_GPIO_Init+0x2a8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d869      	bhi.n	8002ad6 <HAL_GPIO_Init+0x12e>
 8002a02:	4a94      	ldr	r2, [pc, #592]	; (8002c54 <HAL_GPIO_Init+0x2ac>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04c      	beq.n	8002aa2 <HAL_GPIO_Init+0xfa>
 8002a08:	4a92      	ldr	r2, [pc, #584]	; (8002c54 <HAL_GPIO_Init+0x2ac>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d863      	bhi.n	8002ad6 <HAL_GPIO_Init+0x12e>
 8002a0e:	4a92      	ldr	r2, [pc, #584]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d046      	beq.n	8002aa2 <HAL_GPIO_Init+0xfa>
 8002a14:	4a90      	ldr	r2, [pc, #576]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d85d      	bhi.n	8002ad6 <HAL_GPIO_Init+0x12e>
 8002a1a:	2b12      	cmp	r3, #18
 8002a1c:	d82a      	bhi.n	8002a74 <HAL_GPIO_Init+0xcc>
 8002a1e:	2b12      	cmp	r3, #18
 8002a20:	d859      	bhi.n	8002ad6 <HAL_GPIO_Init+0x12e>
 8002a22:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <HAL_GPIO_Init+0x80>)
 8002a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a28:	08002aa3 	.word	0x08002aa3
 8002a2c:	08002a7d 	.word	0x08002a7d
 8002a30:	08002a8f 	.word	0x08002a8f
 8002a34:	08002ad1 	.word	0x08002ad1
 8002a38:	08002ad7 	.word	0x08002ad7
 8002a3c:	08002ad7 	.word	0x08002ad7
 8002a40:	08002ad7 	.word	0x08002ad7
 8002a44:	08002ad7 	.word	0x08002ad7
 8002a48:	08002ad7 	.word	0x08002ad7
 8002a4c:	08002ad7 	.word	0x08002ad7
 8002a50:	08002ad7 	.word	0x08002ad7
 8002a54:	08002ad7 	.word	0x08002ad7
 8002a58:	08002ad7 	.word	0x08002ad7
 8002a5c:	08002ad7 	.word	0x08002ad7
 8002a60:	08002ad7 	.word	0x08002ad7
 8002a64:	08002ad7 	.word	0x08002ad7
 8002a68:	08002ad7 	.word	0x08002ad7
 8002a6c:	08002a85 	.word	0x08002a85
 8002a70:	08002a99 	.word	0x08002a99
 8002a74:	4a79      	ldr	r2, [pc, #484]	; (8002c5c <HAL_GPIO_Init+0x2b4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a7a:	e02c      	b.n	8002ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	623b      	str	r3, [r7, #32]
          break;
 8002a82:	e029      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	623b      	str	r3, [r7, #32]
          break;
 8002a8c:	e024      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	3308      	adds	r3, #8
 8002a94:	623b      	str	r3, [r7, #32]
          break;
 8002a96:	e01f      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	623b      	str	r3, [r7, #32]
          break;
 8002aa0:	e01a      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	623b      	str	r3, [r7, #32]
          break;
 8002aae:	e013      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	611a      	str	r2, [r3, #16]
          break;
 8002ac2:	e009      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	615a      	str	r2, [r3, #20]
          break;
 8002ace:	e003      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
          break;
 8002ad4:	e000      	b.n	8002ad8 <HAL_GPIO_Init+0x130>
          break;
 8002ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d801      	bhi.n	8002ae2 <HAL_GPIO_Init+0x13a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	e001      	b.n	8002ae6 <HAL_GPIO_Init+0x13e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2bff      	cmp	r3, #255	; 0xff
 8002aec:	d802      	bhi.n	8002af4 <HAL_GPIO_Init+0x14c>
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	e002      	b.n	8002afa <HAL_GPIO_Init+0x152>
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	3b08      	subs	r3, #8
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	210f      	movs	r1, #15
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	6a39      	ldr	r1, [r7, #32]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	431a      	orrs	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80b1 	beq.w	8002c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_GPIO_Init+0x2b8>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_GPIO_Init+0x2b8>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6193      	str	r3, [r2, #24]
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_GPIO_Init+0x2b8>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b40:	4a48      	ldr	r2, [pc, #288]	; (8002c64 <HAL_GPIO_Init+0x2bc>)
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	3302      	adds	r3, #2
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <HAL_GPIO_Init+0x2c0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <HAL_GPIO_Init+0x1ec>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3f      	ldr	r2, [pc, #252]	; (8002c6c <HAL_GPIO_Init+0x2c4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00d      	beq.n	8002b90 <HAL_GPIO_Init+0x1e8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3e      	ldr	r2, [pc, #248]	; (8002c70 <HAL_GPIO_Init+0x2c8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d007      	beq.n	8002b8c <HAL_GPIO_Init+0x1e4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <HAL_GPIO_Init+0x2cc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_GPIO_Init+0x1e0>
 8002b84:	2303      	movs	r3, #3
 8002b86:	e006      	b.n	8002b96 <HAL_GPIO_Init+0x1ee>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e004      	b.n	8002b96 <HAL_GPIO_Init+0x1ee>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e002      	b.n	8002b96 <HAL_GPIO_Init+0x1ee>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_GPIO_Init+0x1ee>
 8002b94:	2300      	movs	r3, #0
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	f002 0203 	and.w	r2, r2, #3
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	4093      	lsls	r3, r2
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ba6:	492f      	ldr	r1, [pc, #188]	; (8002c64 <HAL_GPIO_Init+0x2bc>)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	492c      	ldr	r1, [pc, #176]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	4928      	ldr	r1, [pc, #160]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	4922      	ldr	r1, [pc, #136]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	491e      	ldr	r1, [pc, #120]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4918      	ldr	r1, [pc, #96]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	4914      	ldr	r1, [pc, #80]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d021      	beq.n	8002c7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e021      	b.n	8002c8a <HAL_GPIO_Init+0x2e2>
 8002c46:	bf00      	nop
 8002c48:	10320000 	.word	0x10320000
 8002c4c:	10310000 	.word	0x10310000
 8002c50:	10220000 	.word	0x10220000
 8002c54:	10210000 	.word	0x10210000
 8002c58:	10120000 	.word	0x10120000
 8002c5c:	10110000 	.word	0x10110000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40010800 	.word	0x40010800
 8002c6c:	40010c00 	.word	0x40010c00
 8002c70:	40011000 	.word	0x40011000
 8002c74:	40011400 	.word	0x40011400
 8002c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4909      	ldr	r1, [pc, #36]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f47f ae8e 	bne.w	80029bc <HAL_GPIO_Init+0x14>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	372c      	adds	r7, #44	; 0x2c
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	40010400 	.word	0x40010400

08002cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc0:	787b      	ldrb	r3, [r7, #1]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ccc:	e003      	b.n	8002cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	041a      	lsls	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43d9      	mvns	r1, r3
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	400b      	ands	r3, r1
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	611a      	str	r2, [r3, #16]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e272      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8087 	beq.w	8002e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d34:	4b92      	ldr	r3, [pc, #584]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d00c      	beq.n	8002d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d112      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
 8002d4c:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d10b      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5a:	4b89      	ldr	r3, [pc, #548]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d06c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x12c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d168      	bne.n	8002e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e24c      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x76>
 8002d7c:	4b80      	ldr	r3, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7f      	ldr	r2, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e02e      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d92:	4b7b      	ldr	r3, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7a      	ldr	r2, [pc, #488]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xbc>
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dd0:	4b6b      	ldr	r3, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b68      	ldr	r3, [pc, #416]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a67      	ldr	r2, [pc, #412]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe f8f6 	bl	8000fe0 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe f8f2 	bl	8000fe0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e200      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe4>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fe f8e2 	bl	8000fe0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7fe f8de 	bl	8000fe0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1ec      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x10c>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e4e:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e5a:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
 8002e66:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1c0      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4939      	ldr	r1, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe f897 	bl	8000fe0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe f893 	bl	8000fe0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1a1      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4927      	ldr	r1, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe f876 	bl	8000fe0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7fe f872 	bl	8000fe0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e180      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03a      	beq.n	8002f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fe f856 	bl	8000fe0 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe f852 	bl	8000fe0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e160      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f000 face 	bl	80034f8 <RCC_Delay>
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7fe f83c 	bl	8000fe0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6a:	e00f      	b.n	8002f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe f838 	bl	8000fe0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d908      	bls.n	8002f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e146      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	42420000 	.word	0x42420000
 8002f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e9      	bne.n	8002f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a6 	beq.w	80030f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b8b      	ldr	r3, [pc, #556]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a87      	ldr	r2, [pc, #540]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b85      	ldr	r3, [pc, #532]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b82      	ldr	r3, [pc, #520]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d118      	bne.n	8003010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7fd fff9 	bl	8000fe0 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7fd fff5 	bl	8000fe0 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b64      	cmp	r3, #100	; 0x64
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e103      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	4b75      	ldr	r3, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x4c8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x312>
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a6e      	ldr	r2, [pc, #440]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	e02d      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x334>
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a69      	ldr	r2, [pc, #420]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	e01c      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x356>
 8003050:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a60      	ldr	r2, [pc, #384]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	4b5e      	ldr	r3, [pc, #376]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a5d      	ldr	r2, [pc, #372]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a5a      	ldr	r2, [pc, #360]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a57      	ldr	r2, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d015      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7fd ffa9 	bl	8000fe0 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fd ffa5 	bl	8000fe0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0b1      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ee      	beq.n	8003092 <HAL_RCC_OscConfig+0x37e>
 80030b4:	e014      	b.n	80030e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7fd ff93 	bl	8000fe0 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fd ff8f 	bl	8000fe0 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e09b      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a3b      	ldr	r2, [pc, #236]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030fc:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d061      	beq.n	80031cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d146      	bne.n	800319e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fd ff63 	bl	8000fe0 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7fd ff5f 	bl	8000fe0 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e06d      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d108      	bne.n	8003158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4921      	ldr	r1, [pc, #132]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a19      	ldr	r1, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	430b      	orrs	r3, r1
 800316a:	491b      	ldr	r1, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fd ff33 	bl	8000fe0 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fd ff2f 	bl	8000fe0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e03d      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x46a>
 800319c:	e035      	b.n	800320a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fd ff1c 	bl	8000fe0 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd ff18 	bl	8000fe0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e026      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x498>
 80031ca:	e01e      	b.n	800320a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e019      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_OscConfig+0x500>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0d0      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4965      	ldr	r1, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800327e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d040      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d115      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e073      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06b      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4936      	ldr	r1, [pc, #216]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7fd fe6a 	bl	8000fe0 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fd fe66 	bl	8000fe0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e053      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d210      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	4922      	ldr	r1, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 f821 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1cc>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1d0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fdc8 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08003f10 	.word	0x08003f10
 80033e4:	20000020 	.word	0x20000020
 80033e8:	20000024 	.word	0x20000024

080033ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCC_GetSysClockFreq+0x94>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d002      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x30>
 8003416:	2b08      	cmp	r3, #8
 8003418:	d003      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x36>
 800341a:	e027      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_GetSysClockFreq+0x98>)
 800341e:	613b      	str	r3, [r7, #16]
      break;
 8003420:	e027      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	0c9b      	lsrs	r3, r3, #18
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_RCC_GetSysClockFreq+0x9c>)
 800342c:	5cd3      	ldrb	r3, [r2, r3]
 800342e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCC_GetSysClockFreq+0x94>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	0c5b      	lsrs	r3, r3, #17
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	4a11      	ldr	r2, [pc, #68]	; (800348c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <HAL_RCC_GetSysClockFreq+0x98>)
 800344e:	fb03 f202 	mul.w	r2, r3, r2
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e004      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	613b      	str	r3, [r7, #16]
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetSysClockFreq+0x98>)
 800346e:	613b      	str	r3, [r7, #16]
      break;
 8003470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003472:	693b      	ldr	r3, [r7, #16]
}
 8003474:	4618      	mov	r0, r3
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	08003f28 	.word	0x08003f28
 800348c:	08003f38 	.word	0x08003f38
 8003490:	003d0900 	.word	0x003d0900

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b02      	ldr	r3, [pc, #8]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	20000020 	.word	0x20000020

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff2 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08003f20 	.word	0x08003f20

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffde 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0adb      	lsrs	r3, r3, #11
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08003f20 	.word	0x08003f20

080034f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <RCC_Delay+0x34>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <RCC_Delay+0x38>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0a5b      	lsrs	r3, r3, #9
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003514:	bf00      	nop
  }
  while (Delay --);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f9      	bne.n	8003514 <RCC_Delay+0x1c>
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000020 	.word	0x20000020
 8003530:	10624dd3 	.word	0x10624dd3

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d07d      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	4b4c      	ldr	r3, [pc, #304]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	4a4b      	ldr	r2, [pc, #300]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356a:	61d3      	str	r3, [r2, #28]
 800356c:	4b49      	ldr	r3, [pc, #292]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	4b46      	ldr	r3, [pc, #280]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d118      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003588:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a42      	ldr	r2, [pc, #264]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800358e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003592:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003594:	f7fd fd24 	bl	8000fe0 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	e008      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359c:	f7fd fd20 	bl	8000fe0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e06d      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ba:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d02e      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d027      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d8:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035e8:	4b2c      	ldr	r3, [pc, #176]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035ee:	4a29      	ldr	r2, [pc, #164]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d014      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fd fcef 	bl	8000fe0 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fd fceb 	bl	8000fe0 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e036      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ee      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003628:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4917      	ldr	r1, [pc, #92]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	4313      	orrs	r3, r2
 8003638:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4a13      	ldr	r2, [pc, #76]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	490b      	ldr	r1, [pc, #44]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4904      	ldr	r1, [pc, #16]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
 800369c:	42420440 	.word	0x42420440

080036a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	2300      	movs	r3, #0
 80036ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	f200 808a 	bhi.w	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d045      	beq.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d075      	beq.n	80037c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80036d6:	e082      	b.n	80037de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80036de:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d07b      	beq.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	0c9b      	lsrs	r3, r3, #18
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80036f4:	5cd3      	ldrb	r3, [r2, r3]
 80036f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d015      	beq.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003702:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	0c5b      	lsrs	r3, r3, #17
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	4a3b      	ldr	r2, [pc, #236]	; (80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800371c:	4a38      	ldr	r2, [pc, #224]	; (8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	fbb2 f2f3 	udiv	r2, r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	fb02 f303 	mul.w	r3, r2, r3
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	e004      	b.n	8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4a34      	ldr	r2, [pc, #208]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003738:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003740:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003744:	d102      	bne.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	61bb      	str	r3, [r7, #24]
      break;
 800374a:	e04a      	b.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	61bb      	str	r3, [r7, #24]
      break;
 800375a:	e042      	b.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d108      	bne.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e01f      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003798:	f649 4340 	movw	r3, #40000	; 0x9c40
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e00f      	b.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037aa:	d11c      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d016      	beq.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80037b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80037bc:	61bb      	str	r3, [r7, #24]
      break;
 80037be:	e012      	b.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80037c0:	e011      	b.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80037c2:	f7ff fe85 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0b9b      	lsrs	r3, r3, #14
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	3301      	adds	r3, #1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	61bb      	str	r3, [r7, #24]
      break;
 80037dc:	e004      	b.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037de:	bf00      	nop
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80037e6:	bf00      	nop
    }
  }
  return (frequency);
 80037e8:	69bb      	ldr	r3, [r7, #24]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	08003f3c 	.word	0x08003f3c
 80037fc:	08003f4c 	.word	0x08003f4c
 8003800:	007a1200 	.word	0x007a1200
 8003804:	003d0900 	.word	0x003d0900
 8003808:	aaaaaaab 	.word	0xaaaaaaab

0800380c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e041      	b.n	80038a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd faac 	bl	8000d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f000 f8f4 	bl	8003a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_ConfigClockSource+0x1c>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0b4      	b.n	8003a30 <HAL_TIM_ConfigClockSource+0x186>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fe:	d03e      	beq.n	800397e <HAL_TIM_ConfigClockSource+0xd4>
 8003900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003904:	f200 8087 	bhi.w	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	f000 8086 	beq.w	8003a1c <HAL_TIM_ConfigClockSource+0x172>
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d87f      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 8003916:	2b70      	cmp	r3, #112	; 0x70
 8003918:	d01a      	beq.n	8003950 <HAL_TIM_ConfigClockSource+0xa6>
 800391a:	2b70      	cmp	r3, #112	; 0x70
 800391c:	d87b      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 800391e:	2b60      	cmp	r3, #96	; 0x60
 8003920:	d050      	beq.n	80039c4 <HAL_TIM_ConfigClockSource+0x11a>
 8003922:	2b60      	cmp	r3, #96	; 0x60
 8003924:	d877      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 8003926:	2b50      	cmp	r3, #80	; 0x50
 8003928:	d03c      	beq.n	80039a4 <HAL_TIM_ConfigClockSource+0xfa>
 800392a:	2b50      	cmp	r3, #80	; 0x50
 800392c:	d873      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d058      	beq.n	80039e4 <HAL_TIM_ConfigClockSource+0x13a>
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d86f      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 8003936:	2b30      	cmp	r3, #48	; 0x30
 8003938:	d064      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x15a>
 800393a:	2b30      	cmp	r3, #48	; 0x30
 800393c:	d86b      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 800393e:	2b20      	cmp	r3, #32
 8003940:	d060      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x15a>
 8003942:	2b20      	cmp	r3, #32
 8003944:	d867      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d05c      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x15a>
 800394a:	2b10      	cmp	r3, #16
 800394c:	d05a      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0x15a>
 800394e:	e062      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003960:	f000 f943 	bl	8003bea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003972:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]
      break;
 800397c:	e04f      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800398e:	f000 f92c 	bl	8003bea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039a0:	609a      	str	r2, [r3, #8]
      break;
 80039a2:	e03c      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b0:	461a      	mov	r2, r3
 80039b2:	f000 f8a3 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2150      	movs	r1, #80	; 0x50
 80039bc:	4618      	mov	r0, r3
 80039be:	f000 f8fa 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 80039c2:	e02c      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039d0:	461a      	mov	r2, r3
 80039d2:	f000 f8c1 	bl	8003b58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2160      	movs	r1, #96	; 0x60
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f8ea 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 80039e2:	e01c      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039f0:	461a      	mov	r2, r3
 80039f2:	f000 f883 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2140      	movs	r1, #64	; 0x40
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f8da 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003a02:	e00c      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 f8d1 	bl	8003bb6 <TIM_ITRx_SetConfig>
      break;
 8003a14:	e003      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1a:	e000      	b.n	8003a1e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <TIM_Base_SetConfig+0xb8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_Base_SetConfig+0x30>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d007      	beq.n	8003a68 <TIM_Base_SetConfig+0x30>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a26      	ldr	r2, [pc, #152]	; (8003af4 <TIM_Base_SetConfig+0xbc>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0x30>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a25      	ldr	r2, [pc, #148]	; (8003af8 <TIM_Base_SetConfig+0xc0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <TIM_Base_SetConfig+0xb8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <TIM_Base_SetConfig+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d007      	beq.n	8003a9a <TIM_Base_SetConfig+0x62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <TIM_Base_SetConfig+0xbc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d003      	beq.n	8003a9a <TIM_Base_SetConfig+0x62>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <TIM_Base_SetConfig+0xc0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d108      	bne.n	8003aac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <TIM_Base_SetConfig+0xb8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40000800 	.word	0x40000800

08003afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 030a 	bic.w	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	031b      	lsls	r3, r3, #12
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f043 0307 	orr.w	r3, r3, #7
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b087      	sub	sp, #28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	021a      	lsls	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e046      	b.n	8003cce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d009      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10c      	bne.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800

08003ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e042      	b.n	8003d7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f85c 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f82b 	bl	8003d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dbe:	f023 030c 	bic.w	r3, r3, #12
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <UART_SetConfig+0x114>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7ff fb70 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	e002      	b.n	8003dfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003df4:	f7ff fb58 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8003df8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009a      	lsls	r2, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <UART_SetConfig+0x118>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	0119      	lsls	r1, r3, #4
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009a      	lsls	r2, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <UART_SetConfig+0x118>)
 8003e32:	fba3 0302 	umull	r0, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2064      	movs	r0, #100	; 0x64
 8003e3a:	fb00 f303 	mul.w	r3, r0, r3
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	3332      	adds	r3, #50	; 0x32
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <UART_SetConfig+0x118>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e50:	4419      	add	r1, r3
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e68:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <UART_SetConfig+0x118>)
 8003e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2064      	movs	r0, #100	; 0x64
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	3332      	adds	r3, #50	; 0x32
 8003e7c:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <UART_SetConfig+0x118>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	f003 020f 	and.w	r2, r3, #15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <memset>:
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4402      	add	r2, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	4d0c      	ldr	r5, [pc, #48]	; (8003ee8 <__libc_init_array+0x38>)
 8003eb6:	4c0d      	ldr	r4, [pc, #52]	; (8003eec <__libc_init_array+0x3c>)
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	f000 f81a 	bl	8003ef8 <_init>
 8003ec4:	2600      	movs	r6, #0
 8003ec6:	4d0a      	ldr	r5, [pc, #40]	; (8003ef0 <__libc_init_array+0x40>)
 8003ec8:	4c0a      	ldr	r4, [pc, #40]	; (8003ef4 <__libc_init_array+0x44>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	08003f50 	.word	0x08003f50
 8003eec:	08003f50 	.word	0x08003f50
 8003ef0:	08003f50 	.word	0x08003f50
 8003ef4:	08003f54 	.word	0x08003f54

08003ef8 <_init>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr

08003f04 <_fini>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	bf00      	nop
 8003f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0a:	bc08      	pop	{r3}
 8003f0c:	469e      	mov	lr, r3
 8003f0e:	4770      	bx	lr
