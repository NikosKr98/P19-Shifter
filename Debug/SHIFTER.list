
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d8  080059d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080059d8  080059d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d8  080059d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  2000000c  080059ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  080059ec  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113aa  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029a9  00000000  00000000  00031422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00033dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c99  00000000  00000000  00034e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019938  00000000  00000000  00035a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a20  00000000  00000000  0004f3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093354  00000000  00000000  00061df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000460c  00000000  00000000  000f5148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f9754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005958 	.word	0x08005958

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005958 	.word	0x08005958

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <InitApplication>:
#define RaiseControlError(fault_) MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_))
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitApplication(InputStruct *inputs, OutputStruct *outputs) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000f7e:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <InitApplication+0x24>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <InitApplication+0x28>)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	6013      	str	r3, [r2, #0]

	IDLE_Entry();
 8000f8a:	f000 f845 	bl	8001018 <IDLE_Entry>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000028 	.word	0x20000028
 8000f9c:	2000002c 	.word	0x2000002c

08000fa0 <RunApplication>:



void RunApplication(InputStruct *inputs, OutputStruct *outputs){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]




	// SHIFTER STATE MACHINE
	switch (NCurrentState) {
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <RunApplication+0x74>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b05      	cmp	r3, #5
 8000fb0:	d82c      	bhi.n	800100c <RunApplication+0x6c>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <RunApplication+0x18>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	08000fd1 	.word	0x08000fd1
 8000fbc:	08000fdb 	.word	0x08000fdb
 8000fc0:	08000fe5 	.word	0x08000fe5
 8000fc4:	08000fef 	.word	0x08000fef
 8000fc8:	08000ff9 	.word	0x08000ff9
 8000fcc:	08001003 	.word	0x08001003

	case IDLE_STATE:
		IDLE_Run();
 8000fd0:	f000 f864 	bl	800109c <IDLE_Run>
		IDLE_Event();
 8000fd4:	f000 f838 	bl	8001048 <IDLE_Event>
		break;
 8000fd8:	e018      	b.n	800100c <RunApplication+0x6c>
	case PRE_UPSHIFT_STATE:
		PRE_UPSHIFT_Run();
 8000fda:	f000 f8b9 	bl	8001150 <PRE_UPSHIFT_Run>
		PRE_UPSHIFT_Event();
 8000fde:	f000 f87f 	bl	80010e0 <PRE_UPSHIFT_Event>
		break;
 8000fe2:	e013      	b.n	800100c <RunApplication+0x6c>
	case PRE_DNSHIFT_STATE:
		PRE_DNSHIFT_Run();
 8000fe4:	f000 f934 	bl	8001250 <PRE_DNSHIFT_Run>
		PRE_DNSHIFT_Event();
 8000fe8:	f000 f92c 	bl	8001244 <PRE_DNSHIFT_Event>
		break;
 8000fec:	e00e      	b.n	800100c <RunApplication+0x6c>
	case SHIFTING_STATE:
		SHIFTING_Run();
 8000fee:	f000 f94d 	bl	800128c <SHIFTING_Run>
		SHIFTING_Event();
 8000ff2:	f000 f945 	bl	8001280 <SHIFTING_Event>
		break;
 8000ff6:	e009      	b.n	800100c <RunApplication+0x6c>
	case POSTSHIFT_STATE:
		POSTSHIFT_Run();
 8000ff8:	f000 f954 	bl	80012a4 <POSTSHIFT_Run>
		POSTSHIFT_Event();
 8000ffc:	f000 f94c 	bl	8001298 <POSTSHIFT_Event>
		break;
 8001000:	e004      	b.n	800100c <RunApplication+0x6c>
	case ERROR_STATE:
		ERROR_Run();
 8001002:	f000 f96d 	bl	80012e0 <ERROR_Run>
		ERROR_Event();
 8001006:	f000 f965 	bl	80012d4 <ERROR_Event>
		break;
 800100a:	bf00      	nop
	}


}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000030 	.word	0x20000030

08001018 <IDLE_Entry>:


void IDLE_Entry(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <IDLE_Entry+0x1c>)
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <IDLE_Entry+0x20>)
 8001022:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <IDLE_Entry+0x1c>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000030 	.word	0x20000030
 8001038:	20000031 	.word	0x20000031

0800103c <IDLE_Exit>:
void IDLE_Exit(void) {
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <IDLE_Event>:
void IDLE_Event(void) {
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {		// TODO: not sure how to handle this...how do we come back if we see faults?
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <IDLE_Event+0x50>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fa9f 	bl	8001594 <CheckFaults>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <IDLE_Event+0x1e>
		IDLE_Exit();
 800105c:	f7ff ffee 	bl	800103c <IDLE_Exit>
		ERROR_Entry();
 8001060:	f000 f926 	bl	80012b0 <ERROR_Entry>
		return;
 8001064:	e017      	b.n	8001096 <IDLE_Event+0x4e>
	}


    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <IDLE_Event+0x50>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <IDLE_Event+0x36>
        IDLE_Exit();
 8001074:	f7ff ffe2 	bl	800103c <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8001078:	f000 f816 	bl	80010a8 <PRE_UPSHIFT_Entry>
        return;
 800107c:	e00b      	b.n	8001096 <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <IDLE_Event+0x50>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <IDLE_Event+0x4e>
        IDLE_Exit();
 800108c:	f7ff ffd6 	bl	800103c <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8001090:	f000 f8c2 	bl	8001218 <PRE_DNSHIFT_Entry>
        return;
 8001094:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000028 	.word	0x20000028

0800109c <IDLE_Run>:
void IDLE_Run(void) {
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

	 // TODO: Clutch handle with Rpm check and conditioning (Map)

}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <PRE_UPSHIFT_Entry+0x20>)
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <PRE_UPSHIFT_Entry+0x24>)
 80010b2:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <PRE_UPSHIFT_Entry+0x20>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 80010ba:	f001 fb39 	bl	8002730 <HAL_GetTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <PRE_UPSHIFT_Entry+0x28>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000030 	.word	0x20000030
 80010cc:	20000031 	.word	0x20000031
 80010d0:	20000034 	.word	0x20000034

080010d4 <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 80010e0:	b598      	push	{r3, r4, r7, lr}
 80010e2:	af00      	add	r7, sp, #0

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <PRE_UPSHIFT_Event+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	7d5b      	ldrb	r3, [r3, #21]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d115      	bne.n	800111a <PRE_UPSHIFT_Event+0x3a>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;			// we go to the next gear
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <PRE_UPSHIFT_Event+0x68>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	7d1a      	ldrb	r2, [r3, #20]
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <PRE_UPSHIFT_Event+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3201      	adds	r2, #1
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	75da      	strb	r2, [r3, #23]
		MyOutputs->xClutchTargetShift = 0;						// we do not need any clutch opening
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <PRE_UPSHIFT_Event+0x64>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	839a      	strh	r2, [r3, #28]

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT)
			MyOutputs->BSparkCut = 1;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <PRE_UPSHIFT_Event+0x64>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		PRE_UPSHIFT_Exit();
 8001110:	f7ff ffe0 	bl	80010d4 <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8001114:	f000 f8a2 	bl	800125c <SHIFTING_Entry>
		return;
 8001118:	e012      	b.n	8001140 <PRE_UPSHIFT_Event+0x60>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <PRE_UPSHIFT_Event+0x64>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	7d5b      	ldrb	r3, [r3, #21]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00d      	beq.n	8001140 <PRE_UPSHIFT_Event+0x60>
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <PRE_UPSHIFT_Event+0x6c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800112c:	f001 fb00 	bl	8002730 <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	429c      	cmp	r4, r3
 8001134:	d804      	bhi.n	8001140 <PRE_UPSHIFT_Event+0x60>
		PRE_UPSHIFT_Exit();
 8001136:	f7ff ffcd 	bl	80010d4 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 800113a:	f000 f8b9 	bl	80012b0 <ERROR_Entry>
		return;
 800113e:	bf00      	nop
	}


}
 8001140:	bd98      	pop	{r3, r4, r7, pc}
 8001142:	bf00      	nop
 8001144:	2000002c 	.word	0x2000002c
 8001148:	20000028 	.word	0x20000028
 800114c:	20000034 	.word	0x20000034

08001150 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST)	// trying to put 1st gear without clutch
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <PRE_UPSHIFT_Run+0xbc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	7d1b      	ldrb	r3, [r3, #20]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <PRE_UPSHIFT_Run+0x2e>
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <PRE_UPSHIFT_Run+0xbc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8001166:	2b3c      	cmp	r3, #60	; 0x3c
 8001168:	dc09      	bgt.n	800117e <PRE_UPSHIFT_Run+0x2e>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	7d5a      	ldrb	r2, [r3, #21]
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0201 	orr.w	r2, r2, #1
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	755a      	strb	r2, [r3, #21]
 800117c:	e008      	b.n	8001190 <PRE_UPSHIFT_Run+0x40>
	else
		ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	7d5a      	ldrb	r2, [r3, #21]
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	755a      	strb	r2, [r3, #21]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear])		// trying to shift up with too low rpm
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <PRE_UPSHIFT_Run+0xbc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001198:	461a      	mov	r2, r3
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <PRE_UPSHIFT_Run+0xbc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <PRE_UPSHIFT_Run+0xc4>)
 80011a4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	da09      	bge.n	80011c0 <PRE_UPSHIFT_Run+0x70>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	7d5a      	ldrb	r2, [r3, #21]
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0202 	orr.w	r2, r2, #2
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	755a      	strb	r2, [r3, #21]
 80011be:	e008      	b.n	80011d2 <PRE_UPSHIFT_Run+0x82>
	else
		ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	7d5a      	ldrb	r2, [r3, #21]
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0202 	bic.w	r2, r2, #2
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	755a      	strb	r2, [r3, #21]

	if(MyInputs->NGear + 1 > TOTAL_GEARS)		// trying to shift up after last gear
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <PRE_UPSHIFT_Run+0xbc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	7d1b      	ldrb	r3, [r3, #20]
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d909      	bls.n	80011f0 <PRE_UPSHIFT_Run+0xa0>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	7d5a      	ldrb	r2, [r3, #21]
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0204 	orr.w	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	755a      	strb	r2, [r3, #21]
	else
		ClearControlError(TARGET_GEAR_EXCEEDS_MAX);
}
 80011ee:	e008      	b.n	8001202 <PRE_UPSHIFT_Run+0xb2>
		ClearControlError(TARGET_GEAR_EXCEEDS_MAX);
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	7d5a      	ldrb	r2, [r3, #21]
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <PRE_UPSHIFT_Run+0xc0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	755a      	strb	r2, [r3, #21]
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000028 	.word	0x20000028
 8001210:	2000002c 	.word	0x2000002c
 8001214:	08005970 	.word	0x08005970

08001218 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <PRE_DNSHIFT_Entry+0x20>)
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <PRE_DNSHIFT_Entry+0x24>)
 8001222:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <PRE_DNSHIFT_Entry+0x20>)
 8001226:	2202      	movs	r2, #2
 8001228:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 800122a:	f001 fa81 	bl	8002730 <HAL_GetTick>
 800122e:	4603      	mov	r3, r0
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <PRE_DNSHIFT_Entry+0x28>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000030 	.word	0x20000030
 800123c:	20000031 	.word	0x20000031
 8001240:	20000034 	.word	0x20000034

08001244 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Exit(void) {

}
void PRE_DNSHIFT_Event(void) {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0


}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SHIFTING_Entry+0x1c>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SHIFTING_Entry+0x20>)
 8001266:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <SHIFTING_Entry+0x1c>)
 800126a:	2203      	movs	r2, #3
 800126c:	701a      	strb	r2, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000030 	.word	0x20000030
 800127c:	20000031 	.word	0x20000031

08001280 <SHIFTING_Event>:
void SHIFTING_Exit(void) {

}
void SHIFTING_Event(void) {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <SHIFTING_Run>:
void SHIFTING_Run(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

	// remember to copy NGear from input struct to output struct because we need it in outputs
	// TODO: attention to xClutch , (always??? take the max of Manualtarget and ControlTarget)
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <POSTSHIFT_Event>:

}
void POSTSHIFT_Exit(void) {

}
void POSTSHIFT_Event(void) {
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <ERROR_Entry>:


void ERROR_Entry(void) {
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <ERROR_Entry+0x1c>)
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <ERROR_Entry+0x20>)
 80012ba:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <ERROR_Entry+0x1c>)
 80012be:	2205      	movs	r2, #5
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000030 	.word	0x20000030
 80012d0:	20000031 	.word	0x20000031

080012d4 <ERROR_Event>:
void ERROR_Exit(void) {

}
void ERROR_Event(void) {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	// check that all faults are cleared
		// for some faults that are very critical we could make a counter and when it expires we declare a default hardcoded value to be able to move on

	// check that all control errors are cleared

}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <ERROR_Run>:
void ERROR_Run(void) {
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	0000      	movs	r0, r0
	...

080012f0 <ReadInputs>:
// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side);
uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin);

void ReadInputs(InputStruct *inputs){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]

	// Reset events
	    inputs->nEventStatus = 0;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

	    tCurrent = HAL_GetTick();
 80012fe:	f001 fa17 	bl	8002730 <HAL_GetTick>
 8001302:	4603      	mov	r3, r0
 8001304:	4a8c      	ldr	r2, [pc, #560]	; (8001538 <ReadInputs+0x248>)
 8001306:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
		// NGear Conditioning

		// ADC averaging
		NGearRawADCFiltered = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide);
 8001308:	4b8c      	ldr	r3, [pc, #560]	; (800153c <ReadInputs+0x24c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	f240 1177 	movw	r1, #375	; 0x177
 8001314:	488a      	ldr	r0, [pc, #552]	; (8001540 <ReadInputs+0x250>)
 8001316:	f000 fa50 	bl	80017ba <MyHalfBufferAverage>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b89      	ldr	r3, [pc, #548]	; (8001544 <ReadInputs+0x254>)
 8001320:	801a      	strh	r2, [r3, #0]

		// voltage conversion
		inputs->VNGearRaw = (float)(NGearRawADCFiltered * 3.3 / 4095.0);
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <ReadInputs+0x254>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f864 	bl	80003f4 <__aeabi_i2d>
 800132c:	a37e      	add	r3, pc, #504	; (adr r3, 8001528 <ReadInputs+0x238>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f8c9 	bl	80004c8 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	a37c      	add	r3, pc, #496	; (adr r3, 8001530 <ReadInputs+0x240>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f9ea 	bl	800071c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff faec 	bl	800092c <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60da      	str	r2, [r3, #12]

		// mapping
		inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGearRaw, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3310      	adds	r3, #16
 8001362:	4979      	ldr	r1, [pc, #484]	; (8001548 <ReadInputs+0x258>)
 8001364:	9101      	str	r1, [sp, #4]
 8001366:	4978      	ldr	r1, [pc, #480]	; (8001548 <ReadInputs+0x258>)
 8001368:	9100      	str	r1, [sp, #0]
 800136a:	4978      	ldr	r1, [pc, #480]	; (800154c <ReadInputs+0x25c>)
 800136c:	2006      	movs	r0, #6
 800136e:	f000 f979 	bl	8001664 <My2DMapInterpolate>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	721a      	strb	r2, [r3, #8]

		// conditioning (round float to nearest int)
		inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f84a 	bl	8000418 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f004 fa9e 	bl	80058cc <round>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff faa8 	bl	80008ec <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	751a      	strb	r2, [r3, #20]

		// check for errors
		if(inputs->BNGearInError) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7a1b      	ldrb	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <ReadInputs+0xca>
			RaiseFault(inputs, NGEAR_IN_ERROR_FAULT);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	e005      	b.n	80013c6 <ReadInputs+0xd6>
		}
		else {
			ClearFault(inputs, NGEAR_IN_ERROR_FAULT);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f023 0201 	bic.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
		// Clutch Paddle Conditioning
		// TODO: make a strategy for error detection (in rClutchPaddleRaw, or in possible extra  error variable)
		// use BSteeringWheelFitted
		inputs->rClutchPaddleRaw = rClutchPaddleCAN;
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <ReadInputs+0x260>)
 80013c8:	f993 2000 	ldrsb.w	r2, [r3]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	769a      	strb	r2, [r3, #26]
		inputs->rClutchPaddle = CLAMP(inputs->rClutchPaddleRaw, CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80013d6:	2b63      	cmp	r3, #99	; 0x63
 80013d8:	dc06      	bgt.n	80013e8 <ReadInputs+0xf8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80013e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	e000      	b.n	80013ea <ReadInputs+0xfa>
 80013e8:	2264      	movs	r2, #100	; 0x64
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	76da      	strb	r2, [r3, #27]
		// TODO: set the analog inputs and decide filtering (or not)

	// ---------------------------------------------------------------------------------------------------
		// Copy CAN data to struct

		inputs->BUpShiftRequest = BUpShiftRequestCAN;
 80013ee:	4b59      	ldr	r3, [pc, #356]	; (8001554 <ReadInputs+0x264>)
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	755a      	strb	r2, [r3, #21]
		inputs->BDnShiftRequest = BDnShiftRequestCAN;
 80013f6:	4b58      	ldr	r3, [pc, #352]	; (8001558 <ReadInputs+0x268>)
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	759a      	strb	r2, [r3, #22]
		inputs->BLaunchRequest = BLaunchRequestCAN;
 80013fe:	4b57      	ldr	r3, [pc, #348]	; (800155c <ReadInputs+0x26c>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	765a      	strb	r2, [r3, #25]

		inputs->nEngine = nEngineCAN;
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <ReadInputs+0x270>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	b21a      	sxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	83da      	strh	r2, [r3, #30]

		inputs->NCANErrors = NCANErrorCount;			// update can error count
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <ReadInputs+0x274>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		inputs->NCANRxErrors = NCanGetRxErrorCount;	// update can Rx error count
 800141c:	4b52      	ldr	r3, [pc, #328]	; (8001568 <ReadInputs+0x278>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	b2da      	uxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	// ---------------------------------------------------------------------------------------------------
		// Events Parsing

		// TODO: check for Up/DnShift in Error and select based on NUp/DnshiftRequestSource.
		// remember that primary source is CAN and in case it is in Error (or SE not fitted) we pass to Analog
		if(inputs->BUpShiftRequest && !BUpShiftRequested) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7d5b      	ldrb	r3, [r3, #21]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00d      	beq.n	800144e <ReadInputs+0x15e>
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <ReadInputs+0x27c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <ReadInputs+0x15e>
			BUpShiftRequested = 1;
 800143a:	4b4c      	ldr	r3, [pc, #304]	; (800156c <ReadInputs+0x27c>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f043 0201 	orr.w	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e00a      	b.n	8001464 <ReadInputs+0x174>
		}
		else if(!inputs->BUpShiftRequest && BUpShiftRequested) {
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7d5b      	ldrb	r3, [r3, #21]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <ReadInputs+0x174>
 8001456:	4b45      	ldr	r3, [pc, #276]	; (800156c <ReadInputs+0x27c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <ReadInputs+0x174>
			BUpShiftRequested = 0;
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <ReadInputs+0x27c>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
		}

		if(inputs->BDnShiftRequest && !BDnShiftRequested) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7d9b      	ldrb	r3, [r3, #22]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00d      	beq.n	8001488 <ReadInputs+0x198>
 800146c:	4b40      	ldr	r3, [pc, #256]	; (8001570 <ReadInputs+0x280>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <ReadInputs+0x198>
			BDnShiftRequested = 1;
 8001474:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <ReadInputs+0x280>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, DNSHIFT_PRESS_EVT);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f043 0208 	orr.w	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e00a      	b.n	800149e <ReadInputs+0x1ae>
		}
		else if(!inputs->BDnShiftRequest && BDnShiftRequested) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7d9b      	ldrb	r3, [r3, #22]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d106      	bne.n	800149e <ReadInputs+0x1ae>
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <ReadInputs+0x280>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <ReadInputs+0x1ae>
			BDnShiftRequested = 0;
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <ReadInputs+0x280>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
		}

		if(inputs->BLaunchRequest && !BLaunchRequested) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7e5b      	ldrb	r3, [r3, #25]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00d      	beq.n	80014c2 <ReadInputs+0x1d2>
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <ReadInputs+0x284>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <ReadInputs+0x1d2>
			BLaunchRequested = 1;
 80014ae:	4b31      	ldr	r3, [pc, #196]	; (8001574 <ReadInputs+0x284>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, LAUNCH_PRESS_EVT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e00a      	b.n	80014d8 <ReadInputs+0x1e8>
		}
		else if(!inputs->BLaunchRequest && BLaunchRequested) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7e5b      	ldrb	r3, [r3, #25]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <ReadInputs+0x1e8>
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <ReadInputs+0x284>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <ReadInputs+0x1e8>
			BLaunchRequested = 0;
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <ReadInputs+0x284>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
		}

		if(inputs->rClutchPaddle > CLUTCH_PADDLE_PRESSED_THRESHOLD) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f993 301b 	ldrsb.w	r3, [r3, #27]
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	dd05      	ble.n	80014ee <ReadInputs+0x1fe>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	601a      	str	r2, [r3, #0]
		}

		if(inputs->BUpShiftRequest && inputs->BDnShiftRequest) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7d5b      	ldrb	r3, [r3, #21]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00a      	beq.n	800150c <ReadInputs+0x21c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7d9b      	ldrb	r3, [r3, #22]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <ReadInputs+0x21c>
			RaiseFault(inputs, BOTH_PADS_PRESSED_FAULT);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f043 0202 	orr.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	e006      	b.n	800151a <ReadInputs+0x22a>
		}
		else {
			ClearFault(inputs, BOTH_PADS_PRESSED_FAULT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 0202 	bic.w	r2, r3, #2
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]


	// ---------------------------------------------------------------------------------------------------
		// nEngine

}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	66666666 	.word	0x66666666
 800152c:	400a6666 	.word	0x400a6666
 8001530:	00000000 	.word	0x00000000
 8001534:	40affe00 	.word	0x40affe00
 8001538:	20000038 	.word	0x20000038
 800153c:	20000056 	.word	0x20000056
 8001540:	20000220 	.word	0x20000220
 8001544:	20000054 	.word	0x20000054
 8001548:	3e4ccccd 	.word	0x3e4ccccd
 800154c:	0800597c 	.word	0x0800597c
 8001550:	20000042 	.word	0x20000042
 8001554:	2000003f 	.word	0x2000003f
 8001558:	20000040 	.word	0x20000040
 800155c:	20000041 	.word	0x20000041
 8001560:	20000044 	.word	0x20000044
 8001564:	20000050 	.word	0x20000050
 8001568:	20000052 	.word	0x20000052
 800156c:	2000003c 	.word	0x2000003c
 8001570:	2000003d 	.word	0x2000003d
 8001574:	2000003e 	.word	0x2000003e

08001578 <InitInputs>:

void InitInputs(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 800157c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001580:	4902      	ldr	r1, [pc, #8]	; (800158c <InitInputs+0x14>)
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <InitInputs+0x18>)
 8001584:	f001 f9da 	bl	800293c <HAL_ADC_Start_DMA>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000220 	.word	0x20000220
 8001590:	20000064 	.word	0x20000064

08001594 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <CheckFaults+0x14>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <CheckFaults+0x16>
	return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08c      	sub	sp, #48	; 0x30
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	f107 0214 	add.w	r2, r7, #20
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f001 ff77 	bl	80034bc <HAL_CAN_GetRxMessage>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <CAN_RX+0x90>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <CAN_RX+0x90>)
 80015e0:	801a      	strh	r2, [r3, #0]
 80015e2:	e02b      	b.n	800163c <CAN_RX+0x88>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80015ea:	d004      	beq.n	80015f6 <CAN_RX+0x42>
 80015ec:	f240 3211 	movw	r2, #785	; 0x311
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d013      	beq.n	800161c <CAN_RX+0x68>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineCAN = RxBuffer[0] << 8 | RxBuffer[1];
		 break;

	 default:
		 break;
 80015f4:	e022      	b.n	800163c <CAN_RX+0x88>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 80015f6:	f001 f89b 	bl	8002730 <HAL_GetTick>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a12      	ldr	r2, [pc, #72]	; (8001648 <CAN_RX+0x94>)
 80015fe:	6013      	str	r3, [r2, #0]
		 BUpShiftRequestCAN = RxBuffer[0];
 8001600:	7b3a      	ldrb	r2, [r7, #12]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <CAN_RX+0x98>)
 8001604:	701a      	strb	r2, [r3, #0]
		 BDnShiftRequestCAN = RxBuffer[1];
 8001606:	7b7a      	ldrb	r2, [r7, #13]
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <CAN_RX+0x9c>)
 800160a:	701a      	strb	r2, [r3, #0]
		 BLaunchRequestCAN = RxBuffer[2];
 800160c:	7bba      	ldrb	r2, [r7, #14]
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <CAN_RX+0xa0>)
 8001610:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleCAN = RxBuffer[3];
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	b25a      	sxtb	r2, r3
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <CAN_RX+0xa4>)
 8001618:	701a      	strb	r2, [r3, #0]
		 break;
 800161a:	e00f      	b.n	800163c <CAN_RX+0x88>
		 tCANECULastSeen = HAL_GetTick();
 800161c:	f001 f888 	bl	8002730 <HAL_GetTick>
 8001620:	4603      	mov	r3, r0
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <CAN_RX+0xa8>)
 8001624:	6013      	str	r3, [r2, #0]
		 nEngineCAN = RxBuffer[0] << 8 | RxBuffer[1];
 8001626:	7b3b      	ldrb	r3, [r7, #12]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7b7b      	ldrb	r3, [r7, #13]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21b      	sxth	r3, r3
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <CAN_RX+0xac>)
 8001638:	801a      	strh	r2, [r3, #0]
		 break;
 800163a:	bf00      	nop
	 }
}
 800163c:	3730      	adds	r7, #48	; 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000052 	.word	0x20000052
 8001648:	20000048 	.word	0x20000048
 800164c:	2000003f 	.word	0x2000003f
 8001650:	20000040 	.word	0x20000040
 8001654:	20000041 	.word	0x20000041
 8001658:	20000042 	.word	0x20000042
 800165c:	2000004c 	.word	0x2000004c
 8001660:	20000044 	.word	0x20000044

08001664 <My2DMapInterpolate>:
        }
    }
    return 1; // If no match found, return error!
}

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	68fe      	ldr	r6, [r7, #12]
 8001674:	1e73      	subs	r3, r6, #1
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	4632      	mov	r2, r6
 800167a:	2300      	movs	r3, #0
 800167c:	4614      	mov	r4, r2
 800167e:	461d      	mov	r5, r3
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	016b      	lsls	r3, r5, #5
 800168a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800168e:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f99c 	bl	80009d4 <__aeabi_fsub>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fc3f 	bl	8000f24 <__aeabi_fcmplt>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 80016ac:	4633      	mov	r3, r6
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4413      	add	r3, r2
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	601a      	str	r2, [r3, #0]
		return 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e079      	b.n	80017b2 <My2DMapInterpolate+0x14e>
	}
	if(input > map[0][size-1] + maxMargin) {
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1e5a      	subs	r2, r3, #1
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f984 	bl	80009d8 <__addsf3>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fc43 	bl	8000f60 <__aeabi_fcmpgt>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 80016e0:	4633      	mov	r3, r6
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	4413      	add	r3, r2
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	3a01      	subs	r2, #1
 80016ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	601a      	str	r2, [r3, #0]
		return 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e05c      	b.n	80017b2 <My2DMapInterpolate+0x14e>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size; i++) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	e00e      	b.n	800171c <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fc0a 	bl	8000f24 <__aeabi_fcmplt>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d107      	bne.n	8001726 <My2DMapInterpolate+0xc2>
	for(i=0; i<size; i++) {
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	dbec      	blt.n	80016fe <My2DMapInterpolate+0x9a>
 8001724:	e000      	b.n	8001728 <My2DMapInterpolate+0xc4>
			break;
 8001726:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff f94a 	bl	80009d4 <__aeabi_fsub>
 8001740:	4603      	mov	r3, r0
 8001742:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 8001744:	4633      	mov	r3, r6
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	4413      	add	r3, r2
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	3201      	adds	r2, #1
 8001750:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001754:	4633      	mov	r3, r6
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff f936 	bl	80009d4 <__aeabi_fsub>
 8001768:	4603      	mov	r3, r0
 800176a:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 800176c:	4633      	mov	r3, r6
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	4413      	add	r3, r2
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff f925 	bl	80009d4 <__aeabi_fsub>
 800178a:	4603      	mov	r3, r0
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fa2a 	bl	8000be8 <__aeabi_fmul>
 8001794:	4603      	mov	r3, r0
 8001796:	6979      	ldr	r1, [r7, #20]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fad9 	bl	8000d50 <__aeabi_fdiv>
 800179e:	4603      	mov	r3, r0
 80017a0:	4619      	mov	r1, r3
 80017a2:	4620      	mov	r0, r4
 80017a4:	f7ff f918 	bl	80009d8 <__addsf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	601a      	str	r2, [r3, #0]
	return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ba <MyHalfBufferAverage>:

uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side) {
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]
 80017c6:	4613      	mov	r3, r2
 80017c8:	707b      	strb	r3, [r7, #1]

	uint32_t Accumulator=0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
	uint16_t Offset = (side == 1 ? halfsize : 0);
 80017ce:	787b      	ldrb	r3, [r7, #1]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <MyHalfBufferAverage+0x1e>
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	e000      	b.n	80017da <MyHalfBufferAverage+0x20>
 80017d8:	2300      	movs	r3, #0
 80017da:	813b      	strh	r3, [r7, #8]

	for(uint16_t i=0; i<halfsize; i++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	817b      	strh	r3, [r7, #10]
 80017e0:	e00d      	b.n	80017fe <MyHalfBufferAverage+0x44>
		Accumulator += buffer[i + Offset];
 80017e2:	897a      	ldrh	r2, [r7, #10]
 80017e4:	893b      	ldrh	r3, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0; i<halfsize; i++) {
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	3301      	adds	r3, #1
 80017fc:	817b      	strh	r3, [r7, #10]
 80017fe:	897a      	ldrh	r2, [r7, #10]
 8001800:	887b      	ldrh	r3, [r7, #2]
 8001802:	429a      	cmp	r2, r3
 8001804:	d3ed      	bcc.n	80017e2 <MyHalfBufferAverage+0x28>
	}

	Accumulator /= halfsize;
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]
	return (uint16_t)Accumulator;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	b29b      	uxth	r3, r3

}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8001826:	2100      	movs	r1, #0
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fec3 	bl	80015b4 <CAN_RX>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 800183e:	2101      	movs	r1, #1
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff feb7 	bl	80015b4 <CAN_RX>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_CAN_ErrorCallback+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3301      	adds	r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_CAN_ErrorCallback+0x20>)
 8001864:	701a      	strb	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000050 	.word	0x20000050

08001874 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d107      	bne.n	8001894 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f083 0301 	eor.w	r3, r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001892:	701a      	strb	r2, [r3, #0]
	}
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000064 	.word	0x20000064
 80018a4:	20000056 	.word	0x20000056

080018a8 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

	end_of_shift(output);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f919 	bl	8001af4 <end_of_shift>


	if(output->up_button_out){
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7a1b      	ldrb	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d044      	beq.n	8001954 <WriteOutputs+0xa0>
		output->target_gear++;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	705a      	strb	r2, [r3, #1]

		if(output->target_gear!=output->current_gear+1){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ea:	3301      	adds	r3, #1
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d008      	beq.n	8001902 <WriteOutputs+0x4e>
			output->target_gear--;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	b25a      	sxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	705a      	strb	r2, [r3, #1]
		}

		if(output->target_gear > 6){ // TODO: to be fixed
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001908:	2b06      	cmp	r3, #6
 800190a:	dd03      	ble.n	8001914 <WriteOutputs+0x60>
			output->target_gear=5;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2205      	movs	r2, #5
 8001910:	705a      	strb	r2, [r3, #1]
 8001912:	e01f      	b.n	8001954 <WriteOutputs+0xa0>
		}
		else if(output->target_gear > 1 && output->target_gear <= 5){
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800191a:	2b01      	cmp	r3, #1
 800191c:	dd08      	ble.n	8001930 <WriteOutputs+0x7c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001924:	2b05      	cmp	r3, #5
 8001926:	dc03      	bgt.n	8001930 <WriteOutputs+0x7c>
			shiftup_activation(output);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f891 	bl	8001a50 <shiftup_activation>
 800192e:	e011      	b.n	8001954 <WriteOutputs+0xa0>
		}
		else if(output->target_gear == 1 && output->clutch_detection){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <WriteOutputs+0x96>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7d1b      	ldrb	r3, [r3, #20]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <WriteOutputs+0x96>
			shiftdown_activation(output);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f8a0 	bl	8001a88 <shiftdown_activation>
 8001948:	e004      	b.n	8001954 <WriteOutputs+0xa0>
		}
		else {
			output->target_gear = output-> current_gear;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f993 2000 	ldrsb.w	r2, [r3]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	705a      	strb	r2, [r3, #1]
		}
	}


	if(output->down_button_out){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7a5b      	ldrb	r3, [r3, #9]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03a      	beq.n	80019d2 <WriteOutputs+0x11e>
		output->target_gear--;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	b25a      	sxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	705a      	strb	r2, [r3, #1]

		if(output->target_gear!= output->current_gear-1){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001974:	461a      	mov	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f993 3000 	ldrsb.w	r3, [r3]
 800197c:	3b01      	subs	r3, #1
 800197e:	429a      	cmp	r2, r3
 8001980:	d008      	beq.n	8001994 <WriteOutputs+0xe0>
			output->target_gear++;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3301      	adds	r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	b25a      	sxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	705a      	strb	r2, [r3, #1]
		}

		if(output->target_gear < 0){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	da08      	bge.n	80019b0 <WriteOutputs+0xfc>
			output->target_gear=0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	705a      	strb	r2, [r3, #1]
			output->current_gear=output->target_gear;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e010      	b.n	80019d2 <WriteOutputs+0x11e>
		}
		else if(output->target_gear<1){
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dc03      	bgt.n	80019c2 <WriteOutputs+0x10e>
			neutral_activation(output);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f880 	bl	8001ac0 <neutral_activation>
 80019c0:	e007      	b.n	80019d2 <WriteOutputs+0x11e>
		}
		else if(output->target_gear>=1){
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dd02      	ble.n	80019d2 <WriteOutputs+0x11e>
			shiftdown_activation(output);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f85b 	bl	8001a88 <shiftdown_activation>





		TxData[0]=(output->down_port_state || output->up_port_state);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	78db      	ldrb	r3, [r3, #3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <WriteOutputs+0x12e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	789b      	ldrb	r3, [r3, #2]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <WriteOutputs+0x132>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <WriteOutputs+0x134>
 80019e6:	2300      	movs	r3, #0
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <WriteOutputs+0x15c>)
 80019ec:	701a      	strb	r2, [r3, #0]
		TxData[1]=output->current_gear;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f993 3000 	ldrsb.w	r3, [r3]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <WriteOutputs+0x15c>)
 80019f8:	705a      	strb	r2, [r3, #1]

		CAN_Tx(STEERING_ID,2,TxData);
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <WriteOutputs+0x15c>)
 80019fc:	2102      	movs	r1, #2
 80019fe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a02:	f000 f807 	bl	8001a14 <CAN_Tx>

}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000005c 	.word	0x2000005c

08001a14 <CAN_Tx>:

void CAN_Tx(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	TxHeader.DLC = dlc;
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.StdId = ID;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24

	// TODO: fix CANTx with round robin
	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	f107 0118 	add.w	r1, r7, #24
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <CAN_Tx+0x38>)
 8001a3e:	f001 fc6e 	bl	800331e <HAL_CAN_AddTxMessage>

	}

}
 8001a42:	bf00      	nop
 8001a44:	3730      	adds	r7, #48	; 0x30
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200000d8 	.word	0x200000d8

08001a50 <shiftup_activation>:


void shiftup_activation(OutputStruct *output){ // Shift up function
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <shiftup_activation+0x30>)
 8001a5e:	f002 fd05 	bl	800446c <HAL_GPIO_WritePin>

	output->up_port_state = 1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + shifting_interval;
 8001a68:	f000 fe62 	bl	8002730 <HAL_GetTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <shiftup_activation+0x34>)
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40010800 	.word	0x40010800
 8001a84:	20000058 	.word	0x20000058

08001a88 <shiftdown_activation>:

void shiftdown_activation(OutputStruct *output){ // Shift down function
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <shiftdown_activation+0x30>)
 8001a96:	f002 fce9 	bl	800446c <HAL_GPIO_WritePin>

	output->down_port_state = 1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	70da      	strb	r2, [r3, #3]

	shift_end_time = HAL_GetTick() + shifting_interval;
 8001aa0:	f000 fe46 	bl	8002730 <HAL_GetTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <shiftdown_activation+0x34>)
 8001aac:	6013      	str	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40010800 	.word	0x40010800
 8001abc:	20000058 	.word	0x20000058

08001ac0 <neutral_activation>:

void neutral_activation(OutputStruct *output){ //Neutral shift function
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <neutral_activation+0x2c>)
 8001ace:	f002 fccd 	bl	800446c <HAL_GPIO_WritePin>

	output->up_port_state = 1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + neutral_interval;
 8001ad8:	f000 fe2a 	bl	8002730 <HAL_GetTick>
 8001adc:	4603      	mov	r3, r0
 8001ade:	330a      	adds	r3, #10
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <neutral_activation+0x30>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40010800 	.word	0x40010800
 8001af0:	20000058 	.word	0x20000058

08001af4 <end_of_shift>:



void end_of_shift(OutputStruct *output) {  //Shift Handling
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

	// Check if a shift is in progress and if the delay has ended
	if ((output->up_port_state || output->down_port_state) && HAL_GetTick() >= shift_end_time) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	789b      	ldrb	r3, [r3, #2]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <end_of_shift+0x18>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01b      	beq.n	8001b44 <end_of_shift+0x50>
 8001b0c:	f000 fe10 	bl	8002730 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <end_of_shift+0x58>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d314      	bcc.n	8001b44 <end_of_shift+0x50>

		// Reset the port action and update the current gear

		HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	480c      	ldr	r0, [pc, #48]	; (8001b50 <end_of_shift+0x5c>)
 8001b20:	f002 fca4 	bl	800446c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <end_of_shift+0x5c>)
 8001b2a:	f002 fc9f 	bl	800446c <HAL_GPIO_WritePin>

		output-> current_gear = output->target_gear;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	701a      	strb	r2, [r3, #0]
		output->up_port_state = 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	709a      	strb	r2, [r3, #2]
		output->down_port_state=0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	70da      	strb	r2, [r3, #3]
	}
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000058 	.word	0x20000058
 8001b50:	40010800 	.word	0x40010800

08001b54 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b58:	f3bf 8f4f 	dsb	sy
}
 8001b5c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <__NVIC_SystemReset+0x24>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b66:	4904      	ldr	r1, [pc, #16]	; (8001b78 <__NVIC_SystemReset+0x24>)
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_SystemReset+0x28>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b6e:	f3bf 8f4f 	dsb	sy
}
 8001b72:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <__NVIC_SystemReset+0x20>
 8001b78:	e000ed00 	.word	0xe000ed00
 8001b7c:	05fa0004 	.word	0x05fa0004

08001b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b84:	f000 fd7c 	bl	8002680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b88:	f000 f83c 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8c:	f000 faf0 	bl	8002170 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b90:	f000 fad0 	bl	8002134 <MX_DMA_Init>
  MX_TIM3_Init();
 8001b94:	f000 fa56 	bl	8002044 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b98:	f000 f890 	bl	8001cbc <MX_ADC1_Init>
  MX_CAN_Init();
 8001b9c:	f000 f8cc 	bl	8001d38 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001ba0:	f000 fa9e 	bl	80020e0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001ba4:	f000 fa00 	bl	8001fa8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001ba8:	f000 f9ae 	bl	8001f08 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);		// general 1MHz timer for timing
 8001bac:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <main+0x70>)
 8001bae:	f003 f98b 	bl	8004ec8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8001bb2:	4810      	ldr	r0, [pc, #64]	; (8001bf4 <main+0x74>)
 8001bb4:	f003 f9d2 	bl	8004f5c <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start(&htim2);		// general timer for PWM use


  InitInputs();
 8001bb8:	f7ff fcde 	bl	8001578 <InitInputs>
  InitApplication(&Inputs,&Outputs);
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <main+0x78>)
 8001bbe:	480f      	ldr	r0, [pc, #60]	; (8001bfc <main+0x7c>)
 8001bc0:	f7ff f9d8 	bl	8000f74 <InitApplication>
  InitOutputs();
 8001bc4:	f7ff fe70 	bl	80018a8 <InitOutputs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <main+0x80>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0fa      	beq.n	8001bc8 <main+0x48>
		  BCycleTimerFlag = 0;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <main+0x80>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <main+0x7c>)
 8001bda:	f7ff fb89 	bl	80012f0 <ReadInputs>
		  RunApplication(&Inputs,&Outputs);
 8001bde:	4906      	ldr	r1, [pc, #24]	; (8001bf8 <main+0x78>)
 8001be0:	4806      	ldr	r0, [pc, #24]	; (8001bfc <main+0x7c>)
 8001be2:	f7ff f9dd 	bl	8000fa0 <RunApplication>
		  WriteOutputs(&Outputs);
 8001be6:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <main+0x78>)
 8001be8:	f7ff fe64 	bl	80018b4 <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8001bec:	e7ec      	b.n	8001bc8 <main+0x48>
 8001bee:	bf00      	nop
 8001bf0:	20000100 	.word	0x20000100
 8001bf4:	20000190 	.word	0x20000190
 8001bf8:	20000828 	.word	0x20000828
 8001bfc:	20000800 	.word	0x20000800
 8001c00:	200007fc 	.word	0x200007fc

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b094      	sub	sp, #80	; 0x50
 8001c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0e:	2228      	movs	r2, #40	; 0x28
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fe2e 	bl	8005874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c34:	2301      	movs	r3, #1
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c42:	2301      	movs	r3, #1
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c46:	2302      	movs	r3, #2
 8001c48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fc1e 	bl	800449c <HAL_RCC_OscConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c66:	f000 fb07 	bl	8002278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6a:	230f      	movs	r3, #15
 8001c6c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2102      	movs	r1, #2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fe8a 	bl	80049a0 <HAL_RCC_ClockConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c92:	f000 faf1 	bl	8002278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c96:	2302      	movs	r3, #2
 8001c98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001c9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 f80a 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cae:	f000 fae3 	bl	8002278 <Error_Handler>
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3750      	adds	r7, #80	; 0x50
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <MX_ADC1_Init+0x78>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001ce6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001cfa:	f000 fd47 	bl	800278c <HAL_ADC_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d04:	f000 fab8 	bl	8002278 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d10:	2307      	movs	r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_ADC1_Init+0x74>)
 8001d1a:	f000 feff 	bl	8002b1c <HAL_ADC_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d24:	f000 faa8 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000064 	.word	0x20000064
 8001d34:	40012400 	.word	0x40012400

08001d38 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b0a8      	sub	sp, #160	; 0xa0
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001d3e:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d40:	4a70      	ldr	r2, [pc, #448]	; (8001f04 <MX_CAN_Init+0x1cc>)
 8001d42:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001d44:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d50:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001d56:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d58:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001d5c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d5e:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d64:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001d66:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001d6c:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001d78:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001d7e:	4b60      	ldr	r3, [pc, #384]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001d8a:	485d      	ldr	r0, [pc, #372]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001d8c:	f001 f8bf 	bl	8002f0e <HAL_CAN_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001d96:	f000 fa6f 	bl	8002278 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = STEERING_RX_ID << 5 ;
 8001d9a:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8001d9e:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8001da4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8001dd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4848      	ldr	r0, [pc, #288]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001dde:	f001 f991 	bl	8003104 <HAL_CAN_ConfigFilter>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8001de8:	f000 fa46 	bl	8002278 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = STEERING_RX_ID << 5 ;
 8001dec:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8001df6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dfa:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e10:	2301      	movs	r3, #1
 8001e12:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8001e14:	2301      	movs	r3, #1
 8001e16:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8001e18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4838      	ldr	r0, [pc, #224]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001e20:	f001 f970 	bl	8003104 <HAL_CAN_ConfigFilter>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_CAN_Init+0xf6>
 	  Error_Handler();
 8001e2a:	f000 fa25 	bl	8002278 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 8001e2e:	f246 2320 	movw	r3, #25120	; 0x6220
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8001e38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 8001e46:	2302      	movs	r3, #2
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e52:	2301      	movs	r3, #1
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8001e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4827      	ldr	r0, [pc, #156]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001e62:	f001 f94f 	bl	8003104 <HAL_CAN_ConfigFilter>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_CAN_Init+0x138>
 	  Error_Handler();
 8001e6c:	f000 fa04 	bl	8002278 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 8001e70:	f246 2320 	movw	r3, #25120	; 0x6220
 8001e74:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 8001e7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e7e:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4817      	ldr	r0, [pc, #92]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001ea2:	f001 f92f 	bl	8003104 <HAL_CAN_ConfigFilter>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_CAN_Init+0x178>
 	  Error_Handler();
 8001eac:	f000 f9e4 	bl	8002278 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	4813      	ldr	r0, [pc, #76]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001eb4:	f001 fc23 	bl	80036fe <HAL_CAN_ActivateNotification>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_CAN_Init+0x18a>
	   Error_Handler();
 8001ebe:	f000 f9db 	bl	8002278 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	480e      	ldr	r0, [pc, #56]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001ec6:	f001 fc1a 	bl	80036fe <HAL_CAN_ActivateNotification>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8001ed0:	f000 f9d2 	bl	8002278 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8001ed4:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8001ed8:	4809      	ldr	r0, [pc, #36]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001eda:	f001 fc10 	bl	80036fe <HAL_CAN_ActivateNotification>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8001ee4:	f000 f9c8 	bl	8002278 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_CAN_Init+0x1c8>)
 8001eea:	f001 f9d4 	bl	8003296 <HAL_CAN_Start>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8001ef4:	f000 f9c0 	bl	8002278 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	37a0      	adds	r7, #160	; 0xa0
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200000d8 	.word	0x200000d8
 8001f04:	40006400 	.word	0x40006400

08001f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <MX_TIM1_Init+0x9c>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f2c:	2247      	movs	r2, #71	; 0x47
 8001f2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f50:	4813      	ldr	r0, [pc, #76]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f52:	f002 ff69 	bl	8004e28 <HAL_TIM_Base_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f5c:	f000 f98c 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f6e:	f003 f94f 	bl	8005210 <HAL_TIM_ConfigClockSource>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f78:	f000 f97e 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f84:	463b      	mov	r3, r7
 8001f86:	4619      	mov	r1, r3
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_TIM1_Init+0x98>)
 8001f8a:	f003 fb25 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f94:	f000 f970 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000100 	.word	0x20000100
 8001fa4:	40012c00 	.word	0x40012c00

08001fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fce:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001fda:	4b19      	ldr	r3, [pc, #100]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_TIM2_Init+0x98>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fee:	4814      	ldr	r0, [pc, #80]	; (8002040 <MX_TIM2_Init+0x98>)
 8001ff0:	f002 ff1a 	bl	8004e28 <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ffa:	f000 f93d 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	4619      	mov	r1, r3
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <MX_TIM2_Init+0x98>)
 800200c:	f003 f900 	bl	8005210 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002016:	f000 f92f 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002022:	463b      	mov	r3, r7
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <MX_TIM2_Init+0x98>)
 8002028:	f003 fad6 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002032:	f000 f921 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000148 	.word	0x20000148

08002044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	463b      	mov	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <MX_TIM3_Init+0x98>)
 8002064:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002068:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800206c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002076:	2263      	movs	r2, #99	; 0x63
 8002078:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <MX_TIM3_Init+0x94>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002086:	4814      	ldr	r0, [pc, #80]	; (80020d8 <MX_TIM3_Init+0x94>)
 8002088:	f002 fece 	bl	8004e28 <HAL_TIM_Base_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002092:	f000 f8f1 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800209a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_TIM3_Init+0x94>)
 80020a4:	f003 f8b4 	bl	8005210 <HAL_TIM_ConfigClockSource>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020ae:	f000 f8e3 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_TIM3_Init+0x94>)
 80020c0:	f003 fa8a 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80020ca:	f000 f8d5 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000190 	.word	0x20000190
 80020dc:	40000400 	.word	0x40000400

080020e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <MX_USART1_UART_Init+0x50>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_USART1_UART_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002106:	220c      	movs	r2, #12
 8002108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <MX_USART1_UART_Init+0x4c>)
 8002118:	f003 face 	bl	80056b8 <HAL_UART_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002122:	f000 f8a9 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200001d8 	.word	0x200001d8
 8002130:	40013800 	.word	0x40013800

08002134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_DMA_Init+0x38>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <MX_DMA_Init+0x38>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6153      	str	r3, [r2, #20]
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_DMA_Init+0x38>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	200b      	movs	r0, #11
 8002158:	f001 fddf 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800215c:	200b      	movs	r0, #11
 800215e:	f001 fdf8 	bl	8003d52 <HAL_NVIC_EnableIRQ>

}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <MX_GPIO_Init+0xd4>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <MX_GPIO_Init+0xd4>)
 800218a:	f043 0310 	orr.w	r3, r3, #16
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <MX_GPIO_Init+0xd4>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <MX_GPIO_Init+0xd4>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a28      	ldr	r2, [pc, #160]	; (8002244 <MX_GPIO_Init+0xd4>)
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <MX_GPIO_Init+0xd4>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <MX_GPIO_Init+0xd4>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <MX_GPIO_Init+0xd4>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <MX_GPIO_Init+0xd4>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d2:	481d      	ldr	r0, [pc, #116]	; (8002248 <MX_GPIO_Init+0xd8>)
 80021d4:	f002 f94a 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VCC_Pin|DOWN_PORT_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	2141      	movs	r1, #65	; 0x41
 80021dc:	481b      	ldr	r0, [pc, #108]	; (800224c <MX_GPIO_Init+0xdc>)
 80021de:	f002 f945 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UP_PORT_GPIO_Port, UP_PORT_Pin, GPIO_PIN_SET);
 80021e2:	2201      	movs	r2, #1
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	4819      	ldr	r0, [pc, #100]	; (800224c <MX_GPIO_Init+0xdc>)
 80021e8:	f002 f940 	bl	800446c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	4619      	mov	r1, r3
 8002204:	4810      	ldr	r0, [pc, #64]	; (8002248 <MX_GPIO_Init+0xd8>)
 8002206:	f001 ffad 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_Pin DOWN_PORT_Pin UP_PORT_Pin */
  GPIO_InitStruct.Pin = VCC_Pin|DOWN_PORT_Pin|UP_PORT_Pin;
 800220a:	23c1      	movs	r3, #193	; 0xc1
 800220c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2302      	movs	r3, #2
 8002218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	4619      	mov	r1, r3
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <MX_GPIO_Init+0xdc>)
 8002222:	f001 ff9f 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002226:	2302      	movs	r3, #2
 8002228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222a:	2303      	movs	r3, #3
 800222c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 0310 	add.w	r3, r7, #16
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_GPIO_Init+0xdc>)
 8002236:	f001 ff95 	bl	8004164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800223a:	bf00      	nop
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40011000 	.word	0x40011000
 800224c:	40010800 	.word	0x40010800

08002250 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d102      	bne.n	8002266 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
	}
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000190 	.word	0x20000190
 8002274:	200007fc 	.word	0x200007fc

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002280:	20c8      	movs	r0, #200	; 0xc8
 8002282:	f000 fa5f 	bl	8002744 <HAL_Delay>
	  NVIC_SystemReset();
 8002286:	f7ff fc65 	bl	8001b54 <__NVIC_SystemReset>
	...

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_MspInit+0x5c>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_MspInit+0x5c>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6193      	str	r3, [r2, #24]
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_MspInit+0x5c>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_MspInit+0x5c>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a0e      	ldr	r2, [pc, #56]	; (80022e8 <HAL_MspInit+0x5c>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_MspInit+0x5c>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022c2:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <HAL_MspInit+0x60>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_MspInit+0x60>)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000

080022f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <HAL_ADC_MspInit+0xc0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d14a      	bne.n	80023a6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_ADC_MspInit+0xc4>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <HAL_ADC_MspInit+0xc4>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_ADC_MspInit+0xc4>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <HAL_ADC_MspInit+0xc4>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_ADC_MspInit+0xc4>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <HAL_ADC_MspInit+0xc4>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002340:	2302      	movs	r3, #2
 8002342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002344:	2303      	movs	r3, #3
 8002346:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4619      	mov	r1, r3
 800234e:	481a      	ldr	r0, [pc, #104]	; (80023b8 <HAL_ADC_MspInit+0xc8>)
 8002350:	f001 ff08 	bl	8004164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 8002356:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <HAL_ADC_MspInit+0xd0>)
 8002358:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 800236e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002372:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 8002376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 800237e:	2220      	movs	r2, #32
 8002380:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 8002384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002388:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800238a:	480c      	ldr	r0, [pc, #48]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 800238c:	f001 fcfc 	bl	8003d88 <HAL_DMA_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002396:	f7ff ff6f 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 800239e:	621a      	str	r2, [r3, #32]
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <HAL_ADC_MspInit+0xcc>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023a6:	bf00      	nop
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40012400 	.word	0x40012400
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010800 	.word	0x40010800
 80023bc:	20000094 	.word	0x20000094
 80023c0:	40020008 	.word	0x40020008

080023c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a20      	ldr	r2, [pc, #128]	; (8002460 <HAL_CAN_MspInit+0x9c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d139      	bne.n	8002458 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023e4:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <HAL_CAN_MspInit+0xa0>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	4a1e      	ldr	r2, [pc, #120]	; (8002464 <HAL_CAN_MspInit+0xa0>)
 80023ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ee:	61d3      	str	r3, [r2, #28]
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <HAL_CAN_MspInit+0xa0>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_CAN_MspInit+0xa0>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_CAN_MspInit+0xa0>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_CAN_MspInit+0xa0>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002422:	f107 0310 	add.w	r3, r7, #16
 8002426:	4619      	mov	r1, r3
 8002428:	480f      	ldr	r0, [pc, #60]	; (8002468 <HAL_CAN_MspInit+0xa4>)
 800242a:	f001 fe9b 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800242e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	4619      	mov	r1, r3
 8002442:	4809      	ldr	r0, [pc, #36]	; (8002468 <HAL_CAN_MspInit+0xa4>)
 8002444:	f001 fe8e 	bl	8004164 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2014      	movs	r0, #20
 800244e:	f001 fc64 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002452:	2014      	movs	r0, #20
 8002454:	f001 fc7d 	bl	8003d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40006400 	.word	0x40006400
 8002464:	40021000 	.word	0x40021000
 8002468:	40010800 	.word	0x40010800

0800246c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <HAL_TIM_Base_MspInit+0x8c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10c      	bne.n	8002498 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 8002484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002488:	6193      	str	r3, [r2, #24]
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002492:	617b      	str	r3, [r7, #20]
 8002494:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002496:	e02a      	b.n	80024ee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d10c      	bne.n	80024bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a15      	ldr	r2, [pc, #84]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
}
 80024ba:	e018      	b.n	80024ee <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <HAL_TIM_Base_MspInit+0x94>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d113      	bne.n	80024ee <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_TIM_Base_MspInit+0x90>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	201d      	movs	r0, #29
 80024e4:	f001 fc19 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024e8:	201d      	movs	r0, #29
 80024ea:	f001 fc32 	bl	8003d52 <HAL_NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40000400 	.word	0x40000400

08002504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_UART_MspInit+0x8c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d131      	bne.n	8002588 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_UART_MspInit+0x90>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_UART_MspInit+0x90>)
 800252a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_UART_MspInit+0x90>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253c:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_UART_MspInit+0x90>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <HAL_UART_MspInit+0x90>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_UART_MspInit+0x90>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	4619      	mov	r1, r3
 8002568:	480b      	ldr	r0, [pc, #44]	; (8002598 <HAL_UART_MspInit+0x94>)
 800256a:	f001 fdfb 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800256e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	4619      	mov	r1, r3
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <HAL_UART_MspInit+0x94>)
 8002584:	f001 fdee 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002588:	bf00      	nop
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40013800 	.word	0x40013800
 8002594:	40021000 	.word	0x40021000
 8002598:	40010800 	.word	0x40010800

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a0:	e7fe      	b.n	80025a0 <NMI_Handler+0x4>

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <MemManage_Handler+0x4>

080025ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler+0x4>

080025ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e2:	f000 f893 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <DMA1_Channel1_IRQHandler+0x10>)
 80025f2:	f001 fc83 	bl	8003efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000094 	.word	0x20000094

08002600 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002606:	f001 f89f 	bl	8003748 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200000d8 	.word	0x200000d8

08002614 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <TIM3_IRQHandler+0x10>)
 800261a:	f002 fcf1 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000190 	.word	0x20000190

08002628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002634:	f7ff fff8 	bl	8002628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480b      	ldr	r0, [pc, #44]	; (8002668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800263a:	490c      	ldr	r1, [pc, #48]	; (800266c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002650:	4c09      	ldr	r4, [pc, #36]	; (8002678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800265e:	f003 f911 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002662:	f7ff fa8d 	bl	8001b80 <main>
  bx lr
 8002666:	4770      	bx	lr
  ldr r0, =_sdata
 8002668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800266c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002670:	080059e0 	.word	0x080059e0
  ldr r2, =_sbss
 8002674:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002678:	20000860 	.word	0x20000860

0800267c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC1_2_IRQHandler>
	...

08002680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_Init+0x28>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_Init+0x28>)
 800268a:	f043 0310 	orr.w	r3, r3, #16
 800268e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002690:	2003      	movs	r0, #3
 8002692:	f001 fb37 	bl	8003d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002696:	200f      	movs	r0, #15
 8002698:	f000 f808 	bl	80026ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269c:	f7ff fdf6 	bl	800228c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40022000 	.word	0x40022000

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x54>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x58>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f001 fb4f 	bl	8003d6e <HAL_SYSTICK_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00e      	b.n	80026f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d80a      	bhi.n	80026f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e0:	2200      	movs	r2, #0
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f001 fb17 	bl	8003d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <HAL_InitTick+0x5c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000000 	.word	0x20000000
 8002704:	20000008 	.word	0x20000008
 8002708:	20000004 	.word	0x20000004

0800270c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_IncTick+0x1c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_IncTick+0x20>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <HAL_IncTick+0x20>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	20000008 	.word	0x20000008
 800272c:	2000085c 	.word	0x2000085c

08002730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <HAL_GetTick+0x10>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	2000085c 	.word	0x2000085c

08002744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff fff0 	bl	8002730 <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d005      	beq.n	800276a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_Delay+0x44>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276a:	bf00      	nop
 800276c:	f7ff ffe0 	bl	8002730 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d8f7      	bhi.n	800276c <HAL_Delay+0x28>
  {
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000008 	.word	0x20000008

0800278c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0be      	b.n	800292c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fd90 	bl	80022f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 faf5 	bl	8002dc0 <ADC_ConversionStop_Disable>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8099 	bne.w	800291a <HAL_ADC_Init+0x18e>
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 8095 	bne.w	800291a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027f8:	f023 0302 	bic.w	r3, r3, #2
 80027fc:	f043 0202 	orr.w	r2, r3, #2
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800280c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7b1b      	ldrb	r3, [r3, #12]
 8002812:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002814:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002824:	d003      	beq.n	800282e <HAL_ADC_Init+0xa2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_ADC_Init+0xa8>
 800282e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002832:	e000      	b.n	8002836 <HAL_ADC_Init+0xaa>
 8002834:	2300      	movs	r3, #0
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7d1b      	ldrb	r3, [r3, #20]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d119      	bne.n	8002878 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7b1b      	ldrb	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	3b01      	subs	r3, #1
 8002852:	035a      	lsls	r2, r3, #13
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e00b      	b.n	8002878 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_ADC_Init+0x1a8>)
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	430b      	orrs	r3, r1
 800289e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a8:	d003      	beq.n	80028b2 <HAL_ADC_Init+0x126>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d104      	bne.n	80028bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_ADC_Init+0x1ac>)
 80028d8:	4013      	ands	r3, r2
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d10b      	bne.n	80028f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028f6:	e018      	b.n	800292a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	f023 0312 	bic.w	r3, r3, #18
 8002900:	f043 0210 	orr.w	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002918:	e007      	b.n	800292a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	ffe1f7fd 	.word	0xffe1f7fd
 8002938:	ff1f0efe 	.word	0xff1f0efe

0800293c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a64      	ldr	r2, [pc, #400]	; (8002ae4 <HAL_ADC_Start_DMA+0x1a8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_ADC_Start_DMA+0x24>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_ADC_Start_DMA+0x1ac>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d106      	bne.n	800296e <HAL_ADC_Start_DMA+0x32>
 8002960:	4b60      	ldr	r3, [pc, #384]	; (8002ae4 <HAL_ADC_Start_DMA+0x1a8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 80b3 	bne.w	8002ad4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_ADC_Start_DMA+0x40>
 8002978:	2302      	movs	r3, #2
 800297a:	e0ae      	b.n	8002ada <HAL_ADC_Start_DMA+0x19e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 f9c1 	bl	8002d0c <ADC_Enable>
 800298a:	4603      	mov	r3, r0
 800298c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 809a 	bne.w	8002aca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a4e      	ldr	r2, [pc, #312]	; (8002ae8 <HAL_ADC_Start_DMA+0x1ac>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_Start_DMA+0x84>
 80029b4:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <HAL_ADC_Start_DMA+0x1a8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d115      	bne.n	80029ec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d026      	beq.n	8002a28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029ea:	e01d      	b.n	8002a28 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a39      	ldr	r2, [pc, #228]	; (8002ae4 <HAL_ADC_Start_DMA+0x1a8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_ADC_Start_DMA+0xd0>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a38      	ldr	r2, [pc, #224]	; (8002ae8 <HAL_ADC_Start_DMA+0x1ac>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10d      	bne.n	8002a28 <HAL_ADC_Start_DMA+0xec>
 8002a0c:	4b35      	ldr	r3, [pc, #212]	; (8002ae4 <HAL_ADC_Start_DMA+0x1a8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f023 0206 	bic.w	r2, r3, #6
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a40:	e002      	b.n	8002a48 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a25      	ldr	r2, [pc, #148]	; (8002aec <HAL_ADC_Start_DMA+0x1b0>)
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a24      	ldr	r2, [pc, #144]	; (8002af0 <HAL_ADC_Start_DMA+0x1b4>)
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <HAL_ADC_Start_DMA+0x1b8>)
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0202 	mvn.w	r2, #2
 8002a70:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a80:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a18      	ldr	r0, [r3, #32]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	334c      	adds	r3, #76	; 0x4c
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f001 f9d3 	bl	8003e3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002aa0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002aa4:	d108      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ab4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ab6:	e00f      	b.n	8002ad8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ac6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002ac8:	e006      	b.n	8002ad8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002ad2:	e001      	b.n	8002ad8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40012400 	.word	0x40012400
 8002ae8:	40012800 	.word	0x40012800
 8002aec:	08002e43 	.word	0x08002e43
 8002af0:	08002ebf 	.word	0x08002ebf
 8002af4:	08002edb 	.word	0x08002edb

08002af8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x20>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0dc      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x1da>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b06      	cmp	r3, #6
 8002b4a:	d81c      	bhi.n	8002b86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b05      	subs	r3, #5
 8002b5e:	221f      	movs	r2, #31
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4019      	ands	r1, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	3b05      	subs	r3, #5
 8002b78:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34
 8002b84:	e03c      	b.n	8002c00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d81c      	bhi.n	8002bc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b23      	subs	r3, #35	; 0x23
 8002ba0:	221f      	movs	r2, #31
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	4019      	ands	r1, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b23      	subs	r3, #35	; 0x23
 8002bba:	fa00 f203 	lsl.w	r2, r0, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc6:	e01b      	b.n	8002c00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b41      	subs	r3, #65	; 0x41
 8002bda:	221f      	movs	r2, #31
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4019      	ands	r1, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b41      	subs	r3, #65	; 0x41
 8002bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b09      	cmp	r3, #9
 8002c06:	d91c      	bls.n	8002c42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68d9      	ldr	r1, [r3, #12]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	4019      	ands	r1, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6898      	ldr	r0, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	3b1e      	subs	r3, #30
 8002c34:	fa00 f203 	lsl.w	r2, r0, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	e019      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	2207      	movs	r2, #7
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	4019      	ands	r1, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6898      	ldr	r0, [r3, #8]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	d003      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c82:	2b11      	cmp	r3, #17
 8002c84:	d132      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d125      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d126      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d11a      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <HAL_ADC_ConfigChannel+0x1ec>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	0c9a      	lsrs	r2, r3, #18
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ccc:	e002      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f9      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x1b2>
 8002cda:	e007      	b.n	8002cec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	f043 0220 	orr.w	r2, r3, #32
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	40012400 	.word	0x40012400
 8002d04:	20000000 	.word	0x20000000
 8002d08:	431bde83 	.word	0x431bde83

08002d0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d040      	beq.n	8002dac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <ADC_Enable+0xac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <ADC_Enable+0xb0>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	0c9b      	lsrs	r3, r3, #18
 8002d46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d48:	e002      	b.n	8002d50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f9      	bne.n	8002d4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d56:	f7ff fceb 	bl	8002730 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d5c:	e01f      	b.n	8002d9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d5e:	f7ff fce7 	bl	8002730 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d918      	bls.n	8002d9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d011      	beq.n	8002d9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e007      	b.n	8002dae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d1d8      	bne.n	8002d5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	431bde83 	.word	0x431bde83

08002dc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d12e      	bne.n	8002e38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dea:	f7ff fca1 	bl	8002730 <HAL_GetTick>
 8002dee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002df0:	e01b      	b.n	8002e2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002df2:	f7ff fc9d 	bl	8002730 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d914      	bls.n	8002e2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10d      	bne.n	8002e2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	f043 0210 	orr.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e007      	b.n	8002e3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d0dc      	beq.n	8002df2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d127      	bne.n	8002eac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e76:	d115      	bne.n	8002ea4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff fe27 	bl	8002af8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002eaa:	e004      	b.n	8002eb6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7fe fcd1 	bl	8001874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f043 0204 	orr.w	r2, r3, #4
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f7ff fe02 	bl	8002b0a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0ed      	b.n	80030fc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fa49 	bl	80023c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f42:	f7ff fbf5 	bl	8002730 <HAL_GetTick>
 8002f46:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f48:	e012      	b.n	8002f70 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f4a:	f7ff fbf1 	bl	8002730 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b0a      	cmp	r3, #10
 8002f56:	d90b      	bls.n	8002f70 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2205      	movs	r2, #5
 8002f68:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0c5      	b.n	80030fc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0e5      	beq.n	8002f4a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0202 	bic.w	r2, r2, #2
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f8e:	f7ff fbcf 	bl	8002730 <HAL_GetTick>
 8002f92:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f94:	e012      	b.n	8002fbc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f96:	f7ff fbcb 	bl	8002730 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b0a      	cmp	r3, #10
 8002fa2:	d90b      	bls.n	8002fbc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e09f      	b.n	80030fc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7e1b      	ldrb	r3, [r3, #24]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e007      	b.n	8002ff4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7e5b      	ldrb	r3, [r3, #25]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d108      	bne.n	800300e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e007      	b.n	800301e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	7e9b      	ldrb	r3, [r3, #26]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d108      	bne.n	8003038 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0220 	orr.w	r2, r2, #32
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e007      	b.n	8003048 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0220 	bic.w	r2, r2, #32
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7edb      	ldrb	r3, [r3, #27]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d108      	bne.n	8003062 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0210 	bic.w	r2, r2, #16
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e007      	b.n	8003072 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0210 	orr.w	r2, r2, #16
 8003070:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7f1b      	ldrb	r3, [r3, #28]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0208 	orr.w	r2, r2, #8
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0208 	bic.w	r2, r2, #8
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7f5b      	ldrb	r3, [r3, #29]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d108      	bne.n	80030b6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0204 	orr.w	r2, r2, #4
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e007      	b.n	80030c6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0204 	bic.w	r2, r2, #4
 80030c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	ea42 0103 	orr.w	r1, r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	1e5a      	subs	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d003      	beq.n	800312a <HAL_CAN_ConfigFilter+0x26>
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b02      	cmp	r3, #2
 8003126:	f040 80aa 	bne.w	800327e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003130:	f043 0201 	orr.w	r2, r3, #1
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2201      	movs	r2, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	43db      	mvns	r3, r3
 8003154:	401a      	ands	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d123      	bne.n	80031ac <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003186:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3248      	adds	r2, #72	; 0x48
 800318c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	3348      	adds	r3, #72	; 0x48
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d122      	bne.n	80031fa <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	431a      	orrs	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3248      	adds	r2, #72	; 0x48
 80031da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031f0:	6979      	ldr	r1, [r7, #20]
 80031f2:	3348      	adds	r3, #72	; 0x48
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43db      	mvns	r3, r3
 800320c:	401a      	ands	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003214:	e007      	b.n	8003226 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	431a      	orrs	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	43db      	mvns	r3, r3
 8003238:	401a      	ands	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003240:	e007      	b.n	8003252 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	431a      	orrs	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	431a      	orrs	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003270:	f023 0201 	bic.w	r2, r3, #1
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e006      	b.n	800328c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d12e      	bne.n	8003308 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032c2:	f7ff fa35 	bl	8002730 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032c8:	e012      	b.n	80032f0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ca:	f7ff fa31 	bl	8002730 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b0a      	cmp	r3, #10
 80032d6:	d90b      	bls.n	80032f0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2205      	movs	r2, #5
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e012      	b.n	8003316 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e5      	bne.n	80032ca <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e006      	b.n	8003316 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800331e:	b480      	push	{r7}
 8003320:	b089      	sub	sp, #36	; 0x24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003332:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800333c:	7ffb      	ldrb	r3, [r7, #31]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d003      	beq.n	800334a <HAL_CAN_AddTxMessage+0x2c>
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	2b02      	cmp	r3, #2
 8003346:	f040 80ad 	bne.w	80034a4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8095 	beq.w	8003494 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	0e1b      	lsrs	r3, r3, #24
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003374:	2201      	movs	r2, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	409a      	lsls	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	431a      	orrs	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3318      	adds	r3, #24
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	440b      	add	r3, r1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e00f      	b.n	80033c2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	3318      	adds	r3, #24
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	440b      	add	r3, r1
 80033c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3318      	adds	r3, #24
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	440b      	add	r3, r1
 80033d2:	3304      	adds	r3, #4
 80033d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	7d1b      	ldrb	r3, [r3, #20]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d111      	bne.n	8003402 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3318      	adds	r3, #24
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	6811      	ldr	r1, [r2, #0]
 80033f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3318      	adds	r3, #24
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	440b      	add	r3, r1
 80033fe:	3304      	adds	r3, #4
 8003400:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3307      	adds	r3, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	061a      	lsls	r2, r3, #24
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3306      	adds	r3, #6
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3305      	adds	r3, #5
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	4313      	orrs	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	3204      	adds	r2, #4
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	4610      	mov	r0, r2
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	6811      	ldr	r1, [r2, #0]
 800342a:	ea43 0200 	orr.w	r2, r3, r0
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	440b      	add	r3, r1
 8003434:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003438:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3303      	adds	r3, #3
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	061a      	lsls	r2, r3, #24
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3302      	adds	r3, #2
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3301      	adds	r3, #1
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	4313      	orrs	r3, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	4610      	mov	r0, r2
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	6811      	ldr	r1, [r2, #0]
 8003460:	ea43 0200 	orr.w	r2, r3, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	440b      	add	r3, r1
 800346a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800346e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3318      	adds	r3, #24
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3318      	adds	r3, #24
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	440b      	add	r3, r1
 800348e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e00e      	b.n	80034b2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e006      	b.n	80034b2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
  }
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3724      	adds	r7, #36	; 0x24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d003      	beq.n	80034e0 <HAL_CAN_GetRxMessage+0x24>
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	f040 8103 	bne.w	80036e6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10e      	bne.n	8003504 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d116      	bne.n	8003522 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0f7      	b.n	80036f4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e0e8      	b.n	80036f4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	331b      	adds	r3, #27
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	4413      	add	r3, r2
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0204 	and.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10c      	bne.n	800355a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	331b      	adds	r3, #27
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	4413      	add	r3, r2
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0d5b      	lsrs	r3, r3, #21
 8003550:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e00b      	b.n	8003572 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	331b      	adds	r3, #27
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4413      	add	r3, r2
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	331b      	adds	r3, #27
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0202 	and.w	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	331b      	adds	r3, #27
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2208      	movs	r2, #8
 80035a4:	611a      	str	r2, [r3, #16]
 80035a6:	e00b      	b.n	80035c0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	331b      	adds	r3, #27
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	3304      	adds	r3, #4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	331b      	adds	r3, #27
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	331b      	adds	r3, #27
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	4413      	add	r3, r2
 8003610:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0a1a      	lsrs	r2, r3, #8
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	4413      	add	r3, r2
 800362a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0c1a      	lsrs	r2, r3, #16
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	3302      	adds	r3, #2
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4413      	add	r3, r2
 8003644:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0e1a      	lsrs	r2, r3, #24
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	3303      	adds	r3, #3
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	4413      	add	r3, r2
 800365e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	3304      	adds	r3, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	4413      	add	r3, r2
 8003676:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0a1a      	lsrs	r2, r3, #8
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3305      	adds	r3, #5
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4413      	add	r3, r2
 8003690:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0c1a      	lsrs	r2, r3, #16
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	3306      	adds	r3, #6
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	0e1a      	lsrs	r2, r3, #24
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	3307      	adds	r3, #7
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d108      	bne.n	80036d2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0220 	orr.w	r2, r2, #32
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	e007      	b.n	80036e2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0220 	orr.w	r2, r2, #32
 80036e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e006      	b.n	80036f4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d002      	beq.n	800371c <HAL_CAN_ActivateNotification+0x1e>
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d109      	bne.n	8003730 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6959      	ldr	r1, [r3, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e006      	b.n	800373e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d07c      	beq.n	8003888 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d023      	beq.n	80037e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2201      	movs	r2, #1
 800379e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f983 	bl	8003ab6 <HAL_CAN_TxMailbox0CompleteCallback>
 80037b0:	e016      	b.n	80037e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
 80037c4:	e00c      	b.n	80037e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e002      	b.n	80037e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f986 	bl	8003aec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d024      	beq.n	8003834 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f962 	bl	8003ac8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003804:	e016      	b.n	8003834 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
 8003818:	e00c      	b.n	8003834 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
 800382c:	e002      	b.n	8003834 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f965 	bl	8003afe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d024      	beq.n	8003888 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003846:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f941 	bl	8003ada <HAL_CAN_TxMailbox2CompleteCallback>
 8003858:	e016      	b.n	8003888 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
 800386c:	e00c      	b.n	8003888 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e002      	b.n	8003888 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f944 	bl	8003b10 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2208      	movs	r2, #8
 80038c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f92a 	bl	8003b22 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd ff99 	bl	800181e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003906:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2210      	movs	r2, #16
 800390e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f901 	bl	8003b34 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d009      	beq.n	8003950 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd ff73 	bl	8001836 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f8ea 	bl	8003b46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00b      	beq.n	8003994 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d006      	beq.n	8003994 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2208      	movs	r2, #8
 800398c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8e2 	bl	8003b58 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d07b      	beq.n	8003a96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d072      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f043 0304 	orr.w	r3, r3, #4
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d043      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d03e      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a16:	2b60      	cmp	r3, #96	; 0x60
 8003a18:	d02b      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x32a>
 8003a1a:	2b60      	cmp	r3, #96	; 0x60
 8003a1c:	d82e      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a1e:	2b50      	cmp	r3, #80	; 0x50
 8003a20:	d022      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x320>
 8003a22:	2b50      	cmp	r3, #80	; 0x50
 8003a24:	d82a      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d019      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x316>
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	d826      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	d010      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x30c>
 8003a32:	2b30      	cmp	r3, #48	; 0x30
 8003a34:	d822      	bhi.n	8003a7c <HAL_CAN_IRQHandler+0x334>
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d002      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x2f8>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d005      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a3e:	e01d      	b.n	8003a7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f043 0308 	orr.w	r3, r3, #8
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a48:	e019      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a52:	e014      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	f043 0320 	orr.w	r3, r3, #32
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5c:	e00f      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a66:	e00a      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a70:	e005      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a7a:	e000      	b.n	8003a7e <HAL_CAN_IRQHandler+0x336>
            break;
 8003a7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2204      	movs	r2, #4
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fd fed1 	bl	8001850 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aae:	bf00      	nop
 8003ab0:	3728      	adds	r7, #40	; 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
	...

08003b6c <__NVIC_SetPriorityGrouping>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9e:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	60d3      	str	r3, [r2, #12]
}
 8003ba4:	bf00      	nop
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <__NVIC_GetPriorityGrouping>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <__NVIC_GetPriorityGrouping+0x18>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	f003 0307 	and.w	r3, r3, #7
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <__NVIC_EnableIRQ>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	db0b      	blt.n	8003bfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	f003 021f 	and.w	r2, r3, #31
 8003be8:	4906      	ldr	r1, [pc, #24]	; (8003c04 <__NVIC_EnableIRQ+0x34>)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	e000e100 	.word	0xe000e100

08003c08 <__NVIC_SetPriority>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	6039      	str	r1, [r7, #0]
 8003c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	db0a      	blt.n	8003c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	490c      	ldr	r1, [pc, #48]	; (8003c54 <__NVIC_SetPriority+0x4c>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	0112      	lsls	r2, r2, #4
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c30:	e00a      	b.n	8003c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4908      	ldr	r1, [pc, #32]	; (8003c58 <__NVIC_SetPriority+0x50>)
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	440b      	add	r3, r1
 8003c46:	761a      	strb	r2, [r3, #24]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	e000e100 	.word	0xe000e100
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <NVIC_EncodePriority>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f1c3 0307 	rsb	r3, r3, #7
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf28      	it	cs
 8003c7a:	2304      	movcs	r3, #4
 8003c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d902      	bls.n	8003c8c <NVIC_EncodePriority+0x30>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3b03      	subs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <NVIC_EncodePriority+0x32>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c90:	f04f 32ff 	mov.w	r2, #4294967295
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43d9      	mvns	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	4313      	orrs	r3, r2
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd0:	d301      	bcc.n	8003cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00f      	b.n	8003cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <SysTick_Config+0x40>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cde:	210f      	movs	r1, #15
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	f7ff ff90 	bl	8003c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <SysTick_Config+0x40>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <SysTick_Config+0x40>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	e000e010 	.word	0xe000e010

08003d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff2d 	bl	8003b6c <__NVIC_SetPriorityGrouping>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d2c:	f7ff ff42 	bl	8003bb4 <__NVIC_GetPriorityGrouping>
 8003d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f7ff ff90 	bl	8003c5c <NVIC_EncodePriority>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff5f 	bl	8003c08 <__NVIC_SetPriority>
}
 8003d4a:	bf00      	nop
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff35 	bl	8003bd0 <__NVIC_EnableIRQ>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff ffa2 	bl	8003cc0 <SysTick_Config>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e043      	b.n	8003e26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_DMA_Init+0xa8>)
 8003da6:	4413      	add	r3, r2
 8003da8:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <HAL_DMA_Init+0xac>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	009a      	lsls	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <HAL_DMA_Init+0xb0>)
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	bffdfff8 	.word	0xbffdfff8
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	40020000 	.word	0x40020000

08003e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_DMA_Start_IT+0x20>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e04b      	b.n	8003ef4 <HAL_DMA_Start_IT+0xb8>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d13a      	bne.n	8003ee6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f937 	bl	8004108 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 020e 	orr.w	r2, r2, #14
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0204 	bic.w	r2, r2, #4
 8003ec2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 020a 	orr.w	r2, r2, #10
 8003ed2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e005      	b.n	8003ef2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	2204      	movs	r2, #4
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d04f      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0xc8>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d04a      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0204 	bic.w	r2, r2, #4
 8003f4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a66      	ldr	r2, [pc, #408]	; (80040ec <HAL_DMA_IRQHandler+0x1f0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d029      	beq.n	8003faa <HAL_DMA_IRQHandler+0xae>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a65      	ldr	r2, [pc, #404]	; (80040f0 <HAL_DMA_IRQHandler+0x1f4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a63      	ldr	r2, [pc, #396]	; (80040f4 <HAL_DMA_IRQHandler+0x1f8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01a      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xa4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a62      	ldr	r2, [pc, #392]	; (80040f8 <HAL_DMA_IRQHandler+0x1fc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d012      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x9e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a60      	ldr	r2, [pc, #384]	; (80040fc <HAL_DMA_IRQHandler+0x200>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00a      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x98>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5f      	ldr	r2, [pc, #380]	; (8004100 <HAL_DMA_IRQHandler+0x204>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d102      	bne.n	8003f8e <HAL_DMA_IRQHandler+0x92>
 8003f88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f8c:	e00e      	b.n	8003fac <HAL_DMA_IRQHandler+0xb0>
 8003f8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f92:	e00b      	b.n	8003fac <HAL_DMA_IRQHandler+0xb0>
 8003f94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f98:	e008      	b.n	8003fac <HAL_DMA_IRQHandler+0xb0>
 8003f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f9e:	e005      	b.n	8003fac <HAL_DMA_IRQHandler+0xb0>
 8003fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa4:	e002      	b.n	8003fac <HAL_DMA_IRQHandler+0xb0>
 8003fa6:	2340      	movs	r3, #64	; 0x40
 8003fa8:	e000      	b.n	8003fac <HAL_DMA_IRQHandler+0xb0>
 8003faa:	2304      	movs	r3, #4
 8003fac:	4a55      	ldr	r2, [pc, #340]	; (8004104 <HAL_DMA_IRQHandler+0x208>)
 8003fae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8094 	beq.w	80040e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003fc2:	e08e      	b.n	80040e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2202      	movs	r2, #2
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d056      	beq.n	8004082 <HAL_DMA_IRQHandler+0x186>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d051      	beq.n	8004082 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 020a 	bic.w	r2, r2, #10
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a38      	ldr	r2, [pc, #224]	; (80040ec <HAL_DMA_IRQHandler+0x1f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d029      	beq.n	8004062 <HAL_DMA_IRQHandler+0x166>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <HAL_DMA_IRQHandler+0x1f4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d022      	beq.n	800405e <HAL_DMA_IRQHandler+0x162>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a35      	ldr	r2, [pc, #212]	; (80040f4 <HAL_DMA_IRQHandler+0x1f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01a      	beq.n	8004058 <HAL_DMA_IRQHandler+0x15c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a34      	ldr	r2, [pc, #208]	; (80040f8 <HAL_DMA_IRQHandler+0x1fc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d012      	beq.n	8004052 <HAL_DMA_IRQHandler+0x156>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a32      	ldr	r2, [pc, #200]	; (80040fc <HAL_DMA_IRQHandler+0x200>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00a      	beq.n	800404c <HAL_DMA_IRQHandler+0x150>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_DMA_IRQHandler+0x204>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d102      	bne.n	8004046 <HAL_DMA_IRQHandler+0x14a>
 8004040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004044:	e00e      	b.n	8004064 <HAL_DMA_IRQHandler+0x168>
 8004046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404a:	e00b      	b.n	8004064 <HAL_DMA_IRQHandler+0x168>
 800404c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004050:	e008      	b.n	8004064 <HAL_DMA_IRQHandler+0x168>
 8004052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004056:	e005      	b.n	8004064 <HAL_DMA_IRQHandler+0x168>
 8004058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800405c:	e002      	b.n	8004064 <HAL_DMA_IRQHandler+0x168>
 800405e:	2320      	movs	r3, #32
 8004060:	e000      	b.n	8004064 <HAL_DMA_IRQHandler+0x168>
 8004062:	2302      	movs	r3, #2
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <HAL_DMA_IRQHandler+0x208>)
 8004066:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d034      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004080:	e02f      	b.n	80040e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2208      	movs	r2, #8
 8004088:	409a      	lsls	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d028      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x1e8>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d023      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 020e 	bic.w	r2, r2, #14
 80040aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	4798      	blx	r3
    }
  }
  return;
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
}
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40020008 	.word	0x40020008
 80040f0:	4002001c 	.word	0x4002001c
 80040f4:	40020030 	.word	0x40020030
 80040f8:	40020044 	.word	0x40020044
 80040fc:	40020058 	.word	0x40020058
 8004100:	4002006c 	.word	0x4002006c
 8004104:	40020000 	.word	0x40020000

08004108 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	2101      	movs	r1, #1
 8004120:	fa01 f202 	lsl.w	r2, r1, r2
 8004124:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b10      	cmp	r3, #16
 8004134:	d108      	bne.n	8004148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004146:	e007      	b.n	8004158 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
	...

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b08b      	sub	sp, #44	; 0x2c
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004176:	e169      	b.n	800444c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004178:	2201      	movs	r2, #1
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	4013      	ands	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8158 	bne.w	8004446 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4a9a      	ldr	r2, [pc, #616]	; (8004404 <HAL_GPIO_Init+0x2a0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d05e      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041a0:	4a98      	ldr	r2, [pc, #608]	; (8004404 <HAL_GPIO_Init+0x2a0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d875      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041a6:	4a98      	ldr	r2, [pc, #608]	; (8004408 <HAL_GPIO_Init+0x2a4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d058      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041ac:	4a96      	ldr	r2, [pc, #600]	; (8004408 <HAL_GPIO_Init+0x2a4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d86f      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041b2:	4a96      	ldr	r2, [pc, #600]	; (800440c <HAL_GPIO_Init+0x2a8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d052      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041b8:	4a94      	ldr	r2, [pc, #592]	; (800440c <HAL_GPIO_Init+0x2a8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d869      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041be:	4a94      	ldr	r2, [pc, #592]	; (8004410 <HAL_GPIO_Init+0x2ac>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04c      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041c4:	4a92      	ldr	r2, [pc, #584]	; (8004410 <HAL_GPIO_Init+0x2ac>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d863      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041ca:	4a92      	ldr	r2, [pc, #584]	; (8004414 <HAL_GPIO_Init+0x2b0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d046      	beq.n	800425e <HAL_GPIO_Init+0xfa>
 80041d0:	4a90      	ldr	r2, [pc, #576]	; (8004414 <HAL_GPIO_Init+0x2b0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d85d      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041d6:	2b12      	cmp	r3, #18
 80041d8:	d82a      	bhi.n	8004230 <HAL_GPIO_Init+0xcc>
 80041da:	2b12      	cmp	r3, #18
 80041dc:	d859      	bhi.n	8004292 <HAL_GPIO_Init+0x12e>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <HAL_GPIO_Init+0x80>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	0800425f 	.word	0x0800425f
 80041e8:	08004239 	.word	0x08004239
 80041ec:	0800424b 	.word	0x0800424b
 80041f0:	0800428d 	.word	0x0800428d
 80041f4:	08004293 	.word	0x08004293
 80041f8:	08004293 	.word	0x08004293
 80041fc:	08004293 	.word	0x08004293
 8004200:	08004293 	.word	0x08004293
 8004204:	08004293 	.word	0x08004293
 8004208:	08004293 	.word	0x08004293
 800420c:	08004293 	.word	0x08004293
 8004210:	08004293 	.word	0x08004293
 8004214:	08004293 	.word	0x08004293
 8004218:	08004293 	.word	0x08004293
 800421c:	08004293 	.word	0x08004293
 8004220:	08004293 	.word	0x08004293
 8004224:	08004293 	.word	0x08004293
 8004228:	08004241 	.word	0x08004241
 800422c:	08004255 	.word	0x08004255
 8004230:	4a79      	ldr	r2, [pc, #484]	; (8004418 <HAL_GPIO_Init+0x2b4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004236:	e02c      	b.n	8004292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	623b      	str	r3, [r7, #32]
          break;
 800423e:	e029      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	3304      	adds	r3, #4
 8004246:	623b      	str	r3, [r7, #32]
          break;
 8004248:	e024      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	3308      	adds	r3, #8
 8004250:	623b      	str	r3, [r7, #32]
          break;
 8004252:	e01f      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	330c      	adds	r3, #12
 800425a:	623b      	str	r3, [r7, #32]
          break;
 800425c:	e01a      	b.n	8004294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004266:	2304      	movs	r3, #4
 8004268:	623b      	str	r3, [r7, #32]
          break;
 800426a:	e013      	b.n	8004294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d105      	bne.n	8004280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004274:	2308      	movs	r3, #8
 8004276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	611a      	str	r2, [r3, #16]
          break;
 800427e:	e009      	b.n	8004294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004280:	2308      	movs	r3, #8
 8004282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	615a      	str	r2, [r3, #20]
          break;
 800428a:	e003      	b.n	8004294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800428c:	2300      	movs	r3, #0
 800428e:	623b      	str	r3, [r7, #32]
          break;
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x130>
          break;
 8004292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2bff      	cmp	r3, #255	; 0xff
 8004298:	d801      	bhi.n	800429e <HAL_GPIO_Init+0x13a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	e001      	b.n	80042a2 <HAL_GPIO_Init+0x13e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2bff      	cmp	r3, #255	; 0xff
 80042a8:	d802      	bhi.n	80042b0 <HAL_GPIO_Init+0x14c>
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	e002      	b.n	80042b6 <HAL_GPIO_Init+0x152>
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	3b08      	subs	r3, #8
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	210f      	movs	r1, #15
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	401a      	ands	r2, r3
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80b1 	beq.w	8004446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042e4:	4b4d      	ldr	r3, [pc, #308]	; (800441c <HAL_GPIO_Init+0x2b8>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4a4c      	ldr	r2, [pc, #304]	; (800441c <HAL_GPIO_Init+0x2b8>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6193      	str	r3, [r2, #24]
 80042f0:	4b4a      	ldr	r3, [pc, #296]	; (800441c <HAL_GPIO_Init+0x2b8>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042fc:	4a48      	ldr	r2, [pc, #288]	; (8004420 <HAL_GPIO_Init+0x2bc>)
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	220f      	movs	r2, #15
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a40      	ldr	r2, [pc, #256]	; (8004424 <HAL_GPIO_Init+0x2c0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_GPIO_Init+0x1ec>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <HAL_GPIO_Init+0x2c4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00d      	beq.n	800434c <HAL_GPIO_Init+0x1e8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3e      	ldr	r2, [pc, #248]	; (800442c <HAL_GPIO_Init+0x2c8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d007      	beq.n	8004348 <HAL_GPIO_Init+0x1e4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <HAL_GPIO_Init+0x2cc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_GPIO_Init+0x1e0>
 8004340:	2303      	movs	r3, #3
 8004342:	e006      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 8004344:	2304      	movs	r3, #4
 8004346:	e004      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 8004348:	2302      	movs	r3, #2
 800434a:	e002      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_GPIO_Init+0x1ee>
 8004350:	2300      	movs	r3, #0
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	f002 0203 	and.w	r2, r2, #3
 8004358:	0092      	lsls	r2, r2, #2
 800435a:	4093      	lsls	r3, r2
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004362:	492f      	ldr	r1, [pc, #188]	; (8004420 <HAL_GPIO_Init+0x2bc>)
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	089b      	lsrs	r3, r3, #2
 8004368:	3302      	adds	r3, #2
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800437c:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	492c      	ldr	r1, [pc, #176]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]
 8004388:	e006      	b.n	8004398 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800438a:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	43db      	mvns	r3, r3
 8004392:	4928      	ldr	r1, [pc, #160]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 8004394:	4013      	ands	r3, r2
 8004396:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d006      	beq.n	80043b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4922      	ldr	r1, [pc, #136]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
 80043b0:	e006      	b.n	80043c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	491e      	ldr	r1, [pc, #120]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043bc:	4013      	ands	r3, r2
 80043be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d006      	beq.n	80043da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043cc:	4b19      	ldr	r3, [pc, #100]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4918      	ldr	r1, [pc, #96]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	4914      	ldr	r1, [pc, #80]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d021      	beq.n	8004438 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	490e      	ldr	r1, [pc, #56]	; (8004434 <HAL_GPIO_Init+0x2d0>)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e021      	b.n	8004446 <HAL_GPIO_Init+0x2e2>
 8004402:	bf00      	nop
 8004404:	10320000 	.word	0x10320000
 8004408:	10310000 	.word	0x10310000
 800440c:	10220000 	.word	0x10220000
 8004410:	10210000 	.word	0x10210000
 8004414:	10120000 	.word	0x10120000
 8004418:	10110000 	.word	0x10110000
 800441c:	40021000 	.word	0x40021000
 8004420:	40010000 	.word	0x40010000
 8004424:	40010800 	.word	0x40010800
 8004428:	40010c00 	.word	0x40010c00
 800442c:	40011000 	.word	0x40011000
 8004430:	40011400 	.word	0x40011400
 8004434:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_GPIO_Init+0x304>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	43db      	mvns	r3, r3
 8004440:	4909      	ldr	r1, [pc, #36]	; (8004468 <HAL_GPIO_Init+0x304>)
 8004442:	4013      	ands	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	3301      	adds	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	f47f ae8e 	bne.w	8004178 <HAL_GPIO_Init+0x14>
  }
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	372c      	adds	r7, #44	; 0x2c
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	40010400 	.word	0x40010400

0800446c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	807b      	strh	r3, [r7, #2]
 8004478:	4613      	mov	r3, r2
 800447a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800447c:	787b      	ldrb	r3, [r7, #1]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004482:	887a      	ldrh	r2, [r7, #2]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004488:	e003      	b.n	8004492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800448a:	887b      	ldrh	r3, [r7, #2]
 800448c:	041a      	lsls	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	611a      	str	r2, [r3, #16]
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e272      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8087 	beq.w	80045ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044bc:	4b92      	ldr	r3, [pc, #584]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d00c      	beq.n	80044e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044c8:	4b8f      	ldr	r3, [pc, #572]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d112      	bne.n	80044fa <HAL_RCC_OscConfig+0x5e>
 80044d4:	4b8c      	ldr	r3, [pc, #560]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e0:	d10b      	bne.n	80044fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e2:	4b89      	ldr	r3, [pc, #548]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d06c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x12c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d168      	bne.n	80045c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e24c      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d106      	bne.n	8004512 <HAL_RCC_OscConfig+0x76>
 8004504:	4b80      	ldr	r3, [pc, #512]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a7f      	ldr	r2, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800450a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	e02e      	b.n	8004570 <HAL_RCC_OscConfig+0xd4>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10c      	bne.n	8004534 <HAL_RCC_OscConfig+0x98>
 800451a:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a7a      	ldr	r2, [pc, #488]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	4b78      	ldr	r3, [pc, #480]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a77      	ldr	r2, [pc, #476]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800452c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e01d      	b.n	8004570 <HAL_RCC_OscConfig+0xd4>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0xbc>
 800453e:	4b72      	ldr	r3, [pc, #456]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a71      	ldr	r2, [pc, #452]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b6f      	ldr	r3, [pc, #444]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6e      	ldr	r2, [pc, #440]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0xd4>
 8004558:	4b6b      	ldr	r3, [pc, #428]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a6a      	ldr	r2, [pc, #424]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800455e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b68      	ldr	r3, [pc, #416]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a67      	ldr	r2, [pc, #412]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800456a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d013      	beq.n	80045a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe f8da 	bl	8002730 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fe f8d6 	bl	8002730 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	; 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e200      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b5d      	ldr	r3, [pc, #372]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0xe4>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe f8c6 	bl	8002730 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fe f8c2 	bl	8002730 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1ec      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x10c>
 80045c6:	e000      	b.n	80045ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d063      	beq.n	800469e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045d6:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045e2:	4b49      	ldr	r3, [pc, #292]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d11c      	bne.n	8004628 <HAL_RCC_OscConfig+0x18c>
 80045ee:	4b46      	ldr	r3, [pc, #280]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	4b43      	ldr	r3, [pc, #268]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x176>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1c0      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b3d      	ldr	r3, [pc, #244]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4939      	ldr	r1, [pc, #228]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	e03a      	b.n	800469e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004630:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004636:	f7fe f87b 	bl	8002730 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463e:	f7fe f877 	bl	8002730 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1a1      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4927      	ldr	r1, [pc, #156]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b26      	ldr	r3, [pc, #152]	; (800470c <HAL_RCC_OscConfig+0x270>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fe f85a 	bl	8002730 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004680:	f7fe f856 	bl	8002730 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e180      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d03a      	beq.n	8004720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d019      	beq.n	80046e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b2:	4b17      	ldr	r3, [pc, #92]	; (8004710 <HAL_RCC_OscConfig+0x274>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fe f83a 	bl	8002730 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe f836 	bl	8002730 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e160      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046de:	2001      	movs	r0, #1
 80046e0:	f000 face 	bl	8004c80 <RCC_Delay>
 80046e4:	e01c      	b.n	8004720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e6:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <HAL_RCC_OscConfig+0x274>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ec:	f7fe f820 	bl	8002730 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f2:	e00f      	b.n	8004714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f4:	f7fe f81c 	bl	8002730 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d908      	bls.n	8004714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e146      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	42420000 	.word	0x42420000
 8004710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	4b92      	ldr	r3, [pc, #584]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e9      	bne.n	80046f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80a6 	beq.w	800487a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b8b      	ldr	r3, [pc, #556]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b88      	ldr	r3, [pc, #544]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	4a87      	ldr	r2, [pc, #540]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	61d3      	str	r3, [r2, #28]
 800474a:	4b85      	ldr	r3, [pc, #532]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475a:	4b82      	ldr	r3, [pc, #520]	; (8004964 <HAL_RCC_OscConfig+0x4c8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d118      	bne.n	8004798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004766:	4b7f      	ldr	r3, [pc, #508]	; (8004964 <HAL_RCC_OscConfig+0x4c8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7e      	ldr	r2, [pc, #504]	; (8004964 <HAL_RCC_OscConfig+0x4c8>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004772:	f7fd ffdd 	bl	8002730 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477a:	f7fd ffd9 	bl	8002730 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b64      	cmp	r3, #100	; 0x64
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e103      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	4b75      	ldr	r3, [pc, #468]	; (8004964 <HAL_RCC_OscConfig+0x4c8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d106      	bne.n	80047ae <HAL_RCC_OscConfig+0x312>
 80047a0:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4a6e      	ldr	r2, [pc, #440]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6213      	str	r3, [r2, #32]
 80047ac:	e02d      	b.n	800480a <HAL_RCC_OscConfig+0x36e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x334>
 80047b6:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4a69      	ldr	r2, [pc, #420]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	6213      	str	r3, [r2, #32]
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4a66      	ldr	r2, [pc, #408]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	e01c      	b.n	800480a <HAL_RCC_OscConfig+0x36e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d10c      	bne.n	80047f2 <HAL_RCC_OscConfig+0x356>
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	4a60      	ldr	r2, [pc, #384]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	6213      	str	r3, [r2, #32]
 80047e4:	4b5e      	ldr	r3, [pc, #376]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	4a5d      	ldr	r2, [pc, #372]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6213      	str	r3, [r2, #32]
 80047f0:	e00b      	b.n	800480a <HAL_RCC_OscConfig+0x36e>
 80047f2:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4a5a      	ldr	r2, [pc, #360]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	6213      	str	r3, [r2, #32]
 80047fe:	4b58      	ldr	r3, [pc, #352]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	4a57      	ldr	r2, [pc, #348]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d015      	beq.n	800483e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004812:	f7fd ff8d 	bl	8002730 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd ff89 	bl	8002730 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e0b1      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004830:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ee      	beq.n	800481a <HAL_RCC_OscConfig+0x37e>
 800483c:	e014      	b.n	8004868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483e:	f7fd ff77 	bl	8002730 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fd ff73 	bl	8002730 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e09b      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485c:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ee      	bne.n	8004846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486e:	4b3c      	ldr	r3, [pc, #240]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4a3b      	ldr	r2, [pc, #236]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8087 	beq.w	8004992 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004884:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b08      	cmp	r3, #8
 800488e:	d061      	beq.n	8004954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d146      	bne.n	8004926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004898:	4b33      	ldr	r3, [pc, #204]	; (8004968 <HAL_RCC_OscConfig+0x4cc>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fd ff47 	bl	8002730 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a6:	f7fd ff43 	bl	8002730 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e06d      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b8:	4b29      	ldr	r3, [pc, #164]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d108      	bne.n	80048e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4921      	ldr	r1, [pc, #132]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a19      	ldr	r1, [r3, #32]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	430b      	orrs	r3, r1
 80048f2:	491b      	ldr	r1, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <HAL_RCC_OscConfig+0x4cc>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fd ff17 	bl	8002730 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004906:	f7fd ff13 	bl	8002730 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e03d      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x46a>
 8004924:	e035      	b.n	8004992 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_RCC_OscConfig+0x4cc>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fd ff00 	bl	8002730 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fd fefc 	bl	8002730 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e026      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x498>
 8004952:	e01e      	b.n	8004992 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d107      	bne.n	800496c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e019      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <HAL_RCC_OscConfig+0x500>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	429a      	cmp	r2, r3
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000

080049a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0d0      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d910      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b67      	ldr	r3, [pc, #412]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 0207 	bic.w	r2, r3, #7
 80049ca:	4965      	ldr	r1, [pc, #404]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b63      	ldr	r3, [pc, #396]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0b8      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fc:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a52      	ldr	r2, [pc, #328]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	494d      	ldr	r1, [pc, #308]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d040      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d115      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e073      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06b      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7e:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f023 0203 	bic.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4936      	ldr	r1, [pc, #216]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fd fe4e 	bl	8002730 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fd fe4a 	bl	8002730 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e053      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	4b2d      	ldr	r3, [pc, #180]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 020c 	and.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1eb      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d210      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 0207 	bic.w	r2, r3, #7
 8004ad6:	4922      	ldr	r1, [pc, #136]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e032      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4916      	ldr	r1, [pc, #88]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	490e      	ldr	r1, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b2e:	f000 f821 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	490a      	ldr	r1, [pc, #40]	; (8004b68 <HAL_RCC_ClockConfig+0x1c8>)
 8004b40:	5ccb      	ldrb	r3, [r1, r3]
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <HAL_RCC_ClockConfig+0x1cc>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_RCC_ClockConfig+0x1d0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd fdac 	bl	80026ac <HAL_InitTick>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40021000 	.word	0x40021000
 8004b68:	080059ac 	.word	0x080059ac
 8004b6c:	20000000 	.word	0x20000000
 8004b70:	20000004 	.word	0x20000004

08004b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x30>
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x36>
 8004ba2:	e027      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ba4:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba6:	613b      	str	r3, [r7, #16]
      break;
 8004ba8:	e027      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0c9b      	lsrs	r3, r3, #18
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bb4:	5cd3      	ldrb	r3, [r2, r3]
 8004bb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d010      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	0c5b      	lsrs	r3, r3, #17
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bce:	5cd3      	ldrb	r3, [r2, r3]
 8004bd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bd6:	fb03 f202 	mul.w	r2, r3, r2
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e004      	b.n	8004bee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004be8:	fb02 f303 	mul.w	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	613b      	str	r3, [r7, #16]
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bf6:	613b      	str	r3, [r7, #16]
      break;
 8004bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfa:	693b      	ldr	r3, [r7, #16]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	007a1200 	.word	0x007a1200
 8004c10:	080059c4 	.word	0x080059c4
 8004c14:	080059d4 	.word	0x080059d4
 8004c18:	003d0900 	.word	0x003d0900

08004c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c20:	4b02      	ldr	r3, [pc, #8]	; (8004c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	20000000 	.word	0x20000000

08004c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c34:	f7ff fff2 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40021000 	.word	0x40021000
 8004c54:	080059bc 	.word	0x080059bc

08004c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c5c:	f7ff ffde 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	0adb      	lsrs	r3, r3, #11
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4903      	ldr	r1, [pc, #12]	; (8004c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	080059bc 	.word	0x080059bc

08004c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <RCC_Delay+0x34>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <RCC_Delay+0x38>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0a5b      	lsrs	r3, r3, #9
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c9c:	bf00      	nop
  }
  while (Delay --);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	60fa      	str	r2, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f9      	bne.n	8004c9c <RCC_Delay+0x1c>
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	10624dd3 	.word	0x10624dd3

08004cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d07d      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cdc:	4b4f      	ldr	r3, [pc, #316]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce8:	4b4c      	ldr	r3, [pc, #304]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	4a4b      	ldr	r2, [pc, #300]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	61d3      	str	r3, [r2, #28]
 8004cf4:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d00:	2301      	movs	r3, #1
 8004d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	4b46      	ldr	r3, [pc, #280]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d118      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d10:	4b43      	ldr	r3, [pc, #268]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a42      	ldr	r2, [pc, #264]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1c:	f7fd fd08 	bl	8002730 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fd fd04 	bl	8002730 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e06d      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d36:	4b3a      	ldr	r3, [pc, #232]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d02e      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d027      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d60:	4b2e      	ldr	r3, [pc, #184]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d6a:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d70:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d014      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fd fcd3 	bl	8002730 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fd fccf 	bl	8002730 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e036      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ee      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db0:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4917      	ldr	r1, [pc, #92]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004de0:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	490b      	ldr	r1, [pc, #44]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4904      	ldr	r1, [pc, #16]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40007000 	.word	0x40007000
 8004e24:	42420440 	.word	0x42420440

08004e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e041      	b.n	8004ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fd fb0c 	bl	800246c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f000 fabe 	bl	80053e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d001      	beq.n	8004ee0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIM_Base_Start+0x88>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00e      	beq.n	8004f10 <HAL_TIM_Base_Start+0x48>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efa:	d009      	beq.n	8004f10 <HAL_TIM_Base_Start+0x48>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a14      	ldr	r2, [pc, #80]	; (8004f54 <HAL_TIM_Base_Start+0x8c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_TIM_Base_Start+0x48>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <HAL_TIM_Base_Start+0x90>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d111      	bne.n	8004f34 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b06      	cmp	r3, #6
 8004f20:	d010      	beq.n	8004f44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0201 	orr.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f32:	e007      	b.n	8004f44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800

08004f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d001      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e03a      	b.n	8004fea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_TIM_Base_Start_IT+0x98>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x58>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d009      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x58>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a14      	ldr	r2, [pc, #80]	; (8004ff8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x58>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <HAL_TIM_Base_Start_IT+0xa0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d111      	bne.n	8004fd8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d010      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	e007      	b.n	8004fe8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800

08005000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d122      	bne.n	800505c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11b      	bne.n	800505c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0202 	mvn.w	r2, #2
 800502c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9b4 	bl	80053b0 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9a7 	bl	800539e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f9b6 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b04      	cmp	r3, #4
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0204 	mvn.w	r2, #4
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f98a 	bl	80053b0 <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f97d 	bl	800539e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f98c 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0208 	mvn.w	r2, #8
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2204      	movs	r2, #4
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f960 	bl	80053b0 <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f953 	bl	800539e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f962 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b10      	cmp	r3, #16
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b10      	cmp	r3, #16
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0210 	mvn.w	r2, #16
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2208      	movs	r2, #8
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f936 	bl	80053b0 <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f929 	bl	800539e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f938 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0201 	mvn.w	r2, #1
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fd f866 	bl	8002250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b80      	cmp	r3, #128	; 0x80
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa7b 	bl	80056a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8fc 	bl	80053d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0220 	mvn.w	r2, #32
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa46 	bl	8005694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIM_ConfigClockSource+0x1c>
 8005228:	2302      	movs	r3, #2
 800522a:	e0b4      	b.n	8005396 <HAL_TIM_ConfigClockSource+0x186>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800524a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005264:	d03e      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526a:	f200 8087 	bhi.w	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005272:	f000 8086 	beq.w	8005382 <HAL_TIM_ConfigClockSource+0x172>
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527a:	d87f      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b70      	cmp	r3, #112	; 0x70
 800527e:	d01a      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005280:	2b70      	cmp	r3, #112	; 0x70
 8005282:	d87b      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b60      	cmp	r3, #96	; 0x60
 8005286:	d050      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x11a>
 8005288:	2b60      	cmp	r3, #96	; 0x60
 800528a:	d877      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	2b50      	cmp	r3, #80	; 0x50
 800528e:	d03c      	beq.n	800530a <HAL_TIM_ConfigClockSource+0xfa>
 8005290:	2b50      	cmp	r3, #80	; 0x50
 8005292:	d873      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d058      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x13a>
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d86f      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	2b30      	cmp	r3, #48	; 0x30
 800529e:	d064      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052a0:	2b30      	cmp	r3, #48	; 0x30
 80052a2:	d86b      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d060      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d867      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05c      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d05a      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	e062      	b.n	800537c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c6:	f000 f968 	bl	800559a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	609a      	str	r2, [r3, #8]
      break;
 80052e2:	e04f      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052f4:	f000 f951 	bl	800559a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005306:	609a      	str	r2, [r3, #8]
      break;
 8005308:	e03c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	461a      	mov	r2, r3
 8005318:	f000 f8c8 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2150      	movs	r1, #80	; 0x50
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f91f 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 8005328:	e02c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	461a      	mov	r2, r3
 8005338:	f000 f8e6 	bl	8005508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2160      	movs	r1, #96	; 0x60
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f90f 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 8005348:	e01c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	461a      	mov	r2, r3
 8005358:	f000 f8a8 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2140      	movs	r1, #64	; 0x40
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f8ff 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 8005368:	e00c      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f000 f8f6 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 800537a:	e003      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e000      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
	...

080053e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <TIM_Base_SetConfig+0xb8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00b      	beq.n	8005418 <TIM_Base_SetConfig+0x30>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d007      	beq.n	8005418 <TIM_Base_SetConfig+0x30>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a26      	ldr	r2, [pc, #152]	; (80054a4 <TIM_Base_SetConfig+0xbc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_Base_SetConfig+0x30>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <TIM_Base_SetConfig+0xc0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d108      	bne.n	800542a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <TIM_Base_SetConfig+0xb8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00b      	beq.n	800544a <TIM_Base_SetConfig+0x62>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005438:	d007      	beq.n	800544a <TIM_Base_SetConfig+0x62>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a19      	ldr	r2, [pc, #100]	; (80054a4 <TIM_Base_SetConfig+0xbc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_Base_SetConfig+0x62>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <TIM_Base_SetConfig+0xc0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <TIM_Base_SetConfig+0xb8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d103      	bne.n	8005490 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	615a      	str	r2, [r3, #20]
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800

080054ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 030a 	bic.w	r3, r3, #10
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0210 	bic.w	r2, r3, #16
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	031b      	lsls	r3, r3, #12
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005544:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	f043 0307 	orr.w	r3, r3, #7
 8005588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800559a:	b480      	push	{r7}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	431a      	orrs	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	609a      	str	r2, [r3, #8]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e046      	b.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a16      	ldr	r2, [pc, #88]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d009      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a12      	ldr	r2, [pc, #72]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a10      	ldr	r2, [pc, #64]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d10c      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	4313      	orrs	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800

08005694 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e042      	b.n	8005750 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc ff10 	bl	8002504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	; 0x24
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f82b 	bl	8005758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005792:	f023 030c 	bic.w	r3, r3, #12
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6812      	ldr	r2, [r2, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	430b      	orrs	r3, r1
 800579e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	; (800586c <UART_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7ff fa4a 	bl	8004c58 <HAL_RCC_GetPCLK2Freq>
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	e002      	b.n	80057ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7ff fa32 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 80057cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <UART_SetConfig+0x118>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	0119      	lsls	r1, r3, #4
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009a      	lsls	r2, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	fbb2 f2f3 	udiv	r2, r2, r3
 8005804:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <UART_SetConfig+0x118>)
 8005806:	fba3 0302 	umull	r0, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2064      	movs	r0, #100	; 0x64
 800580e:	fb00 f303 	mul.w	r3, r0, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	; 0x32
 8005818:	4a15      	ldr	r2, [pc, #84]	; (8005870 <UART_SetConfig+0x118>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005824:	4419      	add	r1, r3
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009a      	lsls	r2, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fbb2 f2f3 	udiv	r2, r2, r3
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <UART_SetConfig+0x118>)
 800583e:	fba3 0302 	umull	r0, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2064      	movs	r0, #100	; 0x64
 8005846:	fb00 f303 	mul.w	r3, r0, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	; 0x32
 8005850:	4a07      	ldr	r2, [pc, #28]	; (8005870 <UART_SetConfig+0x118>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	440a      	add	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40013800 	.word	0x40013800
 8005870:	51eb851f 	.word	0x51eb851f

08005874 <memset>:
 8005874:	4603      	mov	r3, r0
 8005876:	4402      	add	r2, r0
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	f803 1b01 	strb.w	r1, [r3], #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	2600      	movs	r6, #0
 8005888:	4d0c      	ldr	r5, [pc, #48]	; (80058bc <__libc_init_array+0x38>)
 800588a:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588c:	1b64      	subs	r4, r4, r5
 800588e:	10a4      	asrs	r4, r4, #2
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	f000 f860 	bl	8005958 <_init>
 8005898:	2600      	movs	r6, #0
 800589a:	4d0a      	ldr	r5, [pc, #40]	; (80058c4 <__libc_init_array+0x40>)
 800589c:	4c0a      	ldr	r4, [pc, #40]	; (80058c8 <__libc_init_array+0x44>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	080059d8 	.word	0x080059d8
 80058c0:	080059d8 	.word	0x080059d8
 80058c4:	080059d8 	.word	0x080059d8
 80058c8:	080059dc 	.word	0x080059dc

080058cc <round>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80058d2:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 80058d6:	2a13      	cmp	r2, #19
 80058d8:	460b      	mov	r3, r1
 80058da:	4605      	mov	r5, r0
 80058dc:	460c      	mov	r4, r1
 80058de:	dc18      	bgt.n	8005912 <round+0x46>
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	da09      	bge.n	80058f8 <round+0x2c>
 80058e4:	3201      	adds	r2, #1
 80058e6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80058ea:	d103      	bne.n	80058f4 <round+0x28>
 80058ec:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80058f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058f4:	2200      	movs	r2, #0
 80058f6:	e029      	b.n	800594c <round+0x80>
 80058f8:	4816      	ldr	r0, [pc, #88]	; (8005954 <round+0x88>)
 80058fa:	4110      	asrs	r0, r2
 80058fc:	4001      	ands	r1, r0
 80058fe:	4329      	orrs	r1, r5
 8005900:	d011      	beq.n	8005926 <round+0x5a>
 8005902:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005906:	fa41 f202 	asr.w	r2, r1, r2
 800590a:	4413      	add	r3, r2
 800590c:	ea23 0300 	bic.w	r3, r3, r0
 8005910:	e7f0      	b.n	80058f4 <round+0x28>
 8005912:	2a33      	cmp	r2, #51	; 0x33
 8005914:	dd0a      	ble.n	800592c <round+0x60>
 8005916:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800591a:	d104      	bne.n	8005926 <round+0x5a>
 800591c:	4602      	mov	r2, r0
 800591e:	f7fa fc1d 	bl	800015c <__adddf3>
 8005922:	4605      	mov	r5, r0
 8005924:	460c      	mov	r4, r1
 8005926:	4628      	mov	r0, r5
 8005928:	4621      	mov	r1, r4
 800592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005934:	40f8      	lsrs	r0, r7
 8005936:	4228      	tst	r0, r5
 8005938:	d0f5      	beq.n	8005926 <round+0x5a>
 800593a:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 800593e:	2201      	movs	r2, #1
 8005940:	408a      	lsls	r2, r1
 8005942:	1952      	adds	r2, r2, r5
 8005944:	bf28      	it	cs
 8005946:	3301      	addcs	r3, #1
 8005948:	ea22 0200 	bic.w	r2, r2, r0
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	e7e7      	b.n	8005922 <round+0x56>
 8005952:	bf00      	nop
 8005954:	000fffff 	.word	0x000fffff

08005958 <_init>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr

08005964 <_fini>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr
