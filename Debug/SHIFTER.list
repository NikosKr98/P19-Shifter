
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800932c  0800932c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800932c  0800932c  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800932c  0800932c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800932c  0800932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000262c  200000d4  08009408  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002700  08009408  00022700  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aca5  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314d  00000000  00000000  0003ada2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0003def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003efb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad56  00000000  00000000  0003ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151a0  00000000  00000000  0005acae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e26  00000000  00000000  0006fe4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105c74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b90  00000000  00000000  00105cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e08 	.word	0x08008e08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08008e08 	.word	0x08008e08

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_d2uiz>:
 8000514:	004a      	lsls	r2, r1, #1
 8000516:	d211      	bcs.n	800053c <__aeabi_d2uiz+0x28>
 8000518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800051c:	d211      	bcs.n	8000542 <__aeabi_d2uiz+0x2e>
 800051e:	d50d      	bpl.n	800053c <__aeabi_d2uiz+0x28>
 8000520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000528:	d40e      	bmi.n	8000548 <__aeabi_d2uiz+0x34>
 800052a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000536:	fa23 f002 	lsr.w	r0, r3, r2
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000546:	d102      	bne.n	800054e <__aeabi_d2uiz+0x3a>
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	4770      	bx	lr
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_frsub>:
 8000554:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__addsf3>
 800055a:	bf00      	nop

0800055c <__aeabi_fsub>:
 800055c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000560 <__addsf3>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	bf1f      	itttt	ne
 8000564:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000568:	ea92 0f03 	teqne	r2, r3
 800056c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000570:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000574:	d06a      	beq.n	800064c <__addsf3+0xec>
 8000576:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800057e:	bfc1      	itttt	gt
 8000580:	18d2      	addgt	r2, r2, r3
 8000582:	4041      	eorgt	r1, r0
 8000584:	4048      	eorgt	r0, r1
 8000586:	4041      	eorgt	r1, r0
 8000588:	bfb8      	it	lt
 800058a:	425b      	neglt	r3, r3
 800058c:	2b19      	cmp	r3, #25
 800058e:	bf88      	it	hi
 8000590:	4770      	bxhi	lr
 8000592:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4249      	negne	r1, r1
 80005b2:	ea92 0f03 	teq	r2, r3
 80005b6:	d03f      	beq.n	8000638 <__addsf3+0xd8>
 80005b8:	f1a2 0201 	sub.w	r2, r2, #1
 80005bc:	fa41 fc03 	asr.w	ip, r1, r3
 80005c0:	eb10 000c 	adds.w	r0, r0, ip
 80005c4:	f1c3 0320 	rsb	r3, r3, #32
 80005c8:	fa01 f103 	lsl.w	r1, r1, r3
 80005cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d0:	d502      	bpl.n	80005d8 <__addsf3+0x78>
 80005d2:	4249      	negs	r1, r1
 80005d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005dc:	d313      	bcc.n	8000606 <__addsf3+0xa6>
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d306      	bcc.n	80005f2 <__addsf3+0x92>
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	f102 0201 	add.w	r2, r2, #1
 80005ee:	2afe      	cmp	r2, #254	; 0xfe
 80005f0:	d251      	bcs.n	8000696 <__addsf3+0x136>
 80005f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005fa:	bf08      	it	eq
 80005fc:	f020 0001 	biceq.w	r0, r0, #1
 8000600:	ea40 0003 	orr.w	r0, r0, r3
 8000604:	4770      	bx	lr
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	eb40 0000 	adc.w	r0, r0, r0
 800060c:	3a01      	subs	r2, #1
 800060e:	bf28      	it	cs
 8000610:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000614:	d2ed      	bcs.n	80005f2 <__addsf3+0x92>
 8000616:	fab0 fc80 	clz	ip, r0
 800061a:	f1ac 0c08 	sub.w	ip, ip, #8
 800061e:	ebb2 020c 	subs.w	r2, r2, ip
 8000622:	fa00 f00c 	lsl.w	r0, r0, ip
 8000626:	bfaa      	itet	ge
 8000628:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800062c:	4252      	neglt	r2, r2
 800062e:	4318      	orrge	r0, r3
 8000630:	bfbc      	itt	lt
 8000632:	40d0      	lsrlt	r0, r2
 8000634:	4318      	orrlt	r0, r3
 8000636:	4770      	bx	lr
 8000638:	f092 0f00 	teq	r2, #0
 800063c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000640:	bf06      	itte	eq
 8000642:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000646:	3201      	addeq	r2, #1
 8000648:	3b01      	subne	r3, #1
 800064a:	e7b5      	b.n	80005b8 <__addsf3+0x58>
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d021      	beq.n	80006a0 <__addsf3+0x140>
 800065c:	ea92 0f03 	teq	r2, r3
 8000660:	d004      	beq.n	800066c <__addsf3+0x10c>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	bf08      	it	eq
 8000668:	4608      	moveq	r0, r1
 800066a:	4770      	bx	lr
 800066c:	ea90 0f01 	teq	r0, r1
 8000670:	bf1c      	itt	ne
 8000672:	2000      	movne	r0, #0
 8000674:	4770      	bxne	lr
 8000676:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800067a:	d104      	bne.n	8000686 <__addsf3+0x126>
 800067c:	0040      	lsls	r0, r0, #1
 800067e:	bf28      	it	cs
 8000680:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000684:	4770      	bx	lr
 8000686:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800068a:	bf3c      	itt	cc
 800068c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000690:	4770      	bxcc	lr
 8000692:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000696:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800069a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800069e:	4770      	bx	lr
 80006a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006a4:	bf16      	itet	ne
 80006a6:	4608      	movne	r0, r1
 80006a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ac:	4601      	movne	r1, r0
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	bf06      	itte	eq
 80006b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006b6:	ea90 0f01 	teqeq	r0, r1
 80006ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006be:	4770      	bx	lr

080006c0 <__aeabi_ui2f>:
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e004      	b.n	80006d0 <__aeabi_i2f+0x8>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2f>:
 80006c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	bf48      	it	mi
 80006ce:	4240      	negmi	r0, r0
 80006d0:	ea5f 0c00 	movs.w	ip, r0
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006dc:	4601      	mov	r1, r0
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	e01c      	b.n	800071e <__aeabi_l2f+0x2a>

080006e4 <__aeabi_ul2f>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e00a      	b.n	8000708 <__aeabi_l2f+0x14>
 80006f2:	bf00      	nop

080006f4 <__aeabi_l2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000700:	d502      	bpl.n	8000708 <__aeabi_l2f+0x14>
 8000702:	4240      	negs	r0, r0
 8000704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000708:	ea5f 0c01 	movs.w	ip, r1
 800070c:	bf02      	ittt	eq
 800070e:	4684      	moveq	ip, r0
 8000710:	4601      	moveq	r1, r0
 8000712:	2000      	moveq	r0, #0
 8000714:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000718:	bf08      	it	eq
 800071a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800071e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000722:	fabc f28c 	clz	r2, ip
 8000726:	3a08      	subs	r2, #8
 8000728:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800072c:	db10      	blt.n	8000750 <__aeabi_l2f+0x5c>
 800072e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000732:	4463      	add	r3, ip
 8000734:	fa00 fc02 	lsl.w	ip, r0, r2
 8000738:	f1c2 0220 	rsb	r2, r2, #32
 800073c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000740:	fa20 f202 	lsr.w	r2, r0, r2
 8000744:	eb43 0002 	adc.w	r0, r3, r2
 8000748:	bf08      	it	eq
 800074a:	f020 0001 	biceq.w	r0, r0, #1
 800074e:	4770      	bx	lr
 8000750:	f102 0220 	add.w	r2, r2, #32
 8000754:	fa01 fc02 	lsl.w	ip, r1, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000760:	fa21 f202 	lsr.w	r2, r1, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800076e:	4770      	bx	lr

08000770 <__aeabi_fmul>:
 8000770:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000774:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000778:	bf1e      	ittt	ne
 800077a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800077e:	ea92 0f0c 	teqne	r2, ip
 8000782:	ea93 0f0c 	teqne	r3, ip
 8000786:	d06f      	beq.n	8000868 <__aeabi_fmul+0xf8>
 8000788:	441a      	add	r2, r3
 800078a:	ea80 0c01 	eor.w	ip, r0, r1
 800078e:	0240      	lsls	r0, r0, #9
 8000790:	bf18      	it	ne
 8000792:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000796:	d01e      	beq.n	80007d6 <__aeabi_fmul+0x66>
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007a4:	fba0 3101 	umull	r3, r1, r0, r1
 80007a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b0:	bf3e      	ittt	cc
 80007b2:	0049      	lslcc	r1, r1, #1
 80007b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007b8:	005b      	lslcc	r3, r3, #1
 80007ba:	ea40 0001 	orr.w	r0, r0, r1
 80007be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007c2:	2afd      	cmp	r2, #253	; 0xfd
 80007c4:	d81d      	bhi.n	8000802 <__aeabi_fmul+0x92>
 80007c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	4770      	bx	lr
 80007d6:	f090 0f00 	teq	r0, #0
 80007da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007de:	bf08      	it	eq
 80007e0:	0249      	lsleq	r1, r1, #9
 80007e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ea:	3a7f      	subs	r2, #127	; 0x7f
 80007ec:	bfc2      	ittt	gt
 80007ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007f6:	4770      	bxgt	lr
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	3a01      	subs	r2, #1
 8000802:	dc5d      	bgt.n	80008c0 <__aeabi_fmul+0x150>
 8000804:	f112 0f19 	cmn.w	r2, #25
 8000808:	bfdc      	itt	le
 800080a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800080e:	4770      	bxle	lr
 8000810:	f1c2 0200 	rsb	r2, r2, #0
 8000814:	0041      	lsls	r1, r0, #1
 8000816:	fa21 f102 	lsr.w	r1, r1, r2
 800081a:	f1c2 0220 	rsb	r2, r2, #32
 800081e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000822:	ea5f 0031 	movs.w	r0, r1, rrx
 8000826:	f140 0000 	adc.w	r0, r0, #0
 800082a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800082e:	bf08      	it	eq
 8000830:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000834:	4770      	bx	lr
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800083e:	bf02      	ittt	eq
 8000840:	0040      	lsleq	r0, r0, #1
 8000842:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000846:	3a01      	subeq	r2, #1
 8000848:	d0f9      	beq.n	800083e <__aeabi_fmul+0xce>
 800084a:	ea40 000c 	orr.w	r0, r0, ip
 800084e:	f093 0f00 	teq	r3, #0
 8000852:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000856:	bf02      	ittt	eq
 8000858:	0049      	lsleq	r1, r1, #1
 800085a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800085e:	3b01      	subeq	r3, #1
 8000860:	d0f9      	beq.n	8000856 <__aeabi_fmul+0xe6>
 8000862:	ea41 010c 	orr.w	r1, r1, ip
 8000866:	e78f      	b.n	8000788 <__aeabi_fmul+0x18>
 8000868:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800086c:	ea92 0f0c 	teq	r2, ip
 8000870:	bf18      	it	ne
 8000872:	ea93 0f0c 	teqne	r3, ip
 8000876:	d00a      	beq.n	800088e <__aeabi_fmul+0x11e>
 8000878:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800087c:	bf18      	it	ne
 800087e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000882:	d1d8      	bne.n	8000836 <__aeabi_fmul+0xc6>
 8000884:	ea80 0001 	eor.w	r0, r0, r1
 8000888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f090 0f00 	teq	r0, #0
 8000892:	bf17      	itett	ne
 8000894:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000898:	4608      	moveq	r0, r1
 800089a:	f091 0f00 	teqne	r1, #0
 800089e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008a2:	d014      	beq.n	80008ce <__aeabi_fmul+0x15e>
 80008a4:	ea92 0f0c 	teq	r2, ip
 80008a8:	d101      	bne.n	80008ae <__aeabi_fmul+0x13e>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d10f      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008ae:	ea93 0f0c 	teq	r3, ip
 80008b2:	d103      	bne.n	80008bc <__aeabi_fmul+0x14c>
 80008b4:	024b      	lsls	r3, r1, #9
 80008b6:	bf18      	it	ne
 80008b8:	4608      	movne	r0, r1
 80008ba:	d108      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008bc:	ea80 0001 	eor.w	r0, r0, r1
 80008c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bx	lr
 80008ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fdiv>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d069      	beq.n	80009c4 <__aeabi_fdiv+0xec>
 80008f0:	eba2 0203 	sub.w	r2, r2, r3
 80008f4:	ea80 0c01 	eor.w	ip, r0, r1
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008fe:	d037      	beq.n	8000970 <__aeabi_fdiv+0x98>
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000908:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800090c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000910:	428b      	cmp	r3, r1
 8000912:	bf38      	it	cc
 8000914:	005b      	lslcc	r3, r3, #1
 8000916:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800091a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800091e:	428b      	cmp	r3, r1
 8000920:	bf24      	itt	cs
 8000922:	1a5b      	subcs	r3, r3, r1
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800092c:	bf24      	itt	cs
 800092e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000932:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000936:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800093a:	bf24      	itt	cs
 800093c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000948:	bf24      	itt	cs
 800094a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800094e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	bf18      	it	ne
 8000956:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800095a:	d1e0      	bne.n	800091e <__aeabi_fdiv+0x46>
 800095c:	2afd      	cmp	r2, #253	; 0xfd
 800095e:	f63f af50 	bhi.w	8000802 <__aeabi_fmul+0x92>
 8000962:	428b      	cmp	r3, r1
 8000964:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000968:	bf08      	it	eq
 800096a:	f020 0001 	biceq.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000974:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000978:	327f      	adds	r2, #127	; 0x7f
 800097a:	bfc2      	ittt	gt
 800097c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000980:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000984:	4770      	bxgt	lr
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	3a01      	subs	r2, #1
 8000990:	e737      	b.n	8000802 <__aeabi_fmul+0x92>
 8000992:	f092 0f00 	teq	r2, #0
 8000996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800099a:	bf02      	ittt	eq
 800099c:	0040      	lsleq	r0, r0, #1
 800099e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009a2:	3a01      	subeq	r2, #1
 80009a4:	d0f9      	beq.n	800099a <__aeabi_fdiv+0xc2>
 80009a6:	ea40 000c 	orr.w	r0, r0, ip
 80009aa:	f093 0f00 	teq	r3, #0
 80009ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0049      	lsleq	r1, r1, #1
 80009b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ba:	3b01      	subeq	r3, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fdiv+0xda>
 80009be:	ea41 010c 	orr.w	r1, r1, ip
 80009c2:	e795      	b.n	80008f0 <__aeabi_fdiv+0x18>
 80009c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d108      	bne.n	80009e0 <__aeabi_fdiv+0x108>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	f47f af7d 	bne.w	80008ce <__aeabi_fmul+0x15e>
 80009d4:	ea93 0f0c 	teq	r3, ip
 80009d8:	f47f af70 	bne.w	80008bc <__aeabi_fmul+0x14c>
 80009dc:	4608      	mov	r0, r1
 80009de:	e776      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009e0:	ea93 0f0c 	teq	r3, ip
 80009e4:	d104      	bne.n	80009f0 <__aeabi_fdiv+0x118>
 80009e6:	024b      	lsls	r3, r1, #9
 80009e8:	f43f af4c 	beq.w	8000884 <__aeabi_fmul+0x114>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e76e      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f4:	bf18      	it	ne
 80009f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	d1ca      	bne.n	8000992 <__aeabi_fdiv+0xba>
 80009fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a00:	f47f af5c 	bne.w	80008bc <__aeabi_fmul+0x14c>
 8000a04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a08:	f47f af3c 	bne.w	8000884 <__aeabi_fmul+0x114>
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0x15e>
 8000a0e:	bf00      	nop

08000a10 <__gesf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295
 8000a14:	e006      	b.n	8000a24 <__cmpsf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__lesf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpsf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpsf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d011      	beq.n	8000a60 <__cmpsf2+0x40>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a42:	bf18      	it	ne
 8000a44:	ea90 0f01 	teqne	r0, r1
 8000a48:	bf58      	it	pl
 8000a4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a4e:	bf88      	it	hi
 8000a50:	17c8      	asrhi	r0, r1, #31
 8000a52:	bf38      	it	cc
 8000a54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a58:	bf18      	it	ne
 8000a5a:	f040 0001 	orrne.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	d102      	bne.n	8000a6c <__cmpsf2+0x4c>
 8000a66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a6a:	d105      	bne.n	8000a78 <__cmpsf2+0x58>
 8000a6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a70:	d1e4      	bne.n	8000a3c <__cmpsf2+0x1c>
 8000a72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a76:	d0e1      	beq.n	8000a3c <__cmpsf2+0x1c>
 8000a78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cfrcmple>:
 8000a80:	4684      	mov	ip, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4661      	mov	r1, ip
 8000a86:	e7ff      	b.n	8000a88 <__aeabi_cfcmpeq>

08000a88 <__aeabi_cfcmpeq>:
 8000a88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a8a:	f7ff ffc9 	bl	8000a20 <__cmpsf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a98 <__aeabi_fcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cfcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_fcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffd2 	bl	8000a80 <__aeabi_cfrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc8 	bl	8000a80 <__aeabi_cfrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_f2uiz>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	d20e      	bcs.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b04:	d30b      	bcc.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b0e:	d409      	bmi.n	8000b24 <__aeabi_f2uiz+0x28>
 8000b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2uiz+0x32>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_f2uiz+0x38>
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; MyOutputs->NControlErrorStatusShadow |= MyOutputs->NControlErrorStatus; }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000b46:	4a6c      	ldr	r2, [pc, #432]	; (8000cf8 <InitController+0x1bc>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000b4c:	4a6b      	ldr	r2, [pc, #428]	; (8000cfc <InitController+0x1c0>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6013      	str	r3, [r2, #0]

	// Multifunction

	// map map size
	outputs->NMultifunctionMaxPos[0] = MULTIFUNCTION01_MAX_POS;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	220e      	movs	r2, #14
 8000b56:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	outputs->NMultifunctionMaxPos[1] = MULTIFUNCTION02_MAX_POS;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	220e      	movs	r2, #14
 8000b5e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	outputs->NMultifunctionMaxPos[2] = MULTIFUNCTION03_MAX_POS;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	220d      	movs	r2, #13
 8000b66:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	outputs->NMultifunctionMaxPos[3] = MULTIFUNCTION04_MAX_POS;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	220e      	movs	r2, #14
 8000b6e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	outputs->NMultifunctionMaxPos[4] = MULTIFUNCTION05_MAX_POS;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	220d      	movs	r2, #13
 8000b76:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	outputs->NMultifunctionMaxPos[5] = MULTIFUNCTION06_MAX_POS;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	outputs->NMultifunctionMaxPos[6] = MULTIFUNCTION07_MAX_POS;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2203      	movs	r2, #3
 8000b86:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	outputs->NMultifunctionMaxPos[7] = MULTIFUNCTION08_MAX_POS;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	outputs->NMultifunctionMaxPos[8] = MULTIFUNCTION09_MAX_POS;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	220e      	movs	r2, #14
 8000b96:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	outputs->NMultifunctionMaxPos[9] = MULTIFUNCTION10_MAX_POS;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	220e      	movs	r2, #14
 8000b9e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	outputs->NMultifunctionMaxPos[10] = MULTIFUNCTION11_MAX_POS;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	220e      	movs	r2, #14
 8000ba6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	outputs->NMultifunctionMaxPos[11] = MULTIFUNCTION12_MAX_POS;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	220e      	movs	r2, #14
 8000bae:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	outputs->NMultifunctionMaxPos[12] = MULTIFUNCTION13_MAX_POS;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	220e      	movs	r2, #14
 8000bb6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	outputs->NMultifunctionMaxPos[13] = MULTIFUNCTION13_MAX_POS;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	220e      	movs	r2, #14
 8000bbe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

	// default values
	outputs->NMultifunctionDefMask[0] = (MULTIFUNCTION01_DEF_POS <= MULTIFUNCTION01_MAX_POS ? MULTIFUNCTION01_DEF_POS : MULTIFUNCTION01_MAX_POS);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	outputs->NMultifunctionDefMask[1] = (MULTIFUNCTION02_DEF_POS <= MULTIFUNCTION02_MAX_POS ? MULTIFUNCTION02_DEF_POS : MULTIFUNCTION02_MAX_POS);;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	outputs->NMultifunctionDefMask[2] = (MULTIFUNCTION03_DEF_POS <= MULTIFUNCTION03_MAX_POS ? MULTIFUNCTION03_DEF_POS : MULTIFUNCTION03_MAX_POS);;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	outputs->NMultifunctionDefMask[3] = (MULTIFUNCTION04_DEF_POS <= MULTIFUNCTION04_MAX_POS ? MULTIFUNCTION04_DEF_POS : MULTIFUNCTION04_MAX_POS);;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	outputs->NMultifunctionDefMask[4] = (MULTIFUNCTION05_DEF_POS <= MULTIFUNCTION05_MAX_POS ? MULTIFUNCTION05_DEF_POS : MULTIFUNCTION05_MAX_POS);;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	2207      	movs	r2, #7
 8000be6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	outputs->NMultifunctionDefMask[5] = (MULTIFUNCTION06_DEF_POS <= MULTIFUNCTION06_MAX_POS ? MULTIFUNCTION06_DEF_POS : MULTIFUNCTION06_MAX_POS);;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	outputs->NMultifunctionDefMask[6] = (MULTIFUNCTION07_DEF_POS <= MULTIFUNCTION07_MAX_POS ? MULTIFUNCTION07_DEF_POS : MULTIFUNCTION07_MAX_POS);;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	outputs->NMultifunctionDefMask[7] = (MULTIFUNCTION08_DEF_POS <= MULTIFUNCTION08_MAX_POS ? MULTIFUNCTION08_DEF_POS : MULTIFUNCTION08_MAX_POS);;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	outputs->NMultifunctionDefMask[8] = (MULTIFUNCTION09_DEF_POS <= MULTIFUNCTION09_MAX_POS ? MULTIFUNCTION09_DEF_POS : MULTIFUNCTION09_MAX_POS);;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	outputs->NMultifunctionDefMask[9] = (MULTIFUNCTION10_DEF_POS <= MULTIFUNCTION10_MAX_POS ? MULTIFUNCTION10_DEF_POS : MULTIFUNCTION10_MAX_POS);;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	outputs->NMultifunctionDefMask[10] = (MULTIFUNCTION11_DEF_POS <= MULTIFUNCTION11_MAX_POS ? MULTIFUNCTION11_DEF_POS : MULTIFUNCTION11_MAX_POS);;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	outputs->NMultifunctionDefMask[11] = (MULTIFUNCTION12_DEF_POS <= MULTIFUNCTION12_MAX_POS ? MULTIFUNCTION12_DEF_POS : MULTIFUNCTION12_MAX_POS);;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	outputs->NMultifunctionDefMask[12] = (MULTIFUNCTION13_DEF_POS <= MULTIFUNCTION13_MAX_POS ? MULTIFUNCTION13_DEF_POS : MULTIFUNCTION13_MAX_POS);;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	outputs->NMultifunctionDefMask[13] = (MULTIFUNCTION14_DEF_POS <= MULTIFUNCTION14_MAX_POS ? MULTIFUNCTION14_DEF_POS : MULTIFUNCTION14_MAX_POS);;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

	// wrapping
	outputs->BMultifunctionWrap[0] = MULTIFUNCTION01_WRAP;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	outputs->BMultifunctionWrap[1] = MULTIFUNCTION02_WRAP;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	outputs->BMultifunctionWrap[2] = MULTIFUNCTION03_WRAP;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	outputs->BMultifunctionWrap[3] = MULTIFUNCTION04_WRAP;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	outputs->BMultifunctionWrap[4] = MULTIFUNCTION05_WRAP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	outputs->BMultifunctionWrap[5] = MULTIFUNCTION06_WRAP;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	outputs->BMultifunctionWrap[6] = MULTIFUNCTION07_WRAP;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	outputs->BMultifunctionWrap[7] = MULTIFUNCTION08_WRAP;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	outputs->BMultifunctionWrap[8] = MULTIFUNCTION09_WRAP;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	outputs->BMultifunctionWrap[9] = MULTIFUNCTION10_WRAP;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	outputs->BMultifunctionWrap[10] = MULTIFUNCTION11_WRAP;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2201      	movs	r2, #1
 8000c86:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	outputs->BMultifunctionWrap[11] = MULTIFUNCTION12_WRAP;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	outputs->BMultifunctionWrap[12] = MULTIFUNCTION13_WRAP;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	outputs->BMultifunctionWrap[13] = MULTIFUNCTION13_WRAP;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86


	NMultifunctionActiveSwitchPrev = MyInputs->NSwitchA;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <InitController+0x1bc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <InitController+0x1c4>)
 8000cac:	701a      	strb	r2, [r3, #0]

	// set the current positions to default
	for(uint8_t i=0; i<NMF; i++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e00e      	b.n	8000cd2 <InitController+0x196>
		outputs->NMultifunction[i] = outputs->NMultifunctionDefMask[i];
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	b251      	sxtb	r1, r2
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	for(uint8_t i=0; i<NMF; i++) {
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	2b0d      	cmp	r3, #13
 8000cd6:	d9ed      	bls.n	8000cb4 <InitController+0x178>
	}

	// we initialize the min & max clutch targets, later they can be modified with the multifunction
	MyOutputs->xClutchTargetMin = CLUTCH_TARGET_MIN_DEF;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <InitController+0x1c0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
	MyOutputs->xClutchTargetMax = CLUTCH_TARGET_MAX_DEF;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <InitController+0x1c0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <InitController+0x1c8>)
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24

	IDLE_Entry();
 8000cea:	f000 fe73 	bl	80019d4 <IDLE_Entry>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000014c 	.word	0x2000014c
 8000cfc:	20000134 	.word	0x20000134
 8000d00:	2000011c 	.word	0x2000011c
 8000d04:	40a00000 	.word	0x40a00000

08000d08 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b087      	sub	sp, #28
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 8000d12:	f003 fd7b 	bl	800480c <HAL_GetTick>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a87      	ldr	r2, [pc, #540]	; (8000f38 <Controller+0x230>)
 8000d1a:	6013      	str	r3, [r2, #0]
	// ANTISTALL

		#ifdef ANTISTALL_ENABLED

			// if the shut down is activated and we are at gear greater than neutral we can enter
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError && !MyOutputs->BShiftInProgress && !MyInputs->BFalseNeutral) {
 8000d1c:	4b87      	ldr	r3, [pc, #540]	; (8000f3c <Controller+0x234>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f040 80a5 	bne.w	8000e74 <Controller+0x16c>
 8000d2a:	4b84      	ldr	r3, [pc, #528]	; (8000f3c <Controller+0x234>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 809e 	beq.w	8000e74 <Controller+0x16c>
 8000d38:	4b80      	ldr	r3, [pc, #512]	; (8000f3c <Controller+0x234>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f040 8097 	bne.w	8000e74 <Controller+0x16c>
 8000d46:	4b7d      	ldr	r3, [pc, #500]	; (8000f3c <Controller+0x234>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8090 	bne.w	8000e74 <Controller+0x16c>
 8000d54:	4b7a      	ldr	r3, [pc, #488]	; (8000f40 <Controller+0x238>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f040 8089 	bne.w	8000e74 <Controller+0x16c>
 8000d62:	4b76      	ldr	r3, [pc, #472]	; (8000f3c <Controller+0x234>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8082 	bne.w	8000e74 <Controller+0x16c>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8000d70:	4b73      	ldr	r3, [pc, #460]	; (8000f40 <Controller+0x238>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d03d      	beq.n	8000df8 <Controller+0xf0>
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <Controller+0x234>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b6d      	ldr	r3, [pc, #436]	; (8000f3c <Controller+0x234>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4b6c      	ldr	r3, [pc, #432]	; (8000f44 <Controller+0x23c>)
 8000d92:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	dc2e      	bgt.n	8000df8 <Controller+0xf0>
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <Controller+0x234>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000da2:	2b27      	cmp	r3, #39	; 0x27
 8000da4:	dc28      	bgt.n	8000df8 <Controller+0xf0>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 8000da6:	4b66      	ldr	r3, [pc, #408]	; (8000f40 <Controller+0x238>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d109      	bne.n	8000dc6 <Controller+0xbe>
						MyOutputs->NAntistallState = Init;
 8000db2:	4b63      	ldr	r3, [pc, #396]	; (8000f40 <Controller+0x238>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2201      	movs	r2, #1
 8000db8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
						tAntistallTimmer = HAL_GetTick();
 8000dbc:	f003 fd26 	bl	800480c <HAL_GetTick>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a61      	ldr	r2, [pc, #388]	; (8000f48 <Controller+0x240>)
 8000dc4:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8000dc6:	4b5e      	ldr	r3, [pc, #376]	; (8000f40 <Controller+0x238>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d112      	bne.n	8000df8 <Controller+0xf0>
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <Controller+0x240>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000dda:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <Controller+0x230>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d20a      	bcs.n	8000df8 <Controller+0xf0>
						MyOutputs->NAntistallState = Active;
 8000de2:	4b57      	ldr	r3, [pc, #348]	; (8000f40 <Controller+0x238>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2202      	movs	r2, #2
 8000de8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
						MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMax;
 8000dec:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <Controller+0x238>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <Controller+0x238>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000df6:	609a      	str	r2, [r3, #8]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8000df8:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <Controller+0x238>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d11f      	bne.n	8000e44 <Controller+0x13c>
 8000e04:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <Controller+0x234>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <Controller+0x234>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e16:	4619      	mov	r1, r3
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <Controller+0x23c>)
 8000e1a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	dc05      	bgt.n	8000e2e <Controller+0x126>
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <Controller+0x234>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000e2a:	2b5f      	cmp	r3, #95	; 0x5f
 8000e2c:	dd0a      	ble.n	8000e44 <Controller+0x13c>
					MyOutputs->NAntistallState = Off;
 8000e2e:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <Controller+0x238>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
					MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMin;
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <Controller+0x238>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <Controller+0x238>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6a12      	ldr	r2, [r2, #32]
 8000e42:	609a      	str	r2, [r3, #8]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e44:	4b3e      	ldr	r3, [pc, #248]	; (8000f40 <Controller+0x238>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d11d      	bne.n	8000e8c <Controller+0x184>
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <Controller+0x234>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000e58:	2b5f      	cmp	r3, #95	; 0x5f
 8000e5a:	dd17      	ble.n	8000e8c <Controller+0x184>
					MyOutputs->NAntistallState = Off;
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <Controller+0x238>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
					MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMin;
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <Controller+0x238>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <Controller+0x238>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a12      	ldr	r2, [r2, #32]
 8000e70:	609a      	str	r2, [r3, #8]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e72:	e00b      	b.n	8000e8c <Controller+0x184>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <Controller+0x238>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
				MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMin;
 8000e7e:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <Controller+0x238>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <Controller+0x238>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6a12      	ldr	r2, [r2, #32]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	e000      	b.n	8000e8e <Controller+0x186>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e8c:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <Controller+0x234>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 80ac 	bne.w	8000ff4 <Controller+0x2ec>

			// we select the clutch paddle map based on the map index of the multifunction and copy it to the local array
			memcpy((float*)rClutchPaddle_xClutchTargetMap[1], (float*)rClutchPaddle_xClutchTargetMaps[MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_MAP_IDX-1]], CLUTCH_PADDLE_TARGET_MAP_SIZE);
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <Controller+0x238>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	232c      	movs	r3, #44	; 0x2c
 8000ea8:	fb03 f302 	mul.w	r3, r3, r2
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <Controller+0x244>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	220b      	movs	r2, #11
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4826      	ldr	r0, [pc, #152]	; (8000f50 <Controller+0x248>)
 8000eb6:	f007 fb1d 	bl	80084f4 <memcpy>

			// we dynamically refine the clutch map
			for(uint8_t i=0; i<CLUTCH_PADDLE_TARGET_MAP_SIZE; i++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e061      	b.n	8000f84 <Controller+0x27c>

				// we clamp the xClutchTargetMap, to keep it inside the the min & max limits (dynamic) and
				rClutchPaddle_xClutchTargetMap[1][i] = CLAMP(rClutchPaddle_xClutchTargetMap[1][i], MyOutputs->xClutchTargetMin, MyOutputs->xClutchTargetMax);
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	4a24      	ldr	r2, [pc, #144]	; (8000f54 <Controller+0x24c>)
 8000ec4:	330b      	adds	r3, #11
 8000ec6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <Controller+0x238>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	f7ff fe08 	bl	8000ae8 <__aeabi_fcmpgt>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d005      	beq.n	8000eea <Controller+0x1e2>
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <Controller+0x24c>)
 8000ee2:	330b      	adds	r3, #11
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	e002      	b.n	8000ef0 <Controller+0x1e8>
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <Controller+0x238>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <Controller+0x238>)
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fdd7 	bl	8000aac <__aeabi_fcmplt>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d029      	beq.n	8000f58 <Controller+0x250>
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <Controller+0x24c>)
 8000f08:	330b      	adds	r3, #11
 8000f0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <Controller+0x238>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f7ff fde6 	bl	8000ae8 <__aeabi_fcmpgt>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <Controller+0x226>
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <Controller+0x24c>)
 8000f26:	330b      	adds	r3, #11
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	e017      	b.n	8000f5e <Controller+0x256>
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <Controller+0x238>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	e013      	b.n	8000f5e <Controller+0x256>
 8000f36:	bf00      	nop
 8000f38:	20000138 	.word	0x20000138
 8000f3c:	2000014c 	.word	0x2000014c
 8000f40:	20000134 	.word	0x20000134
 8000f44:	0800913c 	.word	0x0800913c
 8000f48:	2000013c 	.word	0x2000013c
 8000f4c:	08008e40 	.word	0x08008e40
 8000f50:	2000002c 	.word	0x2000002c
 8000f54:	20000000 	.word	0x20000000
 8000f58:	4b73      	ldr	r3, [pc, #460]	; (8001128 <Controller+0x420>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	4972      	ldr	r1, [pc, #456]	; (800112c <Controller+0x424>)
 8000f62:	320b      	adds	r2, #11
 8000f64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

				// we force the last element to the max clutch aperture
				if(i == CLUTCH_PADDLE_TARGET_MAP_SIZE-1) rClutchPaddle_xClutchTargetMap[1][i] = MyOutputs->xClutchTargetMax;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b0a      	cmp	r3, #10
 8000f6c:	d107      	bne.n	8000f7e <Controller+0x276>
 8000f6e:	4b6e      	ldr	r3, [pc, #440]	; (8001128 <Controller+0x420>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f76:	496d      	ldr	r1, [pc, #436]	; (800112c <Controller+0x424>)
 8000f78:	330b      	adds	r3, #11
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(uint8_t i=0; i<CLUTCH_PADDLE_TARGET_MAP_SIZE; i++) {
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d99a      	bls.n	8000ec0 <Controller+0x1b8>
			}

			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8000f8a:	4b69      	ldr	r3, [pc, #420]	; (8001130 <Controller+0x428>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb98 	bl	80006c8 <__aeabi_i2f>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b63      	ldr	r3, [pc, #396]	; (8001128 <Controller+0x420>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	330c      	adds	r3, #12
 8000fa0:	f04f 0100 	mov.w	r1, #0
 8000fa4:	9101      	str	r1, [sp, #4]
 8000fa6:	f04f 0100 	mov.w	r1, #0
 8000faa:	9100      	str	r1, [sp, #0]
 8000fac:	495f      	ldr	r1, [pc, #380]	; (800112c <Controller+0x424>)
 8000fae:	200b      	movs	r0, #11
 8000fb0:	f003 fb02 	bl	80045b8 <My2DMapInterpolate>

			// we apply the  clutch paddle offset from the multifunction (inside the desired rClutchPaddle window)
			if(MyInputs->rClutchPaddle >= CLUTCH_PADDLE_ALLOW_OFFSET_MIN && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_ALLOW_OFFSET_MAX) {
 8000fb4:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <Controller+0x428>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	dd1f      	ble.n	8001000 <Controller+0x2f8>
 8000fc0:	4b5b      	ldr	r3, [pc, #364]	; (8001130 <Controller+0x428>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000fc8:	2b5f      	cmp	r3, #95	; 0x5f
 8000fca:	dc19      	bgt.n	8001000 <Controller+0x2f8>
				MyOutputs->xClutchTargetManual *= rClutchPaddle_xClutchTargetOffsetMaps[MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_OFFSET_IDX-1]];
 8000fcc:	4b56      	ldr	r3, [pc, #344]	; (8001128 <Controller+0x420>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b55      	ldr	r3, [pc, #340]	; (8001128 <Controller+0x420>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4b55      	ldr	r3, [pc, #340]	; (8001134 <Controller+0x42c>)
 8000fde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fe2:	4951      	ldr	r1, [pc, #324]	; (8001128 <Controller+0x420>)
 8000fe4:	680c      	ldr	r4, [r1, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4610      	mov	r0, r2
 8000fea:	f7ff fbc1 	bl	8000770 <__aeabi_fmul>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60e3      	str	r3, [r4, #12]
 8000ff2:	e005      	b.n	8001000 <Controller+0x2f8>

			// TODO: terminate potential array timed control that runs below

		}
		else {
			MyOutputs->xClutchTargetManual = MyOutputs->xClutchTargetMin;
 8000ff4:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <Controller+0x420>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <Controller+0x420>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a12      	ldr	r2, [r2, #32]
 8000ffe:	60da      	str	r2, [r3, #12]
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the one request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MAX(MAX(MyOutputs->xClutchTargetProtection, MAX(MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift)), MyOutputs->xClutchTargetMax);
 8001000:	4b49      	ldr	r3, [pc, #292]	; (8001128 <Controller+0x420>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689c      	ldr	r4, [r3, #8]
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <Controller+0x420>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	4b46      	ldr	r3, [pc, #280]	; (8001128 <Controller+0x420>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f7ff fd67 	bl	8000ae8 <__aeabi_fcmpgt>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <Controller+0x320>
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <Controller+0x420>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	e002      	b.n	800102e <Controller+0x326>
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <Controller+0x420>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	4621      	mov	r1, r4
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fd3b 	bl	8000aac <__aeabi_fcmplt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <Controller+0x33c>
 800103c:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <Controller+0x420>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	e013      	b.n	800106c <Controller+0x364>
 8001044:	4b38      	ldr	r3, [pc, #224]	; (8001128 <Controller+0x420>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <Controller+0x420>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4619      	mov	r1, r3
 8001052:	4610      	mov	r0, r2
 8001054:	f7ff fd48 	bl	8000ae8 <__aeabi_fcmpgt>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <Controller+0x35e>
 800105e:	4b32      	ldr	r3, [pc, #200]	; (8001128 <Controller+0x420>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	e002      	b.n	800106c <Controller+0x364>
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <Controller+0x420>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <Controller+0x420>)
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fd37 	bl	8000ae8 <__aeabi_fcmpgt>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d036      	beq.n	80010ee <Controller+0x3e6>
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <Controller+0x420>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689c      	ldr	r4, [r3, #8]
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <Controller+0x420>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <Controller+0x420>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff fd27 	bl	8000ae8 <__aeabi_fcmpgt>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <Controller+0x3a0>
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <Controller+0x420>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	e002      	b.n	80010ae <Controller+0x3a6>
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <Controller+0x420>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	4621      	mov	r1, r4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fcfb 	bl	8000aac <__aeabi_fcmplt>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <Controller+0x3bc>
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <Controller+0x420>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	e017      	b.n	80010f4 <Controller+0x3ec>
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <Controller+0x420>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <Controller+0x420>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4610      	mov	r0, r2
 80010d4:	f7ff fd08 	bl	8000ae8 <__aeabi_fcmpgt>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <Controller+0x3de>
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <Controller+0x420>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	e006      	b.n	80010f4 <Controller+0x3ec>
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <Controller+0x420>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	e002      	b.n	80010f4 <Controller+0x3ec>
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <Controller+0x420>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <Controller+0x420>)
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	6193      	str	r3, [r2, #24]
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES

		// Toggle 1
		if(TOGGLE_SWITCH01_BUTTON && tToggleSwitch01 < tControllerTimmer) {
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001100:	2b00      	cmp	r3, #0
 8001102:	d033      	beq.n	800116c <Controller+0x464>
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <Controller+0x430>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <Controller+0x434>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d22d      	bcs.n	800116c <Controller+0x464>
			if(!MyOutputs->NToggleSwitch01State) {
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <Controller+0x420>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001118:	2b00      	cmp	r3, #0
 800111a:	d111      	bne.n	8001140 <Controller+0x438>
				MyOutputs->NToggleSwitch01State = 1;
 800111c:	4b02      	ldr	r3, [pc, #8]	; (8001128 <Controller+0x420>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001126:	e010      	b.n	800114a <Controller+0x442>
 8001128:	20000134 	.word	0x20000134
 800112c:	20000000 	.word	0x20000000
 8001130:	2000014c 	.word	0x2000014c
 8001134:	080090a8 	.word	0x080090a8
 8001138:	20000114 	.word	0x20000114
 800113c:	20000138 	.word	0x20000138

				// Actions for toggle ON
				// remember the multifunction override
			}
			else {
				MyOutputs->NToggleSwitch01State = 0;
 8001140:	4b85      	ldr	r3, [pc, #532]	; (8001358 <Controller+0x650>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				// Actions for toggle OFF
				// remember the multifunction override

			}

			MyOutputs->NToggleSwitch01State ^= 1;
 800114a:	4b83      	ldr	r3, [pc, #524]	; (8001358 <Controller+0x650>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001152:	4b81      	ldr	r3, [pc, #516]	; (8001358 <Controller+0x650>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f082 0201 	eor.w	r2, r2, #1
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			tToggleSwitch01 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001160:	4b7e      	ldr	r3, [pc, #504]	; (800135c <Controller+0x654>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001168:	4a7d      	ldr	r2, [pc, #500]	; (8001360 <Controller+0x658>)
 800116a:	6013      	str	r3, [r2, #0]
		}

		// Toggle 2
		if(TOGGLE_SWITCH02_BUTTON && tToggleSwitch02 < tControllerTimmer) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001172:	2b00      	cmp	r3, #0
 8001174:	d016      	beq.n	80011a4 <Controller+0x49c>
 8001176:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <Controller+0x65c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b78      	ldr	r3, [pc, #480]	; (800135c <Controller+0x654>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d210      	bcs.n	80011a4 <Controller+0x49c>
			MyOutputs->NToggleSwitch02State ^= 1;
 8001182:	4b75      	ldr	r3, [pc, #468]	; (8001358 <Controller+0x650>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800118a:	4b73      	ldr	r3, [pc, #460]	; (8001358 <Controller+0x650>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f082 0201 	eor.w	r2, r2, #1
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			tToggleSwitch02 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001198:	4b70      	ldr	r3, [pc, #448]	; (800135c <Controller+0x654>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011a0:	4a70      	ldr	r2, [pc, #448]	; (8001364 <Controller+0x65c>)
 80011a2:	6013      	str	r3, [r2, #0]
		}

		// Toggle 3
		if(TOGGLE_SWITCH03_BUTTON && tToggleSwitch03 < tControllerTimmer) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d016      	beq.n	80011dc <Controller+0x4d4>
 80011ae:	4b6e      	ldr	r3, [pc, #440]	; (8001368 <Controller+0x660>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b6a      	ldr	r3, [pc, #424]	; (800135c <Controller+0x654>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d210      	bcs.n	80011dc <Controller+0x4d4>
			MyOutputs->NToggleSwitch03State ^= 1;
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <Controller+0x650>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80011c2:	4b65      	ldr	r3, [pc, #404]	; (8001358 <Controller+0x650>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f082 0201 	eor.w	r2, r2, #1
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			tToggleSwitch03 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <Controller+0x654>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80011d8:	4a63      	ldr	r2, [pc, #396]	; (8001368 <Controller+0x660>)
 80011da:	6013      	str	r3, [r2, #0]
	//		inputs->NToggleSwitch04State ^= 1;
	//		tToggleSwitch04 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
	//	}


		MyOutputs->BSWLEDA = MyOutputs->NToggleSwitch01State;
 80011dc:	4b5e      	ldr	r3, [pc, #376]	; (8001358 <Controller+0x650>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <Controller+0x650>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 80011e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		MyOutputs->BSWLEDB = MyOutputs->NToggleSwitch02State;
 80011ec:	4b5a      	ldr	r3, [pc, #360]	; (8001358 <Controller+0x650>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b59      	ldr	r3, [pc, #356]	; (8001358 <Controller+0x650>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80011f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		MyOutputs->BSWLEDC = MyOutputs->NToggleSwitch03State;
 80011fc:	4b56      	ldr	r3, [pc, #344]	; (8001358 <Controller+0x650>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b55      	ldr	r3, [pc, #340]	; (8001358 <Controller+0x650>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8001208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// MULTIFUNCTION

		// inputs
		MyOutputs->NMultifunctionActiveSwitch = MyInputs->NSwitchA;
 800120c:	4b57      	ldr	r3, [pc, #348]	; (800136c <Controller+0x664>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b51      	ldr	r3, [pc, #324]	; (8001358 <Controller+0x650>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 8001218:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		MyOutputs->BMultifunctionNextPos = MULTIFUNCTION_NEXT_BUTTON;
 800121c:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <Controller+0x650>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 8001226:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		MyOutputs->BMultifunctionPrevPos = MULTIFUNCTION_PREV_BUTTON;
 800122a:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <Controller+0x650>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	f892 2069 	ldrb.w	r2, [r2, #105]	; 0x69
 8001234:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

		if(MyOutputs->NMultifunctionActiveSwitch != NMultifunctionActiveSwitchPrev) {
 8001238:	4b47      	ldr	r3, [pc, #284]	; (8001358 <Controller+0x650>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <Controller+0x668>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d027      	beq.n	8001298 <Controller+0x590>
			NMultifunctionActiveSwitchPrev = MyOutputs->NMultifunctionActiveSwitch;
 8001248:	4b43      	ldr	r3, [pc, #268]	; (8001358 <Controller+0x650>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <Controller+0x668>)
 8001252:	701a      	strb	r2, [r3, #0]
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <Controller+0x654>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <Controller+0x650>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8001260:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			MyOutputs->BUseButtonsForMultifunction = 1;
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <Controller+0x650>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			NMFIdx = MyOutputs->NMultifunctionActiveSwitch - 1;	// to go from 1-14 to 0-13 indexing for the arrays
 800126e:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <Controller+0x650>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001276:	3b01      	subs	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <Controller+0x66c>)
 800127c:	701a      	strb	r2, [r3, #0]

			MyOutputs->NDispalyPagePrev = MyOutputs->NDispalyPage;	// we save and change the page number here
 800127e:	4b36      	ldr	r3, [pc, #216]	; (8001358 <Controller+0x650>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <Controller+0x650>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f992 204b 	ldrsb.w	r2, [r2, #75]	; 0x4b
 800128a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			MyOutputs->NDispalyPage = DISPLAY_MULTIFUNCTION_PAGE;
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <Controller+0x650>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2206      	movs	r2, #6
 8001294:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		}

		// + Button (next position)
		if(MyOutputs->BMultifunctionNextPos && (MyOutputs->tMultifunctionActiveOnRot >= tControllerTimmer || ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) && !MyOutputs->BMultifunctionNextPosState) {
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <Controller+0x650>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d04d      	beq.n	8001340 <Controller+0x638>
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <Controller+0x650>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <Controller+0x654>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d345      	bcc.n	8001340 <Controller+0x638>
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <Controller+0x650>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d13f      	bne.n	8001340 <Controller+0x638>
			MyOutputs->BMultifunctionNextPosState = 1;
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <Controller+0x650>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <Controller+0x654>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <Controller+0x650>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80012d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <Controller+0x650>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a25      	ldr	r2, [pc, #148]	; (8001374 <Controller+0x66c>)
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <Controller+0x650>)
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	4921      	ldr	r1, [pc, #132]	; (8001374 <Controller+0x66c>)
 80012f0:	7809      	ldrb	r1, [r1, #0]
 80012f2:	440a      	add	r2, r1
 80012f4:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
 80012f8:	4293      	cmp	r3, r2
 80012fa:	db11      	blt.n	8001320 <Controller+0x618>
				if(MyOutputs->BMultifunctionWrap[NMFIdx]) MyOutputs->NMultifunction[NMFIdx] = 0;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <Controller+0x650>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <Controller+0x66c>)
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	4413      	add	r3, r2
 8001306:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800130a:	2b00      	cmp	r3, #0
 800130c:	d034      	beq.n	8001378 <Controller+0x670>
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <Controller+0x650>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <Controller+0x66c>)
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 800131e:	e02b      	b.n	8001378 <Controller+0x670>
			}
			else {
				MyOutputs->NMultifunction[NMFIdx] ++;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <Controller+0x650>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <Controller+0x66c>)
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	1899      	adds	r1, r3, r2
 800132a:	f991 106b 	ldrsb.w	r1, [r1, #107]	; 0x6b
 800132e:	b2c9      	uxtb	r1, r1
 8001330:	3101      	adds	r1, #1
 8001332:	b2c9      	uxtb	r1, r1
 8001334:	b249      	sxtb	r1, r1
 8001336:	4413      	add	r3, r2
 8001338:	460a      	mov	r2, r1
 800133a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 800133e:	e01b      	b.n	8001378 <Controller+0x670>
			}
		}
		else if(!MyOutputs->BMultifunctionNextPos) {
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <Controller+0x650>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001348:	2b00      	cmp	r3, #0
 800134a:	d116      	bne.n	800137a <Controller+0x672>
			MyOutputs->BMultifunctionNextPosState = 0;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <Controller+0x650>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8001356:	e010      	b.n	800137a <Controller+0x672>
 8001358:	20000134 	.word	0x20000134
 800135c:	20000138 	.word	0x20000138
 8001360:	20000114 	.word	0x20000114
 8001364:	20000140 	.word	0x20000140
 8001368:	20000108 	.word	0x20000108
 800136c:	2000014c 	.word	0x2000014c
 8001370:	2000011c 	.word	0x2000011c
 8001374:	20000148 	.word	0x20000148
			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 8001378:	bf00      	nop
		}
		// - Button (previous position)
		if(MyOutputs->BMultifunctionPrevPos && (MyOutputs->tMultifunctionActiveOnRot >= tControllerTimmer || ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) && !MyOutputs->BMultifunctionPrevPosState) {
 800137a:	4b9a      	ldr	r3, [pc, #616]	; (80015e4 <Controller+0x8dc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001382:	2b00      	cmp	r3, #0
 8001384:	d04f      	beq.n	8001426 <Controller+0x71e>
 8001386:	4b97      	ldr	r3, [pc, #604]	; (80015e4 <Controller+0x8dc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800138e:	4b96      	ldr	r3, [pc, #600]	; (80015e8 <Controller+0x8e0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d347      	bcc.n	8001426 <Controller+0x71e>
 8001396:	4b93      	ldr	r3, [pc, #588]	; (80015e4 <Controller+0x8dc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d141      	bne.n	8001426 <Controller+0x71e>
			MyOutputs->BMultifunctionPrevPosState = 1;
 80013a2:	4b90      	ldr	r3, [pc, #576]	; (80015e4 <Controller+0x8dc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 80013ac:	4b8e      	ldr	r3, [pc, #568]	; (80015e8 <Controller+0x8e0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b8c      	ldr	r3, [pc, #560]	; (80015e4 <Controller+0x8dc>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80013b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 80013bc:	4b89      	ldr	r3, [pc, #548]	; (80015e4 <Controller+0x8dc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a8a      	ldr	r2, [pc, #552]	; (80015ec <Controller+0x8e4>)
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dc1b      	bgt.n	8001406 <Controller+0x6fe>
				if(MyOutputs->BMultifunctionWrap[NMFIdx]) MyOutputs->NMultifunction[NMFIdx] = MyOutputs->NMultifunctionMaxPos[NMFIdx] - 1;
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <Controller+0x8dc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a86      	ldr	r2, [pc, #536]	; (80015ec <Controller+0x8e4>)
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02e      	beq.n	800143e <Controller+0x736>
 80013e0:	4b80      	ldr	r3, [pc, #512]	; (80015e4 <Controller+0x8dc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a81      	ldr	r2, [pc, #516]	; (80015ec <Controller+0x8e4>)
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b2d8      	uxtb	r0, r3
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <Controller+0x8dc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7d      	ldr	r2, [pc, #500]	; (80015ec <Controller+0x8e4>)
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	4611      	mov	r1, r2
 80013fc:	b242      	sxtb	r2, r0
 80013fe:	440b      	add	r3, r1
 8001400:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 8001404:	e01b      	b.n	800143e <Controller+0x736>
			}
			else {
				MyOutputs->NMultifunction[NMFIdx] --;
 8001406:	4b77      	ldr	r3, [pc, #476]	; (80015e4 <Controller+0x8dc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a78      	ldr	r2, [pc, #480]	; (80015ec <Controller+0x8e4>)
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	1899      	adds	r1, r3, r2
 8001410:	f991 106b 	ldrsb.w	r1, [r1, #107]	; 0x6b
 8001414:	b2c9      	uxtb	r1, r1
 8001416:	3901      	subs	r1, #1
 8001418:	b2c9      	uxtb	r1, r1
 800141a:	b249      	sxtb	r1, r1
 800141c:	4413      	add	r3, r2
 800141e:	460a      	mov	r2, r1
 8001420:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 8001424:	e00b      	b.n	800143e <Controller+0x736>
			}
		}
		else if(!MyOutputs->BMultifunctionPrevPos) {
 8001426:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <Controller+0x8dc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <Controller+0x738>
			MyOutputs->BMultifunctionPrevPosState = 0;
 8001432:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <Controller+0x8dc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800143c:	e000      	b.n	8001440 <Controller+0x738>
			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 800143e:	bf00      	nop
		}

		if(MyOutputs->tMultifunctionActiveOnRot < tControllerTimmer) {
 8001440:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <Controller+0x8dc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001448:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <Controller+0x8e0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d20c      	bcs.n	800146a <Controller+0x762>
			MyOutputs->BUseButtonsForMultifunction = 0;
 8001450:	4b64      	ldr	r3, [pc, #400]	; (80015e4 <Controller+0x8dc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			// here we return to the actual page
			MyOutputs->NDispalyPage = MyOutputs->NDispalyPagePrev;
 800145a:	4b62      	ldr	r3, [pc, #392]	; (80015e4 <Controller+0x8dc>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <Controller+0x8dc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f992 204c 	ldrsb.w	r2, [r2, #76]	; 0x4c
 8001466:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		}


		// Here we assign the various multifunction maps to the various indexes
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_TARGET_MAX_IDX-1]) MyOutputs->xClutchTargetMax = xClutchTargetMaxMap[MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_TARGET_MAX_IDX-1]];
 800146a:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <Controller+0x8dc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <Controller+0x784>
 8001476:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <Controller+0x8dc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 800147e:	4619      	mov	r1, r3
 8001480:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <Controller+0x8dc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <Controller+0x8e8>)
 8001486:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800148a:	625a      	str	r2, [r3, #36]	; 0x24
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_PADDLE_MAP_IDX-1]) MyOutputs->NxClutchPaddleMapIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_MAP_IDX-1];
 800148c:	4b55      	ldr	r3, [pc, #340]	; (80015e4 <Controller+0x8dc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8001494:	2b00      	cmp	r3, #0
 8001496:	d108      	bne.n	80014aa <Controller+0x7a2>
 8001498:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <Controller+0x8dc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f993 206c 	ldrsb.w	r2, [r3, #108]	; 0x6c
 80014a0:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <Controller+0x8dc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_PADDLE_OFFSET_IDX-1]) MyOutputs->NxClutchPaddleOffsetIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_OFFSET_IDX-1];
 80014aa:	4b4e      	ldr	r3, [pc, #312]	; (80015e4 <Controller+0x8dc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <Controller+0x7c0>
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <Controller+0x8dc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f993 206d 	ldrsb.w	r2, [r3, #109]	; 0x6d
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <Controller+0x8dc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_RELEASE_MAP_IDX-1]) MyOutputs->NxClutchReleaseMapIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_RELEASE_MAP_IDX-1];
 80014c8:	4b46      	ldr	r3, [pc, #280]	; (80015e4 <Controller+0x8dc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d108      	bne.n	80014e6 <Controller+0x7de>
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <Controller+0x8dc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f993 206e 	ldrsb.w	r2, [r3, #110]	; 0x6e
 80014dc:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <Controller+0x8dc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_RELEASE_OFFSET_IDX-1]) MyOutputs->NxClutchReleaseOffsetIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_RELEASE_OFFSET_IDX-1];
 80014e6:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <Controller+0x8dc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <Controller+0x7fc>
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <Controller+0x8dc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f993 206f 	ldrsb.w	r2, [r3, #111]	; 0x6f
 80014fa:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <Controller+0x8dc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_UPSHIFT_TYPE_IDX-1]) MyOutputs->NUpShiftType = MyOutputs->NMultifunction[MULTIFUNCTION_UPSHIFT_TYPE_IDX-1];
 8001504:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <Controller+0x8dc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800150c:	2b00      	cmp	r3, #0
 800150e:	d108      	bne.n	8001522 <Controller+0x81a>
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <Controller+0x8dc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <Controller+0x8dc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_DNSHIFT_TYPE_IDX-1]) MyOutputs->NDnShiftType = MyOutputs->NMultifunction[MULTIFUNCTION_DNSHIFT_TYPE_IDX-1];
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <Controller+0x8dc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <Controller+0x838>
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <Controller+0x8dc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f993 2071 	ldrsb.w	r2, [r3, #113]	; 0x71
 8001536:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <Controller+0x8dc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// DISPLAY

		// inputs
		MyOutputs->BDisplayPageNext = DISPLAY_NEXT_BUTTON;
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <Controller+0x8dc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 800154a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		MyOutputs->BDisplayPagePrev = DISPLAY_PREV_BUTTON;
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <Controller+0x8dc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	f892 2069 	ldrb.w	r2, [r2, #105]	; 0x69
 8001558:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

		if(!ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) {	// we use the page buttons function only if we have the multifunction timing feature enabled

			if(!MyOutputs->BUseButtonsForMultifunction) {	// we only use them as page buttons when they are not used for the multifunction
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <Controller+0x8dc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001564:	2b00      	cmp	r3, #0
 8001566:	f040 8091 	bne.w	800168c <Controller+0x984>
				if(MyOutputs->BDisplayPageNext && (MyOutputs->tDisplayPageDebounce < tControllerTimmer) && !MyOutputs->BDisplayPageNextState) {
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <Controller+0x8dc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001572:	2b00      	cmp	r3, #0
 8001574:	d040      	beq.n	80015f8 <Controller+0x8f0>
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <Controller+0x8dc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <Controller+0x8e0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d239      	bcs.n	80015f8 <Controller+0x8f0>
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <Controller+0x8dc>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800158c:	2b00      	cmp	r3, #0
 800158e:	d133      	bne.n	80015f8 <Controller+0x8f0>
					MyOutputs->BDisplayPageNextState = 1;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <Controller+0x8dc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					MyOutputs->tDisplayPageDebounce = tControllerTimmer + DISPLAY_PAGE_BUTTON_DEBOUNCE;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <Controller+0x8e0>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <Controller+0x8dc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	32c8      	adds	r2, #200	; 0xc8
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

					MyOutputs->NDispalyPage ++;
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <Controller+0x8dc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f993 204b 	ldrsb.w	r2, [r3, #75]	; 0x4b
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	3201      	adds	r2, #1
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	b252      	sxtb	r2, r2
 80015b6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
					MyOutputs->NDispalyPage %= DISPLAY_MAX_PAGE;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <Controller+0x8dc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f993 204b 	ldrsb.w	r2, [r3, #75]	; 0x4b
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <Controller+0x8dc>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <Controller+0x8ec>)
 80015c8:	fb83 1302 	smull	r1, r3, r3, r2
 80015cc:	1059      	asrs	r1, r3, #1
 80015ce:	17d3      	asrs	r3, r2, #31
 80015d0:	1ac9      	subs	r1, r1, r3
 80015d2:	460b      	mov	r3, r1
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80015e0:	e015      	b.n	800160e <Controller+0x906>
 80015e2:	bf00      	nop
 80015e4:	20000134 	.word	0x20000134
 80015e8:	20000138 	.word	0x20000138
 80015ec:	20000148 	.word	0x20000148
 80015f0:	08009190 	.word	0x08009190
 80015f4:	66666667 	.word	0x66666667

				}
				else if(!MyOutputs->BDisplayPageNext) {
 80015f8:	4bad      	ldr	r3, [pc, #692]	; (80018b0 <Controller+0xba8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001600:	2b00      	cmp	r3, #0
 8001602:	d104      	bne.n	800160e <Controller+0x906>
					MyOutputs->BDisplayPageNextState = 0;
 8001604:	4baa      	ldr	r3, [pc, #680]	; (80018b0 <Controller+0xba8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}

				if(MyOutputs->BDisplayPagePrev && (MyOutputs->tDisplayPageDebounce < tControllerTimmer) && !MyOutputs->BDisplayPagePrevState) {
 800160e:	4ba8      	ldr	r3, [pc, #672]	; (80018b0 <Controller+0xba8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001616:	2b00      	cmp	r3, #0
 8001618:	d02d      	beq.n	8001676 <Controller+0x96e>
 800161a:	4ba5      	ldr	r3, [pc, #660]	; (80018b0 <Controller+0xba8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001620:	4ba4      	ldr	r3, [pc, #656]	; (80018b4 <Controller+0xbac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d226      	bcs.n	8001676 <Controller+0x96e>
 8001628:	4ba1      	ldr	r3, [pc, #644]	; (80018b0 <Controller+0xba8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001630:	2b00      	cmp	r3, #0
 8001632:	d120      	bne.n	8001676 <Controller+0x96e>
					MyOutputs->BDisplayPagePrevState = 1;
 8001634:	4b9e      	ldr	r3, [pc, #632]	; (80018b0 <Controller+0xba8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
					MyOutputs->tDisplayPageDebounce = tControllerTimmer + DISPLAY_PAGE_BUTTON_DEBOUNCE;
 800163e:	4b9d      	ldr	r3, [pc, #628]	; (80018b4 <Controller+0xbac>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b9b      	ldr	r3, [pc, #620]	; (80018b0 <Controller+0xba8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	32c8      	adds	r2, #200	; 0xc8
 8001648:	655a      	str	r2, [r3, #84]	; 0x54

					MyOutputs->NDispalyPage --;
 800164a:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <Controller+0xba8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f993 204b 	ldrsb.w	r2, [r3, #75]	; 0x4b
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	3a01      	subs	r2, #1
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	b252      	sxtb	r2, r2
 800165a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
					if(MyOutputs->NDispalyPage < 0) MyOutputs->NDispalyPage = DISPLAY_MAX_PAGE - 1;
 800165e:	4b94      	ldr	r3, [pc, #592]	; (80018b0 <Controller+0xba8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f993 304b 	ldrsb.w	r3, [r3, #75]	; 0x4b
 8001666:	2b00      	cmp	r3, #0
 8001668:	da10      	bge.n	800168c <Controller+0x984>
 800166a:	4b91      	ldr	r3, [pc, #580]	; (80018b0 <Controller+0xba8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2204      	movs	r2, #4
 8001670:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001674:	e00a      	b.n	800168c <Controller+0x984>

				}
				else if(!MyOutputs->BDisplayPagePrev) {
 8001676:	4b8e      	ldr	r3, [pc, #568]	; (80018b0 <Controller+0xba8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800167e:	2b00      	cmp	r3, #0
 8001680:	d104      	bne.n	800168c <Controller+0x984>
					MyOutputs->BDisplayPagePrevState = 0;
 8001682:	4b8b      	ldr	r3, [pc, #556]	; (80018b0 <Controller+0xba8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 800168c:	4b8a      	ldr	r3, [pc, #552]	; (80018b8 <Controller+0xbb0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d82d      	bhi.n	80016f0 <Controller+0x9e8>
 8001694:	a201      	add	r2, pc, #4	; (adr r2, 800169c <Controller+0x994>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016b5 	.word	0x080016b5
 80016a0:	080016bf 	.word	0x080016bf
 80016a4:	080016c9 	.word	0x080016c9
 80016a8:	080016d3 	.word	0x080016d3
 80016ac:	080016dd 	.word	0x080016dd
 80016b0:	080016e7 	.word	0x080016e7

		case IDLE_STATE:
			IDLE_Run();
 80016b4:	f000 f9c4 	bl	8001a40 <IDLE_Run>
			IDLE_Event();
 80016b8:	f000 f9a4 	bl	8001a04 <IDLE_Event>
			break;
 80016bc:	e018      	b.n	80016f0 <Controller+0x9e8>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 80016be:	f000 fa47 	bl	8001b50 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 80016c2:	f000 f9e7 	bl	8001a94 <PRE_UPSHIFT_Event>
			break;
 80016c6:	e013      	b.n	80016f0 <Controller+0x9e8>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 80016c8:	f000 fb8e 	bl	8001de8 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 80016cc:	f000 fb38 	bl	8001d40 <PRE_DNSHIFT_Event>
			break;
 80016d0:	e00e      	b.n	80016f0 <Controller+0x9e8>
		case SHIFTING_STATE:
			SHIFTING_Run();
 80016d2:	f000 fd4f 	bl	8002174 <SHIFTING_Run>
			SHIFTING_Event();
 80016d6:	f000 fd25 	bl	8002124 <SHIFTING_Event>
			break;
 80016da:	e009      	b.n	80016f0 <Controller+0x9e8>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 80016dc:	f000 fde0 	bl	80022a0 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 80016e0:	f000 fdba 	bl	8002258 <POSTSHIFT_Event>
			break;
 80016e4:	e004      	b.n	80016f0 <Controller+0x9e8>
		case ERROR_STATE:
			ERROR_Run();
 80016e6:	f000 fe51 	bl	800238c <ERROR_Run>
			ERROR_Event();
 80016ea:	f000 fe47 	bl	800237c <ERROR_Event>
			break;
 80016ee:	bf00      	nop

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CONTROLLER STATUS

		MyOutputs->NControllerStatusWord = 0;
 80016f0:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <Controller+0xba8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->BUpShiftPortState				<<0;
 80016fa:	4b6d      	ldr	r3, [pc, #436]	; (80018b0 <Controller+0xba8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001702:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <Controller+0xba8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800170a:	4619      	mov	r1, r3
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <Controller+0xba8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->BDnShiftPortState				<<1;
 8001716:	4b66      	ldr	r3, [pc, #408]	; (80018b0 <Controller+0xba8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800171e:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <Controller+0xba8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4619      	mov	r1, r3
 800172a:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <Controller+0xba8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->BClutchActuated					<<2;
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <Controller+0xba8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800173c:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <Controller+0xba8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4619      	mov	r1, r3
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <Controller+0xba8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->BSparkCut						<<3;
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <Controller+0xba8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <Controller+0xba8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4619      	mov	r1, r3
 8001766:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <Controller+0xba8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->BLaunchControl					<<4;
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <Controller+0xba8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001778:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <Controller+0xba8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <Controller+0xba8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= (MyOutputs->NAntistallState == 2 ? 1 : 0)	<<5;
 800178e:	4b48      	ldr	r3, [pc, #288]	; (80018b0 <Controller+0xba8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <Controller+0xba8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d101      	bne.n	80017a6 <Controller+0xa9e>
 80017a2:	2120      	movs	r1, #32
 80017a4:	e000      	b.n	80017a8 <Controller+0xaa0>
 80017a6:	2100      	movs	r1, #0
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <Controller+0xba8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->BShiftInProgress					<<6;
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <Controller+0xba8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <Controller+0xba8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c2:	019b      	lsls	r3, r3, #6
 80017c4:	4619      	mov	r1, r3
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <Controller+0xba8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch01State				<<7;
 80017d0:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <Controller+0xba8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <Controller+0xba8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80017e0:	01db      	lsls	r3, r3, #7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <Controller+0xba8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch02State				<<8;
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <Controller+0xba8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80017f6:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <Controller+0xba8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	4619      	mov	r1, r3
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <Controller+0xba8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch03State				<<9;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <Controller+0xba8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <Controller+0xba8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4619      	mov	r1, r3
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <Controller+0xba8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch04State				<<10;
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <Controller+0xba8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <Controller+0xba8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800183a:	029b      	lsls	r3, r3, #10
 800183c:	4619      	mov	r1, r3
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <Controller+0xba8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= 0											<<11;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <Controller+0xba8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <Controller+0xba8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8001854:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= 0											<<12;
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <Controller+0xba8>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <Controller+0xba8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8001864:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= 0											<<13;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <Controller+0xba8>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <Controller+0xba8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8001874:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= 0											<<14;
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <Controller+0xba8>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <Controller+0xba8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8001884:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		MyOutputs->NControllerStatusWord |= 0											<<15;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <Controller+0xba8>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <Controller+0xba8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8001894:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

		MyOutputs->NControllerStatusWord |= (MyOutputs->NControlErrorStatusShadow  && 0xffff) <<16;	// the controller errors (without the first which is "No error"), taken only the 16 first bits out of the 32
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <Controller+0xba8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <Controller+0xba8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <Controller+0xbb4>
 80018aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80018ae:	e006      	b.n	80018be <Controller+0xbb6>
 80018b0:	20000134 	.word	0x20000134
 80018b4:	20000138 	.word	0x20000138
 80018b8:	2000010c 	.word	0x2000010c
 80018bc:	2100      	movs	r1, #0
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <Controller+0xcc0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

		if(tControllerErrorStatusShadow < tControllerTimmer) {
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <Controller+0xcc4>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <Controller+0xcc8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d209      	bcs.n	80018e8 <Controller+0xbe0>
			tControllerErrorStatusShadow = tControllerTimmer + CONTROLLER_STATUS_SHADOW_REFRESH;
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <Controller+0xcc8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80018dc:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <Controller+0xcc4>)
 80018de:	6013      	str	r3, [r2, #0]
			MyOutputs->NControlErrorStatusShadow = 0;
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <Controller+0xcc0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	705a      	strb	r2, [r3, #1]

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// DISPLAY DIAGNOSTICS

		MyOutputs->NDisplayFlags = 0;
 80018e8:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <Controller+0xcc0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> RPM_ILLEGAL_FOR_UPSHIFT) <<0;
 80018f2:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <Controller+0xcc0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <Controller+0xcc0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	785b      	ldrb	r3, [r3, #1]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <Controller+0xcc0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> RPM_ILLEGAL_FOR_DNSHIFT) <<1;
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <Controller+0xcc0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001918:	b25a      	sxtb	r2, r3
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <Controller+0xcc0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	b2db      	uxtb	r3, r3
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	b25b      	sxtb	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b25a      	sxtb	r2, r3
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <Controller+0xcc0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> GEAR_TARGET_MISMATCH) <<2;
 8001936:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <Controller+0xcc0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800193e:	b25a      	sxtb	r2, r3
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <Controller+0xcc0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	785b      	ldrb	r3, [r3, #1]
 8001946:	121b      	asrs	r3, r3, #8
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	b25b      	sxtb	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	b25a      	sxtb	r2, r3
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <Controller+0xcc0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> FALSE_NEUTRAL_WITH_NO_CLUTCH) <<3;
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <Controller+0xcc0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001962:	b25a      	sxtb	r2, r3
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <Controller+0xcc0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	785b      	ldrb	r3, [r3, #1]
 800196a:	125b      	asrs	r3, r3, #9
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	b25b      	sxtb	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b25a      	sxtb	r2, r3
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <Controller+0xcc0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |= 0 <<4;
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <Controller+0xcc0>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <Controller+0xcc0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 800198a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |= 0 <<5;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <Controller+0xcc0>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <Controller+0xcc0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 800199a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |= 0 <<6;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <Controller+0xcc0>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <Controller+0xcc0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 80019aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		MyOutputs->NDisplayFlags |= 0 <<7;
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <Controller+0xcc0>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <Controller+0xcc0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 80019ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000134 	.word	0x20000134
 80019cc:	20000130 	.word	0x20000130
 80019d0:	20000138 	.word	0x20000138

080019d4 <IDLE_Entry>:

void IDLE_Entry(void) {
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <IDLE_Entry+0x1c>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <IDLE_Entry+0x20>)
 80019de:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <IDLE_Entry+0x1c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000010c 	.word	0x2000010c
 80019f4:	20000105 	.word	0x20000105

080019f8 <IDLE_Exit>:
void IDLE_Exit(void) {
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <IDLE_Event>:
void IDLE_Event(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <IDLE_Event+0x38>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <IDLE_Event+0x1c>
        IDLE_Exit();
 8001a16:	f7ff ffef 	bl	80019f8 <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8001a1a:	f000 f817 	bl	8001a4c <PRE_UPSHIFT_Entry>
        return;
 8001a1e:	e00c      	b.n	8001a3a <IDLE_Event+0x36>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <IDLE_Event+0x38>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <IDLE_Event+0x36>
        IDLE_Exit();
 8001a30:	f7ff ffe2 	bl	80019f8 <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8001a34:	f000 f960 	bl	8001cf8 <PRE_DNSHIFT_Entry>
        return;
 8001a38:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000014c 	.word	0x2000014c

08001a40 <IDLE_Run>:
void IDLE_Run(void) {
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <PRE_UPSHIFT_Entry+0x2c>)
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <PRE_UPSHIFT_Entry+0x30>)
 8001a56:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <PRE_UPSHIFT_Entry+0x2c>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftInProgress = 1;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <PRE_UPSHIFT_Entry+0x34>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	tPreShiftTimer = HAL_GetTick();
 8001a68:	f002 fed0 	bl	800480c <HAL_GetTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <PRE_UPSHIFT_Entry+0x38>)
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000010c 	.word	0x2000010c
 8001a7c:	20000105 	.word	0x20000105
 8001a80:	20000134 	.word	0x20000134
 8001a84:	20000118 	.word	0x20000118

08001a88 <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 8001a94:	b598      	push	{r3, r4, r7, lr}
 8001a96:	af00      	add	r7, sp, #0

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8001a98:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d13a      	bne.n	8001b18 <PRE_UPSHIFT_Event+0x84>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8001aa2:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <PRE_UPSHIFT_Event+0xb0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001aaa:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3201      	adds	r2, #1
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	70da      	strb	r2, [r3, #3]

		if((MyOutputs->NUpShiftType == WithClutch && ALLOW_CLUTCH_ACT_DURING_UPSHIFT) || MyOutputs->BOverrideActuateClutchOnNextUpShift) {		// we check for clutch strategy during shift
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <PRE_UPSHIFT_Event+0x38>
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <PRE_UPSHIFT_Event+0x5a>
			MyOutputs->xClutchTargetShiftShadow = xClutchTargetUpShiftMap[MyInputs->NGear];
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <PRE_UPSHIFT_Event+0xb0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <PRE_UPSHIFT_Event+0xb4>)
 8001adc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001ae0:	615a      	str	r2, [r3, #20]
			MyOutputs->BOverrideActuateClutchOnNextUpShift = 0; 									// reset the strat for the next gear
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8001aec:	e004      	b.n	8001af8 <PRE_UPSHIFT_Event+0x64>
		}
		else {
			MyOutputs->xClutchTargetShiftShadow = 0;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
		}

		if(MyOutputs->NUpShiftType == SparkCut && ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d104      	bne.n	8001b0e <PRE_UPSHIFT_Event+0x7a>
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

		PRE_UPSHIFT_Exit();
 8001b0e:	f7ff ffbb 	bl	8001a88 <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8001b12:	f000 fa43 	bl	8001f9c <SHIFTING_Entry>
		return;
 8001b16:	e012      	b.n	8001b3e <PRE_UPSHIFT_Event+0xaa>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <PRE_UPSHIFT_Event+0xac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <PRE_UPSHIFT_Event+0xaa>
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <PRE_UPSHIFT_Event+0xb8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001b2a:	f002 fe6f 	bl	800480c <HAL_GetTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	429c      	cmp	r4, r3
 8001b32:	d804      	bhi.n	8001b3e <PRE_UPSHIFT_Event+0xaa>
		PRE_UPSHIFT_Exit();
 8001b34:	f7ff ffa8 	bl	8001a88 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8001b38:	f000 fbe8 	bl	800230c <ERROR_Entry>
		return;
 8001b3c:	bf00      	nop
	}


}
 8001b3e:	bd98      	pop	{r3, r4, r7, pc}
 8001b40:	20000134 	.word	0x20000134
 8001b44:	2000014c 	.word	0x2000014c
 8001b48:	08009160 	.word	0x08009160
 8001b4c:	20000118 	.word	0x20000118

08001b50 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 8001b54:	4b65      	ldr	r3, [pc, #404]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11e      	bne.n	8001b9e <PRE_UPSHIFT_Run+0x4e>
 8001b60:	4b62      	ldr	r3, [pc, #392]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001b68:	2b59      	cmp	r3, #89	; 0x59
 8001b6a:	dc18      	bgt.n	8001b9e <PRE_UPSHIFT_Run+0x4e>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 8001b6c:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0202 	orr.w	r2, r2, #2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	709a      	strb	r2, [r3, #2]
 8001b86:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	7859      	ldrb	r1, [r3, #1]
 8001b8c:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	705a      	strb	r2, [r3, #1]
 8001b9c:	e008      	b.n	8001bb0 <PRE_UPSHIFT_Run+0x60>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 8001b9e:	4b54      	ldr	r3, [pc, #336]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	4b52      	ldr	r3, [pc, #328]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0202 	bic.w	r2, r2, #2
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError && !(ALLOW_GEARS_WITH_CAR_STOPPED && MyInputs->nEngine == 0 && MyInputs->rClutchPaddle >= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST)) {	// trying to shift up with too low rpm
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <PRE_UPSHIFT_Run+0x1a4>)
 8001bc6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	da2a      	bge.n	8001c24 <PRE_UPSHIFT_Run+0xd4>
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d124      	bne.n	8001c24 <PRE_UPSHIFT_Run+0xd4>
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <PRE_UPSHIFT_Run+0xa2>
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001bee:	2b59      	cmp	r3, #89	; 0x59
 8001bf0:	dc18      	bgt.n	8001c24 <PRE_UPSHIFT_Run+0xd4>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8001bf2:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0208 	orr.w	r2, r2, #8
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	709a      	strb	r2, [r3, #2]
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	7859      	ldrb	r1, [r3, #1]
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	705a      	strb	r2, [r3, #1]
 8001c22:	e008      	b.n	8001c36 <PRE_UPSHIFT_Run+0xe6>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0208 	bic.w	r2, r2, #8
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d918      	bls.n	8001c74 <PRE_UPSHIFT_Run+0x124>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0210 	orr.w	r2, r2, #16
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	709a      	strb	r2, [r3, #2]
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	7859      	ldrb	r1, [r3, #1]
 8001c62:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	705a      	strb	r2, [r3, #1]
 8001c72:	e008      	b.n	8001c86 <PRE_UPSHIFT_Run+0x136>
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

	if(MyInputs->BFalseNeutral && !MyInputs->BNGearInError && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST) {	// trying to shift during False Neutral without clutch pressed
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d021      	beq.n	8001cd6 <PRE_UPSHIFT_Run+0x186>
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11b      	bne.n	8001cd6 <PRE_UPSHIFT_Run+0x186>
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <PRE_UPSHIFT_Run+0x19c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001ca6:	2b59      	cmp	r3, #89	; 0x59
 8001ca8:	dc15      	bgt.n	8001cd6 <PRE_UPSHIFT_Run+0x186>
		RaiseControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH);
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2209      	movs	r2, #9
 8001cbc:	709a      	strb	r2, [r3, #2]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	7859      	ldrb	r1, [r3, #1]
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	705a      	strb	r2, [r3, #1]
 8001cd4:	e006      	b.n	8001ce4 <PRE_UPSHIFT_Run+0x194>
	}
	else { ClearControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH); }
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <PRE_UPSHIFT_Run+0x1a0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	2000014c 	.word	0x2000014c
 8001cf0:	20000134 	.word	0x20000134
 8001cf4:	08009148 	.word	0x08009148

08001cf8 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <PRE_DNSHIFT_Entry+0x2c>)
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <PRE_DNSHIFT_Entry+0x30>)
 8001d02:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <PRE_DNSHIFT_Entry+0x2c>)
 8001d06:	2202      	movs	r2, #2
 8001d08:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftInProgress = 1;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <PRE_DNSHIFT_Entry+0x34>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	tPreShiftTimer = HAL_GetTick();
 8001d14:	f002 fd7a 	bl	800480c <HAL_GetTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <PRE_DNSHIFT_Entry+0x38>)
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000010c 	.word	0x2000010c
 8001d28:	20000105 	.word	0x20000105
 8001d2c:	20000134 	.word	0x20000134
 8001d30:	20000118 	.word	0x20000118

08001d34 <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 8001d40:	b598      	push	{r3, r4, r7, lr}
 8001d42:	af00      	add	r7, sp, #0

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d12f      	bne.n	8001dae <PRE_DNSHIFT_Event+0x6e>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <PRE_DNSHIFT_Event+0x9c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	70da      	strb	r2, [r3, #3]

		if((MyOutputs->NDnShiftType == WithClutch && ALLOW_CLUTCH_ACT_DURING_DNSHIFT) || MyOutputs->BOverrideActuateClutchOnNextDnShift) {		// we check for clutch strategy during shift
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <PRE_DNSHIFT_Event+0x38>
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d010      	beq.n	8001d9a <PRE_DNSHIFT_Event+0x5a>
			MyOutputs->xClutchTargetShiftShadow = xClutchTargetDnShiftMap[MyInputs->NGear];
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <PRE_DNSHIFT_Event+0x9c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d80:	4619      	mov	r1, r3
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a16      	ldr	r2, [pc, #88]	; (8001de0 <PRE_DNSHIFT_Event+0xa0>)
 8001d88:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001d8c:	615a      	str	r2, [r3, #20]
			MyOutputs->BOverrideActuateClutchOnNextDnShift = 0; 									// reset the strat for the next gear
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8001d98:	e004      	b.n	8001da4 <PRE_DNSHIFT_Event+0x64>
		}
		else {
			MyOutputs->xClutchTargetShiftShadow = 0;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
		}

		if(MyOutputs->NDnShiftType == SparkCut && ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 8001da4:	f7ff ffc6 	bl	8001d34 <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 8001da8:	f000 f8f8 	bl	8001f9c <SHIFTING_Entry>
		return;
 8001dac:	e012      	b.n	8001dd4 <PRE_DNSHIFT_Event+0x94>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <PRE_DNSHIFT_Event+0x98>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00d      	beq.n	8001dd4 <PRE_DNSHIFT_Event+0x94>
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <PRE_DNSHIFT_Event+0xa4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 8001dc0:	f002 fd24 	bl	800480c <HAL_GetTick>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	429c      	cmp	r4, r3
 8001dc8:	d804      	bhi.n	8001dd4 <PRE_DNSHIFT_Event+0x94>
		PRE_DNSHIFT_Exit();
 8001dca:	f7ff ffb3 	bl	8001d34 <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 8001dce:	f000 fa9d 	bl	800230c <ERROR_Entry>
		return;
 8001dd2:	bf00      	nop
	}

}
 8001dd4:	bd98      	pop	{r3, r4, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000134 	.word	0x20000134
 8001ddc:	2000014c 	.word	0x2000014c
 8001de0:	08009178 	.word	0x08009178
 8001de4:	20000118 	.word	0x20000118

08001de8 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH && !(MyInputs->BrClutchPaddleInError && ALLOW_NEUTRAL_WHEN_PADDLE_IN_ERROR)) {	// trying to put neutral gear without clutch
 8001dec:	4b68      	ldr	r3, [pc, #416]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d124      	bne.n	8001e42 <PRE_DNSHIFT_Run+0x5a>
 8001df8:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001e00:	2b59      	cmp	r3, #89	; 0x59
 8001e02:	dc1e      	bgt.n	8001e42 <PRE_DNSHIFT_Run+0x5a>
 8001e04:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d118      	bne.n	8001e42 <PRE_DNSHIFT_Run+0x5a>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 8001e10:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0204 	orr.w	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2202      	movs	r2, #2
 8001e28:	709a      	strb	r2, [r3, #2]
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	7859      	ldrb	r1, [r3, #1]
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	705a      	strb	r2, [r3, #1]
 8001e40:	e008      	b.n	8001e54 <PRE_DNSHIFT_Run+0x6c>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 8001e42:	4b54      	ldr	r3, [pc, #336]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0204 	bic.w	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError && !(ALLOW_GEARS_WITH_CAR_STOPPED && MyInputs->nEngine == 0 && MyInputs->rClutchPaddle >= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST)) {	// trying to shift down with too high rpm
 8001e54:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e66:	4619      	mov	r1, r3
 8001e68:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <PRE_DNSHIFT_Run+0x1b0>)
 8001e6a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	dd2a      	ble.n	8001ec8 <PRE_DNSHIFT_Run+0xe0>
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d124      	bne.n	8001ec8 <PRE_DNSHIFT_Run+0xe0>
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <PRE_DNSHIFT_Run+0xae>
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001e92:	2b59      	cmp	r3, #89	; 0x59
 8001e94:	dc18      	bgt.n	8001ec8 <PRE_DNSHIFT_Run+0xe0>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2205      	movs	r2, #5
 8001eae:	709a      	strb	r2, [r3, #2]
 8001eb0:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	7859      	ldrb	r1, [r3, #1]
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	705a      	strb	r2, [r3, #1]
 8001ec6:	e008      	b.n	8001eda <PRE_DNSHIFT_Run+0xf2>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 8001ec8:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	781a      	ldrb	r2, [r3, #0]
 8001ece:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0220 	bic.w	r2, r2, #32
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <PRE_DNSHIFT_Run+0x130>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2206      	movs	r2, #6
 8001efe:	709a      	strb	r2, [r3, #2]
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	7859      	ldrb	r1, [r3, #1]
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	705a      	strb	r2, [r3, #1]
 8001f16:	e008      	b.n	8001f2a <PRE_DNSHIFT_Run+0x142>
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

	if(MyInputs->BFalseNeutral && !MyInputs->BNGearInError && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST) {	// trying to shift during False Neutral without clutch pressed
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d021      	beq.n	8001f7a <PRE_DNSHIFT_Run+0x192>
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11b      	bne.n	8001f7a <PRE_DNSHIFT_Run+0x192>
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <PRE_DNSHIFT_Run+0x1a8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001f4a:	2b59      	cmp	r3, #89	; 0x59
 8001f4c:	dc15      	bgt.n	8001f7a <PRE_DNSHIFT_Run+0x192>
		RaiseControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH);
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	7812      	ldrb	r2, [r2, #0]
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2209      	movs	r2, #9
 8001f60:	709a      	strb	r2, [r3, #2]
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	7859      	ldrb	r1, [r3, #1]
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	705a      	strb	r2, [r3, #1]
 8001f78:	e006      	b.n	8001f88 <PRE_DNSHIFT_Run+0x1a0>
	}
	else { ClearControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH); }
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <PRE_DNSHIFT_Run+0x1ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	7812      	ldrb	r2, [r2, #0]
 8001f84:	701a      	strb	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	2000014c 	.word	0x2000014c
 8001f94:	20000134 	.word	0x20000134
 8001f98:	08009154 	.word	0x08009154

08001f9c <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001fa0:	4b4e      	ldr	r3, [pc, #312]	; (80020dc <SHIFTING_Entry+0x140>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <SHIFTING_Entry+0x144>)
 8001fa6:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <SHIFTING_Entry+0x140>)
 8001faa:	2203      	movs	r2, #3
 8001fac:	701a      	strb	r2, [r3, #0]

	tShiftTimer = HAL_GetTick();
 8001fae:	f002 fc2d 	bl	800480c <HAL_GetTick>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4a4b      	ldr	r2, [pc, #300]	; (80020e4 <SHIFTING_Entry+0x148>)
 8001fb6:	6013      	str	r3, [r2, #0]

	MyOutputs->xClutchTargetShift = MyOutputs->xClutchTargetShiftShadow;
 8001fb8:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6952      	ldr	r2, [r2, #20]
 8001fc2:	611a      	str	r2, [r3, #16]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 8001fc4:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <SHIFTING_Entry+0x144>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d131      	bne.n	8002030 <SHIFTING_Entry+0x94>
		NShiftRequest = Up;
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <SHIFTING_Entry+0x150>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <SHIFTING_Entry+0x154>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4b45      	ldr	r3, [pc, #276]	; (80020f4 <SHIFTING_Entry+0x158>)
 8001fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe2:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <SHIFTING_Entry+0x15c>)
 8001fe4:	6013      	str	r3, [r2, #0]

		if(MyOutputs->NUpShiftType == WithClutch) tShifterDelayForClutch = tUpShiftDelayForClutch[MyInputs->NGear];
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <SHIFTING_Entry+0x6c>
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <SHIFTING_Entry+0x154>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <SHIFTING_Entry+0x160>)
 8001ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002002:	4a3f      	ldr	r2, [pc, #252]	; (8002100 <SHIFTING_Entry+0x164>)
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e002      	b.n	800200e <SHIFTING_Entry+0x72>
		else tShifterDelayForClutch = 0;
 8002008:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <SHIFTING_Entry+0x164>)
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 800200e:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	78db      	ldrb	r3, [r3, #3]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <SHIFTING_Entry+0x88>
			MyOutputs->BDnShiftPortStateShadow = 1;
 8002018:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <SHIFTING_Entry+0x14c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		NCurrentState = Unknown;
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
		tShifterDelayForClutch = 0;
	}

}
 8002022:	e059      	b.n	80020d8 <SHIFTING_Entry+0x13c>
			MyOutputs->BUpShiftPortStateShadow = 1;
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800202e:	e053      	b.n	80020d8 <SHIFTING_Entry+0x13c>
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <SHIFTING_Entry+0x144>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d131      	bne.n	800209c <SHIFTING_Entry+0x100>
		NShiftRequest = Down;
 8002038:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <SHIFTING_Entry+0x150>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear];
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <SHIFTING_Entry+0x154>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002046:	461a      	mov	r2, r3
 8002048:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <SHIFTING_Entry+0x168>)
 800204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204e:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <SHIFTING_Entry+0x15c>)
 8002050:	6013      	str	r3, [r2, #0]
		if(MyOutputs->NDnShiftType == WithClutch) tShifterDelayForClutch = tDnShiftDelayForClutch[MyInputs->NGear];
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <SHIFTING_Entry+0xd8>
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <SHIFTING_Entry+0x154>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002066:	461a      	mov	r2, r3
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <SHIFTING_Entry+0x16c>)
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <SHIFTING_Entry+0x164>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e002      	b.n	800207a <SHIFTING_Entry+0xde>
		else tShifterDelayForClutch = 0;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <SHIFTING_Entry+0x164>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <SHIFTING_Entry+0x14c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	78db      	ldrb	r3, [r3, #3]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <SHIFTING_Entry+0xf4>
			MyOutputs->BUpShiftPortStateShadow = 1;
 8002084:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800208e:	e023      	b.n	80020d8 <SHIFTING_Entry+0x13c>
			MyOutputs->BDnShiftPortStateShadow = 1;
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <SHIFTING_Entry+0x14c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800209a:	e01d      	b.n	80020d8 <SHIFTING_Entry+0x13c>
		NCurrentState = Unknown;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <SHIFTING_Entry+0x140>)
 800209e:	2202      	movs	r2, #2
 80020a0:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <SHIFTING_Entry+0x14c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <SHIFTING_Entry+0x14c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <SHIFTING_Entry+0x14c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2207      	movs	r2, #7
 80020ba:	709a      	strb	r2, [r3, #2]
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <SHIFTING_Entry+0x14c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	7859      	ldrb	r1, [r3, #1]
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <SHIFTING_Entry+0x14c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <SHIFTING_Entry+0x14c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	705a      	strb	r2, [r3, #1]
		tShifterDelayForClutch = 0;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <SHIFTING_Entry+0x164>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000010c 	.word	0x2000010c
 80020e0:	20000105 	.word	0x20000105
 80020e4:	20000120 	.word	0x20000120
 80020e8:	20000134 	.word	0x20000134
 80020ec:	20000104 	.word	0x20000104
 80020f0:	2000014c 	.word	0x2000014c
 80020f4:	080090dc 	.word	0x080090dc
 80020f8:	2000012c 	.word	0x2000012c
 80020fc:	0800910c 	.word	0x0800910c
 8002100:	20000144 	.word	0x20000144
 8002104:	080090f4 	.word	0x080090f4
 8002108:	08009124 	.word	0x08009124

0800210c <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
	MyOutputs->BNGearMatch = 0;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <SHIFTING_Exit+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2200      	movs	r2, #0
 8002116:	711a      	strb	r2, [r3, #4]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000134 	.word	0x20000134

08002124 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0

	// we check for control errors and if present we abort
	if(MyOutputs->NControlErrorStatus) {
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <SHIFTING_Event+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <SHIFTING_Event+0x18>
		SHIFTING_Exit();
 8002132:	f7ff ffeb 	bl	800210c <SHIFTING_Exit>
		ERROR_Entry();
 8002136:	f000 f8e9 	bl	800230c <ERROR_Entry>
		return;
 800213a:	e011      	b.n	8002160 <SHIFTING_Event+0x3c>
	}

	if((tShiftTimer + tShifterMaxTransitTime) <= tControllerTimmer) {	// the max time for the gear has expired
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <SHIFTING_Event+0x44>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <SHIFTING_Event+0x48>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	441a      	add	r2, r3
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <SHIFTING_Event+0x4c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d804      	bhi.n	8002158 <SHIFTING_Event+0x34>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 800214e:	f7ff ffdd 	bl	800210c <SHIFTING_Exit>
		POSTSHIFT_Entry();
 8002152:	f000 f837 	bl	80021c4 <POSTSHIFT_Entry>
		return;
 8002156:	e003      	b.n	8002160 <SHIFTING_Event+0x3c>
			POSTSHIFT_Entry();
			return;
		}
	}
	else {
		MyOutputs->BNGearMatch = 0;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <SHIFTING_Event+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	711a      	strb	r2, [r3, #4]
	}

	// TODO: implement the shifting timing (include pre and post shift phases and create the metrics

	// TODO: think about the double action shift (pushing and then pulling the piston back)
}
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000134 	.word	0x20000134
 8002168:	20000120 	.word	0x20000120
 800216c:	2000012c 	.word	0x2000012c
 8002170:	20000138 	.word	0x20000138

08002174 <SHIFTING_Run>:
void SHIFTING_Run(void) {
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

	if((tShiftTimer + tShifterDelayForClutch) <= tControllerTimmer) {	// when the actuator delay has passed
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <SHIFTING_Run+0x40>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <SHIFTING_Run+0x44>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	441a      	add	r2, r3
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <SHIFTING_Run+0x48>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d80f      	bhi.n	80021aa <SHIFTING_Run+0x36>
		MyOutputs->BUpShiftPortState = MyOutputs->BUpShiftPortStateShadow;
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <SHIFTING_Run+0x4c>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <SHIFTING_Run+0x4c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8002196:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		MyOutputs->BDnShiftPortState = MyOutputs->BDnShiftPortStateShadow;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <SHIFTING_Run+0x4c>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <SHIFTING_Run+0x4c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80021a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000120 	.word	0x20000120
 80021b8:	20000144 	.word	0x20000144
 80021bc:	20000138 	.word	0x20000138
 80021c0:	20000134 	.word	0x20000134

080021c4 <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <POSTSHIFT_Entry+0x60>)
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <POSTSHIFT_Entry+0x64>)
 80021ce:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <POSTSHIFT_Entry+0x60>)
 80021d2:	2204      	movs	r2, #4
 80021d4:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <POSTSHIFT_Entry+0x68>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	MyOutputs->BDnShiftPortState = 0;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <POSTSHIFT_Entry+0x68>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	MyOutputs->BUpShiftPortStateShadow = 0;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <POSTSHIFT_Entry+0x68>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	MyOutputs->BDnShiftPortStateShadow = 0;
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <POSTSHIFT_Entry+0x68>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShiftShadow = 0;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <POSTSHIFT_Entry+0x68>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
	MyOutputs->xClutchTargetShift = 0;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <POSTSHIFT_Entry+0x68>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
	MyOutputs->BSparkCut = 0;
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <POSTSHIFT_Entry+0x68>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	2000010c 	.word	0x2000010c
 8002228:	20000105 	.word	0x20000105
 800222c:	20000134 	.word	0x20000134

08002230 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	MyOutputs->BShiftInProgress = 0;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <POSTSHIFT_Exit+0x20>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// we rest the False Neutral flag TODO: not sure if correct here
	MyInputs->BFalseNeutral = 0;
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <POSTSHIFT_Exit+0x24>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	20000134 	.word	0x20000134
 8002254:	2000014c 	.word	0x2000014c

08002258 <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 8002258:	b598      	push	{r3, r4, r7, lr}
 800225a:	af00      	add	r7, sp, #0


	if(!MyOutputs->NControlErrorStatus) {
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <POSTSHIFT_Event+0x40>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d104      	bne.n	8002270 <POSTSHIFT_Event+0x18>

		POSTSHIFT_Exit();
 8002266:	f7ff ffe3 	bl	8002230 <POSTSHIFT_Exit>
		IDLE_Entry();
 800226a:	f7ff fbb3 	bl	80019d4 <IDLE_Entry>
		return;
 800226e:	e012      	b.n	8002296 <POSTSHIFT_Event+0x3e>
	}


	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPostShiftTimer + POSTSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <POSTSHIFT_Event+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <POSTSHIFT_Event+0x3e>
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <POSTSHIFT_Event+0x44>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8002282:	f002 fac3 	bl	800480c <HAL_GetTick>
 8002286:	4603      	mov	r3, r0
 8002288:	429c      	cmp	r4, r3
 800228a:	d804      	bhi.n	8002296 <POSTSHIFT_Event+0x3e>
		POSTSHIFT_Exit();
 800228c:	f7ff ffd0 	bl	8002230 <POSTSHIFT_Exit>
		ERROR_Entry();
 8002290:	f000 f83c 	bl	800230c <ERROR_Entry>
		return;
 8002294:	bf00      	nop
	}
}
 8002296:	bd98      	pop	{r3, r4, r7, pc}
 8002298:	20000134 	.word	0x20000134
 800229c:	20000124 	.word	0x20000124

080022a0 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

	if(CHECK_POST_SHIFT_GEAR && MyInputs->NGear != MyOutputs->NGearTarget && !MyInputs->BFalseNeutral) {
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <POSTSHIFT_Run+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d01b      	beq.n	80022ee <POSTSHIFT_Run+0x4e>
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <POSTSHIFT_Run+0x64>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <POSTSHIFT_Run+0x4e>
		RaiseControlError(GEAR_TARGET_MISMATCH);
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2208      	movs	r2, #8
 80022d4:	709a      	strb	r2, [r3, #2]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	7859      	ldrb	r1, [r3, #1]
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	705a      	strb	r2, [r3, #1]
 80022ec:	e006      	b.n	80022fc <POSTSHIFT_Run+0x5c>
	}
	else { ClearControlError(GEAR_TARGET_MISMATCH); }
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <POSTSHIFT_Run+0x68>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	701a      	strb	r2, [r3, #0]

}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	2000014c 	.word	0x2000014c
 8002308:	20000134 	.word	0x20000134

0800230c <ERROR_Entry>:


void ERROR_Entry(void) {
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <ERROR_Entry+0x58>)
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <ERROR_Entry+0x5c>)
 8002316:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <ERROR_Entry+0x58>)
 800231a:	2205      	movs	r2, #5
 800231c:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftInProgress = 0;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <ERROR_Entry+0x60>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	// or send it to the display via CAN

	// TODO: we set the page number to ERROR page and then we need to create a timeout in order to return to normal page operation

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <ERROR_Entry+0x60>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	MyOutputs->BDnShiftPortState = 0;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <ERROR_Entry+0x60>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	MyOutputs->xClutchTargetShiftShadow = 0;
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <ERROR_Entry+0x60>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
	MyOutputs->xClutchTargetShift = 0;
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <ERROR_Entry+0x60>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
	MyOutputs->BSparkCut = 0;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <ERROR_Entry+0x60>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000010c 	.word	0x2000010c
 8002368:	20000105 	.word	0x20000105
 800236c:	20000134 	.word	0x20000134

08002370 <ERROR_Exit>:

void ERROR_Exit(void) {
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <ERROR_Event>:
void ERROR_Event(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	// and do not zero the logged error status
	// remember return in all functions

	// Remember to create the Strategy (and a way to exit the error) to be able to function without NGear (complete open loop)
	// for now we exit with no condition
	ERROR_Exit();
 8002380:	f7ff fff6 	bl	8002370 <ERROR_Exit>
	IDLE_Entry();
 8002384:	f7ff fb26 	bl	80019d4 <IDLE_Entry>
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <ERROR_Run>:
void ERROR_Run(void) {
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <ERROR_Run+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]

}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	20000134 	.word	0x20000134

080023a4 <ReadInputs>:


// private functions declaration
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 80023b2:	f002 fa2b 	bl	800480c <HAL_GetTick>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4aa8      	ldr	r2, [pc, #672]	; (800265c <ReadInputs+0x2b8>)
 80023ba:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);	// PA0
 80023bc:	4ba8      	ldr	r3, [pc, #672]	; (8002660 <ReadInputs+0x2bc>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	2300      	movs	r3, #0
 80023c4:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80023c8:	48a6      	ldr	r0, [pc, #664]	; (8002664 <ReadInputs+0x2c0>)
 80023ca:	f000 ff9f 	bl	800330c <MyHalfBufferAverage>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	849a      	strh	r2, [r3, #36]	; 0x24
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);	// PA1
 80023d6:	4ba2      	ldr	r3, [pc, #648]	; (8002660 <ReadInputs+0x2bc>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	2301      	movs	r3, #1
 80023de:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80023e2:	48a0      	ldr	r0, [pc, #640]	; (8002664 <ReadInputs+0x2c0>)
 80023e4:	f000 ff92 	bl	800330c <MyHalfBufferAverage>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	84da      	strh	r2, [r3, #38]	; 0x26
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);	// PA2
 80023f0:	4b9b      	ldr	r3, [pc, #620]	; (8002660 <ReadInputs+0x2bc>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	2302      	movs	r3, #2
 80023f8:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80023fc:	4899      	ldr	r0, [pc, #612]	; (8002664 <ReadInputs+0x2c0>)
 80023fe:	f000 ff85 	bl	800330c <MyHalfBufferAverage>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);	// PA3
 800240a:	4b95      	ldr	r3, [pc, #596]	; (8002660 <ReadInputs+0x2bc>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	2303      	movs	r3, #3
 8002412:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8002416:	4893      	ldr	r0, [pc, #588]	; (8002664 <ReadInputs+0x2c0>)
 8002418:	f000 ff78 	bl	800330c <MyHalfBufferAverage>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);	// PA5
 8002424:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <ReadInputs+0x2bc>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	2305      	movs	r3, #5
 800242c:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8002430:	488c      	ldr	r0, [pc, #560]	; (8002664 <ReadInputs+0x2c0>)
 8002432:	f000 ff6b 	bl	800330c <MyHalfBufferAverage>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);	// PA4
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <ReadInputs+0x2bc>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	2304      	movs	r3, #4
 8002446:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800244a:	4886      	ldr	r0, [pc, #536]	; (8002664 <ReadInputs+0x2c0>)
 800244c:	f000 ff5e 	bl	800330c <MyHalfBufferAverage>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);	// PA7
 8002458:	4b81      	ldr	r3, [pc, #516]	; (8002660 <ReadInputs+0x2bc>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	2307      	movs	r3, #7
 8002460:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8002464:	487f      	ldr	r0, [pc, #508]	; (8002664 <ReadInputs+0x2c0>)
 8002466:	f000 ff51 	bl	800330c <MyHalfBufferAverage>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);	// PA7
 8002472:	4b7b      	ldr	r3, [pc, #492]	; (8002660 <ReadInputs+0x2bc>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	2306      	movs	r3, #6
 800247a:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800247e:	4879      	ldr	r0, [pc, #484]	; (8002664 <ReadInputs+0x2c0>)
 8002480:	f000 ff44 	bl	800330c <MyHalfBufferAverage>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	865a      	strh	r2, [r3, #50]	; 0x32

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f919 	bl	80006c8 <__aeabi_i2f>
 8002496:	4603      	mov	r3, r0
 8002498:	4973      	ldr	r1, [pc, #460]	; (8002668 <ReadInputs+0x2c4>)
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f968 	bl	8000770 <__aeabi_fmul>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4972      	ldr	r1, [pc, #456]	; (800266c <ReadInputs+0x2c8>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fa17 	bl	80008d8 <__aeabi_fdiv>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	605a      	str	r2, [r3, #4]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f906 	bl	80006c8 <__aeabi_i2f>
 80024bc:	4603      	mov	r3, r0
 80024be:	496a      	ldr	r1, [pc, #424]	; (8002668 <ReadInputs+0x2c4>)
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f955 	bl	8000770 <__aeabi_fmul>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4968      	ldr	r1, [pc, #416]	; (800266c <ReadInputs+0x2c8>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fa04 	bl	80008d8 <__aeabi_fdiv>
 80024d0:	4603      	mov	r3, r0
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f8f3 	bl	80006c8 <__aeabi_i2f>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4960      	ldr	r1, [pc, #384]	; (8002668 <ReadInputs+0x2c4>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f942 	bl	8000770 <__aeabi_fmul>
 80024ec:	4603      	mov	r3, r0
 80024ee:	495f      	ldr	r1, [pc, #380]	; (800266c <ReadInputs+0x2c8>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe f9f1 	bl	80008d8 <__aeabi_fdiv>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f8e0 	bl	80006c8 <__aeabi_i2f>
 8002508:	4603      	mov	r3, r0
 800250a:	4957      	ldr	r1, [pc, #348]	; (8002668 <ReadInputs+0x2c4>)
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f92f 	bl	8000770 <__aeabi_fmul>
 8002512:	4603      	mov	r3, r0
 8002514:	4955      	ldr	r1, [pc, #340]	; (800266c <ReadInputs+0x2c8>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f9de 	bl	80008d8 <__aeabi_fdiv>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f8cd 	bl	80006c8 <__aeabi_i2f>
 800252e:	4603      	mov	r3, r0
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <ReadInputs+0x2c4>)
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f91c 	bl	8000770 <__aeabi_fmul>
 8002538:	4603      	mov	r3, r0
 800253a:	494c      	ldr	r1, [pc, #304]	; (800266c <ReadInputs+0x2c8>)
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f9cb 	bl	80008d8 <__aeabi_fdiv>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f8ba 	bl	80006c8 <__aeabi_i2f>
 8002554:	4603      	mov	r3, r0
 8002556:	4944      	ldr	r1, [pc, #272]	; (8002668 <ReadInputs+0x2c4>)
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe f909 	bl	8000770 <__aeabi_fmul>
 800255e:	4603      	mov	r3, r0
 8002560:	4942      	ldr	r1, [pc, #264]	; (800266c <ReadInputs+0x2c8>)
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f9b8 	bl	80008d8 <__aeabi_fdiv>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe f8a7 	bl	80006c8 <__aeabi_i2f>
 800257a:	4603      	mov	r3, r0
 800257c:	493a      	ldr	r1, [pc, #232]	; (8002668 <ReadInputs+0x2c4>)
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe f8f6 	bl	8000770 <__aeabi_fmul>
 8002584:	4603      	mov	r3, r0
 8002586:	4939      	ldr	r1, [pc, #228]	; (800266c <ReadInputs+0x2c8>)
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe f9a5 	bl	80008d8 <__aeabi_fdiv>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe f894 	bl	80006c8 <__aeabi_i2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4931      	ldr	r1, [pc, #196]	; (8002668 <ReadInputs+0x2c4>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe f8e3 	bl	8000770 <__aeabi_fmul>
 80025aa:	4603      	mov	r3, r0
 80025ac:	492f      	ldr	r1, [pc, #188]	; (800266c <ReadInputs+0x2c8>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe f992 	bl	80008d8 <__aeabi_fdiv>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	621a      	str	r2, [r3, #32]

	//Digital Inputs
	inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 80025bc:	2101      	movs	r1, #1
 80025be:	482c      	ldr	r0, [pc, #176]	; (8002670 <ReadInputs+0x2cc>)
 80025c0:	f004 f8e8 	bl	8006794 <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 80025ce:	2102      	movs	r1, #2
 80025d0:	4827      	ldr	r0, [pc, #156]	; (8002670 <ReadInputs+0x2cc>)
 80025d2:	f004 f8df 	bl	8006794 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 80025e0:	2120      	movs	r1, #32
 80025e2:	4823      	ldr	r0, [pc, #140]	; (8002670 <ReadInputs+0x2cc>)
 80025e4:	f004 f8d6 	bl	8006794 <HAL_GPIO_ReadPin>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	481e      	ldr	r0, [pc, #120]	; (8002670 <ReadInputs+0x2cc>)
 80025f6:	f004 f8cd 	bl	8006794 <HAL_GPIO_ReadPin>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <ReadInputs+0x2d0>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	inputs->BSWButtonB = BButtonBCAN;
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <ReadInputs+0x2d4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	inputs->BSWButtonC = BButtonCCAN;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <ReadInputs+0x2d8>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	inputs->BSWButtonD = BButtonDCAN;
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <ReadInputs+0x2dc>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	inputs->BSWButtonE = BButtonECAN;
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <ReadInputs+0x2e0>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	inputs->BSWButtonF = BButtonFCAN;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <ReadInputs+0x2e4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

		// Inverted logic!! DriverKill=1 means ShutDown is Open, DriverKill=0 means ShutDown is closed
	if(inputs->NSHIFTERDIN04 && (tBDriverKillTimer < tInputsTimmer) && inputs->BDriverKill) {
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02f      	beq.n	80026b6 <ReadInputs+0x312>
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <ReadInputs+0x2e8>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	e019      	b.n	8002690 <ReadInputs+0x2ec>
 800265c:	20000170 	.word	0x20000170
 8002660:	20000161 	.word	0x20000161
 8002664:	20000390 	.word	0x20000390
 8002668:	4055c28f 	.word	0x4055c28f
 800266c:	457ff000 	.word	0x457ff000
 8002670:	40010c00 	.word	0x40010c00
 8002674:	20000158 	.word	0x20000158
 8002678:	20000168 	.word	0x20000168
 800267c:	20000182 	.word	0x20000182
 8002680:	20000160 	.word	0x20000160
 8002684:	20000174 	.word	0x20000174
 8002688:	20000178 	.word	0x20000178
 800268c:	20000188 	.word	0x20000188
 8002690:	4ba9      	ldr	r3, [pc, #676]	; (8002938 <ReadInputs+0x594>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d20e      	bcs.n	80026b6 <ReadInputs+0x312>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <ReadInputs+0x312>
		inputs->BDriverKill = 0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		tBDriverKillTimer = tInputsTimmer + DRIVER_KILL_DEBOUNCE;
 80026aa:	4ba3      	ldr	r3, [pc, #652]	; (8002938 <ReadInputs+0x594>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	33c8      	adds	r3, #200	; 0xc8
 80026b0:	4aa2      	ldr	r2, [pc, #648]	; (800293c <ReadInputs+0x598>)
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e00d      	b.n	80026d2 <ReadInputs+0x32e>
	}
	else if(!inputs->NSHIFTERDIN04 & !inputs->BDriverKill) {
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <ReadInputs+0x32e>
		inputs->BDriverKill = 1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	// ---------------------------------------------------------------------------------------------------
	// NGear Input

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3340      	adds	r3, #64	; 0x40
 80026e2:	4997      	ldr	r1, [pc, #604]	; (8002940 <ReadInputs+0x59c>)
 80026e4:	9101      	str	r1, [sp, #4]
 80026e6:	4996      	ldr	r1, [pc, #600]	; (8002940 <ReadInputs+0x59c>)
 80026e8:	9100      	str	r1, [sp, #0]
 80026ea:	4996      	ldr	r1, [pc, #600]	; (8002944 <ReadInputs+0x5a0>)
 80026ec:	2006      	movs	r0, #6
 80026ee:	f001 ff63 	bl	80045b8 <My2DMapInterpolate>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fe87 	bl	8000414 <__aeabi_f2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f006 fb33 	bl	8008d78 <round>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f7fd fefb 	bl	8000514 <__aeabi_d2uiz>
 800271e:	4603      	mov	r3, r0
 8002720:	b2da      	uxtb	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800272e:	2b05      	cmp	r3, #5
 8002730:	bf28      	it	cs
 8002732:	2305      	movcs	r3, #5
 8002734:	b2da      	uxtb	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	// False Neutral detection
	if(inputs->NGearRaw >= NGearRawLimsMaxMap[inputs->NGear] || inputs->NGearRaw <= NGearRawLimsMinMap[inputs->NGear]) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002746:	4619      	mov	r1, r3
 8002748:	4b7f      	ldr	r3, [pc, #508]	; (8002948 <ReadInputs+0x5a4>)
 800274a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800274e:	4619      	mov	r1, r3
 8002750:	4610      	mov	r0, r2
 8002752:	f7fe f9bf 	bl	8000ad4 <__aeabi_fcmpge>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10f      	bne.n	800277c <ReadInputs+0x3d8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002766:	4619      	mov	r1, r3
 8002768:	4b78      	ldr	r3, [pc, #480]	; (800294c <ReadInputs+0x5a8>)
 800276a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f7fe f9a5 	bl	8000ac0 <__aeabi_fcmple>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <ReadInputs+0x3ea>
		tBFalseNeutral = tInputsTimmer + FALSE_NEUTRAL_DEBOUNCE;
 800277c:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <ReadInputs+0x594>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3328      	adds	r3, #40	; 0x28
 8002782:	4a73      	ldr	r2, [pc, #460]	; (8002950 <ReadInputs+0x5ac>)
 8002784:	6013      	str	r3, [r2, #0]
		BFalseNeutralState = 1;
 8002786:	4b73      	ldr	r3, [pc, #460]	; (8002954 <ReadInputs+0x5b0>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e002      	b.n	8002794 <ReadInputs+0x3f0>
	}
	else {
		BFalseNeutralState = 0;
 800278e:	4b71      	ldr	r3, [pc, #452]	; (8002954 <ReadInputs+0x5b0>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
	}

	if(tBFalseNeutral < tInputsTimmer && BFalseNeutralState) { //leave some time for the NGear to settle before deciding if it is in false neutral and to avoid flickering
 8002794:	4b6e      	ldr	r3, [pc, #440]	; (8002950 <ReadInputs+0x5ac>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b67      	ldr	r3, [pc, #412]	; (8002938 <ReadInputs+0x594>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <ReadInputs+0x40c>
 80027a0:	4b6c      	ldr	r3, [pc, #432]	; (8002954 <ReadInputs+0x5b0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <ReadInputs+0x40c>
		inputs->BFalseNeutral = 1; // it gets reset inside the controller code at the post shift phase after a successful gear change
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}

	// check for errors
	if(inputs->BNGearInError) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <ReadInputs+0x41e>
		inputs->NGear = NGEAR_INERROR_DEFAULT;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 80027c2:	4b65      	ldr	r3, [pc, #404]	; (8002958 <ReadInputs+0x5b4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80027ca:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <ReadInputs+0x594>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d204      	bcs.n	80027dc <ReadInputs+0x438>
		inputs->BSteeringWheelFitted = 0;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80027da:	e003      	b.n	80027e4 <ReadInputs+0x440>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <ReadInputs+0x460>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		inputs->BDeclutchRequestInError = 0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8002802:	e007      	b.n	8002814 <ReadInputs+0x470>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Inputs

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <ReadInputs+0x5b8>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b25b      	sxtb	r3, r3
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8002822:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <ReadInputs+0x5bc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b25a      	sxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchPaddleMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_PADDLE_MARGIN_MIN, VrCLUTCH_PADDLE_MARGIN_MAX);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3360      	adds	r3, #96	; 0x60
 800283e:	4940      	ldr	r1, [pc, #256]	; (8002940 <ReadInputs+0x59c>)
 8002840:	9101      	str	r1, [sp, #4]
 8002842:	493f      	ldr	r1, [pc, #252]	; (8002940 <ReadInputs+0x59c>)
 8002844:	9100      	str	r1, [sp, #0]
 8002846:	4947      	ldr	r1, [pc, #284]	; (8002964 <ReadInputs+0x5c0>)
 8002848:	2002      	movs	r0, #2
 800284a:	f001 feb5 	bl	80045b8 <My2DMapInterpolate>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800285e:	2b00      	cmp	r3, #0
 8002860:	d012      	beq.n	8002888 <ReadInputs+0x4e4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10d      	bne.n	8002888 <ReadInputs+0x4e4>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f993 2058 	ldrsb.w	r2, [r3, #88]	; 0x58
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <ReadInputs+0x5c4>)
 8002874:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		inputs->BrClutchPaddleInError = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002886:	e02d      	b.n	80028e4 <ReadInputs+0x540>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11d      	bne.n	80028ce <ReadInputs+0x52a>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fdbc 	bl	8000414 <__aeabi_f2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f006 fa68 	bl	8008d78 <round>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fd fe08 	bl	80004c4 <__aeabi_d2iz>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <ReadInputs+0x5c4>)
 80028ba:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		inputs->BrClutchPaddleInError = 0;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80028cc:	e00a      	b.n	80028e4 <ReadInputs+0x540>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		inputs->NrClutchPaddleSource = NoSource;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <ReadInputs+0x5c4>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <ReadInputs+0x55e>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <ReadInputs+0x558>
 80028f8:	2264      	movs	r2, #100	; 0x64
 80028fa:	e000      	b.n	80028fe <ReadInputs+0x55a>
 80028fc:	2200      	movs	r2, #0
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <ReadInputs+0x5c8>)
 8002900:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <ReadInputs+0x5c8>)
 8002904:	f993 2000 	ldrsb.w	r2, [r3]
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <ReadInputs+0x5c4>)
 800290a:	f993 3000 	ldrsb.w	r3, [r3]
 800290e:	4293      	cmp	r3, r2
 8002910:	bfb8      	it	lt
 8002912:	4613      	movlt	r3, r2
 8002914:	b25b      	sxtb	r3, r3
 8002916:	2b63      	cmp	r3, #99	; 0x63
 8002918:	dc2a      	bgt.n	8002970 <ReadInputs+0x5cc>
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <ReadInputs+0x5c8>)
 800291c:	f993 2000 	ldrsb.w	r2, [r3]
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <ReadInputs+0x5c4>)
 8002922:	f993 3000 	ldrsb.w	r3, [r3]
 8002926:	4293      	cmp	r3, r2
 8002928:	bfb8      	it	lt
 800292a:	4613      	movlt	r3, r2
 800292c:	b25b      	sxtb	r3, r3
 800292e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002932:	b25a      	sxtb	r2, r3
 8002934:	e01d      	b.n	8002972 <ReadInputs+0x5ce>
 8002936:	bf00      	nop
 8002938:	20000170 	.word	0x20000170
 800293c:	20000188 	.word	0x20000188
 8002940:	3dcccccd 	.word	0x3dcccccd
 8002944:	080091c8 	.word	0x080091c8
 8002948:	08009210 	.word	0x08009210
 800294c:	080091f8 	.word	0x080091f8
 8002950:	2000017c 	.word	0x2000017c
 8002954:	2000016b 	.word	0x2000016b
 8002958:	2000015c 	.word	0x2000015c
 800295c:	20000150 	.word	0x20000150
 8002960:	20000179 	.word	0x20000179
 8002964:	08009228 	.word	0x08009228
 8002968:	20000169 	.word	0x20000169
 800296c:	2000016c 	.word	0x2000016c
 8002970:	2264      	movs	r2, #100	; 0x64
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Inputs

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8002978:	4b92      	ldr	r3, [pc, #584]	; (8002bc4 <ReadInputs+0x820>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8002984:	4b90      	ldr	r3, [pc, #576]	; (8002bc8 <ReadInputs+0x824>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8002990:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <ReadInputs+0x828>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 800299c:	4b8c      	ldr	r3, [pc, #560]	; (8002bd0 <ReadInputs+0x82c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	// Analog Input & Debouncing
	if(tVUpDn < tInputsTimmer) {
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <ReadInputs+0x830>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b8a      	ldr	r3, [pc, #552]	; (8002bd8 <ReadInputs+0x834>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d208      	bcs.n	80029c6 <ReadInputs+0x622>
		inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	64da      	str	r2, [r3, #76]	; 0x4c
		tVUpDn = tInputsTimmer + VUPDN_DEBOUNCE;
 80029bc:	4b86      	ldr	r3, [pc, #536]	; (8002bd8 <ReadInputs+0x834>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3332      	adds	r3, #50	; 0x32
 80029c2:	4a84      	ldr	r2, [pc, #528]	; (8002bd4 <ReadInputs+0x830>)
 80029c4:	6013      	str	r3, [r2, #0]
	}

	// STUCK detection ???

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fe7b 	bl	80006c8 <__aeabi_i2f>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4981      	ldr	r1, [pc, #516]	; (8002bdc <ReadInputs+0x838>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe f87c 	bl	8000ad4 <__aeabi_fcmpge>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <ReadInputs+0x650>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80029f2:	e058      	b.n	8002aa6 <ReadInputs+0x702>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	4979      	ldr	r1, [pc, #484]	; (8002be0 <ReadInputs+0x83c>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f860 	bl	8000ac0 <__aeabi_fcmple>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d011      	beq.n	8002a2a <ReadInputs+0x686>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4976      	ldr	r1, [pc, #472]	; (8002be4 <ReadInputs+0x840>)
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f861 	bl	8000ad4 <__aeabi_fcmpge>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <ReadInputs+0x686>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002a28:	e03d      	b.n	8002aa6 <ReadInputs+0x702>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	496e      	ldr	r1, [pc, #440]	; (8002be8 <ReadInputs+0x844>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f845 	bl	8000ac0 <__aeabi_fcmple>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d011      	beq.n	8002a60 <ReadInputs+0x6bc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	496a      	ldr	r1, [pc, #424]	; (8002bec <ReadInputs+0x848>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f846 	bl	8000ad4 <__aeabi_fcmpge>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <ReadInputs+0x6bc>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002a5e:	e022      	b.n	8002aa6 <ReadInputs+0x702>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	4962      	ldr	r1, [pc, #392]	; (8002bf0 <ReadInputs+0x84c>)
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe f82a 	bl	8000ac0 <__aeabi_fcmple>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <ReadInputs+0x6f2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	495f      	ldr	r1, [pc, #380]	; (8002bf4 <ReadInputs+0x850>)
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f82b 	bl	8000ad4 <__aeabi_fcmpge>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <ReadInputs+0x6f2>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002a94:	e007      	b.n	8002aa6 <ReadInputs+0x702>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <ReadInputs+0x734>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10e      	bne.n	8002ad8 <ReadInputs+0x734>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		inputs->NBUpshiftRequestSource = CAN;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequestInError = 0;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002ad6:	e025      	b.n	8002b24 <ReadInputs+0x780>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d114      	bne.n	8002b0c <ReadInputs+0x768>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		inputs->NBUpshiftRequestSource = Analog;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequestInError = 0;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002b0a:	e00b      	b.n	8002b24 <ReadInputs+0x780>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		inputs->NBUpshiftRequestSource = NoSource;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d013      	beq.n	8002b56 <ReadInputs+0x7b2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10e      	bne.n	8002b56 <ReadInputs+0x7b2>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->NBDnshiftRequestSource = CAN;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->BDnShiftRequestInError = 0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8002b54:	e025      	b.n	8002ba2 <ReadInputs+0x7fe>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d114      	bne.n	8002b8a <ReadInputs+0x7e6>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->NBDnshiftRequestSource = Analog;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->BDnShiftRequestInError = 0;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8002b88:	e00b      	b.n	8002ba2 <ReadInputs+0x7fe>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->NBDnshiftRequestSource = NoSource;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	// ---------------------------------------------------------------------------------------------------
	// Launch Button

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d025      	beq.n	8002bf8 <ReadInputs+0x854>
		inputs->BLaunchRequest = inputs->BSWButtonD;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		inputs->BLaunchRequestInError = 0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8002bc0:	e022      	b.n	8002c08 <ReadInputs+0x864>
 8002bc2:	bf00      	nop
 8002bc4:	20000162 	.word	0x20000162
 8002bc8:	2000016d 	.word	0x2000016d
 8002bcc:	20000184 	.word	0x20000184
 8002bd0:	20000177 	.word	0x20000177
 8002bd4:	20000154 	.word	0x20000154
 8002bd8:	20000170 	.word	0x20000170
 8002bdc:	40200000 	.word	0x40200000
 8002be0:	3f8ccccd 	.word	0x3f8ccccd
 8002be4:	3f733333 	.word	0x3f733333
 8002be8:	3ff33333 	.word	0x3ff33333
 8002bec:	3fd9999a 	.word	0x3fd9999a
 8002bf0:	3f666666 	.word	0x3f666666
 8002bf4:	3f4ccccd 	.word	0x3f4ccccd
	}
	else {
		inputs->BLaunchRequestInError = 1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e


	// ---------------------------------------------------------------------------------------------------
	// Rotary Switch

	inputs->VSwhitchA = inputs->VSHIFTERAnalog05;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	675a      	str	r2, [r3, #116]	; 0x74
	inputs->BNSwitchAInError = My2DMapInterpolate(SWITCHA_MAP_SIZE, NSWitchAmap, inputs->VSwhitchA, &(inputs->NSwitchARaw), VNSWITCH_MARGIN, VNSWITCH_MARGIN);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3378      	adds	r3, #120	; 0x78
 8002c18:	4993      	ldr	r1, [pc, #588]	; (8002e68 <ReadInputs+0xac4>)
 8002c1a:	9101      	str	r1, [sp, #4]
 8002c1c:	4992      	ldr	r1, [pc, #584]	; (8002e68 <ReadInputs+0xac4>)
 8002c1e:	9100      	str	r1, [sp, #0]
 8002c20:	4992      	ldr	r1, [pc, #584]	; (8002e6c <ReadInputs+0xac8>)
 8002c22:	200e      	movs	r0, #14
 8002c24:	f001 fcc8 	bl	80045b8 <My2DMapInterpolate>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	inputs->NSwitchA = CLAMP((uint8_t)round(inputs->NSwitchARaw), 1, SWITCHA_MAP_SIZE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fbec 	bl	8000414 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f006 f898 	bl	8008d78 <round>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7fd fc60 	bl	8000514 <__aeabi_d2uiz>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b0d      	cmp	r3, #13
 8002c5a:	d817      	bhi.n	8002c8c <ReadInputs+0x8e8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fbd7 	bl	8000414 <__aeabi_f2d>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f006 f883 	bl	8008d78 <round>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4610      	mov	r0, r2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f7fd fc4b 	bl	8000514 <__aeabi_d2uiz>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	bf38      	it	cc
 8002c86:	2301      	movcc	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	e000      	b.n	8002c8e <ReadInputs+0x8ea>
 8002c8c:	220e      	movs	r2, #14
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage

	inputs->VSupply = inputs->VSHIFTERAnalog01 / VSUPPLY_DIVIDER_GAIN;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4975      	ldr	r1, [pc, #468]	; (8002e70 <ReadInputs+0xacc>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fe1c 	bl	80008d8 <__aeabi_fdiv>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	// ---------------------------------------------------------------------------------------------------
	// nEngine

	// CAN Input
	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 8002caa:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <ReadInputs+0xad0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8002cb2:	4b71      	ldr	r3, [pc, #452]	; (8002e78 <ReadInputs+0xad4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d20c      	bcs.n	8002cd4 <ReadInputs+0x930>
		inputs->BnEngineInError = 1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		inputs->BnEngineReliable = 0;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		inputs->nEngine = 0; 		// we force to zero if in error
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8002cd2:	e007      	b.n	8002ce4 <ReadInputs+0x940>
	}
	else {
		inputs->BnEngineInError = 0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		inputs->BnEngineReliable = 1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8002ce4:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <ReadInputs+0xad8>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <ReadInputs+0x960>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8002d04:	4b5e      	ldr	r3, [pc, #376]	; (8002e80 <ReadInputs+0xadc>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 8002d10:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <ReadInputs+0xae0>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d112      	bne.n	8002d4e <ReadInputs+0x9aa>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <ReadInputs+0x9aa>
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <ReadInputs+0xae4>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <ReadInputs+0x9aa>
		BUpShiftRequested = 1;
 8002d3a:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <ReadInputs+0xae4>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e016      	b.n	8002d7c <ReadInputs+0x9d8>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <ReadInputs+0x9d8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <ReadInputs+0x9d8>
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <ReadInputs+0xae4>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <ReadInputs+0x9d8>
		BUpShiftRequested = 0;
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <ReadInputs+0xae4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f043 0202 	orr.w	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d112      	bne.n	8002dac <ReadInputs+0xa08>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <ReadInputs+0xa08>
 8002d90:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <ReadInputs+0xae8>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <ReadInputs+0xa08>
		BDnShiftRequested = 1;
 8002d98:	4b3c      	ldr	r3, [pc, #240]	; (8002e8c <ReadInputs+0xae8>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e016      	b.n	8002dda <ReadInputs+0xa36>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d111      	bne.n	8002dda <ReadInputs+0xa36>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10c      	bne.n	8002dda <ReadInputs+0xa36>
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <ReadInputs+0xae8>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <ReadInputs+0xa36>
		BDnShiftRequested = 0;
 8002dc8:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <ReadInputs+0xae8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f043 0208 	orr.w	r2, r3, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d112      	bne.n	8002e0a <ReadInputs+0xa66>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <ReadInputs+0xa66>
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <ReadInputs+0xaec>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <ReadInputs+0xa66>
		BLaunchRequested = 1;
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <ReadInputs+0xaec>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f043 0210 	orr.w	r2, r3, #16
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e016      	b.n	8002e38 <ReadInputs+0xa94>
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d111      	bne.n	8002e38 <ReadInputs+0xa94>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <ReadInputs+0xa94>
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <ReadInputs+0xaec>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <ReadInputs+0xa94>
		BLaunchRequested = 0;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <ReadInputs+0xaec>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d12a      	bne.n	8002e98 <ReadInputs+0xaf4>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d025      	beq.n	8002e98 <ReadInputs+0xaf4>
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <ReadInputs+0xaf0>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d121      	bne.n	8002e98 <ReadInputs+0xaf4>
		BDeclutchRequested = 1;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <ReadInputs+0xaf0>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e02e      	b.n	8002ec6 <ReadInputs+0xb22>
 8002e68:	3dcccccd 	.word	0x3dcccccd
 8002e6c:	08009238 	.word	0x08009238
 8002e70:	3e617c1c 	.word	0x3e617c1c
 8002e74:	20000164 	.word	0x20000164
 8002e78:	20000170 	.word	0x20000170
 8002e7c:	20000180 	.word	0x20000180
 8002e80:	2000016e 	.word	0x2000016e
 8002e84:	200000f0 	.word	0x200000f0
 8002e88:	20000185 	.word	0x20000185
 8002e8c:	20000175 	.word	0x20000175
 8002e90:	2000016a 	.word	0x2000016a
 8002e94:	20000183 	.word	0x20000183
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d111      	bne.n	8002ec6 <ReadInputs+0xb22>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10c      	bne.n	8002ec6 <ReadInputs+0xb22>
 8002eac:	4bb4      	ldr	r3, [pc, #720]	; (8003180 <ReadInputs+0xddc>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <ReadInputs+0xb22>
		BDeclutchRequested = 0;
 8002eb4:	4bb2      	ldr	r3, [pc, #712]	; (8003180 <ReadInputs+0xddc>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d124      	bne.n	8002f1a <ReadInputs+0xb76>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8002ed6:	2b4f      	cmp	r3, #79	; 0x4f
 8002ed8:	dd0d      	ble.n	8002ef6 <ReadInputs+0xb52>
 8002eda:	4baa      	ldr	r3, [pc, #680]	; (8003184 <ReadInputs+0xde0>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <ReadInputs+0xb52>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 8002eee:	4ba5      	ldr	r3, [pc, #660]	; (8003184 <ReadInputs+0xde0>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e011      	b.n	8002f1a <ReadInputs+0xb76>
		}
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	dc0c      	bgt.n	8002f1a <ReadInputs+0xb76>
 8002f00:	4ba0      	ldr	r3, [pc, #640]	; (8003184 <ReadInputs+0xde0>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <ReadInputs+0xb76>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 8002f14:	4b9b      	ldr	r3, [pc, #620]	; (8003184 <ReadInputs+0xde0>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
	}

	// ---------------------------------------------------------------------------------------------------
	// INPUTS  STATUS

	inputs->NInputsStatusWord = 0;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BNGearInError 					<< 0;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpShiftButtonCANInError 		<< 1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 8002f42:	0052      	lsls	r2, r2, #1
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDnShiftButtonCANInError 		<< 2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8002f58:	0092      	lsls	r2, r2, #2
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpDnShiftButtonAnalogInError 	<< 3;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8002f6e:	00d2      	lsls	r2, r2, #3
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpShiftRequestInError 		<< 4;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDnShiftRequestInError 		<< 5;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8002f9a:	0152      	lsls	r2, r2, #5
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BrClutchPaddleRawCANInError 	<< 6;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 8002fb0:	0192      	lsls	r2, r2, #6
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BrClutchPaddleRawAnalogInError << 7;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8002fc6:	01d2      	lsls	r2, r2, #7
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BrClutchPaddleInError 			<< 8;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8002fdc:	0212      	lsls	r2, r2, #8
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BLaunchRequestInError 			<< 9;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8002ff2:	0252      	lsls	r2, r2, #9
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDeclutchRequestInError 		<< 10;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	f892 206f 	ldrb.w	r2, [r2, #111]	; 0x6f
 8003008:	0292      	lsls	r2, r2, #10
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BNSwitchAInError 				<< 11;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 800301e:	02d2      	lsls	r2, r2, #11
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BnEngineInError 				<< 12;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8003034:	0312      	lsls	r2, r2, #12
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= !inputs->BSteeringWheelFitted 			<< 13;	// inverted in order to simulate the error state
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800304a:	2a00      	cmp	r2, #0
 800304c:	d102      	bne.n	8003054 <ReadInputs+0xcb0>
 800304e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003052:	e000      	b.n	8003056 <ReadInputs+0xcb2>
 8003054:	2200      	movs	r2, #0
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0							 			<< 14;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0						 				<< 15;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	inputs->NInputsStatusWord |= inputs->BDriverKill	 				<< 16;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8003082:	0412      	lsls	r2, r2, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpShiftRequest 				<< 17;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8003098:	0452      	lsls	r2, r2, #17
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDnShiftRequest 				<< 18;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80030ae:	0492      	lsls	r2, r2, #18
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BFalseNeutral	 				<< 19;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
 80030c4:	04d2      	lsls	r2, r2, #19
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 20;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 21;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 22;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 23;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BLaunchRequest	 				<< 24;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	f892 206e 	ldrb.w	r2, [r2, #110]	; 0x6e
 800310a:	0612      	lsls	r2, r2, #24
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDeclutchRequest 				<< 25;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8003120:	0652      	lsls	r2, r2, #25
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= (inputs->NrClutchPaddleSource & 0x02)	<< 26;	// 2 bits (26,27)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003136:	069b      	lsls	r3, r3, #26
 8003138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= (inputs->NBUpshiftRequestSource & 0x02)<< 28;	// 2 bits (28,29)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= (inputs->NBDnshiftRequestSource & 0x02)<< 30;	// 2 bits (30,31)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800316a:	079b      	lsls	r3, r3, #30
 800316c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	// ---------------------------------------------------------------------------------------------------

}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000183 	.word	0x20000183
 8003184:	20000176 	.word	0x20000176

08003188 <InitInputs>:

void InitInputs(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <InitInputs+0x1c>)
 800318e:	f001 ff2d 	bl	8004fec <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 8003192:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 8003196:	4904      	ldr	r1, [pc, #16]	; (80031a8 <InitInputs+0x20>)
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <InitInputs+0x1c>)
 800319a:	f001 fc3d 	bl	8004a18 <HAL_ADC_Start_DMA>
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200001fc 	.word	0x200001fc
 80031a8:	20000390 	.word	0x20000390

080031ac <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08c      	sub	sp, #48	; 0x30
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	f107 0214 	add.w	r2, r7, #20
 80031be:	6839      	ldr	r1, [r7, #0]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f002 fb10 	bl	80057e6 <HAL_CAN_GetRxMessage>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80031cc:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <CAN_RX+0x120>)
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <CAN_RX+0x120>)
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	e074      	b.n	80032c6 <CAN_RX+0x11a>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80031e2:	d004      	beq.n	80031ee <CAN_RX+0x42>
 80031e4:	f240 3211 	movw	r2, #785	; 0x311
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d05c      	beq.n	80032a6 <CAN_RX+0xfa>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
		 break;

	 default:
		 break;
 80031ec:	e06b      	b.n	80032c6 <CAN_RX+0x11a>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 80031ee:	f001 fb0d 	bl	800480c <HAL_GetTick>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4a36      	ldr	r2, [pc, #216]	; (80032d0 <CAN_RX+0x124>)
 80031f6:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 80031f8:	7b3b      	ldrb	r3, [r7, #12]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <CAN_RX+0x128>)
 8003202:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 8003204:	7b3b      	ldrb	r3, [r7, #12]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <CAN_RX+0x12c>)
 8003212:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 8003214:	7b3b      	ldrb	r3, [r7, #12]
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	b2db      	uxtb	r3, r3
 800321a:	b25b      	sxtb	r3, r3
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	b25a      	sxtb	r2, r3
 8003222:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <CAN_RX+0x130>)
 8003224:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 8003226:	7b7b      	ldrb	r3, [r7, #13]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <CAN_RX+0x134>)
 8003230:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 8003232:	7b7b      	ldrb	r3, [r7, #13]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <CAN_RX+0x138>)
 8003240:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 8003242:	7b7b      	ldrb	r3, [r7, #13]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <CAN_RX+0x13c>)
 8003250:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 8003252:	7b7b      	ldrb	r3, [r7, #13]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b23      	ldr	r3, [pc, #140]	; (80032ec <CAN_RX+0x140>)
 8003260:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 8003262:	7b7b      	ldrb	r3, [r7, #13]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <CAN_RX+0x144>)
 8003270:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 8003272:	7b7b      	ldrb	r3, [r7, #13]
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <CAN_RX+0x148>)
 8003280:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 8003282:	7b7b      	ldrb	r3, [r7, #13]
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <CAN_RX+0x14c>)
 8003290:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 8003292:	7b7b      	ldrb	r3, [r7, #13]
 8003294:	09db      	lsrs	r3, r3, #7
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <CAN_RX+0x150>)
 800329a:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 800329c:	7bbb      	ldrb	r3, [r7, #14]
 800329e:	b25a      	sxtb	r2, r3
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <CAN_RX+0x154>)
 80032a2:	701a      	strb	r2, [r3, #0]
		 break;
 80032a4:	e00f      	b.n	80032c6 <CAN_RX+0x11a>
		 tCANECULastSeen = HAL_GetTick();
 80032a6:	f001 fab1 	bl	800480c <HAL_GetTick>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <CAN_RX+0x158>)
 80032ae:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
 80032b0:	7b3b      	ldrb	r3, [r7, #12]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	b21a      	sxth	r2, r3
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b21b      	sxth	r3, r3
 80032be:	b29a      	uxth	r2, r3
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <CAN_RX+0x15c>)
 80032c2:	801a      	strh	r2, [r3, #0]
		 break;
 80032c4:	bf00      	nop
	 }
}
 80032c6:	3730      	adds	r7, #48	; 0x30
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200000f0 	.word	0x200000f0
 80032d0:	2000015c 	.word	0x2000015c
 80032d4:	20000162 	.word	0x20000162
 80032d8:	2000016d 	.word	0x2000016d
 80032dc:	20000150 	.word	0x20000150
 80032e0:	20000184 	.word	0x20000184
 80032e4:	20000177 	.word	0x20000177
 80032e8:	20000158 	.word	0x20000158
 80032ec:	20000168 	.word	0x20000168
 80032f0:	20000182 	.word	0x20000182
 80032f4:	20000160 	.word	0x20000160
 80032f8:	20000174 	.word	0x20000174
 80032fc:	20000178 	.word	0x20000178
 8003300:	20000179 	.word	0x20000179
 8003304:	20000164 	.word	0x20000164
 8003308:	20000180 	.word	0x20000180

0800330c <MyHalfBufferAverage>:



uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	807b      	strh	r3, [r7, #2]
 800331e:	460b      	mov	r3, r1
 8003320:	707b      	strb	r3, [r7, #1]
 8003322:	4613      	mov	r3, r2
 8003324:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 800332a:	787b      	ldrb	r3, [r7, #1]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <MyHalfBufferAverage+0x28>
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	e000      	b.n	8003336 <MyHalfBufferAverage+0x2a>
 8003334:	2300      	movs	r3, #0
 8003336:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	08db      	lsrs	r3, r3, #3
 800333c:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 800333e:	2300      	movs	r3, #0
 8003340:	827b      	strh	r3, [r7, #18]
 8003342:	e010      	b.n	8003366 <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 8003344:	8a7b      	ldrh	r3, [r7, #18]
 8003346:	00da      	lsls	r2, r3, #3
 8003348:	783b      	ldrb	r3, [r7, #0]
 800334a:	441a      	add	r2, r3
 800334c:	8a3b      	ldrh	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4413      	add	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8003360:	8a7b      	ldrh	r3, [r7, #18]
 8003362:	3301      	adds	r3, #1
 8003364:	827b      	strh	r3, [r7, #18]
 8003366:	8a7a      	ldrh	r2, [r7, #18]
 8003368:	89fb      	ldrh	r3, [r7, #14]
 800336a:	429a      	cmp	r2, r3
 800336c:	d3ea      	bcc.n	8003344 <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 800336e:	89fb      	ldrh	r3, [r7, #14]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	fbb2 f3f3 	udiv	r3, r2, r3
 8003376:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	b29b      	uxth	r3, r3

}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 800338e:	2100      	movs	r1, #0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff0b 	bl	80031ac <CAN_RX>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 80033a6:	2101      	movs	r1, #1
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff feff 	bl	80031ac <CAN_RX>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_CAN_ErrorCallback+0x20>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_CAN_ErrorCallback+0x20>)
 80033cc:	701a      	strb	r2, [r3, #0]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	2000016e 	.word	0x2000016e

080033dc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a08      	ldr	r2, [pc, #32]	; (8003408 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d107      	bne.n	80033fc <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f083 0301 	eor.w	r3, r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80033fa:	701a      	strb	r2, [r3, #0]
	}
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	200001fc 	.word	0x200001fc
 800340c:	20000161 	.word	0x20000161

08003410 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003414:	f3bf 8f4f 	dsb	sy
}
 8003418:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <__NVIC_SystemReset+0x24>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003422:	4904      	ldr	r1, [pc, #16]	; (8003434 <__NVIC_SystemReset+0x24>)
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <__NVIC_SystemReset+0x28>)
 8003426:	4313      	orrs	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800342a:	f3bf 8f4f 	dsb	sy
}
 800342e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <__NVIC_SystemReset+0x20>
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	05fa0004 	.word	0x05fa0004

0800343c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003442:	f001 f98b 	bl	800475c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003446:	f000 f849 	bl	80034dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800344a:	f000 fbaf 	bl	8003bac <MX_GPIO_Init>
  MX_DMA_Init();
 800344e:	f000 fb8f 	bl	8003b70 <MX_DMA_Init>
  MX_TIM3_Init();
 8003452:	f000 fb15 	bl	8003a80 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003456:	f000 f89d 	bl	8003594 <MX_ADC1_Init>
  MX_CAN_Init();
 800345a:	f000 f93d 	bl	80036d8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800345e:	f000 fb5d 	bl	8003b1c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003462:	f000 fac1 	bl	80039e8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003466:	f000 fa1f 	bl	80038a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 800346a:	4817      	ldr	r0, [pc, #92]	; (80034c8 <main+0x8c>)
 800346c:	f003 ffd6 	bl	800741c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 8003470:	4816      	ldr	r0, [pc, #88]	; (80034cc <main+0x90>)
 8003472:	f003 ff89 	bl	8007388 <HAL_TIM_Base_Start>

  InitInputs();
 8003476:	f7ff fe87 	bl	8003188 <InitInputs>
  InitController(&Inputs,&Outputs);
 800347a:	4915      	ldr	r1, [pc, #84]	; (80034d0 <main+0x94>)
 800347c:	4815      	ldr	r0, [pc, #84]	; (80034d4 <main+0x98>)
 800347e:	f7fd fb5d 	bl	8000b3c <InitController>
  InitOutputs();
 8003482:	f000 fc09 	bl	8003c98 <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 8003486:	2032      	movs	r0, #50	; 0x32
 8003488:	f001 f9ca 	bl	8004820 <HAL_Delay>
  uint32_t tMain, tExecution;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <main+0x9c>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0fa      	beq.n	800348c <main+0x50>
		  BCycleTimerFlag = 0;
 8003496:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <main+0x9c>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
		  tMain = HAL_GetTick();
 800349c:	f001 f9b6 	bl	800480c <HAL_GetTick>
 80034a0:	6078      	str	r0, [r7, #4]
		  ReadInputs(&Inputs);
 80034a2:	480c      	ldr	r0, [pc, #48]	; (80034d4 <main+0x98>)
 80034a4:	f7fe ff7e 	bl	80023a4 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 80034a8:	4909      	ldr	r1, [pc, #36]	; (80034d0 <main+0x94>)
 80034aa:	480a      	ldr	r0, [pc, #40]	; (80034d4 <main+0x98>)
 80034ac:	f7fd fc2c 	bl	8000d08 <Controller>
		  WriteOutputs(&Inputs,&Outputs);
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <main+0x94>)
 80034b2:	4808      	ldr	r0, [pc, #32]	; (80034d4 <main+0x98>)
 80034b4:	f000 fc0c 	bl	8003cd0 <WriteOutputs>
		  tExecution = HAL_GetTick() - tMain;
 80034b8:	f001 f9a8 	bl	800480c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	603b      	str	r3, [r7, #0]
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 80034c4:	e7e2      	b.n	800348c <main+0x50>
 80034c6:	bf00      	nop
 80034c8:	200001b4 	.word	0x200001b4
 80034cc:	200025d0 	.word	0x200025d0
 80034d0:	20002618 	.word	0x20002618
 80034d4:	200002b8 	.word	0x200002b8
 80034d8:	200000f2 	.word	0x200000f2

080034dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b094      	sub	sp, #80	; 0x50
 80034e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e6:	2228      	movs	r2, #40	; 0x28
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f005 f810 	bl	8008510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800350c:	2301      	movs	r3, #1
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003516:	2300      	movs	r3, #0
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800351a:	2301      	movs	r3, #1
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800351e:	2302      	movs	r3, #2
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003528:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800352c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800352e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003532:	4618      	mov	r0, r3
 8003534:	f003 f95e 	bl	80067f4 <HAL_RCC_OscConfig>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800353e:	f000 fba1 	bl	8003c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003542:	230f      	movs	r3, #15
 8003544:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003546:	2302      	movs	r3, #2
 8003548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800354e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003552:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f003 fbc8 	bl	8006cf4 <HAL_RCC_ClockConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800356a:	f000 fb8b 	bl	8003c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800356e:	2302      	movs	r3, #2
 8003570:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8003572:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003576:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f003 fd48 	bl	8007010 <HAL_RCCEx_PeriphCLKConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003586:	f000 fb7d 	bl	8003c84 <Error_Handler>
  }
}
 800358a:	bf00      	nop
 800358c:	3750      	adds	r7, #80	; 0x50
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80035a4:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035a6:	4a4b      	ldr	r2, [pc, #300]	; (80036d4 <MX_ADC1_Init+0x140>)
 80035a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80035aa:	4b49      	ldr	r3, [pc, #292]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80035b2:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035b8:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035be:	4b44      	ldr	r3, [pc, #272]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035c0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80035c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035c6:	4b42      	ldr	r3, [pc, #264]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80035cc:	4b40      	ldr	r3, [pc, #256]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035ce:	2208      	movs	r2, #8
 80035d0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80035d2:	483f      	ldr	r0, [pc, #252]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035d4:	f001 f948 	bl	8004868 <HAL_ADC_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80035de:	f000 fb51 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80035ea:	2303      	movs	r3, #3
 80035ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4837      	ldr	r0, [pc, #220]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80035f4:	f001 fb00 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80035fe:	f000 fb41 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003602:	2301      	movs	r3, #1
 8003604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003606:	2302      	movs	r3, #2
 8003608:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4830      	ldr	r0, [pc, #192]	; (80036d0 <MX_ADC1_Init+0x13c>)
 8003610:	f001 faf2 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800361a:	f000 fb33 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800361e:	2302      	movs	r3, #2
 8003620:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003622:	2303      	movs	r3, #3
 8003624:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	4619      	mov	r1, r3
 800362a:	4829      	ldr	r0, [pc, #164]	; (80036d0 <MX_ADC1_Init+0x13c>)
 800362c:	f001 fae4 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003636:	f000 fb25 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800363a:	2303      	movs	r3, #3
 800363c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800363e:	2304      	movs	r3, #4
 8003640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4822      	ldr	r0, [pc, #136]	; (80036d0 <MX_ADC1_Init+0x13c>)
 8003648:	f001 fad6 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8003652:	f000 fb17 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003656:	2304      	movs	r3, #4
 8003658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800365a:	2305      	movs	r3, #5
 800365c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	4619      	mov	r1, r3
 8003662:	481b      	ldr	r0, [pc, #108]	; (80036d0 <MX_ADC1_Init+0x13c>)
 8003664:	f001 fac8 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800366e:	f000 fb09 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003672:	2305      	movs	r3, #5
 8003674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003676:	2306      	movs	r3, #6
 8003678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4814      	ldr	r0, [pc, #80]	; (80036d0 <MX_ADC1_Init+0x13c>)
 8003680:	f001 faba 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800368a:	f000 fafb 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800368e:	2306      	movs	r3, #6
 8003690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003692:	2307      	movs	r3, #7
 8003694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4619      	mov	r1, r3
 800369a:	480d      	ldr	r0, [pc, #52]	; (80036d0 <MX_ADC1_Init+0x13c>)
 800369c:	f001 faac 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80036a6:	f000 faed 	bl	8003c84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80036aa:	2307      	movs	r3, #7
 80036ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80036ae:	2308      	movs	r3, #8
 80036b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <MX_ADC1_Init+0x13c>)
 80036b8:	f001 fa9e 	bl	8004bf8 <HAL_ADC_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80036c2:	f000 fadf 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200001fc 	.word	0x200001fc
 80036d4:	40012400 	.word	0x40012400

080036d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0a8      	sub	sp, #160	; 0xa0
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80036de:	4b70      	ldr	r3, [pc, #448]	; (80038a0 <MX_CAN_Init+0x1c8>)
 80036e0:	4a70      	ldr	r2, [pc, #448]	; (80038a4 <MX_CAN_Init+0x1cc>)
 80036e2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80036e4:	4b6e      	ldr	r3, [pc, #440]	; (80038a0 <MX_CAN_Init+0x1c8>)
 80036e6:	2204      	movs	r2, #4
 80036e8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80036ea:	4b6d      	ldr	r3, [pc, #436]	; (80038a0 <MX_CAN_Init+0x1c8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80036f0:	4b6b      	ldr	r3, [pc, #428]	; (80038a0 <MX_CAN_Init+0x1c8>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80036f6:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <MX_CAN_Init+0x1c8>)
 80036f8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80036fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80036fe:	4b68      	ldr	r3, [pc, #416]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003700:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003704:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003706:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003708:	2200      	movs	r2, #0
 800370a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800370c:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <MX_CAN_Init+0x1c8>)
 800370e:	2201      	movs	r2, #1
 8003710:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003712:	4b63      	ldr	r3, [pc, #396]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003714:	2200      	movs	r2, #0
 8003716:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8003718:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <MX_CAN_Init+0x1c8>)
 800371a:	2201      	movs	r2, #1
 800371c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800371e:	4b60      	ldr	r3, [pc, #384]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003724:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003726:	2200      	movs	r2, #0
 8003728:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800372a:	485d      	ldr	r0, [pc, #372]	; (80038a0 <MX_CAN_Init+0x1c8>)
 800372c:	f001 fd0c 	bl	8005148 <HAL_CAN_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8003736:	f000 faa5 	bl	8003c84 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_TX_ID01 << 5 ;
 800373a:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800373e:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8003744:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 800376a:	2301      	movs	r3, #1
 800376c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8003770:	2301      	movs	r3, #1
 8003772:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8003776:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800377a:	4619      	mov	r1, r3
 800377c:	4848      	ldr	r0, [pc, #288]	; (80038a0 <MX_CAN_Init+0x1c8>)
 800377e:	f001 fdde 	bl	800533e <HAL_CAN_ConfigFilter>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8003788:	f000 fa7c 	bl	8003c84 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_TX_ID01 << 5 ;
 800378c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8003790:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8003796:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800379a:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80037a0:	2301      	movs	r3, #1
 80037a2:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 80037b0:	2301      	movs	r3, #1
 80037b2:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 80037b4:	2301      	movs	r3, #1
 80037b6:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 80037b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037bc:	4619      	mov	r1, r3
 80037be:	4838      	ldr	r0, [pc, #224]	; (80038a0 <MX_CAN_Init+0x1c8>)
 80037c0:	f001 fdbd 	bl	800533e <HAL_CAN_ConfigFilter>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_CAN_Init+0xf6>
 	  Error_Handler();
 80037ca:	f000 fa5b 	bl	8003c84 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_TX_ID01 << 5 ;
 80037ce:	f246 2320 	movw	r3, #25120	; 0x6220
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 80037d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 80037e6:	2302      	movs	r3, #2
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80037f2:	2301      	movs	r3, #1
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 80037fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037fe:	4619      	mov	r1, r3
 8003800:	4827      	ldr	r0, [pc, #156]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003802:	f001 fd9c 	bl	800533e <HAL_CAN_ConfigFilter>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_CAN_Init+0x138>
 	  Error_Handler();
 800380c:	f000 fa3a 	bl	8003c84 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_TX_ID01 << 5 ;
 8003810:	f246 2320 	movw	r3, #25120	; 0x6220
 8003814:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 800381a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800381e:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8003824:	2301      	movs	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8003828:	2303      	movs	r3, #3
 800382a:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8003834:	2301      	movs	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8003838:	2301      	movs	r3, #1
 800383a:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 800383c:	463b      	mov	r3, r7
 800383e:	4619      	mov	r1, r3
 8003840:	4817      	ldr	r0, [pc, #92]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003842:	f001 fd7c 	bl	800533e <HAL_CAN_ConfigFilter>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_CAN_Init+0x178>
 	  Error_Handler();
 800384c:	f000 fa1a 	bl	8003c84 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8003850:	2102      	movs	r1, #2
 8003852:	4813      	ldr	r0, [pc, #76]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003854:	f002 f8e8 	bl	8005a28 <HAL_CAN_ActivateNotification>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_CAN_Init+0x18a>
	   Error_Handler();
 800385e:	f000 fa11 	bl	8003c84 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8003862:	2110      	movs	r1, #16
 8003864:	480e      	ldr	r0, [pc, #56]	; (80038a0 <MX_CAN_Init+0x1c8>)
 8003866:	f002 f8df 	bl	8005a28 <HAL_CAN_ActivateNotification>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8003870:	f000 fa08 	bl	8003c84 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8003874:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8003878:	4809      	ldr	r0, [pc, #36]	; (80038a0 <MX_CAN_Init+0x1c8>)
 800387a:	f002 f8d5 	bl	8005a28 <HAL_CAN_ActivateNotification>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8003884:	f000 f9fe 	bl	8003c84 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8003888:	4805      	ldr	r0, [pc, #20]	; (80038a0 <MX_CAN_Init+0x1c8>)
 800388a:	f001 fe21 	bl	80054d0 <HAL_CAN_Start>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8003894:	f000 f9f6 	bl	8003c84 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8003898:	bf00      	nop
 800389a:	37a0      	adds	r7, #160	; 0xa0
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2000018c 	.word	0x2000018c
 80038a4:	40006400 	.word	0x40006400

080038a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b096      	sub	sp, #88	; 0x58
 80038ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	609a      	str	r2, [r3, #8]
 80038ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	611a      	str	r2, [r3, #16]
 80038d6:	615a      	str	r2, [r3, #20]
 80038d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038da:	1d3b      	adds	r3, r7, #4
 80038dc:	2220      	movs	r2, #32
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fe15 	bl	8008510 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038e6:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <MX_TIM1_Init+0x138>)
 80038e8:	4a3e      	ldr	r2, [pc, #248]	; (80039e4 <MX_TIM1_Init+0x13c>)
 80038ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80038ec:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <MX_TIM1_Init+0x138>)
 80038ee:	2247      	movs	r2, #71	; 0x47
 80038f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <MX_TIM1_Init+0x138>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 80038f8:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <MX_TIM1_Init+0x138>)
 80038fa:	f240 52db 	movw	r2, #1499	; 0x5db
 80038fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003900:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <MX_TIM1_Init+0x138>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <MX_TIM1_Init+0x138>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800390c:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <MX_TIM1_Init+0x138>)
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003912:	4833      	ldr	r0, [pc, #204]	; (80039e0 <MX_TIM1_Init+0x138>)
 8003914:	f003 fce8 	bl	80072e8 <HAL_TIM_Base_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800391e:	f000 f9b1 	bl	8003c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003926:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003928:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800392c:	4619      	mov	r1, r3
 800392e:	482c      	ldr	r0, [pc, #176]	; (80039e0 <MX_TIM1_Init+0x138>)
 8003930:	f003 ffe8 	bl	8007904 <HAL_TIM_ConfigClockSource>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800393a:	f000 f9a3 	bl	8003c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800393e:	4828      	ldr	r0, [pc, #160]	; (80039e0 <MX_TIM1_Init+0x138>)
 8003940:	f003 fdbe 	bl	80074c0 <HAL_TIM_PWM_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800394a:	f000 f99b 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800395a:	4619      	mov	r1, r3
 800395c:	4820      	ldr	r0, [pc, #128]	; (80039e0 <MX_TIM1_Init+0x138>)
 800395e:	f004 fbdb 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003968:	f000 f98c 	bl	8003c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396c:	2360      	movs	r3, #96	; 0x60
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003974:	2300      	movs	r3, #0
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003978:	2300      	movs	r3, #0
 800397a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800397c:	2304      	movs	r3, #4
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003980:	2300      	movs	r3, #0
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398c:	2204      	movs	r2, #4
 800398e:	4619      	mov	r1, r3
 8003990:	4813      	ldr	r0, [pc, #76]	; (80039e0 <MX_TIM1_Init+0x138>)
 8003992:	f003 fef5 	bl	8007780 <HAL_TIM_PWM_ConfigChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800399c:	f000 f972 	bl	8003c84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4807      	ldr	r0, [pc, #28]	; (80039e0 <MX_TIM1_Init+0x138>)
 80039c4:	f004 fc06 	bl	80081d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80039ce:	f000 f959 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039d2:	4803      	ldr	r0, [pc, #12]	; (80039e0 <MX_TIM1_Init+0x138>)
 80039d4:	f000 fcda 	bl	800438c <HAL_TIM_MspPostInit>

}
 80039d8:	bf00      	nop
 80039da:	3758      	adds	r7, #88	; 0x58
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000348 	.word	0x20000348
 80039e4:	40012c00 	.word	0x40012c00

080039e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ee:	f107 0308 	add.w	r3, r7, #8
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039fc:	463b      	mov	r3, r7
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a0e:	2247      	movs	r2, #71	; 0x47
 8003a10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a20:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a2c:	4813      	ldr	r0, [pc, #76]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a2e:	f003 fc5b 	bl	80072e8 <HAL_TIM_Base_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003a38:	f000 f924 	bl	8003c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	4619      	mov	r1, r3
 8003a48:	480c      	ldr	r0, [pc, #48]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a4a:	f003 ff5b 	bl	8007904 <HAL_TIM_ConfigClockSource>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003a54:	f000 f916 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a60:	463b      	mov	r3, r7
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <MX_TIM2_Init+0x94>)
 8003a66:	f004 fb57 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003a70:	f000 f908 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200025d0 	.word	0x200025d0

08003a80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	609a      	str	r2, [r3, #8]
 8003a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a94:	463b      	mov	r3, r7
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003a9e:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <MX_TIM3_Init+0x98>)
 8003aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003aa4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003ab0:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003ab2:	2263      	movs	r2, #99	; 0x63
 8003ab4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ac2:	4814      	ldr	r0, [pc, #80]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003ac4:	f003 fc10 	bl	80072e8 <HAL_TIM_Base_Init>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003ace:	f000 f8d9 	bl	8003c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ad8:	f107 0308 	add.w	r3, r7, #8
 8003adc:	4619      	mov	r1, r3
 8003ade:	480d      	ldr	r0, [pc, #52]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003ae0:	f003 ff10 	bl	8007904 <HAL_TIM_ConfigClockSource>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003aea:	f000 f8cb 	bl	8003c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003af6:	463b      	mov	r3, r7
 8003af8:	4619      	mov	r1, r3
 8003afa:	4806      	ldr	r0, [pc, #24]	; (8003b14 <MX_TIM3_Init+0x94>)
 8003afc:	f004 fb0c 	bl	8008118 <HAL_TIMEx_MasterConfigSynchronization>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003b06:	f000 f8bd 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b0a:	bf00      	nop
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	200001b4 	.word	0x200001b4
 8003b18:	40000400 	.word	0x40000400

08003b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b22:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <MX_USART1_UART_Init+0x50>)
 8003b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b42:	220c      	movs	r2, #12
 8003b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b52:	4805      	ldr	r0, [pc, #20]	; (8003b68 <MX_USART1_UART_Init+0x4c>)
 8003b54:	f004 fbc5 	bl	80082e2 <HAL_UART_Init>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b5e:	f000 f891 	bl	8003c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	2000022c 	.word	0x2000022c
 8003b6c:	40013800 	.word	0x40013800

08003b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <MX_DMA_Init+0x38>)
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <MX_DMA_Init+0x38>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6153      	str	r3, [r2, #20]
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <MX_DMA_Init+0x38>)
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2100      	movs	r1, #0
 8003b92:	200b      	movs	r0, #11
 8003b94:	f002 fa55 	bl	8006042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b98:	200b      	movs	r0, #11
 8003b9a:	f002 fa6e 	bl	800607a <HAL_NVIC_EnableIRQ>

}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000

08003bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb2:	f107 0310 	add.w	r3, r7, #16
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bc6:	f043 0320 	orr.w	r3, r3, #32
 8003bca:	6193      	str	r3, [r2, #24]
 8003bcc:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bde:	f043 0304 	orr.w	r3, r3, #4
 8003be2:	6193      	str	r3, [r2, #24]
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf0:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bf6:	f043 0308 	orr.w	r3, r3, #8
 8003bfa:	6193      	str	r3, [r2, #24]
 8003bfc:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <MX_GPIO_Init+0xa8>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8003c0e:	4812      	ldr	r0, [pc, #72]	; (8003c58 <MX_GPIO_Init+0xac>)
 8003c10:	f002 fdd7 	bl	80067c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8003c14:	237b      	movs	r3, #123	; 0x7b
 8003c16:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c20:	f107 0310 	add.w	r3, r7, #16
 8003c24:	4619      	mov	r1, r3
 8003c26:	480c      	ldr	r0, [pc, #48]	; (8003c58 <MX_GPIO_Init+0xac>)
 8003c28:	f002 fc30 	bl	800648c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 8003c2c:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8003c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c32:	2301      	movs	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3e:	f107 0310 	add.w	r3, r7, #16
 8003c42:	4619      	mov	r1, r3
 8003c44:	4804      	ldr	r0, [pc, #16]	; (8003c58 <MX_GPIO_Init+0xac>)
 8003c46:	f002 fc21 	bl	800648c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c4a:	bf00      	nop
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40010c00 	.word	0x40010c00

08003c5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d102      	bne.n	8003c72 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
	}
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	200001b4 	.word	0x200001b4
 8003c80:	200000f2 	.word	0x200000f2

08003c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c88:	b672      	cpsid	i
}
 8003c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8003c8c:	20c8      	movs	r0, #200	; 0xc8
 8003c8e:	f000 fdc7 	bl	8004820 <HAL_Delay>
	  NVIC_SystemReset();
 8003c92:	f7ff fbbd 	bl	8003410 <__NVIC_SystemReset>
	...

08003c98 <InitOutputs>:

// private function declarations
void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data);


void InitOutputs(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0

	// we start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)
	__HAL_TIM_SET_AUTORELOAD(&htim1, (CLUTCH_SERVO_ABSOLUTE_MIN*2) -1 );
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <InitOutputs+0x34>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f640 22ef 	movw	r2, #2799	; 0xaef
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <InitOutputs+0x34>)
 8003ca8:	f640 22ef 	movw	r2, #2799	; 0xaef
 8003cac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, (CLUTCH_SERVO_ABSOLUTE_MIN*2)/2);
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <InitOutputs+0x34>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <InitOutputs+0x34>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	4802      	ldr	r0, [pc, #8]	; (8003ccc <InitOutputs+0x34>)
 8003cc4:	f004 f98a 	bl	8007fdc <HAL_TIMEx_PWMN_Start>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000348 	.word	0x20000348

08003cd0 <WriteOutputs>:

void WriteOutputs(InputStruct *inputs, OutputStruct *outputs) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]

	tOutputsTimer = HAL_GetTick();
 8003cda:	f000 fd97 	bl	800480c <HAL_GetTick>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <WriteOutputs+0x80>)
 8003ce2:	6013      	str	r3, [r2, #0]

	// CLUTCH

	// we convert from mm to timer prescaler
	My2DMapInterpolate(CLUTCH_SERVO_MAP_SIZE, xClutchTarget_rServoDemandMap, outputs->xClutchTarget, &outputs->rServoDemandRaw, CLUTCH_TARGET_MIN_MARGIN, CLUTCH_TARGET_MAX_MARGIN);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	33b0      	adds	r3, #176	; 0xb0
 8003cec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8003cf0:	9101      	str	r1, [sp, #4]
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	9100      	str	r1, [sp, #0]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <WriteOutputs+0x84>)
 8003cfa:	2002      	movs	r0, #2
 8003cfc:	f000 fc5c 	bl	80045b8 <My2DMapInterpolate>

	// convert from float to uint16_t
	outputs->rServoDemand  =(uint16_t)round(outputs->rServoDemandRaw);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fb84 	bl	8000414 <__aeabi_f2d>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f005 f830 	bl	8008d78 <round>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f7fc fbf8 	bl	8000514 <__aeabi_d2uiz>
 8003d24:	4603      	mov	r3, r0
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	// Clamping to avoid out of bounds values
	outputs->rServoDemand = CLAMP(outputs->rServoDemand, CLUTCH_SERVO_ABSOLUTE_MIN, CLUTCH_SERVO_ABSOLUTE_MAX);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003d34:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d80d      	bhi.n	8003d58 <WriteOutputs+0x88>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003d42:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003d46:	bf38      	it	cc
 8003d48:	f44f 63af 	movcc.w	r3, #1400	; 0x578
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	e005      	b.n	8003d5c <WriteOutputs+0x8c>
 8003d50:	200026e8 	.word	0x200026e8
 8003d54:	080092a8 	.word	0x080092a8
 8003d58:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	// Actuated flag (it will be applied on the next cycle because it gets saved in the controller)
	outputs->BClutchActuated = (outputs->rServoDemand >= CLUTCH_SERVO_ACTUATED ? 1 : 0);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003d68:	f240 52c7 	movw	r2, #1479	; 0x5c7
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	bf8c      	ite	hi
 8003d70:	2301      	movhi	r3, #1
 8003d72:	2300      	movls	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to
	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	outputs->rServoDemand *= 2;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
	//__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, outputs->rServoDemand -1 );
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	4ba2      	ldr	r3, [pc, #648]	; (8004020 <WriteOutputs+0x350>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003da2:	3b01      	subs	r3, #1
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b9e      	ldr	r3, [pc, #632]	; (8004020 <WriteOutputs+0x350>)
 8003da8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, outputs->rServoDemand/2);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	4b9a      	ldr	r3, [pc, #616]	; (8004020 <WriteOutputs+0x350>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting

	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, outputs->BUpShiftPortState);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dc6:	4897      	ldr	r0, [pc, #604]	; (8004024 <WriteOutputs+0x354>)
 8003dc8:	f002 fcfb 	bl	80067c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, outputs->BDnShiftPortState);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dd8:	4892      	ldr	r0, [pc, #584]	; (8004024 <WriteOutputs+0x354>)
 8003dda:	f002 fcf2 	bl	80067c2 <HAL_GPIO_WritePin>
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF, in order to have also the flashing action?

	// ---------------------------------------------------------------------------------------------------
	// Frame 1: Shifter Feedback

	TxData[0] = inputs->NGear;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003de4:	4b90      	ldr	r3, [pc, #576]	; (8004028 <WriteOutputs+0x358>)
 8003de6:	701a      	strb	r2, [r3, #0]
	TxData[1] = inputs->rClutchPaddle;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <WriteOutputs+0x358>)
 8003df2:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)(outputs->xClutchTarget * 10) >> 8;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	498c      	ldr	r1, [pc, #560]	; (800402c <WriteOutputs+0x35c>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fcb8 	bl	8000770 <__aeabi_fmul>
 8003e00:	4603      	mov	r3, r0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc fe7a 	bl	8000afc <__aeabi_f2uiz>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	121b      	asrs	r3, r3, #8
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	4b85      	ldr	r3, [pc, #532]	; (8004028 <WriteOutputs+0x358>)
 8003e12:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t)outputs->xClutchTarget;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc fe6f 	bl	8000afc <__aeabi_f2uiz>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4b81      	ldr	r3, [pc, #516]	; (8004028 <WriteOutputs+0x358>)
 8003e24:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t)(inputs->nEngine >> 8);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8003e2c:	121b      	asrs	r3, r3, #8
 8003e2e:	b21b      	sxth	r3, r3
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <WriteOutputs+0x358>)
 8003e34:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t)inputs->nEngine;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b7a      	ldr	r3, [pc, #488]	; (8004028 <WriteOutputs+0x358>)
 8003e40:	715a      	strb	r2, [r3, #5]

	uint16_t VSupplyCAN = (uint16_t)(inputs->VSupply * 1000);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	4979      	ldr	r1, [pc, #484]	; (8004030 <WriteOutputs+0x360>)
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc fc90 	bl	8000770 <__aeabi_fmul>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fe52 	bl	8000afc <__aeabi_f2uiz>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	81fb      	strh	r3, [r7, #14]

	TxData[6] = (uint8_t)(VSupplyCAN >> 8);
 8003e5c:	89fb      	ldrh	r3, [r7, #14]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b70      	ldr	r3, [pc, #448]	; (8004028 <WriteOutputs+0x358>)
 8003e66:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t)VSupplyCAN;
 8003e68:	89fb      	ldrh	r3, [r7, #14]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	4b6e      	ldr	r3, [pc, #440]	; (8004028 <WriteOutputs+0x358>)
 8003e6e:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID01, 8, TxData);
 8003e70:	4a6d      	ldr	r2, [pc, #436]	; (8004028 <WriteOutputs+0x358>)
 8003e72:	2108      	movs	r1, #8
 8003e74:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003e78:	f000 f8dc 	bl	8004034 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------
	// Frame 2: Shifter Control 1

	TxData[0] = (uint8_t)outputs->NDispalyPage;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f993 304b 	ldrsb.w	r3, [r3, #75]	; 0x4b
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b68      	ldr	r3, [pc, #416]	; (8004028 <WriteOutputs+0x358>)
 8003e86:	701a      	strb	r2, [r3, #0]
	TxData[1] = outputs->NMultifunctionActiveSwitch;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e8e:	4b66      	ldr	r3, [pc, #408]	; (8004028 <WriteOutputs+0x358>)
 8003e90:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)(outputs->NMultifunction[outputs->NMultifunctionActiveSwitch-1] + 1);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f993 306b 	ldrsb.w	r3, [r3, #107]	; 0x6b
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	4b5f      	ldr	r3, [pc, #380]	; (8004028 <WriteOutputs+0x358>)
 8003eaa:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <WriteOutputs+0x358>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	70da      	strb	r2, [r3, #3]
	TxData[4] = outputs->NDisplayFlags;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8003eb8:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <WriteOutputs+0x358>)
 8003eba:	711a      	strb	r2, [r3, #4]

	TxData[5] = 0;
 8003ebc:	4b5a      	ldr	r3, [pc, #360]	; (8004028 <WriteOutputs+0x358>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BUseButtonsForMultifunction	>> 0;
 8003ec2:	4b59      	ldr	r3, [pc, #356]	; (8004028 <WriteOutputs+0x358>)
 8003ec4:	795a      	ldrb	r2, [r3, #5]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b55      	ldr	r3, [pc, #340]	; (8004028 <WriteOutputs+0x358>)
 8003ed2:	715a      	strb	r2, [r3, #5]
	TxData[5] |= 0		>> 1;
 8003ed4:	4b54      	ldr	r3, [pc, #336]	; (8004028 <WriteOutputs+0x358>)
 8003ed6:	795a      	ldrb	r2, [r3, #5]
 8003ed8:	4b53      	ldr	r3, [pc, #332]	; (8004028 <WriteOutputs+0x358>)
 8003eda:	715a      	strb	r2, [r3, #5]
	TxData[5] |= 0		>> 2;
 8003edc:	4b52      	ldr	r3, [pc, #328]	; (8004028 <WriteOutputs+0x358>)
 8003ede:	795a      	ldrb	r2, [r3, #5]
 8003ee0:	4b51      	ldr	r3, [pc, #324]	; (8004028 <WriteOutputs+0x358>)
 8003ee2:	715a      	strb	r2, [r3, #5]
	TxData[5] |= 0		>> 3;
 8003ee4:	4b50      	ldr	r3, [pc, #320]	; (8004028 <WriteOutputs+0x358>)
 8003ee6:	795a      	ldrb	r2, [r3, #5]
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <WriteOutputs+0x358>)
 8003eea:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDA						>> 4;
 8003eec:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <WriteOutputs+0x358>)
 8003eee:	795a      	ldrb	r2, [r3, #5]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	4313      	orrs	r3, r2
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <WriteOutputs+0x358>)
 8003f00:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDB						>> 5;
 8003f02:	4b49      	ldr	r3, [pc, #292]	; (8004028 <WriteOutputs+0x358>)
 8003f04:	795a      	ldrb	r2, [r3, #5]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	4b44      	ldr	r3, [pc, #272]	; (8004028 <WriteOutputs+0x358>)
 8003f16:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDC						>> 6;
 8003f18:	4b43      	ldr	r3, [pc, #268]	; (8004028 <WriteOutputs+0x358>)
 8003f1a:	795a      	ldrb	r2, [r3, #5]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <WriteOutputs+0x358>)
 8003f2c:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDD						>> 7;
 8003f2e:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <WriteOutputs+0x358>)
 8003f30:	795a      	ldrb	r2, [r3, #5]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003f38:	09db      	lsrs	r3, r3, #7
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <WriteOutputs+0x358>)
 8003f42:	715a      	strb	r2, [r3, #5]

	TxData[6] = inputs->NCANErrors;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 8003f4a:	4b37      	ldr	r3, [pc, #220]	; (8004028 <WriteOutputs+0x358>)
 8003f4c:	719a      	strb	r2, [r3, #6]
	TxData[7] = inputs->NCANRxErrors;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <WriteOutputs+0x358>)
 8003f56:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID02, 8, TxData);
 8003f58:	4a33      	ldr	r2, [pc, #204]	; (8004028 <WriteOutputs+0x358>)
 8003f5a:	2108      	movs	r1, #8
 8003f5c:	f240 3021 	movw	r0, #801	; 0x321
 8003f60:	f000 f868 	bl	8004034 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------
	// Frame 2: Shifter Control 2

	TxData[0] = 0;	// Reserved for ECU control
 8003f64:	4b30      	ldr	r3, [pc, #192]	; (8004028 <WriteOutputs+0x358>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0;
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <WriteOutputs+0x358>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0;
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <WriteOutputs+0x358>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 8003f76:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <WriteOutputs+0x358>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0;
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <WriteOutputs+0x358>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0;
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <WriteOutputs+0x358>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0;
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <WriteOutputs+0x358>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0;
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <WriteOutputs+0x358>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID03, 8, TxData);
 8003f94:	4a24      	ldr	r2, [pc, #144]	; (8004028 <WriteOutputs+0x358>)
 8003f96:	2108      	movs	r1, #8
 8003f98:	f240 3022 	movw	r0, #802	; 0x322
 8003f9c:	f000 f84a 	bl	8004034 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------
	// Frame 3: Shifter Status

	TxData[0] = (uint8_t)(inputs->NInputsStatusWord >> 0);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <WriteOutputs+0x358>)
 8003faa:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)(inputs->NInputsStatusWord >> 8);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <WriteOutputs+0x358>)
 8003fb8:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)(inputs->NInputsStatusWord >> 16);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4b18      	ldr	r3, [pc, #96]	; (8004028 <WriteOutputs+0x358>)
 8003fc6:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t)(inputs->NInputsStatusWord >> 24);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fce:	0e1b      	lsrs	r3, r3, #24
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <WriteOutputs+0x358>)
 8003fd4:	70da      	strb	r2, [r3, #3]

	TxData[4] = (uint8_t)(outputs->NControllerStatusWord >> 0);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <WriteOutputs+0x358>)
 8003fe0:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t)(outputs->NControllerStatusWord >> 8);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <WriteOutputs+0x358>)
 8003fee:	715a      	strb	r2, [r3, #5]
	TxData[6] = (uint8_t)(outputs->NControllerStatusWord >> 16);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <WriteOutputs+0x358>)
 8003ffc:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t)(outputs->NControllerStatusWord >> 24);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004004:	0e1b      	lsrs	r3, r3, #24
 8004006:	b2da      	uxtb	r2, r3
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <WriteOutputs+0x358>)
 800400a:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID04, 8, TxData);
 800400c:	4a06      	ldr	r2, [pc, #24]	; (8004028 <WriteOutputs+0x358>)
 800400e:	2108      	movs	r1, #8
 8004010:	f240 3023 	movw	r0, #803	; 0x323
 8004014:	f000 f80e 	bl	8004034 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------

}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000348 	.word	0x20000348
 8004024:	40010c00 	.word	0x40010c00
 8004028:	200026d8 	.word	0x200026d8
 800402c:	41200000 	.word	0x41200000
 8004030:	447a0000 	.word	0x447a0000

08004034 <CAN_TX>:

void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	460b      	mov	r3, r1
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef CanTxHeader;
	uint32_t nCanTxMailbox;

	CanTxHeader.DLC = dlc;
 8004042:	7afb      	ldrb	r3, [r7, #11]
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
	CanTxHeader.StdId = ID;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	617b      	str	r3, [r7, #20]
	CanTxHeader.IDE = CAN_ID_STD;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
	CanTxHeader.RTR = CAN_RTR_DATA;
 800404e:	2300      	movs	r3, #0
 8004050:	623b      	str	r3, [r7, #32]

	uint32_t wait = __HAL_TIM_GET_COUNTER(&htim2) + CAN_TX_TIMEOUT;
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <CAN_TX+0xc4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	33c8      	adds	r3, #200	; 0xc8
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) && (__HAL_TIM_GET_COUNTER(&htim2) < wait));
 800405c:	bf00      	nop
 800405e:	4827      	ldr	r0, [pc, #156]	; (80040fc <CAN_TX+0xc8>)
 8004060:	f001 fb8d 	bl	800577e <HAL_CAN_GetTxMailboxesFreeLevel>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d105      	bne.n	8004076 <CAN_TX+0x42>
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <CAN_TX+0xc4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004072:	429a      	cmp	r2, r3
 8004074:	d8f3      	bhi.n	800405e <CAN_TX+0x2a>

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {	// all mailboxes are still filled
 8004076:	4821      	ldr	r0, [pc, #132]	; (80040fc <CAN_TX+0xc8>)
 8004078:	f001 fb81 	bl	800577e <HAL_CAN_GetTxMailboxesFreeLevel>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <CAN_TX+0x5a>
		HAL_CAN_AbortTxRequest(&hcan, nCanOldestMailbox);
 8004082:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <CAN_TX+0xcc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4619      	mov	r1, r3
 8004088:	481c      	ldr	r0, [pc, #112]	; (80040fc <CAN_TX+0xc8>)
 800408a:	f001 fb34 	bl	80056f6 <HAL_CAN_AbortTxRequest>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, data, &nCanTxMailbox) != HAL_OK) {
 800408e:	f107 0310 	add.w	r3, r7, #16
 8004092:	f107 0114 	add.w	r1, r7, #20
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4818      	ldr	r0, [pc, #96]	; (80040fc <CAN_TX+0xc8>)
 800409a:	f001 fa5d 	bl	8005558 <HAL_CAN_AddTxMessage>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <CAN_TX+0x82>
		print("Failed to Add Message can 1\n");
 80040a4:	4817      	ldr	r0, [pc, #92]	; (8004104 <CAN_TX+0xd0>)
 80040a6:	f000 fa73 	bl	8004590 <print>
		nCanTxErrorCount++;
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <CAN_TX+0xd4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3301      	adds	r3, #1
 80040b0:	4a15      	ldr	r2, [pc, #84]	; (8004108 <CAN_TX+0xd4>)
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e01c      	b.n	80040f0 <CAN_TX+0xbc>
		return;
	}

	// Mailbox aging adjustment
	if(nCanTxMailbox != nCanYoungestMailbox) {
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <CAN_TX+0xd8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d017      	beq.n	80040f0 <CAN_TX+0xbc>

		if(nCanTxMailbox != nCanSecondOldestMailbox) {
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <CAN_TX+0xdc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d00b      	beq.n	80040e2 <CAN_TX+0xae>
			nCanOldestMailbox = nCanSecondOldestMailbox;
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <CAN_TX+0xdc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a0c      	ldr	r2, [pc, #48]	; (8004100 <CAN_TX+0xcc>)
 80040d0:	6013      	str	r3, [r2, #0]
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 80040d2:	4b0e      	ldr	r3, [pc, #56]	; (800410c <CAN_TX+0xd8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a0e      	ldr	r2, [pc, #56]	; (8004110 <CAN_TX+0xdc>)
 80040d8:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4a0b      	ldr	r2, [pc, #44]	; (800410c <CAN_TX+0xd8>)
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e006      	b.n	80040f0 <CAN_TX+0xbc>
		}
		else {
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <CAN_TX+0xd8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <CAN_TX+0xdc>)
 80040e8:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <CAN_TX+0xd8>)
 80040ee:	6013      	str	r3, [r2, #0]
		}
	}

}
 80040f0:	3730      	adds	r7, #48	; 0x30
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	200025d0 	.word	0x200025d0
 80040fc:	2000018c 	.word	0x2000018c
 8004100:	20000058 	.word	0x20000058
 8004104:	08008e20 	.word	0x08008e20
 8004108:	200000f4 	.word	0x200000f4
 800410c:	20000060 	.word	0x20000060
 8004110:	2000005c 	.word	0x2000005c

08004114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_MspInit+0x5c>)
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	4a14      	ldr	r2, [pc, #80]	; (8004170 <HAL_MspInit+0x5c>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	6193      	str	r3, [r2, #24]
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_MspInit+0x5c>)
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_MspInit+0x5c>)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_MspInit+0x5c>)
 8004138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413c:	61d3      	str	r3, [r2, #28]
 800413e:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <HAL_MspInit+0x5c>)
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <HAL_MspInit+0x60>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_MspInit+0x60>)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	40021000 	.word	0x40021000
 8004174:	40010000 	.word	0x40010000

08004178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a29      	ldr	r2, [pc, #164]	; (8004238 <HAL_ADC_MspInit+0xc0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d14a      	bne.n	800422e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004198:	4b28      	ldr	r3, [pc, #160]	; (800423c <HAL_ADC_MspInit+0xc4>)
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <HAL_ADC_MspInit+0xc4>)
 800419e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a2:	6193      	str	r3, [r2, #24]
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_ADC_MspInit+0xc4>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b0:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_ADC_MspInit+0xc4>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4a21      	ldr	r2, [pc, #132]	; (800423c <HAL_ADC_MspInit+0xc4>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6193      	str	r3, [r2, #24]
 80041bc:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_ADC_MspInit+0xc4>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80041c8:	23ff      	movs	r3, #255	; 0xff
 80041ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041cc:	2303      	movs	r3, #3
 80041ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d0:	f107 0310 	add.w	r3, r7, #16
 80041d4:	4619      	mov	r1, r3
 80041d6:	481a      	ldr	r0, [pc, #104]	; (8004240 <HAL_ADC_MspInit+0xc8>)
 80041d8:	f002 f958 	bl	800648c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_ADC_MspInit+0xd0>)
 80041e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 80041f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 80041fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004202:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 8004206:	2220      	movs	r2, #32
 8004208:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 800420c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004212:	480c      	ldr	r0, [pc, #48]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 8004214:	f001 ff4c 	bl	80060b0 <HAL_DMA_Init>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800421e:	f7ff fd31 	bl	8003c84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a07      	ldr	r2, [pc, #28]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 8004226:	621a      	str	r2, [r3, #32]
 8004228:	4a06      	ldr	r2, [pc, #24]	; (8004244 <HAL_ADC_MspInit+0xcc>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800422e:	bf00      	nop
 8004230:	3720      	adds	r7, #32
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40012400 	.word	0x40012400
 800423c:	40021000 	.word	0x40021000
 8004240:	40010800 	.word	0x40010800
 8004244:	20000274 	.word	0x20000274
 8004248:	40020008 	.word	0x40020008

0800424c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <HAL_CAN_MspInit+0x9c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d139      	bne.n	80042e0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800426c:	4b1f      	ldr	r3, [pc, #124]	; (80042ec <HAL_CAN_MspInit+0xa0>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <HAL_CAN_MspInit+0xa0>)
 8004272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004276:	61d3      	str	r3, [r2, #28]
 8004278:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <HAL_CAN_MspInit+0xa0>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_CAN_MspInit+0xa0>)
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <HAL_CAN_MspInit+0xa0>)
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	6193      	str	r3, [r2, #24]
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_CAN_MspInit+0xa0>)
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800429c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042aa:	f107 0310 	add.w	r3, r7, #16
 80042ae:	4619      	mov	r1, r3
 80042b0:	480f      	ldr	r0, [pc, #60]	; (80042f0 <HAL_CAN_MspInit+0xa4>)
 80042b2:	f002 f8eb 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80042b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042bc:	2302      	movs	r3, #2
 80042be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042c0:	2303      	movs	r3, #3
 80042c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c4:	f107 0310 	add.w	r3, r7, #16
 80042c8:	4619      	mov	r1, r3
 80042ca:	4809      	ldr	r0, [pc, #36]	; (80042f0 <HAL_CAN_MspInit+0xa4>)
 80042cc:	f002 f8de 	bl	800648c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80042d0:	2200      	movs	r2, #0
 80042d2:	2100      	movs	r1, #0
 80042d4:	2014      	movs	r0, #20
 80042d6:	f001 feb4 	bl	8006042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80042da:	2014      	movs	r0, #20
 80042dc:	f001 fecd 	bl	800607a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80042e0:	bf00      	nop
 80042e2:	3720      	adds	r7, #32
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40006400 	.word	0x40006400
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40010800 	.word	0x40010800

080042f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_TIM_Base_MspInit+0x8c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10c      	bne.n	8004320 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004306:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 800430c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004310:	6193      	str	r3, [r2, #24]
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800431e:	e02a      	b.n	8004376 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d10c      	bne.n	8004344 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	4a15      	ldr	r2, [pc, #84]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	61d3      	str	r3, [r2, #28]
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	693b      	ldr	r3, [r7, #16]
}
 8004342:	e018      	b.n	8004376 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0f      	ldr	r2, [pc, #60]	; (8004388 <HAL_TIM_Base_MspInit+0x94>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d113      	bne.n	8004376 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	61d3      	str	r3, [r2, #28]
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_TIM_Base_MspInit+0x90>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2100      	movs	r1, #0
 800436a:	201d      	movs	r0, #29
 800436c:	f001 fe69 	bl	8006042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004370:	201d      	movs	r0, #29
 8004372:	f001 fe82 	bl	800607a <HAL_NVIC_EnableIRQ>
}
 8004376:	bf00      	nop
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40021000 	.word	0x40021000
 8004388:	40000400 	.word	0x40000400

0800438c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <HAL_TIM_MspPostInit+0x5c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d118      	bne.n	80043de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_TIM_MspPostInit+0x60>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <HAL_TIM_MspPostInit+0x60>)
 80043b2:	f043 0308 	orr.w	r3, r3, #8
 80043b6:	6193      	str	r3, [r2, #24]
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_TIM_MspPostInit+0x60>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 80043c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ca:	2302      	movs	r3, #2
 80043cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ce:	2302      	movs	r3, #2
 80043d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	4619      	mov	r1, r3
 80043d8:	4805      	ldr	r0, [pc, #20]	; (80043f0 <HAL_TIM_MspPostInit+0x64>)
 80043da:	f002 f857 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043de:	bf00      	nop
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40021000 	.word	0x40021000
 80043f0:	40010c00 	.word	0x40010c00

080043f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_UART_MspInit+0x8c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d131      	bne.n	8004478 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_UART_MspInit+0x90>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <HAL_UART_MspInit+0x90>)
 800441a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800441e:	6193      	str	r3, [r2, #24]
 8004420:	4b18      	ldr	r3, [pc, #96]	; (8004484 <HAL_UART_MspInit+0x90>)
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_UART_MspInit+0x90>)
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <HAL_UART_MspInit+0x90>)
 8004432:	f043 0304 	orr.w	r3, r3, #4
 8004436:	6193      	str	r3, [r2, #24]
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_UART_MspInit+0x90>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004448:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800444e:	2303      	movs	r3, #3
 8004450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004452:	f107 0310 	add.w	r3, r7, #16
 8004456:	4619      	mov	r1, r3
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <HAL_UART_MspInit+0x94>)
 800445a:	f002 f817 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800445e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446c:	f107 0310 	add.w	r3, r7, #16
 8004470:	4619      	mov	r1, r3
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <HAL_UART_MspInit+0x94>)
 8004474:	f002 f80a 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004478:	bf00      	nop
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40013800 	.word	0x40013800
 8004484:	40021000 	.word	0x40021000
 8004488:	40010800 	.word	0x40010800

0800448c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004490:	e7fe      	b.n	8004490 <NMI_Handler+0x4>

08004492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004496:	e7fe      	b.n	8004496 <HardFault_Handler+0x4>

08004498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800449c:	e7fe      	b.n	800449c <MemManage_Handler+0x4>

0800449e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800449e:	b480      	push	{r7}
 80044a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044a2:	e7fe      	b.n	80044a2 <BusFault_Handler+0x4>

080044a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044a8:	e7fe      	b.n	80044a8 <UsageFault_Handler+0x4>

080044aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044d2:	f000 f989 	bl	80047e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <DMA1_Channel1_IRQHandler+0x10>)
 80044e2:	f001 fe9f 	bl	8006224 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000274 	.word	0x20000274

080044f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80044f6:	f001 fabc 	bl	8005a72 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	2000018c 	.word	0x2000018c

08004504 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <TIM3_IRQHandler+0x10>)
 800450a:	f003 f831 	bl	8007570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	200001b4 	.word	0x200001b4

08004518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <_sbrk+0x5c>)
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <_sbrk+0x60>)
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <_sbrk+0x64>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <_sbrk+0x64>)
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <_sbrk+0x68>)
 8004538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <_sbrk+0x64>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d207      	bcs.n	8004558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004548:	f003 ffaa 	bl	80084a0 <__errno>
 800454c:	4603      	mov	r3, r0
 800454e:	220c      	movs	r2, #12
 8004550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	e009      	b.n	800456c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004558:	4b08      	ldr	r3, [pc, #32]	; (800457c <_sbrk+0x64>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <_sbrk+0x64>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4413      	add	r3, r2
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <_sbrk+0x64>)
 8004568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20005000 	.word	0x20005000
 8004578:	00000400 	.word	0x00000400
 800457c:	200000f8 	.word	0x200000f8
 8004580:	20002700 	.word	0x20002700

08004584 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004588:	bf00      	nop
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <print>:
 *      Author: orestis
 */

#include <Utils.h>

void print(char *msg, ...) {
 8004590:	b40f      	push	{r0, r1, r2, r3}
 8004592:	b580      	push	{r7, lr}
 8004594:	b09a      	sub	sp, #104	; 0x68
 8004596:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8004598:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800459c:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80045a4:	4618      	mov	r0, r3
 80045a6:	f003 ffd1 	bl	800854c <vsiprintf>
	va_end(args);

#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}
 80045aa:	bf00      	nop
 80045ac:	3768      	adds	r7, #104	; 0x68
 80045ae:	46bd      	mov	sp, r7
 80045b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045b4:	b004      	add	sp, #16
 80045b6:	4770      	bx	lr

080045b8 <My2DMapInterpolate>:

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	68fc      	ldr	r4, [r7, #12]
 80045c8:	1e63      	subs	r3, r4, #1
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	4623      	mov	r3, r4
 80045ce:	4618      	mov	r0, r3
 80045d0:	f04f 0100 	mov.w	r1, #0
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	014b      	lsls	r3, r1, #5
 80045de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045e2:	0142      	lsls	r2, r0, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fb ffb6 	bl	800055c <__aeabi_fsub>
 80045f0:	4603      	mov	r3, r0
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fc fa59 	bl	8000aac <__aeabi_fcmplt>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8004600:	4623      	mov	r3, r4
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	4413      	add	r3, r2
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	601a      	str	r2, [r3, #0]
		return 1;
 800460e:	2301      	movs	r3, #1
 8004610:	e07a      	b.n	8004708 <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1e5a      	subs	r2, r3, #1
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800461e:	4618      	mov	r0, r3
 8004620:	f7fb ff9e 	bl	8000560 <__addsf3>
 8004624:	4603      	mov	r3, r0
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fc fa5d 	bl	8000ae8 <__aeabi_fcmpgt>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00b      	beq.n	800464c <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 8004634:	4623      	mov	r3, r4
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	4413      	add	r3, r2
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	3a01      	subs	r2, #1
 8004640:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	601a      	str	r2, [r3, #0]
		return 1;
 8004648:	2301      	movs	r3, #1
 800464a:	e05d      	b.n	8004708 <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	e00e      	b.n	8004670 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc fa24 	bl	8000aac <__aeabi_fcmplt>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3301      	adds	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3b01      	subs	r3, #1
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	429a      	cmp	r2, r3
 8004678:	dbeb      	blt.n	8004652 <My2DMapInterpolate+0x9a>
 800467a:	e000      	b.n	800467e <My2DMapInterpolate+0xc6>
			break;
 800467c:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004690:	4619      	mov	r1, r3
 8004692:	f7fb ff63 	bl	800055c <__aeabi_fsub>
 8004696:	4603      	mov	r3, r0
 8004698:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 800469a:	4623      	mov	r3, r4
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	3201      	adds	r2, #1
 80046a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80046aa:	4623      	mov	r3, r4
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4413      	add	r3, r2
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b8:	4619      	mov	r1, r3
 80046ba:	f7fb ff4f 	bl	800055c <__aeabi_fsub>
 80046be:	4603      	mov	r3, r0
 80046c0:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 80046c2:	4623      	mov	r3, r4
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	4413      	add	r3, r2
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fb ff3e 	bl	800055c <__aeabi_fsub>
 80046e0:	4603      	mov	r3, r0
 80046e2:	6939      	ldr	r1, [r7, #16]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fc f843 	bl	8000770 <__aeabi_fmul>
 80046ea:	4603      	mov	r3, r0
 80046ec:	6979      	ldr	r1, [r7, #20]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fc f8f2 	bl	80008d8 <__aeabi_fdiv>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4619      	mov	r1, r3
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7fb ff31 	bl	8000560 <__addsf3>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	601a      	str	r2, [r3, #0]
	return 0;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3724      	adds	r7, #36	; 0x24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd90      	pop	{r4, r7, pc}

08004710 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004710:	f7ff ff38 	bl	8004584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004714:	480b      	ldr	r0, [pc, #44]	; (8004744 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004716:	490c      	ldr	r1, [pc, #48]	; (8004748 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004718:	4a0c      	ldr	r2, [pc, #48]	; (800474c <LoopFillZerobss+0x16>)
  movs r3, #0
 800471a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800471c:	e002      	b.n	8004724 <LoopCopyDataInit>

0800471e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800471e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004722:	3304      	adds	r3, #4

08004724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004728:	d3f9      	bcc.n	800471e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800472c:	4c09      	ldr	r4, [pc, #36]	; (8004754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800472e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004730:	e001      	b.n	8004736 <LoopFillZerobss>

08004732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004734:	3204      	adds	r2, #4

08004736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004738:	d3fb      	bcc.n	8004732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800473a:	f003 feb7 	bl	80084ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800473e:	f7fe fe7d 	bl	800343c <main>
  bx lr
 8004742:	4770      	bx	lr
  ldr r0, =_sdata
 8004744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004748:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800474c:	08009334 	.word	0x08009334
  ldr r2, =_sbss
 8004750:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8004754:	20002700 	.word	0x20002700

08004758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004758:	e7fe      	b.n	8004758 <ADC1_2_IRQHandler>
	...

0800475c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_Init+0x28>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a07      	ldr	r2, [pc, #28]	; (8004784 <HAL_Init+0x28>)
 8004766:	f043 0310 	orr.w	r3, r3, #16
 800476a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800476c:	2003      	movs	r0, #3
 800476e:	f001 fc5d 	bl	800602c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004772:	200f      	movs	r0, #15
 8004774:	f000 f808 	bl	8004788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004778:	f7ff fccc 	bl	8004114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40022000 	.word	0x40022000

08004788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_InitTick+0x54>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <HAL_InitTick+0x58>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479e:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 fc75 	bl	8006096 <HAL_SYSTICK_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00e      	b.n	80047d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b0f      	cmp	r3, #15
 80047ba:	d80a      	bhi.n	80047d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047bc:	2200      	movs	r2, #0
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	f001 fc3d 	bl	8006042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <HAL_InitTick+0x5c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000064 	.word	0x20000064
 80047e0:	2000006c 	.word	0x2000006c
 80047e4:	20000068 	.word	0x20000068

080047e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_IncTick+0x1c>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_IncTick+0x20>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	4a03      	ldr	r2, [pc, #12]	; (8004808 <HAL_IncTick+0x20>)
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	2000006c 	.word	0x2000006c
 8004808:	200026ec 	.word	0x200026ec

0800480c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return uwTick;
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <HAL_GetTick+0x10>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr
 800481c:	200026ec 	.word	0x200026ec

08004820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004828:	f7ff fff0 	bl	800480c <HAL_GetTick>
 800482c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d005      	beq.n	8004846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_Delay+0x44>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004846:	bf00      	nop
 8004848:	f7ff ffe0 	bl	800480c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	429a      	cmp	r2, r3
 8004856:	d8f7      	bhi.n	8004848 <HAL_Delay+0x28>
  {
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	2000006c 	.word	0x2000006c

08004868 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0be      	b.n	8004a08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fc66 	bl	8004178 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 faf5 	bl	8004e9c <ADC_ConversionStop_Disable>
 80048b2:	4603      	mov	r3, r0
 80048b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8099 	bne.w	80049f6 <HAL_ADC_Init+0x18e>
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 8095 	bne.w	80049f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	f043 0202 	orr.w	r2, r3, #2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7b1b      	ldrb	r3, [r3, #12]
 80048ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004900:	d003      	beq.n	800490a <HAL_ADC_Init+0xa2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d102      	bne.n	8004910 <HAL_ADC_Init+0xa8>
 800490a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800490e:	e000      	b.n	8004912 <HAL_ADC_Init+0xaa>
 8004910:	2300      	movs	r3, #0
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	7d1b      	ldrb	r3, [r3, #20]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d119      	bne.n	8004954 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	7b1b      	ldrb	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	3b01      	subs	r3, #1
 800492e:	035a      	lsls	r2, r3, #13
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e00b      	b.n	8004954 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	f043 0201 	orr.w	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <HAL_ADC_Init+0x1a8>)
 8004970:	4013      	ands	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	430b      	orrs	r3, r1
 800497a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004984:	d003      	beq.n	800498e <HAL_ADC_Init+0x126>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d104      	bne.n	8004998 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	3b01      	subs	r3, #1
 8004994:	051b      	lsls	r3, r3, #20
 8004996:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <HAL_ADC_Init+0x1ac>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d10b      	bne.n	80049d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	f023 0303 	bic.w	r3, r3, #3
 80049ca:	f043 0201 	orr.w	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049d2:	e018      	b.n	8004a06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f023 0312 	bic.w	r3, r3, #18
 80049dc:	f043 0210 	orr.w	r2, r3, #16
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049f4:	e007      	b.n	8004a06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	f043 0210 	orr.w	r2, r3, #16
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	ffe1f7fd 	.word	0xffe1f7fd
 8004a14:	ff1f0efe 	.word	0xff1f0efe

08004a18 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a64      	ldr	r2, [pc, #400]	; (8004bc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_ADC_Start_DMA+0x24>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a63      	ldr	r2, [pc, #396]	; (8004bc4 <HAL_ADC_Start_DMA+0x1ac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d106      	bne.n	8004a4a <HAL_ADC_Start_DMA+0x32>
 8004a3c:	4b60      	ldr	r3, [pc, #384]	; (8004bc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 80b3 	bne.w	8004bb0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_ADC_Start_DMA+0x40>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e0ae      	b.n	8004bb6 <HAL_ADC_Start_DMA+0x19e>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f9c1 	bl	8004de8 <ADC_Enable>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 809a 	bne.w	8004ba6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a4e      	ldr	r2, [pc, #312]	; (8004bc4 <HAL_ADC_Start_DMA+0x1ac>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d105      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x84>
 8004a90:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d115      	bne.n	8004ac8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d026      	beq.n	8004b04 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ac6:	e01d      	b.n	8004b04 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a39      	ldr	r2, [pc, #228]	; (8004bc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_ADC_Start_DMA+0xd0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_ADC_Start_DMA+0x1ac>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d10d      	bne.n	8004b04 <HAL_ADC_Start_DMA+0xec>
 8004ae8:	4b35      	ldr	r3, [pc, #212]	; (8004bc0 <HAL_ADC_Start_DMA+0x1a8>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004afc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f023 0206 	bic.w	r2, r3, #6
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b1c:	e002      	b.n	8004b24 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <HAL_ADC_Start_DMA+0x1b0>)
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <HAL_ADC_Start_DMA+0x1b4>)
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <HAL_ADC_Start_DMA+0x1b8>)
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0202 	mvn.w	r2, #2
 8004b4c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a18      	ldr	r0, [r3, #32]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	334c      	adds	r3, #76	; 0x4c
 8004b68:	4619      	mov	r1, r3
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f001 faf9 	bl	8006164 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b80:	d108      	bne.n	8004b94 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004b90:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004b92:	e00f      	b.n	8004bb4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ba2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004ba4:	e006      	b.n	8004bb4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004bae:	e001      	b.n	8004bb4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40012400 	.word	0x40012400
 8004bc4:	40012800 	.word	0x40012800
 8004bc8:	08004f1f 	.word	0x08004f1f
 8004bcc:	08004f9b 	.word	0x08004f9b
 8004bd0:	08004fb7 	.word	0x08004fb7

08004bd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x20>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e0dc      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x1da>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	d81c      	bhi.n	8004c62 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	3b05      	subs	r3, #5
 8004c3a:	221f      	movs	r2, #31
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43db      	mvns	r3, r3
 8004c42:	4019      	ands	r1, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	3b05      	subs	r3, #5
 8004c54:	fa00 f203 	lsl.w	r2, r0, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8004c60:	e03c      	b.n	8004cdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d81c      	bhi.n	8004ca4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	3b23      	subs	r3, #35	; 0x23
 8004c7c:	221f      	movs	r2, #31
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	4019      	ands	r1, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	3b23      	subs	r3, #35	; 0x23
 8004c96:	fa00 f203 	lsl.w	r2, r0, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca2:	e01b      	b.n	8004cdc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3b41      	subs	r3, #65	; 0x41
 8004cb6:	221f      	movs	r2, #31
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	4019      	ands	r1, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	3b41      	subs	r3, #65	; 0x41
 8004cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b09      	cmp	r3, #9
 8004ce2:	d91c      	bls.n	8004d1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3b1e      	subs	r3, #30
 8004cf6:	2207      	movs	r2, #7
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	4019      	ands	r1, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6898      	ldr	r0, [r3, #8]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3b1e      	subs	r3, #30
 8004d10:	fa00 f203 	lsl.w	r2, r0, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	60da      	str	r2, [r3, #12]
 8004d1c:	e019      	b.n	8004d52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6919      	ldr	r1, [r3, #16]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	2207      	movs	r2, #7
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	4019      	ands	r1, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	6898      	ldr	r0, [r3, #8]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	fa00 f203 	lsl.w	r2, r0, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d003      	beq.n	8004d62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d5e:	2b11      	cmp	r3, #17
 8004d60:	d132      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_ADC_ConfigChannel+0x1e4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d125      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d126      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004d88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b10      	cmp	r3, #16
 8004d90:	d11a      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d92:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004d98:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9c:	0c9a      	lsrs	r2, r3, #18
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004da8:	e002      	b.n	8004db0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f9      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x1b2>
 8004db6:	e007      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr
 8004ddc:	40012400 	.word	0x40012400
 8004de0:	20000064 	.word	0x20000064
 8004de4:	431bde83 	.word	0x431bde83

08004de8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d040      	beq.n	8004e88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
 8004e14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <ADC_Enable+0xac>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <ADC_Enable+0xb0>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	0c9b      	lsrs	r3, r3, #18
 8004e22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e24:	e002      	b.n	8004e2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f9      	bne.n	8004e26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e32:	f7ff fceb 	bl	800480c <HAL_GetTick>
 8004e36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004e38:	e01f      	b.n	8004e7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e3a:	f7ff fce7 	bl	800480c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d918      	bls.n	8004e7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d011      	beq.n	8004e7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	f043 0210 	orr.w	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e007      	b.n	8004e8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d1d8      	bne.n	8004e3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000064 	.word	0x20000064
 8004e98:	431bde83 	.word	0x431bde83

08004e9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d12e      	bne.n	8004f14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ec6:	f7ff fca1 	bl	800480c <HAL_GetTick>
 8004eca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004ecc:	e01b      	b.n	8004f06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ece:	f7ff fc9d 	bl	800480c <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d914      	bls.n	8004f06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d10d      	bne.n	8004f06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	f043 0210 	orr.w	r2, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f043 0201 	orr.w	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e007      	b.n	8004f16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d0dc      	beq.n	8004ece <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d127      	bne.n	8004f88 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004f4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004f52:	d115      	bne.n	8004f80 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d111      	bne.n	8004f80 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	f043 0201 	orr.w	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fe27 	bl	8004bd4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004f86:	e004      	b.n	8004f92 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7fe fa17 	bl	80033dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f043 0204 	orr.w	r2, r3, #4
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff fe02 	bl	8004be6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_ADCEx_Calibration_Start+0x1e>
 8005006:	2302      	movs	r3, #2
 8005008:	e097      	b.n	800513a <HAL_ADCEx_Calibration_Start+0x14e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff42 	bl	8004e9c <ADC_ConversionStop_Disable>
 8005018:	4603      	mov	r3, r0
 800501a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff fee3 	bl	8004de8 <ADC_Enable>
 8005022:	4603      	mov	r3, r0
 8005024:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8005026:	7dfb      	ldrb	r3, [r7, #23]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 8081 	bne.w	8005130 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005036:	f023 0302 	bic.w	r3, r3, #2
 800503a:	f043 0202 	orr.w	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005042:	4b40      	ldr	r3, [pc, #256]	; (8005144 <HAL_ADCEx_Calibration_Start+0x158>)
 8005044:	681c      	ldr	r4, [r3, #0]
 8005046:	2002      	movs	r0, #2
 8005048:	f002 f898 	bl	800717c <HAL_RCCEx_GetPeriphCLKFreq>
 800504c:	4603      	mov	r3, r0
 800504e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005052:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8005054:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8005056:	e002      	b.n	800505e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3b01      	subs	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f9      	bne.n	8005058 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0208 	orr.w	r2, r2, #8
 8005072:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005074:	f7ff fbca 	bl	800480c <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800507a:	e01b      	b.n	80050b4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800507c:	f7ff fbc6 	bl	800480c <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b0a      	cmp	r3, #10
 8005088:	d914      	bls.n	80050b4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	f023 0312 	bic.w	r3, r3, #18
 80050a0:	f043 0210 	orr.w	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e042      	b.n	800513a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1dc      	bne.n	800507c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0204 	orr.w	r2, r2, #4
 80050d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80050d2:	f7ff fb9b 	bl	800480c <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80050d8:	e01b      	b.n	8005112 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80050da:	f7ff fb97 	bl	800480c <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b0a      	cmp	r3, #10
 80050e6:	d914      	bls.n	8005112 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	f023 0312 	bic.w	r3, r3, #18
 80050fe:	f043 0210 	orr.w	r2, r3, #16
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e013      	b.n	800513a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1dc      	bne.n	80050da <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f023 0303 	bic.w	r3, r3, #3
 8005128:	f043 0201 	orr.w	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
}
 800513a:	4618      	mov	r0, r3
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	20000064 	.word	0x20000064

08005148 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0ed      	b.n	8005336 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff f870 	bl	800424c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800517c:	f7ff fb46 	bl	800480c <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005182:	e012      	b.n	80051aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005184:	f7ff fb42 	bl	800480c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b0a      	cmp	r3, #10
 8005190:	d90b      	bls.n	80051aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2205      	movs	r2, #5
 80051a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0c5      	b.n	8005336 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0e5      	beq.n	8005184 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0202 	bic.w	r2, r2, #2
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051c8:	f7ff fb20 	bl	800480c <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051ce:	e012      	b.n	80051f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051d0:	f7ff fb1c 	bl	800480c <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b0a      	cmp	r3, #10
 80051dc:	d90b      	bls.n	80051f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2205      	movs	r2, #5
 80051ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e09f      	b.n	8005336 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e5      	bne.n	80051d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7e1b      	ldrb	r3, [r3, #24]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d108      	bne.n	800521e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e007      	b.n	800522e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800522c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7e5b      	ldrb	r3, [r3, #25]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d108      	bne.n	8005248 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e007      	b.n	8005258 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005256:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7e9b      	ldrb	r3, [r3, #26]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d108      	bne.n	8005272 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0220 	orr.w	r2, r2, #32
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e007      	b.n	8005282 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0220 	bic.w	r2, r2, #32
 8005280:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7edb      	ldrb	r3, [r3, #27]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d108      	bne.n	800529c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0210 	bic.w	r2, r2, #16
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e007      	b.n	80052ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0210 	orr.w	r2, r2, #16
 80052aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7f1b      	ldrb	r3, [r3, #28]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d108      	bne.n	80052c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0208 	orr.w	r2, r2, #8
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	e007      	b.n	80052d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0208 	bic.w	r2, r2, #8
 80052d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7f5b      	ldrb	r3, [r3, #29]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d108      	bne.n	80052f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0204 	orr.w	r2, r2, #4
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e007      	b.n	8005300 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0204 	bic.w	r2, r2, #4
 80052fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	ea42 0103 	orr.w	r1, r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800533e:	b480      	push	{r7}
 8005340:	b087      	sub	sp, #28
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005354:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d003      	beq.n	8005364 <HAL_CAN_ConfigFilter+0x26>
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	2b02      	cmp	r3, #2
 8005360:	f040 80aa 	bne.w	80054b8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800536a:	f043 0201 	orr.w	r2, r3, #1
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2201      	movs	r2, #1
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	43db      	mvns	r3, r3
 800538e:	401a      	ands	r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d123      	bne.n	80053e6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	401a      	ands	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	3248      	adds	r2, #72	; 0x48
 80053c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	3348      	adds	r3, #72	; 0x48
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	440b      	add	r3, r1
 80053e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d122      	bne.n	8005434 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800540e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3248      	adds	r2, #72	; 0x48
 8005414:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005428:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800542a:	6979      	ldr	r1, [r7, #20]
 800542c:	3348      	adds	r3, #72	; 0x48
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	440b      	add	r3, r1
 8005432:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800544e:	e007      	b.n	8005460 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	431a      	orrs	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	43db      	mvns	r3, r3
 8005472:	401a      	ands	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800547a:	e007      	b.n	800548c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	431a      	orrs	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054aa:	f023 0201 	bic.w	r2, r3, #1
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e006      	b.n	80054c6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d12e      	bne.n	8005542 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054fc:	f7ff f986 	bl	800480c <HAL_GetTick>
 8005500:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005502:	e012      	b.n	800552a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005504:	f7ff f982 	bl	800480c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b0a      	cmp	r3, #10
 8005510:	d90b      	bls.n	800552a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2205      	movs	r2, #5
 8005522:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e012      	b.n	8005550 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e006      	b.n	8005550 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
  }
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005558:	b480      	push	{r7}
 800555a:	b089      	sub	sp, #36	; 0x24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800556c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005576:	7ffb      	ldrb	r3, [r7, #31]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d003      	beq.n	8005584 <HAL_CAN_AddTxMessage+0x2c>
 800557c:	7ffb      	ldrb	r3, [r7, #31]
 800557e:	2b02      	cmp	r3, #2
 8005580:	f040 80ad 	bne.w	80056de <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8095 	beq.w	80056ce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	0e1b      	lsrs	r3, r3, #24
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80055ae:	2201      	movs	r2, #1
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	409a      	lsls	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80055ca:	68f9      	ldr	r1, [r7, #12]
 80055cc:	6809      	ldr	r1, [r1, #0]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3318      	adds	r3, #24
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	440b      	add	r3, r1
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e00f      	b.n	80055fc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055e6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80055f0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	3318      	adds	r3, #24
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	440b      	add	r3, r1
 80055fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	3318      	adds	r3, #24
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	440b      	add	r3, r1
 800560c:	3304      	adds	r3, #4
 800560e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	7d1b      	ldrb	r3, [r3, #20]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d111      	bne.n	800563c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3318      	adds	r3, #24
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	4413      	add	r3, r2
 8005624:	3304      	adds	r3, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	6811      	ldr	r1, [r2, #0]
 800562c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	3318      	adds	r3, #24
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	440b      	add	r3, r1
 8005638:	3304      	adds	r3, #4
 800563a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3307      	adds	r3, #7
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	061a      	lsls	r2, r3, #24
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3306      	adds	r3, #6
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3305      	adds	r3, #5
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	4313      	orrs	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	3204      	adds	r2, #4
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	4610      	mov	r0, r2
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6811      	ldr	r1, [r2, #0]
 8005664:	ea43 0200 	orr.w	r2, r3, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	440b      	add	r3, r1
 800566e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005672:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3303      	adds	r3, #3
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	061a      	lsls	r2, r3, #24
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3302      	adds	r3, #2
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3301      	adds	r3, #1
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	4313      	orrs	r3, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	7812      	ldrb	r2, [r2, #0]
 8005694:	4610      	mov	r0, r2
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	6811      	ldr	r1, [r2, #0]
 800569a:	ea43 0200 	orr.w	r2, r3, r0
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	440b      	add	r3, r1
 80056a4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80056a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	3318      	adds	r3, #24
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	4413      	add	r3, r2
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	6811      	ldr	r1, [r2, #0]
 80056bc:	f043 0201 	orr.w	r2, r3, #1
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	3318      	adds	r3, #24
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	440b      	add	r3, r1
 80056c8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e00e      	b.n	80056ec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e006      	b.n	80056ec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3724      	adds	r7, #36	; 0x24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005706:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d002      	beq.n	8005714 <HAL_CAN_AbortTxRequest+0x1e>
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d128      	bne.n	8005766 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800572c:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005746:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005760:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	e006      	b.n	8005774 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005790:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d002      	beq.n	800579e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d11d      	bne.n	80057da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80057e6:	b480      	push	{r7}
 80057e8:	b087      	sub	sp, #28
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d003      	beq.n	800580a <HAL_CAN_GetRxMessage+0x24>
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	2b02      	cmp	r3, #2
 8005806:	f040 8103 	bne.w	8005a10 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10e      	bne.n	800582e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d116      	bne.n	800584c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e0f7      	b.n	8005a1e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d107      	bne.n	800584c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0e8      	b.n	8005a1e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	331b      	adds	r3, #27
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	4413      	add	r3, r2
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0204 	and.w	r2, r3, #4
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	331b      	adds	r3, #27
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	4413      	add	r3, r2
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	0d5b      	lsrs	r3, r3, #21
 800587a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e00b      	b.n	800589c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	331b      	adds	r3, #27
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	4413      	add	r3, r2
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	331b      	adds	r3, #27
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	4413      	add	r3, r2
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0202 	and.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	331b      	adds	r3, #27
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	4413      	add	r3, r2
 80058be:	3304      	adds	r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2208      	movs	r2, #8
 80058ce:	611a      	str	r2, [r3, #16]
 80058d0:	e00b      	b.n	80058ea <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	331b      	adds	r3, #27
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	4413      	add	r3, r2
 80058de:	3304      	adds	r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 020f 	and.w	r2, r3, #15
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	331b      	adds	r3, #27
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	4413      	add	r3, r2
 80058f6:	3304      	adds	r3, #4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	331b      	adds	r3, #27
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	4413      	add	r3, r2
 800590e:	3304      	adds	r3, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	b29a      	uxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	4413      	add	r3, r2
 8005924:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	b2da      	uxtb	r2, r3
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	4413      	add	r3, r2
 800593a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	0a1a      	lsrs	r2, r3, #8
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	4413      	add	r3, r2
 8005954:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	0c1a      	lsrs	r2, r3, #16
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	3302      	adds	r3, #2
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	4413      	add	r3, r2
 800596e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	0e1a      	lsrs	r2, r3, #24
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	3303      	adds	r3, #3
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	4413      	add	r3, r2
 8005988:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	3304      	adds	r3, #4
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	4413      	add	r3, r2
 80059a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	0a1a      	lsrs	r2, r3, #8
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	3305      	adds	r3, #5
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	0c1a      	lsrs	r2, r3, #16
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	3306      	adds	r3, #6
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	0e1a      	lsrs	r2, r3, #24
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	3307      	adds	r3, #7
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d108      	bne.n	80059fc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0220 	orr.w	r2, r2, #32
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	e007      	b.n	8005a0c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0220 	orr.w	r2, r2, #32
 8005a0a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e006      	b.n	8005a1e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a38:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d002      	beq.n	8005a46 <HAL_CAN_ActivateNotification+0x1e>
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d109      	bne.n	8005a5a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6959      	ldr	r1, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e006      	b.n	8005a68 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b08a      	sub	sp, #40	; 0x28
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d07c      	beq.n	8005bb2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d023      	beq.n	8005b0a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f983 	bl	8005de0 <HAL_CAN_TxMailbox0CompleteCallback>
 8005ada:	e016      	b.n	8005b0a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
 8005aee:	e00c      	b.n	8005b0a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
 8005b02:	e002      	b.n	8005b0a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f986 	bl	8005e16 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d024      	beq.n	8005b5e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f962 	bl	8005df2 <HAL_CAN_TxMailbox1CompleteCallback>
 8005b2e:	e016      	b.n	8005b5e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d004      	beq.n	8005b44 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	e00c      	b.n	8005b5e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
 8005b56:	e002      	b.n	8005b5e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f965 	bl	8005e28 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d024      	beq.n	8005bb2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f941 	bl	8005e04 <HAL_CAN_TxMailbox2CompleteCallback>
 8005b82:	e016      	b.n	8005bb2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
 8005b96:	e00c      	b.n	8005bb2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d004      	beq.n	8005bac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8005baa:	e002      	b.n	8005bb2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f944 	bl	8005e3a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00c      	beq.n	8005bd6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2208      	movs	r2, #8
 8005bf0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f92a 	bl	8005e4c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fd fbb8 	bl	8003386 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00c      	beq.n	8005c3a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2210      	movs	r2, #16
 8005c38:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2208      	movs	r2, #8
 8005c54:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f901 	bl	8005e5e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fd fb92 	bl	800339e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2210      	movs	r2, #16
 8005c94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f8ea 	bl	8005e70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00b      	beq.n	8005cbe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d006      	beq.n	8005cbe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8e2 	bl	8005e82 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d07b      	beq.n	8005dc0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d072      	beq.n	8005db8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	f043 0304 	orr.w	r3, r3, #4
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d043      	beq.n	8005db8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d03e      	beq.n	8005db8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d40:	2b60      	cmp	r3, #96	; 0x60
 8005d42:	d02b      	beq.n	8005d9c <HAL_CAN_IRQHandler+0x32a>
 8005d44:	2b60      	cmp	r3, #96	; 0x60
 8005d46:	d82e      	bhi.n	8005da6 <HAL_CAN_IRQHandler+0x334>
 8005d48:	2b50      	cmp	r3, #80	; 0x50
 8005d4a:	d022      	beq.n	8005d92 <HAL_CAN_IRQHandler+0x320>
 8005d4c:	2b50      	cmp	r3, #80	; 0x50
 8005d4e:	d82a      	bhi.n	8005da6 <HAL_CAN_IRQHandler+0x334>
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d019      	beq.n	8005d88 <HAL_CAN_IRQHandler+0x316>
 8005d54:	2b40      	cmp	r3, #64	; 0x40
 8005d56:	d826      	bhi.n	8005da6 <HAL_CAN_IRQHandler+0x334>
 8005d58:	2b30      	cmp	r3, #48	; 0x30
 8005d5a:	d010      	beq.n	8005d7e <HAL_CAN_IRQHandler+0x30c>
 8005d5c:	2b30      	cmp	r3, #48	; 0x30
 8005d5e:	d822      	bhi.n	8005da6 <HAL_CAN_IRQHandler+0x334>
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d002      	beq.n	8005d6a <HAL_CAN_IRQHandler+0x2f8>
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d005      	beq.n	8005d74 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005d68:	e01d      	b.n	8005da6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	f043 0308 	orr.w	r3, r3, #8
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005d72:	e019      	b.n	8005da8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	f043 0310 	orr.w	r3, r3, #16
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005d7c:	e014      	b.n	8005da8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	f043 0320 	orr.w	r3, r3, #32
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005d86:	e00f      	b.n	8005da8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005d90:	e00a      	b.n	8005da8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005d9a:	e005      	b.n	8005da8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005da4:	e000      	b.n	8005da8 <HAL_CAN_IRQHandler+0x336>
            break;
 8005da6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005db6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d008      	beq.n	8005dd8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fd faf0 	bl	80033b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005dd8:	bf00      	nop
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <__NVIC_SetPriorityGrouping>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ec6:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	60d3      	str	r3, [r2, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <__NVIC_GetPriorityGrouping>:
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 0307 	and.w	r3, r3, #7
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	e000ed00 	.word	0xe000ed00

08005ef8 <__NVIC_EnableIRQ>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	4603      	mov	r3, r0
 8005f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	db0b      	blt.n	8005f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	f003 021f 	and.w	r2, r3, #31
 8005f10:	4906      	ldr	r1, [pc, #24]	; (8005f2c <__NVIC_EnableIRQ+0x34>)
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	095b      	lsrs	r3, r3, #5
 8005f18:	2001      	movs	r0, #1
 8005f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	e000e100 	.word	0xe000e100

08005f30 <__NVIC_SetPriority>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	db0a      	blt.n	8005f5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	490c      	ldr	r1, [pc, #48]	; (8005f7c <__NVIC_SetPriority+0x4c>)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	0112      	lsls	r2, r2, #4
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	440b      	add	r3, r1
 8005f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f58:	e00a      	b.n	8005f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	4908      	ldr	r1, [pc, #32]	; (8005f80 <__NVIC_SetPriority+0x50>)
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	3b04      	subs	r3, #4
 8005f68:	0112      	lsls	r2, r2, #4
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	761a      	strb	r2, [r3, #24]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	e000e100 	.word	0xe000e100
 8005f80:	e000ed00 	.word	0xe000ed00

08005f84 <NVIC_EncodePriority>:
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f1c3 0307 	rsb	r3, r3, #7
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	bf28      	it	cs
 8005fa2:	2304      	movcs	r3, #4
 8005fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d902      	bls.n	8005fb4 <NVIC_EncodePriority+0x30>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3b03      	subs	r3, #3
 8005fb2:	e000      	b.n	8005fb6 <NVIC_EncodePriority+0x32>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	43d9      	mvns	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fdc:	4313      	orrs	r3, r2
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	; 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ff8:	d301      	bcc.n	8005ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e00f      	b.n	800601e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <SysTick_Config+0x40>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3b01      	subs	r3, #1
 8006004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006006:	210f      	movs	r1, #15
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	f7ff ff90 	bl	8005f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <SysTick_Config+0x40>)
 8006012:	2200      	movs	r2, #0
 8006014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006016:	4b04      	ldr	r3, [pc, #16]	; (8006028 <SysTick_Config+0x40>)
 8006018:	2207      	movs	r2, #7
 800601a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	e000e010 	.word	0xe000e010

0800602c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ff2d 	bl	8005e94 <__NVIC_SetPriorityGrouping>
}
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	4603      	mov	r3, r0
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006054:	f7ff ff42 	bl	8005edc <__NVIC_GetPriorityGrouping>
 8006058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	6978      	ldr	r0, [r7, #20]
 8006060:	f7ff ff90 	bl	8005f84 <NVIC_EncodePriority>
 8006064:	4602      	mov	r2, r0
 8006066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff ff5f 	bl	8005f30 <__NVIC_SetPriority>
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	4603      	mov	r3, r0
 8006082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff35 	bl	8005ef8 <__NVIC_EnableIRQ>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ffa2 	bl	8005fe8 <SysTick_Config>
 80060a4:	4603      	mov	r3, r0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e043      	b.n	800614e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b22      	ldr	r3, [pc, #136]	; (8006158 <HAL_DMA_Init+0xa8>)
 80060ce:	4413      	add	r3, r2
 80060d0:	4a22      	ldr	r2, [pc, #136]	; (800615c <HAL_DMA_Init+0xac>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	091b      	lsrs	r3, r3, #4
 80060d8:	009a      	lsls	r2, r3, #2
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <HAL_DMA_Init+0xb0>)
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80060fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr
 8006158:	bffdfff8 	.word	0xbffdfff8
 800615c:	cccccccd 	.word	0xcccccccd
 8006160:	40020000 	.word	0x40020000

08006164 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_DMA_Start_IT+0x20>
 8006180:	2302      	movs	r3, #2
 8006182:	e04b      	b.n	800621c <HAL_DMA_Start_IT+0xb8>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d13a      	bne.n	800620e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f937 	bl	8006430 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d008      	beq.n	80061dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 020e 	orr.w	r2, r2, #14
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e00f      	b.n	80061fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0204 	bic.w	r2, r2, #4
 80061ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 020a 	orr.w	r2, r2, #10
 80061fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e005      	b.n	800621a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006216:	2302      	movs	r3, #2
 8006218:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800621a:	7dfb      	ldrb	r3, [r7, #23]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	2204      	movs	r2, #4
 8006242:	409a      	lsls	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4013      	ands	r3, r2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d04f      	beq.n	80062ec <HAL_DMA_IRQHandler+0xc8>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d04a      	beq.n	80062ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0204 	bic.w	r2, r2, #4
 8006272:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a66      	ldr	r2, [pc, #408]	; (8006414 <HAL_DMA_IRQHandler+0x1f0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d029      	beq.n	80062d2 <HAL_DMA_IRQHandler+0xae>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a65      	ldr	r2, [pc, #404]	; (8006418 <HAL_DMA_IRQHandler+0x1f4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_DMA_IRQHandler+0xaa>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a63      	ldr	r2, [pc, #396]	; (800641c <HAL_DMA_IRQHandler+0x1f8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01a      	beq.n	80062c8 <HAL_DMA_IRQHandler+0xa4>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a62      	ldr	r2, [pc, #392]	; (8006420 <HAL_DMA_IRQHandler+0x1fc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d012      	beq.n	80062c2 <HAL_DMA_IRQHandler+0x9e>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a60      	ldr	r2, [pc, #384]	; (8006424 <HAL_DMA_IRQHandler+0x200>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00a      	beq.n	80062bc <HAL_DMA_IRQHandler+0x98>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a5f      	ldr	r2, [pc, #380]	; (8006428 <HAL_DMA_IRQHandler+0x204>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d102      	bne.n	80062b6 <HAL_DMA_IRQHandler+0x92>
 80062b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062b4:	e00e      	b.n	80062d4 <HAL_DMA_IRQHandler+0xb0>
 80062b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062ba:	e00b      	b.n	80062d4 <HAL_DMA_IRQHandler+0xb0>
 80062bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80062c0:	e008      	b.n	80062d4 <HAL_DMA_IRQHandler+0xb0>
 80062c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062c6:	e005      	b.n	80062d4 <HAL_DMA_IRQHandler+0xb0>
 80062c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062cc:	e002      	b.n	80062d4 <HAL_DMA_IRQHandler+0xb0>
 80062ce:	2340      	movs	r3, #64	; 0x40
 80062d0:	e000      	b.n	80062d4 <HAL_DMA_IRQHandler+0xb0>
 80062d2:	2304      	movs	r3, #4
 80062d4:	4a55      	ldr	r2, [pc, #340]	; (800642c <HAL_DMA_IRQHandler+0x208>)
 80062d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8094 	beq.w	800640a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80062ea:	e08e      	b.n	800640a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	2202      	movs	r2, #2
 80062f2:	409a      	lsls	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d056      	beq.n	80063aa <HAL_DMA_IRQHandler+0x186>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d051      	beq.n	80063aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 020a 	bic.w	r2, r2, #10
 8006322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a38      	ldr	r2, [pc, #224]	; (8006414 <HAL_DMA_IRQHandler+0x1f0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d029      	beq.n	800638a <HAL_DMA_IRQHandler+0x166>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a37      	ldr	r2, [pc, #220]	; (8006418 <HAL_DMA_IRQHandler+0x1f4>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d022      	beq.n	8006386 <HAL_DMA_IRQHandler+0x162>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a35      	ldr	r2, [pc, #212]	; (800641c <HAL_DMA_IRQHandler+0x1f8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d01a      	beq.n	8006380 <HAL_DMA_IRQHandler+0x15c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a34      	ldr	r2, [pc, #208]	; (8006420 <HAL_DMA_IRQHandler+0x1fc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d012      	beq.n	800637a <HAL_DMA_IRQHandler+0x156>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a32      	ldr	r2, [pc, #200]	; (8006424 <HAL_DMA_IRQHandler+0x200>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00a      	beq.n	8006374 <HAL_DMA_IRQHandler+0x150>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a31      	ldr	r2, [pc, #196]	; (8006428 <HAL_DMA_IRQHandler+0x204>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d102      	bne.n	800636e <HAL_DMA_IRQHandler+0x14a>
 8006368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800636c:	e00e      	b.n	800638c <HAL_DMA_IRQHandler+0x168>
 800636e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006372:	e00b      	b.n	800638c <HAL_DMA_IRQHandler+0x168>
 8006374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006378:	e008      	b.n	800638c <HAL_DMA_IRQHandler+0x168>
 800637a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800637e:	e005      	b.n	800638c <HAL_DMA_IRQHandler+0x168>
 8006380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006384:	e002      	b.n	800638c <HAL_DMA_IRQHandler+0x168>
 8006386:	2320      	movs	r3, #32
 8006388:	e000      	b.n	800638c <HAL_DMA_IRQHandler+0x168>
 800638a:	2302      	movs	r3, #2
 800638c:	4a27      	ldr	r2, [pc, #156]	; (800642c <HAL_DMA_IRQHandler+0x208>)
 800638e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d034      	beq.n	800640a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80063a8:	e02f      	b.n	800640a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2208      	movs	r2, #8
 80063b0:	409a      	lsls	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d028      	beq.n	800640c <HAL_DMA_IRQHandler+0x1e8>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d023      	beq.n	800640c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 020e 	bic.w	r2, r2, #14
 80063d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063dc:	2101      	movs	r1, #1
 80063de:	fa01 f202 	lsl.w	r2, r1, r2
 80063e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
    }
  }
  return;
 800640a:	bf00      	nop
 800640c:	bf00      	nop
}
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40020008 	.word	0x40020008
 8006418:	4002001c 	.word	0x4002001c
 800641c:	40020030 	.word	0x40020030
 8006420:	40020044 	.word	0x40020044
 8006424:	40020058 	.word	0x40020058
 8006428:	4002006c 	.word	0x4002006c
 800642c:	40020000 	.word	0x40020000

08006430 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f202 	lsl.w	r2, r1, r2
 800644c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2b10      	cmp	r3, #16
 800645c:	d108      	bne.n	8006470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800646e:	e007      	b.n	8006480 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
	...

0800648c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800648c:	b480      	push	{r7}
 800648e:	b08b      	sub	sp, #44	; 0x2c
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006496:	2300      	movs	r3, #0
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800649a:	2300      	movs	r3, #0
 800649c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800649e:	e169      	b.n	8006774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80064a0:	2201      	movs	r2, #1
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	f040 8158 	bne.w	800676e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4a9a      	ldr	r2, [pc, #616]	; (800672c <HAL_GPIO_Init+0x2a0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d05e      	beq.n	8006586 <HAL_GPIO_Init+0xfa>
 80064c8:	4a98      	ldr	r2, [pc, #608]	; (800672c <HAL_GPIO_Init+0x2a0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d875      	bhi.n	80065ba <HAL_GPIO_Init+0x12e>
 80064ce:	4a98      	ldr	r2, [pc, #608]	; (8006730 <HAL_GPIO_Init+0x2a4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d058      	beq.n	8006586 <HAL_GPIO_Init+0xfa>
 80064d4:	4a96      	ldr	r2, [pc, #600]	; (8006730 <HAL_GPIO_Init+0x2a4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d86f      	bhi.n	80065ba <HAL_GPIO_Init+0x12e>
 80064da:	4a96      	ldr	r2, [pc, #600]	; (8006734 <HAL_GPIO_Init+0x2a8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d052      	beq.n	8006586 <HAL_GPIO_Init+0xfa>
 80064e0:	4a94      	ldr	r2, [pc, #592]	; (8006734 <HAL_GPIO_Init+0x2a8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d869      	bhi.n	80065ba <HAL_GPIO_Init+0x12e>
 80064e6:	4a94      	ldr	r2, [pc, #592]	; (8006738 <HAL_GPIO_Init+0x2ac>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d04c      	beq.n	8006586 <HAL_GPIO_Init+0xfa>
 80064ec:	4a92      	ldr	r2, [pc, #584]	; (8006738 <HAL_GPIO_Init+0x2ac>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d863      	bhi.n	80065ba <HAL_GPIO_Init+0x12e>
 80064f2:	4a92      	ldr	r2, [pc, #584]	; (800673c <HAL_GPIO_Init+0x2b0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d046      	beq.n	8006586 <HAL_GPIO_Init+0xfa>
 80064f8:	4a90      	ldr	r2, [pc, #576]	; (800673c <HAL_GPIO_Init+0x2b0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d85d      	bhi.n	80065ba <HAL_GPIO_Init+0x12e>
 80064fe:	2b12      	cmp	r3, #18
 8006500:	d82a      	bhi.n	8006558 <HAL_GPIO_Init+0xcc>
 8006502:	2b12      	cmp	r3, #18
 8006504:	d859      	bhi.n	80065ba <HAL_GPIO_Init+0x12e>
 8006506:	a201      	add	r2, pc, #4	; (adr r2, 800650c <HAL_GPIO_Init+0x80>)
 8006508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650c:	08006587 	.word	0x08006587
 8006510:	08006561 	.word	0x08006561
 8006514:	08006573 	.word	0x08006573
 8006518:	080065b5 	.word	0x080065b5
 800651c:	080065bb 	.word	0x080065bb
 8006520:	080065bb 	.word	0x080065bb
 8006524:	080065bb 	.word	0x080065bb
 8006528:	080065bb 	.word	0x080065bb
 800652c:	080065bb 	.word	0x080065bb
 8006530:	080065bb 	.word	0x080065bb
 8006534:	080065bb 	.word	0x080065bb
 8006538:	080065bb 	.word	0x080065bb
 800653c:	080065bb 	.word	0x080065bb
 8006540:	080065bb 	.word	0x080065bb
 8006544:	080065bb 	.word	0x080065bb
 8006548:	080065bb 	.word	0x080065bb
 800654c:	080065bb 	.word	0x080065bb
 8006550:	08006569 	.word	0x08006569
 8006554:	0800657d 	.word	0x0800657d
 8006558:	4a79      	ldr	r2, [pc, #484]	; (8006740 <HAL_GPIO_Init+0x2b4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800655e:	e02c      	b.n	80065ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	623b      	str	r3, [r7, #32]
          break;
 8006566:	e029      	b.n	80065bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	3304      	adds	r3, #4
 800656e:	623b      	str	r3, [r7, #32]
          break;
 8006570:	e024      	b.n	80065bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	3308      	adds	r3, #8
 8006578:	623b      	str	r3, [r7, #32]
          break;
 800657a:	e01f      	b.n	80065bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	330c      	adds	r3, #12
 8006582:	623b      	str	r3, [r7, #32]
          break;
 8006584:	e01a      	b.n	80065bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800658e:	2304      	movs	r3, #4
 8006590:	623b      	str	r3, [r7, #32]
          break;
 8006592:	e013      	b.n	80065bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d105      	bne.n	80065a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800659c:	2308      	movs	r3, #8
 800659e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	611a      	str	r2, [r3, #16]
          break;
 80065a6:	e009      	b.n	80065bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065a8:	2308      	movs	r3, #8
 80065aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	615a      	str	r2, [r3, #20]
          break;
 80065b2:	e003      	b.n	80065bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80065b4:	2300      	movs	r3, #0
 80065b6:	623b      	str	r3, [r7, #32]
          break;
 80065b8:	e000      	b.n	80065bc <HAL_GPIO_Init+0x130>
          break;
 80065ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2bff      	cmp	r3, #255	; 0xff
 80065c0:	d801      	bhi.n	80065c6 <HAL_GPIO_Init+0x13a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	e001      	b.n	80065ca <HAL_GPIO_Init+0x13e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3304      	adds	r3, #4
 80065ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2bff      	cmp	r3, #255	; 0xff
 80065d0:	d802      	bhi.n	80065d8 <HAL_GPIO_Init+0x14c>
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	e002      	b.n	80065de <HAL_GPIO_Init+0x152>
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	3b08      	subs	r3, #8
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	210f      	movs	r1, #15
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ec:	43db      	mvns	r3, r3
 80065ee:	401a      	ands	r2, r3
 80065f0:	6a39      	ldr	r1, [r7, #32]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	fa01 f303 	lsl.w	r3, r1, r3
 80065f8:	431a      	orrs	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80b1 	beq.w	800676e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800660c:	4b4d      	ldr	r3, [pc, #308]	; (8006744 <HAL_GPIO_Init+0x2b8>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	4a4c      	ldr	r2, [pc, #304]	; (8006744 <HAL_GPIO_Init+0x2b8>)
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	6193      	str	r3, [r2, #24]
 8006618:	4b4a      	ldr	r3, [pc, #296]	; (8006744 <HAL_GPIO_Init+0x2b8>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006624:	4a48      	ldr	r2, [pc, #288]	; (8006748 <HAL_GPIO_Init+0x2bc>)
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	089b      	lsrs	r3, r3, #2
 800662a:	3302      	adds	r3, #2
 800662c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006630:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	220f      	movs	r2, #15
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4013      	ands	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a40      	ldr	r2, [pc, #256]	; (800674c <HAL_GPIO_Init+0x2c0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_GPIO_Init+0x1ec>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a3f      	ldr	r2, [pc, #252]	; (8006750 <HAL_GPIO_Init+0x2c4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00d      	beq.n	8006674 <HAL_GPIO_Init+0x1e8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a3e      	ldr	r2, [pc, #248]	; (8006754 <HAL_GPIO_Init+0x2c8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <HAL_GPIO_Init+0x1e4>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3d      	ldr	r2, [pc, #244]	; (8006758 <HAL_GPIO_Init+0x2cc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_GPIO_Init+0x1e0>
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <HAL_GPIO_Init+0x1ee>
 800666c:	2304      	movs	r3, #4
 800666e:	e004      	b.n	800667a <HAL_GPIO_Init+0x1ee>
 8006670:	2302      	movs	r3, #2
 8006672:	e002      	b.n	800667a <HAL_GPIO_Init+0x1ee>
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <HAL_GPIO_Init+0x1ee>
 8006678:	2300      	movs	r3, #0
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	f002 0203 	and.w	r2, r2, #3
 8006680:	0092      	lsls	r2, r2, #2
 8006682:	4093      	lsls	r3, r2
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800668a:	492f      	ldr	r1, [pc, #188]	; (8006748 <HAL_GPIO_Init+0x2bc>)
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	089b      	lsrs	r3, r3, #2
 8006690:	3302      	adds	r3, #2
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d006      	beq.n	80066b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80066a4:	4b2d      	ldr	r3, [pc, #180]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	492c      	ldr	r1, [pc, #176]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	608b      	str	r3, [r1, #8]
 80066b0:	e006      	b.n	80066c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	43db      	mvns	r3, r3
 80066ba:	4928      	ldr	r1, [pc, #160]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066bc:	4013      	ands	r3, r2
 80066be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d006      	beq.n	80066da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80066cc:	4b23      	ldr	r3, [pc, #140]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	4922      	ldr	r1, [pc, #136]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60cb      	str	r3, [r1, #12]
 80066d8:	e006      	b.n	80066e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80066da:	4b20      	ldr	r3, [pc, #128]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	491e      	ldr	r1, [pc, #120]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	4918      	ldr	r1, [pc, #96]	; (800675c <HAL_GPIO_Init+0x2d0>)
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]
 8006700:	e006      	b.n	8006710 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006702:	4b16      	ldr	r3, [pc, #88]	; (800675c <HAL_GPIO_Init+0x2d0>)
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	43db      	mvns	r3, r3
 800670a:	4914      	ldr	r1, [pc, #80]	; (800675c <HAL_GPIO_Init+0x2d0>)
 800670c:	4013      	ands	r3, r2
 800670e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d021      	beq.n	8006760 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <HAL_GPIO_Init+0x2d0>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	490e      	ldr	r1, [pc, #56]	; (800675c <HAL_GPIO_Init+0x2d0>)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4313      	orrs	r3, r2
 8006726:	600b      	str	r3, [r1, #0]
 8006728:	e021      	b.n	800676e <HAL_GPIO_Init+0x2e2>
 800672a:	bf00      	nop
 800672c:	10320000 	.word	0x10320000
 8006730:	10310000 	.word	0x10310000
 8006734:	10220000 	.word	0x10220000
 8006738:	10210000 	.word	0x10210000
 800673c:	10120000 	.word	0x10120000
 8006740:	10110000 	.word	0x10110000
 8006744:	40021000 	.word	0x40021000
 8006748:	40010000 	.word	0x40010000
 800674c:	40010800 	.word	0x40010800
 8006750:	40010c00 	.word	0x40010c00
 8006754:	40011000 	.word	0x40011000
 8006758:	40011400 	.word	0x40011400
 800675c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <HAL_GPIO_Init+0x304>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	43db      	mvns	r3, r3
 8006768:	4909      	ldr	r1, [pc, #36]	; (8006790 <HAL_GPIO_Init+0x304>)
 800676a:	4013      	ands	r3, r2
 800676c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	3301      	adds	r3, #1
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	fa22 f303 	lsr.w	r3, r2, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	f47f ae8e 	bne.w	80064a0 <HAL_GPIO_Init+0x14>
  }
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	372c      	adds	r7, #44	; 0x2c
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr
 8006790:	40010400 	.word	0x40010400

08006794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e001      	b.n	80067b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	807b      	strh	r3, [r7, #2]
 80067ce:	4613      	mov	r3, r2
 80067d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067d2:	787b      	ldrb	r3, [r7, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067d8:	887a      	ldrh	r2, [r7, #2]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80067de:	e003      	b.n	80067e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067e0:	887b      	ldrh	r3, [r7, #2]
 80067e2:	041a      	lsls	r2, r3, #16
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	611a      	str	r2, [r3, #16]
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e26c      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8087 	beq.w	8006922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006814:	4b92      	ldr	r3, [pc, #584]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 030c 	and.w	r3, r3, #12
 800681c:	2b04      	cmp	r3, #4
 800681e:	d00c      	beq.n	800683a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006820:	4b8f      	ldr	r3, [pc, #572]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b08      	cmp	r3, #8
 800682a:	d112      	bne.n	8006852 <HAL_RCC_OscConfig+0x5e>
 800682c:	4b8c      	ldr	r3, [pc, #560]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006838:	d10b      	bne.n	8006852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683a:	4b89      	ldr	r3, [pc, #548]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d06c      	beq.n	8006920 <HAL_RCC_OscConfig+0x12c>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d168      	bne.n	8006920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e246      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685a:	d106      	bne.n	800686a <HAL_RCC_OscConfig+0x76>
 800685c:	4b80      	ldr	r3, [pc, #512]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a7f      	ldr	r2, [pc, #508]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	e02e      	b.n	80068c8 <HAL_RCC_OscConfig+0xd4>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10c      	bne.n	800688c <HAL_RCC_OscConfig+0x98>
 8006872:	4b7b      	ldr	r3, [pc, #492]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a7a      	ldr	r2, [pc, #488]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	4b78      	ldr	r3, [pc, #480]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a77      	ldr	r2, [pc, #476]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e01d      	b.n	80068c8 <HAL_RCC_OscConfig+0xd4>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006894:	d10c      	bne.n	80068b0 <HAL_RCC_OscConfig+0xbc>
 8006896:	4b72      	ldr	r3, [pc, #456]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a71      	ldr	r2, [pc, #452]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 800689c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4b6f      	ldr	r3, [pc, #444]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a6e      	ldr	r2, [pc, #440]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	e00b      	b.n	80068c8 <HAL_RCC_OscConfig+0xd4>
 80068b0:	4b6b      	ldr	r3, [pc, #428]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a6a      	ldr	r2, [pc, #424]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80068b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	4b68      	ldr	r3, [pc, #416]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a67      	ldr	r2, [pc, #412]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80068c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d0:	f7fd ff9c 	bl	800480c <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fd ff98 	bl	800480c <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	; 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e1fa      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ea:	4b5d      	ldr	r3, [pc, #372]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0xe4>
 80068f6:	e014      	b.n	8006922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7fd ff88 	bl	800480c <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006900:	f7fd ff84 	bl	800480c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b64      	cmp	r3, #100	; 0x64
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e1e6      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006912:	4b53      	ldr	r3, [pc, #332]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x10c>
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d063      	beq.n	80069f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800692e:	4b4c      	ldr	r3, [pc, #304]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800693a:	4b49      	ldr	r3, [pc, #292]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b08      	cmp	r3, #8
 8006944:	d11c      	bne.n	8006980 <HAL_RCC_OscConfig+0x18c>
 8006946:	4b46      	ldr	r3, [pc, #280]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d116      	bne.n	8006980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	4b43      	ldr	r3, [pc, #268]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_RCC_OscConfig+0x176>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d001      	beq.n	800696a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e1ba      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4b3d      	ldr	r3, [pc, #244]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4939      	ldr	r1, [pc, #228]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697e:	e03a      	b.n	80069f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d020      	beq.n	80069ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006988:	4b36      	ldr	r3, [pc, #216]	; (8006a64 <HAL_RCC_OscConfig+0x270>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698e:	f7fd ff3d 	bl	800480c <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006996:	f7fd ff39 	bl	800480c <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e19b      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a8:	4b2d      	ldr	r3, [pc, #180]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b4:	4b2a      	ldr	r3, [pc, #168]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4927      	ldr	r1, [pc, #156]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]
 80069c8:	e015      	b.n	80069f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ca:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <HAL_RCC_OscConfig+0x270>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fd ff1c 	bl	800480c <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d8:	f7fd ff18 	bl	800480c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e17a      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d03a      	beq.n	8006a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d019      	beq.n	8006a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <HAL_RCC_OscConfig+0x274>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a10:	f7fd fefc 	bl	800480c <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a18:	f7fd fef8 	bl	800480c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e15a      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <HAL_RCC_OscConfig+0x26c>)
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a36:	2001      	movs	r0, #1
 8006a38:	f000 facc 	bl	8006fd4 <RCC_Delay>
 8006a3c:	e01c      	b.n	8006a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a3e:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <HAL_RCC_OscConfig+0x274>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a44:	f7fd fee2 	bl	800480c <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a4a:	e00f      	b.n	8006a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a4c:	f7fd fede 	bl	800480c <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d908      	bls.n	8006a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e140      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
 8006a5e:	bf00      	nop
 8006a60:	40021000 	.word	0x40021000
 8006a64:	42420000 	.word	0x42420000
 8006a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a6c:	4b9e      	ldr	r3, [pc, #632]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e9      	bne.n	8006a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80a6 	beq.w	8006bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a8a:	4b97      	ldr	r3, [pc, #604]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10d      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a96:	4b94      	ldr	r3, [pc, #592]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	4a93      	ldr	r2, [pc, #588]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	61d3      	str	r3, [r2, #28]
 8006aa2:	4b91      	ldr	r3, [pc, #580]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aaa:	60bb      	str	r3, [r7, #8]
 8006aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab2:	4b8e      	ldr	r3, [pc, #568]	; (8006cec <HAL_RCC_OscConfig+0x4f8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d118      	bne.n	8006af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006abe:	4b8b      	ldr	r3, [pc, #556]	; (8006cec <HAL_RCC_OscConfig+0x4f8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a8a      	ldr	r2, [pc, #552]	; (8006cec <HAL_RCC_OscConfig+0x4f8>)
 8006ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aca:	f7fd fe9f 	bl	800480c <HAL_GetTick>
 8006ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad2:	f7fd fe9b 	bl	800480c <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b64      	cmp	r3, #100	; 0x64
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e0fd      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae4:	4b81      	ldr	r3, [pc, #516]	; (8006cec <HAL_RCC_OscConfig+0x4f8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d106      	bne.n	8006b06 <HAL_RCC_OscConfig+0x312>
 8006af8:	4b7b      	ldr	r3, [pc, #492]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	4a7a      	ldr	r2, [pc, #488]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	6213      	str	r3, [r2, #32]
 8006b04:	e02d      	b.n	8006b62 <HAL_RCC_OscConfig+0x36e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10c      	bne.n	8006b28 <HAL_RCC_OscConfig+0x334>
 8006b0e:	4b76      	ldr	r3, [pc, #472]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	4a75      	ldr	r2, [pc, #468]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	6213      	str	r3, [r2, #32]
 8006b1a:	4b73      	ldr	r3, [pc, #460]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	4a72      	ldr	r2, [pc, #456]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b20:	f023 0304 	bic.w	r3, r3, #4
 8006b24:	6213      	str	r3, [r2, #32]
 8006b26:	e01c      	b.n	8006b62 <HAL_RCC_OscConfig+0x36e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	d10c      	bne.n	8006b4a <HAL_RCC_OscConfig+0x356>
 8006b30:	4b6d      	ldr	r3, [pc, #436]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	4a6c      	ldr	r2, [pc, #432]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b36:	f043 0304 	orr.w	r3, r3, #4
 8006b3a:	6213      	str	r3, [r2, #32]
 8006b3c:	4b6a      	ldr	r3, [pc, #424]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	4a69      	ldr	r2, [pc, #420]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	6213      	str	r3, [r2, #32]
 8006b48:	e00b      	b.n	8006b62 <HAL_RCC_OscConfig+0x36e>
 8006b4a:	4b67      	ldr	r3, [pc, #412]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	4a66      	ldr	r2, [pc, #408]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b50:	f023 0301 	bic.w	r3, r3, #1
 8006b54:	6213      	str	r3, [r2, #32]
 8006b56:	4b64      	ldr	r3, [pc, #400]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	4a63      	ldr	r2, [pc, #396]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b5c:	f023 0304 	bic.w	r3, r3, #4
 8006b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d015      	beq.n	8006b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b6a:	f7fd fe4f 	bl	800480c <HAL_GetTick>
 8006b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b70:	e00a      	b.n	8006b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b72:	f7fd fe4b 	bl	800480c <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e0ab      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b88:	4b57      	ldr	r3, [pc, #348]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	f003 0302 	and.w	r3, r3, #2
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0ee      	beq.n	8006b72 <HAL_RCC_OscConfig+0x37e>
 8006b94:	e014      	b.n	8006bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b96:	f7fd fe39 	bl	800480c <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b9c:	e00a      	b.n	8006bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9e:	f7fd fe35 	bl	800480c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e095      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb4:	4b4c      	ldr	r3, [pc, #304]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1ee      	bne.n	8006b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d105      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc6:	4b48      	ldr	r3, [pc, #288]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	4a47      	ldr	r2, [pc, #284]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 8081 	beq.w	8006cde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bdc:	4b42      	ldr	r3, [pc, #264]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d061      	beq.n	8006cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d146      	bne.n	8006c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <HAL_RCC_OscConfig+0x4fc>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf6:	f7fd fe09 	bl	800480c <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fd fe05 	bl	800480c <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e067      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c10:	4b35      	ldr	r3, [pc, #212]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1f0      	bne.n	8006bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c24:	d108      	bne.n	8006c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c26:	4b30      	ldr	r3, [pc, #192]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	492d      	ldr	r1, [pc, #180]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c38:	4b2b      	ldr	r3, [pc, #172]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a19      	ldr	r1, [r3, #32]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	4927      	ldr	r1, [pc, #156]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c50:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_RCC_OscConfig+0x4fc>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c56:	f7fd fdd9 	bl	800480c <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5e:	f7fd fdd5 	bl	800480c <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e037      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c70:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0f0      	beq.n	8006c5e <HAL_RCC_OscConfig+0x46a>
 8006c7c:	e02f      	b.n	8006cde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c7e:	4b1c      	ldr	r3, [pc, #112]	; (8006cf0 <HAL_RCC_OscConfig+0x4fc>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fd fdc2 	bl	800480c <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8c:	f7fd fdbe 	bl	800480c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e020      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c9e:	4b12      	ldr	r3, [pc, #72]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0x498>
 8006caa:	e018      	b.n	8006cde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e013      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_RCC_OscConfig+0x4f4>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d106      	bne.n	8006cda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d001      	beq.n	8006cde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	40007000 	.word	0x40007000
 8006cf0:	42420060 	.word	0x42420060

08006cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0d0      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d08:	4b6a      	ldr	r3, [pc, #424]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d910      	bls.n	8006d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b67      	ldr	r3, [pc, #412]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f023 0207 	bic.w	r2, r3, #7
 8006d1e:	4965      	ldr	r1, [pc, #404]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d26:	4b63      	ldr	r3, [pc, #396]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0307 	and.w	r3, r3, #7
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0b8      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d020      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d50:	4b59      	ldr	r3, [pc, #356]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a58      	ldr	r2, [pc, #352]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d68:	4b53      	ldr	r3, [pc, #332]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4a52      	ldr	r2, [pc, #328]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d74:	4b50      	ldr	r3, [pc, #320]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	494d      	ldr	r1, [pc, #308]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d040      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9a:	4b47      	ldr	r3, [pc, #284]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d115      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e07f      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006db2:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e073      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc2:	4b3d      	ldr	r3, [pc, #244]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e06b      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dd2:	4b39      	ldr	r3, [pc, #228]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f023 0203 	bic.w	r2, r3, #3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4936      	ldr	r1, [pc, #216]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006de4:	f7fd fd12 	bl	800480c <HAL_GetTick>
 8006de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	e00a      	b.n	8006e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dec:	f7fd fd0e 	bl	800480c <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e053      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e02:	4b2d      	ldr	r3, [pc, #180]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f003 020c 	and.w	r2, r3, #12
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d1eb      	bne.n	8006dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d210      	bcs.n	8006e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e22:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 0207 	bic.w	r2, r3, #7
 8006e2a:	4922      	ldr	r1, [pc, #136]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e32:	4b20      	ldr	r3, [pc, #128]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d001      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e032      	b.n	8006eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0304 	and.w	r3, r3, #4
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e50:	4b19      	ldr	r3, [pc, #100]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4916      	ldr	r1, [pc, #88]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e82:	f000 f821 	bl	8006ec8 <HAL_RCC_GetSysClockFreq>
 8006e86:	4602      	mov	r2, r0
 8006e88:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	490a      	ldr	r1, [pc, #40]	; (8006ebc <HAL_RCC_ClockConfig+0x1c8>)
 8006e94:	5ccb      	ldrb	r3, [r1, r3]
 8006e96:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9a:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8006e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e9e:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fd fc70 	bl	8004788 <HAL_InitTick>

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40022000 	.word	0x40022000
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	080092b8 	.word	0x080092b8
 8006ec0:	20000064 	.word	0x20000064
 8006ec4:	20000068 	.word	0x20000068

08006ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006ee2:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 030c 	and.w	r3, r3, #12
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d002      	beq.n	8006ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d003      	beq.n	8006efe <HAL_RCC_GetSysClockFreq+0x36>
 8006ef6:	e027      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ef8:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8006efa:	613b      	str	r3, [r7, #16]
      break;
 8006efc:	e027      	b.n	8006f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	0c9b      	lsrs	r3, r3, #18
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	4a17      	ldr	r2, [pc, #92]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f08:	5cd3      	ldrb	r3, [r2, r3]
 8006f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d010      	beq.n	8006f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f16:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	0c5b      	lsrs	r3, r3, #17
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	4a11      	ldr	r2, [pc, #68]	; (8006f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006f22:	5cd3      	ldrb	r3, [r2, r3]
 8006f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a0d      	ldr	r2, [pc, #52]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8006f2a:	fb02 f203 	mul.w	r2, r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e004      	b.n	8006f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a0c      	ldr	r2, [pc, #48]	; (8006f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f3c:	fb02 f303 	mul.w	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	613b      	str	r3, [r7, #16]
      break;
 8006f46:	e002      	b.n	8006f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f48:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8006f4a:	613b      	str	r3, [r7, #16]
      break;
 8006f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f4e:	693b      	ldr	r3, [r7, #16]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	007a1200 	.word	0x007a1200
 8006f64:	080092d0 	.word	0x080092d0
 8006f68:	080092e0 	.word	0x080092e0
 8006f6c:	003d0900 	.word	0x003d0900

08006f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr
 8006f80:	20000064 	.word	0x20000064

08006f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f88:	f7ff fff2 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4903      	ldr	r1, [pc, #12]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	080092c8 	.word	0x080092c8

08006fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fb0:	f7ff ffde 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	0adb      	lsrs	r3, r3, #11
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	4903      	ldr	r1, [pc, #12]	; (8006fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc2:	5ccb      	ldrb	r3, [r1, r3]
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	080092c8 	.word	0x080092c8

08006fd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <RCC_Delay+0x34>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <RCC_Delay+0x38>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	0a5b      	lsrs	r3, r3, #9
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ff0:	bf00      	nop
  }
  while (Delay --);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1e5a      	subs	r2, r3, #1
 8006ff6:	60fa      	str	r2, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f9      	bne.n	8006ff0 <RCC_Delay+0x1c>
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	20000064 	.word	0x20000064
 800700c:	10624dd3 	.word	0x10624dd3

08007010 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d07d      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800702c:	2300      	movs	r3, #0
 800702e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007030:	4b4f      	ldr	r3, [pc, #316]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703c:	4b4c      	ldr	r3, [pc, #304]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	4a4b      	ldr	r2, [pc, #300]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007046:	61d3      	str	r3, [r2, #28]
 8007048:	4b49      	ldr	r3, [pc, #292]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007058:	4b46      	ldr	r3, [pc, #280]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d118      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007064:	4b43      	ldr	r3, [pc, #268]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a42      	ldr	r2, [pc, #264]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800706a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800706e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007070:	f7fd fbcc 	bl	800480c <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007076:	e008      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007078:	f7fd fbc8 	bl	800480c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b64      	cmp	r3, #100	; 0x64
 8007084:	d901      	bls.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e06d      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708a:	4b3a      	ldr	r3, [pc, #232]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007096:	4b36      	ldr	r3, [pc, #216]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d02e      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d027      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070b4:	4b2e      	ldr	r3, [pc, #184]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070be:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070c4:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80070ca:	4a29      	ldr	r2, [pc, #164]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d014      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070da:	f7fd fb97 	bl	800480c <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e0:	e00a      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e2:	f7fd fb93 	bl	800480c <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e036      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0ee      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007104:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	4917      	ldr	r1, [pc, #92]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007112:	4313      	orrs	r3, r2
 8007114:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d105      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800711c:	4b14      	ldr	r3, [pc, #80]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	4a13      	ldr	r2, [pc, #76]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007126:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007134:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	490b      	ldr	r1, [pc, #44]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	d008      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	4904      	ldr	r1, [pc, #16]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007160:	4313      	orrs	r3, r2
 8007162:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40021000 	.word	0x40021000
 8007174:	40007000 	.word	0x40007000
 8007178:	42420440 	.word	0x42420440

0800717c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	2300      	movs	r3, #0
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	2300      	movs	r3, #0
 800718e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	2300      	movs	r3, #0
 8007196:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b10      	cmp	r3, #16
 800719c:	d00a      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	f200 808a 	bhi.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d045      	beq.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d075      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80071b2:	e082      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80071b4:	4b46      	ldr	r3, [pc, #280]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80071ba:	4b45      	ldr	r3, [pc, #276]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d07b      	beq.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	0c9b      	lsrs	r3, r3, #18
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	4a41      	ldr	r2, [pc, #260]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80071d0:	5cd3      	ldrb	r3, [r2, r3]
 80071d2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d015      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071de:	4b3c      	ldr	r3, [pc, #240]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	0c5b      	lsrs	r3, r3, #17
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	4a3b      	ldr	r2, [pc, #236]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00d      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80071f8:	4a38      	ldr	r2, [pc, #224]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	e004      	b.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4a34      	ldr	r2, [pc, #208]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007214:	4b2e      	ldr	r3, [pc, #184]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800721c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007220:	d102      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	61bb      	str	r3, [r7, #24]
      break;
 8007226:	e04a      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	4a2d      	ldr	r2, [pc, #180]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	61bb      	str	r3, [r7, #24]
      break;
 8007236:	e042      	b.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007238:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007248:	d108      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	e01f      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007266:	d109      	bne.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007268:	4b19      	ldr	r3, [pc, #100]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007274:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	e00f      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007286:	d11c      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007288:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d016      	beq.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007294:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007298:	61bb      	str	r3, [r7, #24]
      break;
 800729a:	e012      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800729c:	e011      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800729e:	f7ff fe85 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	0b9b      	lsrs	r3, r3, #14
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	3301      	adds	r3, #1
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b6:	61bb      	str	r3, [r7, #24]
      break;
 80072b8:	e004      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80072ba:	bf00      	nop
 80072bc:	e002      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80072be:	bf00      	nop
 80072c0:	e000      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80072c2:	bf00      	nop
    }
  }
  return (frequency);
 80072c4:	69bb      	ldr	r3, [r7, #24]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3720      	adds	r7, #32
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	080092e4 	.word	0x080092e4
 80072d8:	080092f4 	.word	0x080092f4
 80072dc:	007a1200 	.word	0x007a1200
 80072e0:	003d0900 	.word	0x003d0900
 80072e4:	aaaaaaab 	.word	0xaaaaaaab

080072e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e041      	b.n	800737e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fc fff0 	bl	80042f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	4619      	mov	r1, r3
 8007326:	4610      	mov	r0, r2
 8007328:	f000 fbd8 	bl	8007adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d001      	beq.n	80073a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e032      	b.n	8007406 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a18      	ldr	r2, [pc, #96]	; (8007410 <HAL_TIM_Base_Start+0x88>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <HAL_TIM_Base_Start+0x48>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ba:	d009      	beq.n	80073d0 <HAL_TIM_Base_Start+0x48>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a14      	ldr	r2, [pc, #80]	; (8007414 <HAL_TIM_Base_Start+0x8c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_TIM_Base_Start+0x48>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a13      	ldr	r2, [pc, #76]	; (8007418 <HAL_TIM_Base_Start+0x90>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d111      	bne.n	80073f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b06      	cmp	r3, #6
 80073e0:	d010      	beq.n	8007404 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0201 	orr.w	r2, r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f2:	e007      	b.n	8007404 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr
 8007410:	40012c00 	.word	0x40012c00
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800

0800741c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d001      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e03a      	b.n	80074aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a18      	ldr	r2, [pc, #96]	; (80074b4 <HAL_TIM_Base_Start_IT+0x98>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x58>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d009      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x58>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a14      	ldr	r2, [pc, #80]	; (80074b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_TIM_Base_Start_IT+0x58>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a13      	ldr	r2, [pc, #76]	; (80074bc <HAL_TIM_Base_Start_IT+0xa0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d111      	bne.n	8007498 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b06      	cmp	r3, #6
 8007484:	d010      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0201 	orr.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007496:	e007      	b.n	80074a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800

080074c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e041      	b.n	8007556 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f839 	bl	800755e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3304      	adds	r3, #4
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f000 faec 	bl	8007adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	bc80      	pop	{r7}
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b02      	cmp	r3, #2
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0202 	mvn.w	r2, #2
 800759c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa76 	bl	8007aa4 <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fa69 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fa78 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d122      	bne.n	8007620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d11b      	bne.n	8007620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0204 	mvn.w	r2, #4
 80075f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa4c 	bl	8007aa4 <HAL_TIM_IC_CaptureCallback>
 800760c:	e005      	b.n	800761a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa3f 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa4e 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b08      	cmp	r3, #8
 800762c:	d122      	bne.n	8007674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b08      	cmp	r3, #8
 800763a:	d11b      	bne.n	8007674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0208 	mvn.w	r2, #8
 8007644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2204      	movs	r2, #4
 800764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa22 	bl	8007aa4 <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa15 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fa24 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b10      	cmp	r3, #16
 8007680:	d122      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b10      	cmp	r3, #16
 800768e:	d11b      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0210 	mvn.w	r2, #16
 8007698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2208      	movs	r2, #8
 800769e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f9f8 	bl	8007aa4 <HAL_TIM_IC_CaptureCallback>
 80076b4:	e005      	b.n	80076c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9eb 	bl	8007a92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9fa 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d10e      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d107      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0201 	mvn.w	r2, #1
 80076ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fc fab4 	bl	8003c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fe:	2b80      	cmp	r3, #128	; 0x80
 8007700:	d10e      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d107      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fdb4 	bl	8008288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772a:	2b40      	cmp	r3, #64	; 0x40
 800772c:	d10e      	bne.n	800774c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007738:	2b40      	cmp	r3, #64	; 0x40
 800773a:	d107      	bne.n	800774c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f9be 	bl	8007ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b20      	cmp	r3, #32
 8007758:	d10e      	bne.n	8007778 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b20      	cmp	r3, #32
 8007766:	d107      	bne.n	8007778 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0220 	mvn.w	r2, #32
 8007770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fd7f 	bl	8008276 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007796:	2b01      	cmp	r3, #1
 8007798:	d101      	bne.n	800779e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800779a:	2302      	movs	r3, #2
 800779c:	e0ae      	b.n	80078fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b0c      	cmp	r3, #12
 80077aa:	f200 809f 	bhi.w	80078ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077ae:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077e9 	.word	0x080077e9
 80077b8:	080078ed 	.word	0x080078ed
 80077bc:	080078ed 	.word	0x080078ed
 80077c0:	080078ed 	.word	0x080078ed
 80077c4:	08007829 	.word	0x08007829
 80077c8:	080078ed 	.word	0x080078ed
 80077cc:	080078ed 	.word	0x080078ed
 80077d0:	080078ed 	.word	0x080078ed
 80077d4:	0800786b 	.word	0x0800786b
 80077d8:	080078ed 	.word	0x080078ed
 80077dc:	080078ed 	.word	0x080078ed
 80077e0:	080078ed 	.word	0x080078ed
 80077e4:	080078ab 	.word	0x080078ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68b9      	ldr	r1, [r7, #8]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 f9d6 	bl	8007ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0208 	orr.w	r2, r2, #8
 8007802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0204 	bic.w	r2, r2, #4
 8007812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6999      	ldr	r1, [r3, #24]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	619a      	str	r2, [r3, #24]
      break;
 8007826:	e064      	b.n	80078f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 fa1c 	bl	8007c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6999      	ldr	r1, [r3, #24]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	021a      	lsls	r2, r3, #8
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	619a      	str	r2, [r3, #24]
      break;
 8007868:	e043      	b.n	80078f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fa65 	bl	8007d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0208 	orr.w	r2, r2, #8
 8007884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0204 	bic.w	r2, r2, #4
 8007894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69d9      	ldr	r1, [r3, #28]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	61da      	str	r2, [r3, #28]
      break;
 80078a8:	e023      	b.n	80078f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 faaf 	bl	8007e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69d9      	ldr	r1, [r3, #28]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	021a      	lsls	r2, r3, #8
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	61da      	str	r2, [r3, #28]
      break;
 80078ea:	e002      	b.n	80078f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
      break;
 80078f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_TIM_ConfigClockSource+0x1c>
 800791c:	2302      	movs	r3, #2
 800791e:	e0b4      	b.n	8007a8a <HAL_TIM_ConfigClockSource+0x186>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800793e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007958:	d03e      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0xd4>
 800795a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800795e:	f200 8087 	bhi.w	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	f000 8086 	beq.w	8007a76 <HAL_TIM_ConfigClockSource+0x172>
 800796a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796e:	d87f      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b70      	cmp	r3, #112	; 0x70
 8007972:	d01a      	beq.n	80079aa <HAL_TIM_ConfigClockSource+0xa6>
 8007974:	2b70      	cmp	r3, #112	; 0x70
 8007976:	d87b      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b60      	cmp	r3, #96	; 0x60
 800797a:	d050      	beq.n	8007a1e <HAL_TIM_ConfigClockSource+0x11a>
 800797c:	2b60      	cmp	r3, #96	; 0x60
 800797e:	d877      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b50      	cmp	r3, #80	; 0x50
 8007982:	d03c      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0xfa>
 8007984:	2b50      	cmp	r3, #80	; 0x50
 8007986:	d873      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	d058      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0x13a>
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d86f      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b30      	cmp	r3, #48	; 0x30
 8007992:	d064      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x15a>
 8007994:	2b30      	cmp	r3, #48	; 0x30
 8007996:	d86b      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007998:	2b20      	cmp	r3, #32
 800799a:	d060      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x15a>
 800799c:	2b20      	cmp	r3, #32
 800799e:	d867      	bhi.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d05c      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x15a>
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	d05a      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x15a>
 80079a8:	e062      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	6899      	ldr	r1, [r3, #8]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f000 faf0 	bl	8007f9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	609a      	str	r2, [r3, #8]
      break;
 80079d6:	e04f      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	6899      	ldr	r1, [r3, #8]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f000 fad9 	bl	8007f9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079fa:	609a      	str	r2, [r3, #8]
      break;
 80079fc:	e03c      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	6859      	ldr	r1, [r3, #4]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f000 fa50 	bl	8007eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2150      	movs	r1, #80	; 0x50
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 faa7 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a1c:	e02c      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6859      	ldr	r1, [r3, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f000 fa6e 	bl	8007f0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2160      	movs	r1, #96	; 0x60
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fa97 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a3c:	e01c      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f000 fa30 	bl	8007eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2140      	movs	r1, #64	; 0x40
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fa87 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a5c:	e00c      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f000 fa7e 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a6e:	e003      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
      break;
 8007a74:	e000      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bc80      	pop	{r7}
 8007ad8:	4770      	bx	lr
	...

08007adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a29      	ldr	r2, [pc, #164]	; (8007b94 <TIM_Base_SetConfig+0xb8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00b      	beq.n	8007b0c <TIM_Base_SetConfig+0x30>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afa:	d007      	beq.n	8007b0c <TIM_Base_SetConfig+0x30>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a26      	ldr	r2, [pc, #152]	; (8007b98 <TIM_Base_SetConfig+0xbc>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d003      	beq.n	8007b0c <TIM_Base_SetConfig+0x30>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a25      	ldr	r2, [pc, #148]	; (8007b9c <TIM_Base_SetConfig+0xc0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d108      	bne.n	8007b1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a1c      	ldr	r2, [pc, #112]	; (8007b94 <TIM_Base_SetConfig+0xb8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00b      	beq.n	8007b3e <TIM_Base_SetConfig+0x62>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2c:	d007      	beq.n	8007b3e <TIM_Base_SetConfig+0x62>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a19      	ldr	r2, [pc, #100]	; (8007b98 <TIM_Base_SetConfig+0xbc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d003      	beq.n	8007b3e <TIM_Base_SetConfig+0x62>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a18      	ldr	r2, [pc, #96]	; (8007b9c <TIM_Base_SetConfig+0xc0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d108      	bne.n	8007b50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <TIM_Base_SetConfig+0xb8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d103      	bne.n	8007b84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	615a      	str	r2, [r3, #20]
}
 8007b8a:	bf00      	nop
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800

08007ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f023 0201 	bic.w	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 0302 	bic.w	r3, r3, #2
 8007be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a1c      	ldr	r2, [pc, #112]	; (8007c68 <TIM_OC1_SetConfig+0xc8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d10c      	bne.n	8007c16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f023 0308 	bic.w	r3, r3, #8
 8007c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f023 0304 	bic.w	r3, r3, #4
 8007c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a13      	ldr	r2, [pc, #76]	; (8007c68 <TIM_OC1_SetConfig+0xc8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d111      	bne.n	8007c42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40012c00 	.word	0x40012c00

08007c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f023 0210 	bic.w	r2, r3, #16
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f023 0320 	bic.w	r3, r3, #32
 8007cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a1d      	ldr	r2, [pc, #116]	; (8007d3c <TIM_OC2_SetConfig+0xd0>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d10d      	bne.n	8007ce8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <TIM_OC2_SetConfig+0xd0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d113      	bne.n	8007d18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	621a      	str	r2, [r3, #32]
}
 8007d32:	bf00      	nop
 8007d34:	371c      	adds	r7, #28
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr
 8007d3c:	40012c00 	.word	0x40012c00

08007d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <TIM_OC3_SetConfig+0xd0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10d      	bne.n	8007dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a14      	ldr	r2, [pc, #80]	; (8007e10 <TIM_OC3_SetConfig+0xd0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d113      	bne.n	8007dea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	621a      	str	r2, [r3, #32]
}
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40012c00 	.word	0x40012c00

08007e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	031b      	lsls	r3, r3, #12
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a0f      	ldr	r2, [pc, #60]	; (8007eac <TIM_OC4_SetConfig+0x98>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d109      	bne.n	8007e88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	019b      	lsls	r3, r3, #6
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr
 8007eac:	40012c00 	.word	0x40012c00

08007eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	f023 0201 	bic.w	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f023 030a 	bic.w	r3, r3, #10
 8007eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	621a      	str	r2, [r3, #32]
}
 8007f02:	bf00      	nop
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr

08007f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	f023 0210 	bic.w	r2, r3, #16
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	031b      	lsls	r3, r3, #12
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	621a      	str	r2, [r3, #32]
}
 8007f60:	bf00      	nop
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f043 0307 	orr.w	r3, r3, #7
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b087      	sub	sp, #28
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
 8007faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	021a      	lsls	r2, r3, #8
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	609a      	str	r2, [r3, #8]
}
 8007fd2:	bf00      	nop
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d109      	bne.n	8008000 <HAL_TIMEx_PWMN_Start+0x24>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	e022      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0x6a>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b04      	cmp	r3, #4
 8008004:	d109      	bne.n	800801a <HAL_TIMEx_PWMN_Start+0x3e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b01      	cmp	r3, #1
 8008010:	bf14      	ite	ne
 8008012:	2301      	movne	r3, #1
 8008014:	2300      	moveq	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	e015      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0x6a>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b08      	cmp	r3, #8
 800801e:	d109      	bne.n	8008034 <HAL_TIMEx_PWMN_Start+0x58>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b01      	cmp	r3, #1
 800802a:	bf14      	ite	ne
 800802c:	2301      	movne	r3, #1
 800802e:	2300      	moveq	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	e008      	b.n	8008046 <HAL_TIMEx_PWMN_Start+0x6a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b01      	cmp	r3, #1
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e059      	b.n	8008102 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d104      	bne.n	800805e <HAL_TIMEx_PWMN_Start+0x82>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800805c:	e013      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0xaa>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b04      	cmp	r3, #4
 8008062:	d104      	bne.n	800806e <HAL_TIMEx_PWMN_Start+0x92>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800806c:	e00b      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0xaa>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b08      	cmp	r3, #8
 8008072:	d104      	bne.n	800807e <HAL_TIMEx_PWMN_Start+0xa2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807c:	e003      	b.n	8008086 <HAL_TIMEx_PWMN_Start+0xaa>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2204      	movs	r2, #4
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f903 	bl	800829a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a18      	ldr	r2, [pc, #96]	; (800810c <HAL_TIMEx_PWMN_Start+0x130>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00e      	beq.n	80080cc <HAL_TIMEx_PWMN_Start+0xf0>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b6:	d009      	beq.n	80080cc <HAL_TIMEx_PWMN_Start+0xf0>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a14      	ldr	r2, [pc, #80]	; (8008110 <HAL_TIMEx_PWMN_Start+0x134>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d004      	beq.n	80080cc <HAL_TIMEx_PWMN_Start+0xf0>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a13      	ldr	r2, [pc, #76]	; (8008114 <HAL_TIMEx_PWMN_Start+0x138>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d111      	bne.n	80080f0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b06      	cmp	r3, #6
 80080dc:	d010      	beq.n	8008100 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f042 0201 	orr.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ee:	e007      	b.n	8008100 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40012c00 	.word	0x40012c00
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800

08008118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800812c:	2302      	movs	r3, #2
 800812e:	e046      	b.n	80081be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a16      	ldr	r2, [pc, #88]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00e      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817c:	d009      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a12      	ldr	r2, [pc, #72]	; (80081cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d004      	beq.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a10      	ldr	r2, [pc, #64]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d10c      	bne.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800

080081d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e03d      	b.n	800826c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr

08008276 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr

0800829a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800829a:	b480      	push	{r7}
 800829c:	b087      	sub	sp, #28
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f003 031f 	and.w	r3, r3, #31
 80082ac:	2204      	movs	r2, #4
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a1a      	ldr	r2, [r3, #32]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	43db      	mvns	r3, r3
 80082bc:	401a      	ands	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1a      	ldr	r2, [r3, #32]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f003 031f 	and.w	r3, r3, #31
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	fa01 f303 	lsl.w	r3, r1, r3
 80082d2:	431a      	orrs	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	621a      	str	r2, [r3, #32]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e042      	b.n	800837a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d106      	bne.n	800830e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7fc f873 	bl	80043f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2224      	movs	r2, #36	; 0x24
 8008312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008324:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f82c 	bl	8008384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800833a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800834a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800835a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2220      	movs	r2, #32
 8008366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80083be:	f023 030c 	bic.w	r3, r3, #12
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	430b      	orrs	r3, r1
 80083ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a2c      	ldr	r2, [pc, #176]	; (8008498 <UART_SetConfig+0x114>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d103      	bne.n	80083f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80083ec:	f7fe fdde 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	e002      	b.n	80083fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80083f4:	f7fe fdc6 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 80083f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	009a      	lsls	r2, r3, #2
 8008404:	441a      	add	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008410:	4a22      	ldr	r2, [pc, #136]	; (800849c <UART_SetConfig+0x118>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	0119      	lsls	r1, r3, #4
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009a      	lsls	r2, r3, #2
 8008424:	441a      	add	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008430:	4b1a      	ldr	r3, [pc, #104]	; (800849c <UART_SetConfig+0x118>)
 8008432:	fba3 0302 	umull	r0, r3, r3, r2
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	2064      	movs	r0, #100	; 0x64
 800843a:	fb00 f303 	mul.w	r3, r0, r3
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	3332      	adds	r3, #50	; 0x32
 8008444:	4a15      	ldr	r2, [pc, #84]	; (800849c <UART_SetConfig+0x118>)
 8008446:	fba2 2303 	umull	r2, r3, r2, r3
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008450:	4419      	add	r1, r3
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009a      	lsls	r2, r3, #2
 800845c:	441a      	add	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	fbb2 f2f3 	udiv	r2, r2, r3
 8008468:	4b0c      	ldr	r3, [pc, #48]	; (800849c <UART_SetConfig+0x118>)
 800846a:	fba3 0302 	umull	r0, r3, r3, r2
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	2064      	movs	r0, #100	; 0x64
 8008472:	fb00 f303 	mul.w	r3, r0, r3
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	3332      	adds	r3, #50	; 0x32
 800847c:	4a07      	ldr	r2, [pc, #28]	; (800849c <UART_SetConfig+0x118>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	f003 020f 	and.w	r2, r3, #15
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	440a      	add	r2, r1
 800848e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008490:	bf00      	nop
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	40013800 	.word	0x40013800
 800849c:	51eb851f 	.word	0x51eb851f

080084a0 <__errno>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	; (80084a8 <__errno+0x8>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000070 	.word	0x20000070

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	2600      	movs	r6, #0
 80084b0:	4d0c      	ldr	r5, [pc, #48]	; (80084e4 <__libc_init_array+0x38>)
 80084b2:	4c0d      	ldr	r4, [pc, #52]	; (80084e8 <__libc_init_array+0x3c>)
 80084b4:	1b64      	subs	r4, r4, r5
 80084b6:	10a4      	asrs	r4, r4, #2
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	f000 fca4 	bl	8008e08 <_init>
 80084c0:	2600      	movs	r6, #0
 80084c2:	4d0a      	ldr	r5, [pc, #40]	; (80084ec <__libc_init_array+0x40>)
 80084c4:	4c0a      	ldr	r4, [pc, #40]	; (80084f0 <__libc_init_array+0x44>)
 80084c6:	1b64      	subs	r4, r4, r5
 80084c8:	10a4      	asrs	r4, r4, #2
 80084ca:	42a6      	cmp	r6, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d4:	4798      	blx	r3
 80084d6:	3601      	adds	r6, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f855 3b04 	ldr.w	r3, [r5], #4
 80084de:	4798      	blx	r3
 80084e0:	3601      	adds	r6, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	0800932c 	.word	0x0800932c
 80084e8:	0800932c 	.word	0x0800932c
 80084ec:	0800932c 	.word	0x0800932c
 80084f0:	08009330 	.word	0x08009330

080084f4 <memcpy>:
 80084f4:	440a      	add	r2, r1
 80084f6:	4291      	cmp	r1, r2
 80084f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084fc:	d100      	bne.n	8008500 <memcpy+0xc>
 80084fe:	4770      	bx	lr
 8008500:	b510      	push	{r4, lr}
 8008502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008506:	4291      	cmp	r1, r2
 8008508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800850c:	d1f9      	bne.n	8008502 <memcpy+0xe>
 800850e:	bd10      	pop	{r4, pc}

08008510 <memset>:
 8008510:	4603      	mov	r3, r0
 8008512:	4402      	add	r2, r0
 8008514:	4293      	cmp	r3, r2
 8008516:	d100      	bne.n	800851a <memset+0xa>
 8008518:	4770      	bx	lr
 800851a:	f803 1b01 	strb.w	r1, [r3], #1
 800851e:	e7f9      	b.n	8008514 <memset+0x4>

08008520 <_vsiprintf_r>:
 8008520:	b500      	push	{lr}
 8008522:	b09b      	sub	sp, #108	; 0x6c
 8008524:	9100      	str	r1, [sp, #0]
 8008526:	9104      	str	r1, [sp, #16]
 8008528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800852c:	9105      	str	r1, [sp, #20]
 800852e:	9102      	str	r1, [sp, #8]
 8008530:	4905      	ldr	r1, [pc, #20]	; (8008548 <_vsiprintf_r+0x28>)
 8008532:	9103      	str	r1, [sp, #12]
 8008534:	4669      	mov	r1, sp
 8008536:	f000 f86f 	bl	8008618 <_svfiprintf_r>
 800853a:	2200      	movs	r2, #0
 800853c:	9b00      	ldr	r3, [sp, #0]
 800853e:	701a      	strb	r2, [r3, #0]
 8008540:	b01b      	add	sp, #108	; 0x6c
 8008542:	f85d fb04 	ldr.w	pc, [sp], #4
 8008546:	bf00      	nop
 8008548:	ffff0208 	.word	0xffff0208

0800854c <vsiprintf>:
 800854c:	4613      	mov	r3, r2
 800854e:	460a      	mov	r2, r1
 8008550:	4601      	mov	r1, r0
 8008552:	4802      	ldr	r0, [pc, #8]	; (800855c <vsiprintf+0x10>)
 8008554:	6800      	ldr	r0, [r0, #0]
 8008556:	f7ff bfe3 	b.w	8008520 <_vsiprintf_r>
 800855a:	bf00      	nop
 800855c:	20000070 	.word	0x20000070

08008560 <__ssputs_r>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	688e      	ldr	r6, [r1, #8]
 8008566:	4682      	mov	sl, r0
 8008568:	429e      	cmp	r6, r3
 800856a:	460c      	mov	r4, r1
 800856c:	4690      	mov	r8, r2
 800856e:	461f      	mov	r7, r3
 8008570:	d838      	bhi.n	80085e4 <__ssputs_r+0x84>
 8008572:	898a      	ldrh	r2, [r1, #12]
 8008574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008578:	d032      	beq.n	80085e0 <__ssputs_r+0x80>
 800857a:	6825      	ldr	r5, [r4, #0]
 800857c:	6909      	ldr	r1, [r1, #16]
 800857e:	3301      	adds	r3, #1
 8008580:	eba5 0901 	sub.w	r9, r5, r1
 8008584:	6965      	ldr	r5, [r4, #20]
 8008586:	444b      	add	r3, r9
 8008588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800858c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008590:	106d      	asrs	r5, r5, #1
 8008592:	429d      	cmp	r5, r3
 8008594:	bf38      	it	cc
 8008596:	461d      	movcc	r5, r3
 8008598:	0553      	lsls	r3, r2, #21
 800859a:	d531      	bpl.n	8008600 <__ssputs_r+0xa0>
 800859c:	4629      	mov	r1, r5
 800859e:	f000 fb45 	bl	8008c2c <_malloc_r>
 80085a2:	4606      	mov	r6, r0
 80085a4:	b950      	cbnz	r0, 80085bc <__ssputs_r+0x5c>
 80085a6:	230c      	movs	r3, #12
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	f8ca 3000 	str.w	r3, [sl]
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085bc:	464a      	mov	r2, r9
 80085be:	6921      	ldr	r1, [r4, #16]
 80085c0:	f7ff ff98 	bl	80084f4 <memcpy>
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	6126      	str	r6, [r4, #16]
 80085d2:	444e      	add	r6, r9
 80085d4:	6026      	str	r6, [r4, #0]
 80085d6:	463e      	mov	r6, r7
 80085d8:	6165      	str	r5, [r4, #20]
 80085da:	eba5 0509 	sub.w	r5, r5, r9
 80085de:	60a5      	str	r5, [r4, #8]
 80085e0:	42be      	cmp	r6, r7
 80085e2:	d900      	bls.n	80085e6 <__ssputs_r+0x86>
 80085e4:	463e      	mov	r6, r7
 80085e6:	4632      	mov	r2, r6
 80085e8:	4641      	mov	r1, r8
 80085ea:	6820      	ldr	r0, [r4, #0]
 80085ec:	f000 fab8 	bl	8008b60 <memmove>
 80085f0:	68a3      	ldr	r3, [r4, #8]
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	1b9b      	subs	r3, r3, r6
 80085f6:	4432      	add	r2, r6
 80085f8:	2000      	movs	r0, #0
 80085fa:	60a3      	str	r3, [r4, #8]
 80085fc:	6022      	str	r2, [r4, #0]
 80085fe:	e7db      	b.n	80085b8 <__ssputs_r+0x58>
 8008600:	462a      	mov	r2, r5
 8008602:	f000 fb6d 	bl	8008ce0 <_realloc_r>
 8008606:	4606      	mov	r6, r0
 8008608:	2800      	cmp	r0, #0
 800860a:	d1e1      	bne.n	80085d0 <__ssputs_r+0x70>
 800860c:	4650      	mov	r0, sl
 800860e:	6921      	ldr	r1, [r4, #16]
 8008610:	f000 fac0 	bl	8008b94 <_free_r>
 8008614:	e7c7      	b.n	80085a6 <__ssputs_r+0x46>
	...

08008618 <_svfiprintf_r>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	4698      	mov	r8, r3
 800861e:	898b      	ldrh	r3, [r1, #12]
 8008620:	4607      	mov	r7, r0
 8008622:	061b      	lsls	r3, r3, #24
 8008624:	460d      	mov	r5, r1
 8008626:	4614      	mov	r4, r2
 8008628:	b09d      	sub	sp, #116	; 0x74
 800862a:	d50e      	bpl.n	800864a <_svfiprintf_r+0x32>
 800862c:	690b      	ldr	r3, [r1, #16]
 800862e:	b963      	cbnz	r3, 800864a <_svfiprintf_r+0x32>
 8008630:	2140      	movs	r1, #64	; 0x40
 8008632:	f000 fafb 	bl	8008c2c <_malloc_r>
 8008636:	6028      	str	r0, [r5, #0]
 8008638:	6128      	str	r0, [r5, #16]
 800863a:	b920      	cbnz	r0, 8008646 <_svfiprintf_r+0x2e>
 800863c:	230c      	movs	r3, #12
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	e0d1      	b.n	80087ea <_svfiprintf_r+0x1d2>
 8008646:	2340      	movs	r3, #64	; 0x40
 8008648:	616b      	str	r3, [r5, #20]
 800864a:	2300      	movs	r3, #0
 800864c:	9309      	str	r3, [sp, #36]	; 0x24
 800864e:	2320      	movs	r3, #32
 8008650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008654:	2330      	movs	r3, #48	; 0x30
 8008656:	f04f 0901 	mov.w	r9, #1
 800865a:	f8cd 800c 	str.w	r8, [sp, #12]
 800865e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008804 <_svfiprintf_r+0x1ec>
 8008662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008666:	4623      	mov	r3, r4
 8008668:	469a      	mov	sl, r3
 800866a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800866e:	b10a      	cbz	r2, 8008674 <_svfiprintf_r+0x5c>
 8008670:	2a25      	cmp	r2, #37	; 0x25
 8008672:	d1f9      	bne.n	8008668 <_svfiprintf_r+0x50>
 8008674:	ebba 0b04 	subs.w	fp, sl, r4
 8008678:	d00b      	beq.n	8008692 <_svfiprintf_r+0x7a>
 800867a:	465b      	mov	r3, fp
 800867c:	4622      	mov	r2, r4
 800867e:	4629      	mov	r1, r5
 8008680:	4638      	mov	r0, r7
 8008682:	f7ff ff6d 	bl	8008560 <__ssputs_r>
 8008686:	3001      	adds	r0, #1
 8008688:	f000 80aa 	beq.w	80087e0 <_svfiprintf_r+0x1c8>
 800868c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868e:	445a      	add	r2, fp
 8008690:	9209      	str	r2, [sp, #36]	; 0x24
 8008692:	f89a 3000 	ldrb.w	r3, [sl]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 80a2 	beq.w	80087e0 <_svfiprintf_r+0x1c8>
 800869c:	2300      	movs	r3, #0
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a6:	f10a 0a01 	add.w	sl, sl, #1
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	9307      	str	r3, [sp, #28]
 80086ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b2:	931a      	str	r3, [sp, #104]	; 0x68
 80086b4:	4654      	mov	r4, sl
 80086b6:	2205      	movs	r2, #5
 80086b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086bc:	4851      	ldr	r0, [pc, #324]	; (8008804 <_svfiprintf_r+0x1ec>)
 80086be:	f000 fa41 	bl	8008b44 <memchr>
 80086c2:	9a04      	ldr	r2, [sp, #16]
 80086c4:	b9d8      	cbnz	r0, 80086fe <_svfiprintf_r+0xe6>
 80086c6:	06d0      	lsls	r0, r2, #27
 80086c8:	bf44      	itt	mi
 80086ca:	2320      	movmi	r3, #32
 80086cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d0:	0711      	lsls	r1, r2, #28
 80086d2:	bf44      	itt	mi
 80086d4:	232b      	movmi	r3, #43	; 0x2b
 80086d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086da:	f89a 3000 	ldrb.w	r3, [sl]
 80086de:	2b2a      	cmp	r3, #42	; 0x2a
 80086e0:	d015      	beq.n	800870e <_svfiprintf_r+0xf6>
 80086e2:	4654      	mov	r4, sl
 80086e4:	2000      	movs	r0, #0
 80086e6:	f04f 0c0a 	mov.w	ip, #10
 80086ea:	9a07      	ldr	r2, [sp, #28]
 80086ec:	4621      	mov	r1, r4
 80086ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f2:	3b30      	subs	r3, #48	; 0x30
 80086f4:	2b09      	cmp	r3, #9
 80086f6:	d94e      	bls.n	8008796 <_svfiprintf_r+0x17e>
 80086f8:	b1b0      	cbz	r0, 8008728 <_svfiprintf_r+0x110>
 80086fa:	9207      	str	r2, [sp, #28]
 80086fc:	e014      	b.n	8008728 <_svfiprintf_r+0x110>
 80086fe:	eba0 0308 	sub.w	r3, r0, r8
 8008702:	fa09 f303 	lsl.w	r3, r9, r3
 8008706:	4313      	orrs	r3, r2
 8008708:	46a2      	mov	sl, r4
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	e7d2      	b.n	80086b4 <_svfiprintf_r+0x9c>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	1d19      	adds	r1, r3, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	9103      	str	r1, [sp, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	bfbb      	ittet	lt
 800871a:	425b      	neglt	r3, r3
 800871c:	f042 0202 	orrlt.w	r2, r2, #2
 8008720:	9307      	strge	r3, [sp, #28]
 8008722:	9307      	strlt	r3, [sp, #28]
 8008724:	bfb8      	it	lt
 8008726:	9204      	strlt	r2, [sp, #16]
 8008728:	7823      	ldrb	r3, [r4, #0]
 800872a:	2b2e      	cmp	r3, #46	; 0x2e
 800872c:	d10c      	bne.n	8008748 <_svfiprintf_r+0x130>
 800872e:	7863      	ldrb	r3, [r4, #1]
 8008730:	2b2a      	cmp	r3, #42	; 0x2a
 8008732:	d135      	bne.n	80087a0 <_svfiprintf_r+0x188>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	3402      	adds	r4, #2
 8008738:	1d1a      	adds	r2, r3, #4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	9203      	str	r2, [sp, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfb8      	it	lt
 8008742:	f04f 33ff 	movlt.w	r3, #4294967295
 8008746:	9305      	str	r3, [sp, #20]
 8008748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008814 <_svfiprintf_r+0x1fc>
 800874c:	2203      	movs	r2, #3
 800874e:	4650      	mov	r0, sl
 8008750:	7821      	ldrb	r1, [r4, #0]
 8008752:	f000 f9f7 	bl	8008b44 <memchr>
 8008756:	b140      	cbz	r0, 800876a <_svfiprintf_r+0x152>
 8008758:	2340      	movs	r3, #64	; 0x40
 800875a:	eba0 000a 	sub.w	r0, r0, sl
 800875e:	fa03 f000 	lsl.w	r0, r3, r0
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	3401      	adds	r4, #1
 8008766:	4303      	orrs	r3, r0
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876e:	2206      	movs	r2, #6
 8008770:	4825      	ldr	r0, [pc, #148]	; (8008808 <_svfiprintf_r+0x1f0>)
 8008772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008776:	f000 f9e5 	bl	8008b44 <memchr>
 800877a:	2800      	cmp	r0, #0
 800877c:	d038      	beq.n	80087f0 <_svfiprintf_r+0x1d8>
 800877e:	4b23      	ldr	r3, [pc, #140]	; (800880c <_svfiprintf_r+0x1f4>)
 8008780:	bb1b      	cbnz	r3, 80087ca <_svfiprintf_r+0x1b2>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	3307      	adds	r3, #7
 8008786:	f023 0307 	bic.w	r3, r3, #7
 800878a:	3308      	adds	r3, #8
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008790:	4433      	add	r3, r6
 8008792:	9309      	str	r3, [sp, #36]	; 0x24
 8008794:	e767      	b.n	8008666 <_svfiprintf_r+0x4e>
 8008796:	460c      	mov	r4, r1
 8008798:	2001      	movs	r0, #1
 800879a:	fb0c 3202 	mla	r2, ip, r2, r3
 800879e:	e7a5      	b.n	80086ec <_svfiprintf_r+0xd4>
 80087a0:	2300      	movs	r3, #0
 80087a2:	f04f 0c0a 	mov.w	ip, #10
 80087a6:	4619      	mov	r1, r3
 80087a8:	3401      	adds	r4, #1
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	4620      	mov	r0, r4
 80087ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b2:	3a30      	subs	r2, #48	; 0x30
 80087b4:	2a09      	cmp	r2, #9
 80087b6:	d903      	bls.n	80087c0 <_svfiprintf_r+0x1a8>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0c5      	beq.n	8008748 <_svfiprintf_r+0x130>
 80087bc:	9105      	str	r1, [sp, #20]
 80087be:	e7c3      	b.n	8008748 <_svfiprintf_r+0x130>
 80087c0:	4604      	mov	r4, r0
 80087c2:	2301      	movs	r3, #1
 80087c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80087c8:	e7f0      	b.n	80087ac <_svfiprintf_r+0x194>
 80087ca:	ab03      	add	r3, sp, #12
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	462a      	mov	r2, r5
 80087d0:	4638      	mov	r0, r7
 80087d2:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <_svfiprintf_r+0x1f8>)
 80087d4:	a904      	add	r1, sp, #16
 80087d6:	f3af 8000 	nop.w
 80087da:	1c42      	adds	r2, r0, #1
 80087dc:	4606      	mov	r6, r0
 80087de:	d1d6      	bne.n	800878e <_svfiprintf_r+0x176>
 80087e0:	89ab      	ldrh	r3, [r5, #12]
 80087e2:	065b      	lsls	r3, r3, #25
 80087e4:	f53f af2c 	bmi.w	8008640 <_svfiprintf_r+0x28>
 80087e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ea:	b01d      	add	sp, #116	; 0x74
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	ab03      	add	r3, sp, #12
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	462a      	mov	r2, r5
 80087f6:	4638      	mov	r0, r7
 80087f8:	4b05      	ldr	r3, [pc, #20]	; (8008810 <_svfiprintf_r+0x1f8>)
 80087fa:	a904      	add	r1, sp, #16
 80087fc:	f000 f87c 	bl	80088f8 <_printf_i>
 8008800:	e7eb      	b.n	80087da <_svfiprintf_r+0x1c2>
 8008802:	bf00      	nop
 8008804:	080092f6 	.word	0x080092f6
 8008808:	08009300 	.word	0x08009300
 800880c:	00000000 	.word	0x00000000
 8008810:	08008561 	.word	0x08008561
 8008814:	080092fc 	.word	0x080092fc

08008818 <_printf_common>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	4616      	mov	r6, r2
 800881e:	4699      	mov	r9, r3
 8008820:	688a      	ldr	r2, [r1, #8]
 8008822:	690b      	ldr	r3, [r1, #16]
 8008824:	4607      	mov	r7, r0
 8008826:	4293      	cmp	r3, r2
 8008828:	bfb8      	it	lt
 800882a:	4613      	movlt	r3, r2
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008832:	460c      	mov	r4, r1
 8008834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008838:	b10a      	cbz	r2, 800883e <_printf_common+0x26>
 800883a:	3301      	adds	r3, #1
 800883c:	6033      	str	r3, [r6, #0]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	0699      	lsls	r1, r3, #26
 8008842:	bf42      	ittt	mi
 8008844:	6833      	ldrmi	r3, [r6, #0]
 8008846:	3302      	addmi	r3, #2
 8008848:	6033      	strmi	r3, [r6, #0]
 800884a:	6825      	ldr	r5, [r4, #0]
 800884c:	f015 0506 	ands.w	r5, r5, #6
 8008850:	d106      	bne.n	8008860 <_printf_common+0x48>
 8008852:	f104 0a19 	add.w	sl, r4, #25
 8008856:	68e3      	ldr	r3, [r4, #12]
 8008858:	6832      	ldr	r2, [r6, #0]
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	42ab      	cmp	r3, r5
 800885e:	dc28      	bgt.n	80088b2 <_printf_common+0x9a>
 8008860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008864:	1e13      	subs	r3, r2, #0
 8008866:	6822      	ldr	r2, [r4, #0]
 8008868:	bf18      	it	ne
 800886a:	2301      	movne	r3, #1
 800886c:	0692      	lsls	r2, r2, #26
 800886e:	d42d      	bmi.n	80088cc <_printf_common+0xb4>
 8008870:	4649      	mov	r1, r9
 8008872:	4638      	mov	r0, r7
 8008874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d020      	beq.n	80088c0 <_printf_common+0xa8>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	68e5      	ldr	r5, [r4, #12]
 8008882:	f003 0306 	and.w	r3, r3, #6
 8008886:	2b04      	cmp	r3, #4
 8008888:	bf18      	it	ne
 800888a:	2500      	movne	r5, #0
 800888c:	6832      	ldr	r2, [r6, #0]
 800888e:	f04f 0600 	mov.w	r6, #0
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	bf08      	it	eq
 8008896:	1aad      	subeq	r5, r5, r2
 8008898:	6922      	ldr	r2, [r4, #16]
 800889a:	bf08      	it	eq
 800889c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a0:	4293      	cmp	r3, r2
 80088a2:	bfc4      	itt	gt
 80088a4:	1a9b      	subgt	r3, r3, r2
 80088a6:	18ed      	addgt	r5, r5, r3
 80088a8:	341a      	adds	r4, #26
 80088aa:	42b5      	cmp	r5, r6
 80088ac:	d11a      	bne.n	80088e4 <_printf_common+0xcc>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e008      	b.n	80088c4 <_printf_common+0xac>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4652      	mov	r2, sl
 80088b6:	4649      	mov	r1, r9
 80088b8:	4638      	mov	r0, r7
 80088ba:	47c0      	blx	r8
 80088bc:	3001      	adds	r0, #1
 80088be:	d103      	bne.n	80088c8 <_printf_common+0xb0>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	3501      	adds	r5, #1
 80088ca:	e7c4      	b.n	8008856 <_printf_common+0x3e>
 80088cc:	2030      	movs	r0, #48	; 0x30
 80088ce:	18e1      	adds	r1, r4, r3
 80088d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088da:	4422      	add	r2, r4
 80088dc:	3302      	adds	r3, #2
 80088de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e2:	e7c5      	b.n	8008870 <_printf_common+0x58>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4622      	mov	r2, r4
 80088e8:	4649      	mov	r1, r9
 80088ea:	4638      	mov	r0, r7
 80088ec:	47c0      	blx	r8
 80088ee:	3001      	adds	r0, #1
 80088f0:	d0e6      	beq.n	80088c0 <_printf_common+0xa8>
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7d9      	b.n	80088aa <_printf_common+0x92>
	...

080088f8 <_printf_i>:
 80088f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	7e27      	ldrb	r7, [r4, #24]
 8008900:	4691      	mov	r9, r2
 8008902:	2f78      	cmp	r7, #120	; 0x78
 8008904:	4680      	mov	r8, r0
 8008906:	469a      	mov	sl, r3
 8008908:	990c      	ldr	r1, [sp, #48]	; 0x30
 800890a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800890e:	d807      	bhi.n	8008920 <_printf_i+0x28>
 8008910:	2f62      	cmp	r7, #98	; 0x62
 8008912:	d80a      	bhi.n	800892a <_printf_i+0x32>
 8008914:	2f00      	cmp	r7, #0
 8008916:	f000 80d9 	beq.w	8008acc <_printf_i+0x1d4>
 800891a:	2f58      	cmp	r7, #88	; 0x58
 800891c:	f000 80a4 	beq.w	8008a68 <_printf_i+0x170>
 8008920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008928:	e03a      	b.n	80089a0 <_printf_i+0xa8>
 800892a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800892e:	2b15      	cmp	r3, #21
 8008930:	d8f6      	bhi.n	8008920 <_printf_i+0x28>
 8008932:	a001      	add	r0, pc, #4	; (adr r0, 8008938 <_printf_i+0x40>)
 8008934:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008938:	08008991 	.word	0x08008991
 800893c:	080089a5 	.word	0x080089a5
 8008940:	08008921 	.word	0x08008921
 8008944:	08008921 	.word	0x08008921
 8008948:	08008921 	.word	0x08008921
 800894c:	08008921 	.word	0x08008921
 8008950:	080089a5 	.word	0x080089a5
 8008954:	08008921 	.word	0x08008921
 8008958:	08008921 	.word	0x08008921
 800895c:	08008921 	.word	0x08008921
 8008960:	08008921 	.word	0x08008921
 8008964:	08008ab3 	.word	0x08008ab3
 8008968:	080089d5 	.word	0x080089d5
 800896c:	08008a95 	.word	0x08008a95
 8008970:	08008921 	.word	0x08008921
 8008974:	08008921 	.word	0x08008921
 8008978:	08008ad5 	.word	0x08008ad5
 800897c:	08008921 	.word	0x08008921
 8008980:	080089d5 	.word	0x080089d5
 8008984:	08008921 	.word	0x08008921
 8008988:	08008921 	.word	0x08008921
 800898c:	08008a9d 	.word	0x08008a9d
 8008990:	680b      	ldr	r3, [r1, #0]
 8008992:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008996:	1d1a      	adds	r2, r3, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	600a      	str	r2, [r1, #0]
 800899c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0a4      	b.n	8008aee <_printf_i+0x1f6>
 80089a4:	6825      	ldr	r5, [r4, #0]
 80089a6:	6808      	ldr	r0, [r1, #0]
 80089a8:	062e      	lsls	r6, r5, #24
 80089aa:	f100 0304 	add.w	r3, r0, #4
 80089ae:	d50a      	bpl.n	80089c6 <_printf_i+0xce>
 80089b0:	6805      	ldr	r5, [r0, #0]
 80089b2:	600b      	str	r3, [r1, #0]
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	da03      	bge.n	80089c0 <_printf_i+0xc8>
 80089b8:	232d      	movs	r3, #45	; 0x2d
 80089ba:	426d      	negs	r5, r5
 80089bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c0:	230a      	movs	r3, #10
 80089c2:	485e      	ldr	r0, [pc, #376]	; (8008b3c <_printf_i+0x244>)
 80089c4:	e019      	b.n	80089fa <_printf_i+0x102>
 80089c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089ca:	6805      	ldr	r5, [r0, #0]
 80089cc:	600b      	str	r3, [r1, #0]
 80089ce:	bf18      	it	ne
 80089d0:	b22d      	sxthne	r5, r5
 80089d2:	e7ef      	b.n	80089b4 <_printf_i+0xbc>
 80089d4:	680b      	ldr	r3, [r1, #0]
 80089d6:	6825      	ldr	r5, [r4, #0]
 80089d8:	1d18      	adds	r0, r3, #4
 80089da:	6008      	str	r0, [r1, #0]
 80089dc:	0628      	lsls	r0, r5, #24
 80089de:	d501      	bpl.n	80089e4 <_printf_i+0xec>
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	e002      	b.n	80089ea <_printf_i+0xf2>
 80089e4:	0669      	lsls	r1, r5, #25
 80089e6:	d5fb      	bpl.n	80089e0 <_printf_i+0xe8>
 80089e8:	881d      	ldrh	r5, [r3, #0]
 80089ea:	2f6f      	cmp	r7, #111	; 0x6f
 80089ec:	bf0c      	ite	eq
 80089ee:	2308      	moveq	r3, #8
 80089f0:	230a      	movne	r3, #10
 80089f2:	4852      	ldr	r0, [pc, #328]	; (8008b3c <_printf_i+0x244>)
 80089f4:	2100      	movs	r1, #0
 80089f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089fa:	6866      	ldr	r6, [r4, #4]
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	bfa8      	it	ge
 8008a00:	6821      	ldrge	r1, [r4, #0]
 8008a02:	60a6      	str	r6, [r4, #8]
 8008a04:	bfa4      	itt	ge
 8008a06:	f021 0104 	bicge.w	r1, r1, #4
 8008a0a:	6021      	strge	r1, [r4, #0]
 8008a0c:	b90d      	cbnz	r5, 8008a12 <_printf_i+0x11a>
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	d04d      	beq.n	8008aae <_printf_i+0x1b6>
 8008a12:	4616      	mov	r6, r2
 8008a14:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a18:	fb03 5711 	mls	r7, r3, r1, r5
 8008a1c:	5dc7      	ldrb	r7, [r0, r7]
 8008a1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a22:	462f      	mov	r7, r5
 8008a24:	42bb      	cmp	r3, r7
 8008a26:	460d      	mov	r5, r1
 8008a28:	d9f4      	bls.n	8008a14 <_printf_i+0x11c>
 8008a2a:	2b08      	cmp	r3, #8
 8008a2c:	d10b      	bne.n	8008a46 <_printf_i+0x14e>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	07df      	lsls	r7, r3, #31
 8008a32:	d508      	bpl.n	8008a46 <_printf_i+0x14e>
 8008a34:	6923      	ldr	r3, [r4, #16]
 8008a36:	6861      	ldr	r1, [r4, #4]
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	bfde      	ittt	le
 8008a3c:	2330      	movle	r3, #48	; 0x30
 8008a3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a46:	1b92      	subs	r2, r2, r6
 8008a48:	6122      	str	r2, [r4, #16]
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f8cd a000 	str.w	sl, [sp]
 8008a54:	aa03      	add	r2, sp, #12
 8008a56:	f7ff fedf 	bl	8008818 <_printf_common>
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d14c      	bne.n	8008af8 <_printf_i+0x200>
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a62:	b004      	add	sp, #16
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	4834      	ldr	r0, [pc, #208]	; (8008b3c <_printf_i+0x244>)
 8008a6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a6e:	680e      	ldr	r6, [r1, #0]
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a76:	061f      	lsls	r7, r3, #24
 8008a78:	600e      	str	r6, [r1, #0]
 8008a7a:	d514      	bpl.n	8008aa6 <_printf_i+0x1ae>
 8008a7c:	07d9      	lsls	r1, r3, #31
 8008a7e:	bf44      	itt	mi
 8008a80:	f043 0320 	orrmi.w	r3, r3, #32
 8008a84:	6023      	strmi	r3, [r4, #0]
 8008a86:	b91d      	cbnz	r5, 8008a90 <_printf_i+0x198>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	f023 0320 	bic.w	r3, r3, #32
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	2310      	movs	r3, #16
 8008a92:	e7af      	b.n	80089f4 <_printf_i+0xfc>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	f043 0320 	orr.w	r3, r3, #32
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	2378      	movs	r3, #120	; 0x78
 8008a9e:	4828      	ldr	r0, [pc, #160]	; (8008b40 <_printf_i+0x248>)
 8008aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aa4:	e7e3      	b.n	8008a6e <_printf_i+0x176>
 8008aa6:	065e      	lsls	r6, r3, #25
 8008aa8:	bf48      	it	mi
 8008aaa:	b2ad      	uxthmi	r5, r5
 8008aac:	e7e6      	b.n	8008a7c <_printf_i+0x184>
 8008aae:	4616      	mov	r6, r2
 8008ab0:	e7bb      	b.n	8008a2a <_printf_i+0x132>
 8008ab2:	680b      	ldr	r3, [r1, #0]
 8008ab4:	6826      	ldr	r6, [r4, #0]
 8008ab6:	1d1d      	adds	r5, r3, #4
 8008ab8:	6960      	ldr	r0, [r4, #20]
 8008aba:	600d      	str	r5, [r1, #0]
 8008abc:	0635      	lsls	r5, r6, #24
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	d501      	bpl.n	8008ac6 <_printf_i+0x1ce>
 8008ac2:	6018      	str	r0, [r3, #0]
 8008ac4:	e002      	b.n	8008acc <_printf_i+0x1d4>
 8008ac6:	0671      	lsls	r1, r6, #25
 8008ac8:	d5fb      	bpl.n	8008ac2 <_printf_i+0x1ca>
 8008aca:	8018      	strh	r0, [r3, #0]
 8008acc:	2300      	movs	r3, #0
 8008ace:	4616      	mov	r6, r2
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	e7ba      	b.n	8008a4a <_printf_i+0x152>
 8008ad4:	680b      	ldr	r3, [r1, #0]
 8008ad6:	1d1a      	adds	r2, r3, #4
 8008ad8:	600a      	str	r2, [r1, #0]
 8008ada:	681e      	ldr	r6, [r3, #0]
 8008adc:	2100      	movs	r1, #0
 8008ade:	4630      	mov	r0, r6
 8008ae0:	6862      	ldr	r2, [r4, #4]
 8008ae2:	f000 f82f 	bl	8008b44 <memchr>
 8008ae6:	b108      	cbz	r0, 8008aec <_printf_i+0x1f4>
 8008ae8:	1b80      	subs	r0, r0, r6
 8008aea:	6060      	str	r0, [r4, #4]
 8008aec:	6863      	ldr	r3, [r4, #4]
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	2300      	movs	r3, #0
 8008af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af6:	e7a8      	b.n	8008a4a <_printf_i+0x152>
 8008af8:	4632      	mov	r2, r6
 8008afa:	4649      	mov	r1, r9
 8008afc:	4640      	mov	r0, r8
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	47d0      	blx	sl
 8008b02:	3001      	adds	r0, #1
 8008b04:	d0ab      	beq.n	8008a5e <_printf_i+0x166>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	079b      	lsls	r3, r3, #30
 8008b0a:	d413      	bmi.n	8008b34 <_printf_i+0x23c>
 8008b0c:	68e0      	ldr	r0, [r4, #12]
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	4298      	cmp	r0, r3
 8008b12:	bfb8      	it	lt
 8008b14:	4618      	movlt	r0, r3
 8008b16:	e7a4      	b.n	8008a62 <_printf_i+0x16a>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4632      	mov	r2, r6
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	4640      	mov	r0, r8
 8008b20:	47d0      	blx	sl
 8008b22:	3001      	adds	r0, #1
 8008b24:	d09b      	beq.n	8008a5e <_printf_i+0x166>
 8008b26:	3501      	adds	r5, #1
 8008b28:	68e3      	ldr	r3, [r4, #12]
 8008b2a:	9903      	ldr	r1, [sp, #12]
 8008b2c:	1a5b      	subs	r3, r3, r1
 8008b2e:	42ab      	cmp	r3, r5
 8008b30:	dcf2      	bgt.n	8008b18 <_printf_i+0x220>
 8008b32:	e7eb      	b.n	8008b0c <_printf_i+0x214>
 8008b34:	2500      	movs	r5, #0
 8008b36:	f104 0619 	add.w	r6, r4, #25
 8008b3a:	e7f5      	b.n	8008b28 <_printf_i+0x230>
 8008b3c:	08009307 	.word	0x08009307
 8008b40:	08009318 	.word	0x08009318

08008b44 <memchr>:
 8008b44:	4603      	mov	r3, r0
 8008b46:	b510      	push	{r4, lr}
 8008b48:	b2c9      	uxtb	r1, r1
 8008b4a:	4402      	add	r2, r0
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	d101      	bne.n	8008b56 <memchr+0x12>
 8008b52:	2000      	movs	r0, #0
 8008b54:	e003      	b.n	8008b5e <memchr+0x1a>
 8008b56:	7804      	ldrb	r4, [r0, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	428c      	cmp	r4, r1
 8008b5c:	d1f6      	bne.n	8008b4c <memchr+0x8>
 8008b5e:	bd10      	pop	{r4, pc}

08008b60 <memmove>:
 8008b60:	4288      	cmp	r0, r1
 8008b62:	b510      	push	{r4, lr}
 8008b64:	eb01 0402 	add.w	r4, r1, r2
 8008b68:	d902      	bls.n	8008b70 <memmove+0x10>
 8008b6a:	4284      	cmp	r4, r0
 8008b6c:	4623      	mov	r3, r4
 8008b6e:	d807      	bhi.n	8008b80 <memmove+0x20>
 8008b70:	1e43      	subs	r3, r0, #1
 8008b72:	42a1      	cmp	r1, r4
 8008b74:	d008      	beq.n	8008b88 <memmove+0x28>
 8008b76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b7e:	e7f8      	b.n	8008b72 <memmove+0x12>
 8008b80:	4601      	mov	r1, r0
 8008b82:	4402      	add	r2, r0
 8008b84:	428a      	cmp	r2, r1
 8008b86:	d100      	bne.n	8008b8a <memmove+0x2a>
 8008b88:	bd10      	pop	{r4, pc}
 8008b8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b92:	e7f7      	b.n	8008b84 <memmove+0x24>

08008b94 <_free_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4605      	mov	r5, r0
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	d043      	beq.n	8008c24 <_free_r+0x90>
 8008b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba0:	1f0c      	subs	r4, r1, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfb8      	it	lt
 8008ba6:	18e4      	addlt	r4, r4, r3
 8008ba8:	f000 f8d0 	bl	8008d4c <__malloc_lock>
 8008bac:	4a1e      	ldr	r2, [pc, #120]	; (8008c28 <_free_r+0x94>)
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	b933      	cbnz	r3, 8008bc2 <_free_r+0x2e>
 8008bb4:	6063      	str	r3, [r4, #4]
 8008bb6:	6014      	str	r4, [r2, #0]
 8008bb8:	4628      	mov	r0, r5
 8008bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bbe:	f000 b8cb 	b.w	8008d58 <__malloc_unlock>
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	d90a      	bls.n	8008bdc <_free_r+0x48>
 8008bc6:	6821      	ldr	r1, [r4, #0]
 8008bc8:	1862      	adds	r2, r4, r1
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	bf01      	itttt	eq
 8008bce:	681a      	ldreq	r2, [r3, #0]
 8008bd0:	685b      	ldreq	r3, [r3, #4]
 8008bd2:	1852      	addeq	r2, r2, r1
 8008bd4:	6022      	streq	r2, [r4, #0]
 8008bd6:	6063      	str	r3, [r4, #4]
 8008bd8:	6004      	str	r4, [r0, #0]
 8008bda:	e7ed      	b.n	8008bb8 <_free_r+0x24>
 8008bdc:	461a      	mov	r2, r3
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	b10b      	cbz	r3, 8008be6 <_free_r+0x52>
 8008be2:	42a3      	cmp	r3, r4
 8008be4:	d9fa      	bls.n	8008bdc <_free_r+0x48>
 8008be6:	6811      	ldr	r1, [r2, #0]
 8008be8:	1850      	adds	r0, r2, r1
 8008bea:	42a0      	cmp	r0, r4
 8008bec:	d10b      	bne.n	8008c06 <_free_r+0x72>
 8008bee:	6820      	ldr	r0, [r4, #0]
 8008bf0:	4401      	add	r1, r0
 8008bf2:	1850      	adds	r0, r2, r1
 8008bf4:	4283      	cmp	r3, r0
 8008bf6:	6011      	str	r1, [r2, #0]
 8008bf8:	d1de      	bne.n	8008bb8 <_free_r+0x24>
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4401      	add	r1, r0
 8008c00:	6011      	str	r1, [r2, #0]
 8008c02:	6053      	str	r3, [r2, #4]
 8008c04:	e7d8      	b.n	8008bb8 <_free_r+0x24>
 8008c06:	d902      	bls.n	8008c0e <_free_r+0x7a>
 8008c08:	230c      	movs	r3, #12
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	e7d4      	b.n	8008bb8 <_free_r+0x24>
 8008c0e:	6820      	ldr	r0, [r4, #0]
 8008c10:	1821      	adds	r1, r4, r0
 8008c12:	428b      	cmp	r3, r1
 8008c14:	bf01      	itttt	eq
 8008c16:	6819      	ldreq	r1, [r3, #0]
 8008c18:	685b      	ldreq	r3, [r3, #4]
 8008c1a:	1809      	addeq	r1, r1, r0
 8008c1c:	6021      	streq	r1, [r4, #0]
 8008c1e:	6063      	str	r3, [r4, #4]
 8008c20:	6054      	str	r4, [r2, #4]
 8008c22:	e7c9      	b.n	8008bb8 <_free_r+0x24>
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	200000fc 	.word	0x200000fc

08008c2c <_malloc_r>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	1ccd      	adds	r5, r1, #3
 8008c30:	f025 0503 	bic.w	r5, r5, #3
 8008c34:	3508      	adds	r5, #8
 8008c36:	2d0c      	cmp	r5, #12
 8008c38:	bf38      	it	cc
 8008c3a:	250c      	movcc	r5, #12
 8008c3c:	2d00      	cmp	r5, #0
 8008c3e:	4606      	mov	r6, r0
 8008c40:	db01      	blt.n	8008c46 <_malloc_r+0x1a>
 8008c42:	42a9      	cmp	r1, r5
 8008c44:	d903      	bls.n	8008c4e <_malloc_r+0x22>
 8008c46:	230c      	movs	r3, #12
 8008c48:	6033      	str	r3, [r6, #0]
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c4e:	f000 f87d 	bl	8008d4c <__malloc_lock>
 8008c52:	4921      	ldr	r1, [pc, #132]	; (8008cd8 <_malloc_r+0xac>)
 8008c54:	680a      	ldr	r2, [r1, #0]
 8008c56:	4614      	mov	r4, r2
 8008c58:	b99c      	cbnz	r4, 8008c82 <_malloc_r+0x56>
 8008c5a:	4f20      	ldr	r7, [pc, #128]	; (8008cdc <_malloc_r+0xb0>)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	b923      	cbnz	r3, 8008c6a <_malloc_r+0x3e>
 8008c60:	4621      	mov	r1, r4
 8008c62:	4630      	mov	r0, r6
 8008c64:	f000 f862 	bl	8008d2c <_sbrk_r>
 8008c68:	6038      	str	r0, [r7, #0]
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f000 f85d 	bl	8008d2c <_sbrk_r>
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	d123      	bne.n	8008cbe <_malloc_r+0x92>
 8008c76:	230c      	movs	r3, #12
 8008c78:	4630      	mov	r0, r6
 8008c7a:	6033      	str	r3, [r6, #0]
 8008c7c:	f000 f86c 	bl	8008d58 <__malloc_unlock>
 8008c80:	e7e3      	b.n	8008c4a <_malloc_r+0x1e>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	1b5b      	subs	r3, r3, r5
 8008c86:	d417      	bmi.n	8008cb8 <_malloc_r+0x8c>
 8008c88:	2b0b      	cmp	r3, #11
 8008c8a:	d903      	bls.n	8008c94 <_malloc_r+0x68>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	441c      	add	r4, r3
 8008c90:	6025      	str	r5, [r4, #0]
 8008c92:	e004      	b.n	8008c9e <_malloc_r+0x72>
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	42a2      	cmp	r2, r4
 8008c98:	bf0c      	ite	eq
 8008c9a:	600b      	streq	r3, [r1, #0]
 8008c9c:	6053      	strne	r3, [r2, #4]
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f85a 	bl	8008d58 <__malloc_unlock>
 8008ca4:	f104 000b 	add.w	r0, r4, #11
 8008ca8:	1d23      	adds	r3, r4, #4
 8008caa:	f020 0007 	bic.w	r0, r0, #7
 8008cae:	1ac2      	subs	r2, r0, r3
 8008cb0:	d0cc      	beq.n	8008c4c <_malloc_r+0x20>
 8008cb2:	1a1b      	subs	r3, r3, r0
 8008cb4:	50a3      	str	r3, [r4, r2]
 8008cb6:	e7c9      	b.n	8008c4c <_malloc_r+0x20>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	6864      	ldr	r4, [r4, #4]
 8008cbc:	e7cc      	b.n	8008c58 <_malloc_r+0x2c>
 8008cbe:	1cc4      	adds	r4, r0, #3
 8008cc0:	f024 0403 	bic.w	r4, r4, #3
 8008cc4:	42a0      	cmp	r0, r4
 8008cc6:	d0e3      	beq.n	8008c90 <_malloc_r+0x64>
 8008cc8:	1a21      	subs	r1, r4, r0
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f000 f82e 	bl	8008d2c <_sbrk_r>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d1dd      	bne.n	8008c90 <_malloc_r+0x64>
 8008cd4:	e7cf      	b.n	8008c76 <_malloc_r+0x4a>
 8008cd6:	bf00      	nop
 8008cd8:	200000fc 	.word	0x200000fc
 8008cdc:	20000100 	.word	0x20000100

08008ce0 <_realloc_r>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	460e      	mov	r6, r1
 8008ce8:	b921      	cbnz	r1, 8008cf4 <_realloc_r+0x14>
 8008cea:	4611      	mov	r1, r2
 8008cec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cf0:	f7ff bf9c 	b.w	8008c2c <_malloc_r>
 8008cf4:	b922      	cbnz	r2, 8008d00 <_realloc_r+0x20>
 8008cf6:	f7ff ff4d 	bl	8008b94 <_free_r>
 8008cfa:	4625      	mov	r5, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d00:	f000 f830 	bl	8008d64 <_malloc_usable_size_r>
 8008d04:	42a0      	cmp	r0, r4
 8008d06:	d20f      	bcs.n	8008d28 <_realloc_r+0x48>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	f7ff ff8e 	bl	8008c2c <_malloc_r>
 8008d10:	4605      	mov	r5, r0
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d0f2      	beq.n	8008cfc <_realloc_r+0x1c>
 8008d16:	4631      	mov	r1, r6
 8008d18:	4622      	mov	r2, r4
 8008d1a:	f7ff fbeb 	bl	80084f4 <memcpy>
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7ff ff37 	bl	8008b94 <_free_r>
 8008d26:	e7e9      	b.n	8008cfc <_realloc_r+0x1c>
 8008d28:	4635      	mov	r5, r6
 8008d2a:	e7e7      	b.n	8008cfc <_realloc_r+0x1c>

08008d2c <_sbrk_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	2300      	movs	r3, #0
 8008d30:	4d05      	ldr	r5, [pc, #20]	; (8008d48 <_sbrk_r+0x1c>)
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7fb fbee 	bl	8004518 <_sbrk>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_sbrk_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_sbrk_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	200026f0 	.word	0x200026f0

08008d4c <__malloc_lock>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__malloc_lock+0x8>)
 8008d4e:	f000 b811 	b.w	8008d74 <__retarget_lock_acquire_recursive>
 8008d52:	bf00      	nop
 8008d54:	200026f8 	.word	0x200026f8

08008d58 <__malloc_unlock>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__malloc_unlock+0x8>)
 8008d5a:	f000 b80c 	b.w	8008d76 <__retarget_lock_release_recursive>
 8008d5e:	bf00      	nop
 8008d60:	200026f8 	.word	0x200026f8

08008d64 <_malloc_usable_size_r>:
 8008d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d68:	1f18      	subs	r0, r3, #4
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bfbc      	itt	lt
 8008d6e:	580b      	ldrlt	r3, [r1, r0]
 8008d70:	18c0      	addlt	r0, r0, r3
 8008d72:	4770      	bx	lr

08008d74 <__retarget_lock_acquire_recursive>:
 8008d74:	4770      	bx	lr

08008d76 <__retarget_lock_release_recursive>:
 8008d76:	4770      	bx	lr

08008d78 <round>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008d7e:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8008d82:	2c13      	cmp	r4, #19
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4606      	mov	r6, r0
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	dc19      	bgt.n	8008dc2 <round+0x4a>
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	da09      	bge.n	8008da6 <round+0x2e>
 8008d92:	3401      	adds	r4, #1
 8008d94:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008d98:	d103      	bne.n	8008da2 <round+0x2a>
 8008d9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008d9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008da2:	2200      	movs	r2, #0
 8008da4:	e02a      	b.n	8008dfc <round+0x84>
 8008da6:	4917      	ldr	r1, [pc, #92]	; (8008e04 <round+0x8c>)
 8008da8:	4121      	asrs	r1, r4
 8008daa:	ea03 0001 	and.w	r0, r3, r1
 8008dae:	4302      	orrs	r2, r0
 8008db0:	d010      	beq.n	8008dd4 <round+0x5c>
 8008db2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008db6:	fa42 f404 	asr.w	r4, r2, r4
 8008dba:	4423      	add	r3, r4
 8008dbc:	ea23 0301 	bic.w	r3, r3, r1
 8008dc0:	e7ef      	b.n	8008da2 <round+0x2a>
 8008dc2:	2c33      	cmp	r4, #51	; 0x33
 8008dc4:	dd09      	ble.n	8008dda <round+0x62>
 8008dc6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008dca:	d103      	bne.n	8008dd4 <round+0x5c>
 8008dcc:	f7f7 f9c4 	bl	8000158 <__adddf3>
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008de2:	40f8      	lsrs	r0, r7
 8008de4:	4202      	tst	r2, r0
 8008de6:	d0f5      	beq.n	8008dd4 <round+0x5c>
 8008de8:	2101      	movs	r1, #1
 8008dea:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008dee:	fa01 f404 	lsl.w	r4, r1, r4
 8008df2:	1912      	adds	r2, r2, r4
 8008df4:	bf28      	it	cs
 8008df6:	185b      	addcs	r3, r3, r1
 8008df8:	ea22 0200 	bic.w	r2, r2, r0
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	e7e6      	b.n	8008dd0 <round+0x58>
 8008e02:	bf00      	nop
 8008e04:	000fffff 	.word	0x000fffff

08008e08 <_init>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr

08008e14 <_fini>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr
