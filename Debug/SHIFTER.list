
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed8  08006ed8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ed8  08006ed8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ed8  08006ed8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000253c  2000000c  08006eec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002548  08006eec  00022548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133d7  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dbb  00000000  00000000  0003344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00036210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d06  00000000  00000000  000372c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ff9  00000000  00000000  00037fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014802  00000000  00000000  00051fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000941ac  00000000  00000000  000667c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047b4  00000000  00000000  000fa978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ff12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006d7c 	.word	0x08006d7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08006d7c 	.word	0x08006d7c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_d2uiz>:
 8000514:	004a      	lsls	r2, r1, #1
 8000516:	d211      	bcs.n	800053c <__aeabi_d2uiz+0x28>
 8000518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800051c:	d211      	bcs.n	8000542 <__aeabi_d2uiz+0x2e>
 800051e:	d50d      	bpl.n	800053c <__aeabi_d2uiz+0x28>
 8000520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000528:	d40e      	bmi.n	8000548 <__aeabi_d2uiz+0x34>
 800052a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000536:	fa23 f002 	lsr.w	r0, r3, r2
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000546:	d102      	bne.n	800054e <__aeabi_d2uiz+0x3a>
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	4770      	bx	lr
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_frsub>:
 8000554:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__addsf3>
 800055a:	bf00      	nop

0800055c <__aeabi_fsub>:
 800055c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000560 <__addsf3>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	bf1f      	itttt	ne
 8000564:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000568:	ea92 0f03 	teqne	r2, r3
 800056c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000570:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000574:	d06a      	beq.n	800064c <__addsf3+0xec>
 8000576:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800057e:	bfc1      	itttt	gt
 8000580:	18d2      	addgt	r2, r2, r3
 8000582:	4041      	eorgt	r1, r0
 8000584:	4048      	eorgt	r0, r1
 8000586:	4041      	eorgt	r1, r0
 8000588:	bfb8      	it	lt
 800058a:	425b      	neglt	r3, r3
 800058c:	2b19      	cmp	r3, #25
 800058e:	bf88      	it	hi
 8000590:	4770      	bxhi	lr
 8000592:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4249      	negne	r1, r1
 80005b2:	ea92 0f03 	teq	r2, r3
 80005b6:	d03f      	beq.n	8000638 <__addsf3+0xd8>
 80005b8:	f1a2 0201 	sub.w	r2, r2, #1
 80005bc:	fa41 fc03 	asr.w	ip, r1, r3
 80005c0:	eb10 000c 	adds.w	r0, r0, ip
 80005c4:	f1c3 0320 	rsb	r3, r3, #32
 80005c8:	fa01 f103 	lsl.w	r1, r1, r3
 80005cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d0:	d502      	bpl.n	80005d8 <__addsf3+0x78>
 80005d2:	4249      	negs	r1, r1
 80005d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005dc:	d313      	bcc.n	8000606 <__addsf3+0xa6>
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d306      	bcc.n	80005f2 <__addsf3+0x92>
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	f102 0201 	add.w	r2, r2, #1
 80005ee:	2afe      	cmp	r2, #254	; 0xfe
 80005f0:	d251      	bcs.n	8000696 <__addsf3+0x136>
 80005f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005fa:	bf08      	it	eq
 80005fc:	f020 0001 	biceq.w	r0, r0, #1
 8000600:	ea40 0003 	orr.w	r0, r0, r3
 8000604:	4770      	bx	lr
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	eb40 0000 	adc.w	r0, r0, r0
 800060c:	3a01      	subs	r2, #1
 800060e:	bf28      	it	cs
 8000610:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000614:	d2ed      	bcs.n	80005f2 <__addsf3+0x92>
 8000616:	fab0 fc80 	clz	ip, r0
 800061a:	f1ac 0c08 	sub.w	ip, ip, #8
 800061e:	ebb2 020c 	subs.w	r2, r2, ip
 8000622:	fa00 f00c 	lsl.w	r0, r0, ip
 8000626:	bfaa      	itet	ge
 8000628:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800062c:	4252      	neglt	r2, r2
 800062e:	4318      	orrge	r0, r3
 8000630:	bfbc      	itt	lt
 8000632:	40d0      	lsrlt	r0, r2
 8000634:	4318      	orrlt	r0, r3
 8000636:	4770      	bx	lr
 8000638:	f092 0f00 	teq	r2, #0
 800063c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000640:	bf06      	itte	eq
 8000642:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000646:	3201      	addeq	r2, #1
 8000648:	3b01      	subne	r3, #1
 800064a:	e7b5      	b.n	80005b8 <__addsf3+0x58>
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d021      	beq.n	80006a0 <__addsf3+0x140>
 800065c:	ea92 0f03 	teq	r2, r3
 8000660:	d004      	beq.n	800066c <__addsf3+0x10c>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	bf08      	it	eq
 8000668:	4608      	moveq	r0, r1
 800066a:	4770      	bx	lr
 800066c:	ea90 0f01 	teq	r0, r1
 8000670:	bf1c      	itt	ne
 8000672:	2000      	movne	r0, #0
 8000674:	4770      	bxne	lr
 8000676:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800067a:	d104      	bne.n	8000686 <__addsf3+0x126>
 800067c:	0040      	lsls	r0, r0, #1
 800067e:	bf28      	it	cs
 8000680:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000684:	4770      	bx	lr
 8000686:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800068a:	bf3c      	itt	cc
 800068c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000690:	4770      	bxcc	lr
 8000692:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000696:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800069a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800069e:	4770      	bx	lr
 80006a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006a4:	bf16      	itet	ne
 80006a6:	4608      	movne	r0, r1
 80006a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ac:	4601      	movne	r1, r0
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	bf06      	itte	eq
 80006b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006b6:	ea90 0f01 	teqeq	r0, r1
 80006ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006be:	4770      	bx	lr

080006c0 <__aeabi_ui2f>:
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e004      	b.n	80006d0 <__aeabi_i2f+0x8>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2f>:
 80006c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	bf48      	it	mi
 80006ce:	4240      	negmi	r0, r0
 80006d0:	ea5f 0c00 	movs.w	ip, r0
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006dc:	4601      	mov	r1, r0
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	e01c      	b.n	800071e <__aeabi_l2f+0x2a>

080006e4 <__aeabi_ul2f>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e00a      	b.n	8000708 <__aeabi_l2f+0x14>
 80006f2:	bf00      	nop

080006f4 <__aeabi_l2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000700:	d502      	bpl.n	8000708 <__aeabi_l2f+0x14>
 8000702:	4240      	negs	r0, r0
 8000704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000708:	ea5f 0c01 	movs.w	ip, r1
 800070c:	bf02      	ittt	eq
 800070e:	4684      	moveq	ip, r0
 8000710:	4601      	moveq	r1, r0
 8000712:	2000      	moveq	r0, #0
 8000714:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000718:	bf08      	it	eq
 800071a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800071e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000722:	fabc f28c 	clz	r2, ip
 8000726:	3a08      	subs	r2, #8
 8000728:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800072c:	db10      	blt.n	8000750 <__aeabi_l2f+0x5c>
 800072e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000732:	4463      	add	r3, ip
 8000734:	fa00 fc02 	lsl.w	ip, r0, r2
 8000738:	f1c2 0220 	rsb	r2, r2, #32
 800073c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000740:	fa20 f202 	lsr.w	r2, r0, r2
 8000744:	eb43 0002 	adc.w	r0, r3, r2
 8000748:	bf08      	it	eq
 800074a:	f020 0001 	biceq.w	r0, r0, #1
 800074e:	4770      	bx	lr
 8000750:	f102 0220 	add.w	r2, r2, #32
 8000754:	fa01 fc02 	lsl.w	ip, r1, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000760:	fa21 f202 	lsr.w	r2, r1, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800076e:	4770      	bx	lr

08000770 <__aeabi_fmul>:
 8000770:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000774:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000778:	bf1e      	ittt	ne
 800077a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800077e:	ea92 0f0c 	teqne	r2, ip
 8000782:	ea93 0f0c 	teqne	r3, ip
 8000786:	d06f      	beq.n	8000868 <__aeabi_fmul+0xf8>
 8000788:	441a      	add	r2, r3
 800078a:	ea80 0c01 	eor.w	ip, r0, r1
 800078e:	0240      	lsls	r0, r0, #9
 8000790:	bf18      	it	ne
 8000792:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000796:	d01e      	beq.n	80007d6 <__aeabi_fmul+0x66>
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007a4:	fba0 3101 	umull	r3, r1, r0, r1
 80007a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b0:	bf3e      	ittt	cc
 80007b2:	0049      	lslcc	r1, r1, #1
 80007b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007b8:	005b      	lslcc	r3, r3, #1
 80007ba:	ea40 0001 	orr.w	r0, r0, r1
 80007be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007c2:	2afd      	cmp	r2, #253	; 0xfd
 80007c4:	d81d      	bhi.n	8000802 <__aeabi_fmul+0x92>
 80007c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	4770      	bx	lr
 80007d6:	f090 0f00 	teq	r0, #0
 80007da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007de:	bf08      	it	eq
 80007e0:	0249      	lsleq	r1, r1, #9
 80007e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ea:	3a7f      	subs	r2, #127	; 0x7f
 80007ec:	bfc2      	ittt	gt
 80007ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007f6:	4770      	bxgt	lr
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	3a01      	subs	r2, #1
 8000802:	dc5d      	bgt.n	80008c0 <__aeabi_fmul+0x150>
 8000804:	f112 0f19 	cmn.w	r2, #25
 8000808:	bfdc      	itt	le
 800080a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800080e:	4770      	bxle	lr
 8000810:	f1c2 0200 	rsb	r2, r2, #0
 8000814:	0041      	lsls	r1, r0, #1
 8000816:	fa21 f102 	lsr.w	r1, r1, r2
 800081a:	f1c2 0220 	rsb	r2, r2, #32
 800081e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000822:	ea5f 0031 	movs.w	r0, r1, rrx
 8000826:	f140 0000 	adc.w	r0, r0, #0
 800082a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800082e:	bf08      	it	eq
 8000830:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000834:	4770      	bx	lr
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800083e:	bf02      	ittt	eq
 8000840:	0040      	lsleq	r0, r0, #1
 8000842:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000846:	3a01      	subeq	r2, #1
 8000848:	d0f9      	beq.n	800083e <__aeabi_fmul+0xce>
 800084a:	ea40 000c 	orr.w	r0, r0, ip
 800084e:	f093 0f00 	teq	r3, #0
 8000852:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000856:	bf02      	ittt	eq
 8000858:	0049      	lsleq	r1, r1, #1
 800085a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800085e:	3b01      	subeq	r3, #1
 8000860:	d0f9      	beq.n	8000856 <__aeabi_fmul+0xe6>
 8000862:	ea41 010c 	orr.w	r1, r1, ip
 8000866:	e78f      	b.n	8000788 <__aeabi_fmul+0x18>
 8000868:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800086c:	ea92 0f0c 	teq	r2, ip
 8000870:	bf18      	it	ne
 8000872:	ea93 0f0c 	teqne	r3, ip
 8000876:	d00a      	beq.n	800088e <__aeabi_fmul+0x11e>
 8000878:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800087c:	bf18      	it	ne
 800087e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000882:	d1d8      	bne.n	8000836 <__aeabi_fmul+0xc6>
 8000884:	ea80 0001 	eor.w	r0, r0, r1
 8000888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f090 0f00 	teq	r0, #0
 8000892:	bf17      	itett	ne
 8000894:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000898:	4608      	moveq	r0, r1
 800089a:	f091 0f00 	teqne	r1, #0
 800089e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008a2:	d014      	beq.n	80008ce <__aeabi_fmul+0x15e>
 80008a4:	ea92 0f0c 	teq	r2, ip
 80008a8:	d101      	bne.n	80008ae <__aeabi_fmul+0x13e>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d10f      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008ae:	ea93 0f0c 	teq	r3, ip
 80008b2:	d103      	bne.n	80008bc <__aeabi_fmul+0x14c>
 80008b4:	024b      	lsls	r3, r1, #9
 80008b6:	bf18      	it	ne
 80008b8:	4608      	movne	r0, r1
 80008ba:	d108      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008bc:	ea80 0001 	eor.w	r0, r0, r1
 80008c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bx	lr
 80008ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fdiv>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d069      	beq.n	80009c4 <__aeabi_fdiv+0xec>
 80008f0:	eba2 0203 	sub.w	r2, r2, r3
 80008f4:	ea80 0c01 	eor.w	ip, r0, r1
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008fe:	d037      	beq.n	8000970 <__aeabi_fdiv+0x98>
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000908:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800090c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000910:	428b      	cmp	r3, r1
 8000912:	bf38      	it	cc
 8000914:	005b      	lslcc	r3, r3, #1
 8000916:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800091a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800091e:	428b      	cmp	r3, r1
 8000920:	bf24      	itt	cs
 8000922:	1a5b      	subcs	r3, r3, r1
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800092c:	bf24      	itt	cs
 800092e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000932:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000936:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800093a:	bf24      	itt	cs
 800093c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000948:	bf24      	itt	cs
 800094a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800094e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	bf18      	it	ne
 8000956:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800095a:	d1e0      	bne.n	800091e <__aeabi_fdiv+0x46>
 800095c:	2afd      	cmp	r2, #253	; 0xfd
 800095e:	f63f af50 	bhi.w	8000802 <__aeabi_fmul+0x92>
 8000962:	428b      	cmp	r3, r1
 8000964:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000968:	bf08      	it	eq
 800096a:	f020 0001 	biceq.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000974:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000978:	327f      	adds	r2, #127	; 0x7f
 800097a:	bfc2      	ittt	gt
 800097c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000980:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000984:	4770      	bxgt	lr
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	3a01      	subs	r2, #1
 8000990:	e737      	b.n	8000802 <__aeabi_fmul+0x92>
 8000992:	f092 0f00 	teq	r2, #0
 8000996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800099a:	bf02      	ittt	eq
 800099c:	0040      	lsleq	r0, r0, #1
 800099e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009a2:	3a01      	subeq	r2, #1
 80009a4:	d0f9      	beq.n	800099a <__aeabi_fdiv+0xc2>
 80009a6:	ea40 000c 	orr.w	r0, r0, ip
 80009aa:	f093 0f00 	teq	r3, #0
 80009ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0049      	lsleq	r1, r1, #1
 80009b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ba:	3b01      	subeq	r3, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fdiv+0xda>
 80009be:	ea41 010c 	orr.w	r1, r1, ip
 80009c2:	e795      	b.n	80008f0 <__aeabi_fdiv+0x18>
 80009c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d108      	bne.n	80009e0 <__aeabi_fdiv+0x108>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	f47f af7d 	bne.w	80008ce <__aeabi_fmul+0x15e>
 80009d4:	ea93 0f0c 	teq	r3, ip
 80009d8:	f47f af70 	bne.w	80008bc <__aeabi_fmul+0x14c>
 80009dc:	4608      	mov	r0, r1
 80009de:	e776      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009e0:	ea93 0f0c 	teq	r3, ip
 80009e4:	d104      	bne.n	80009f0 <__aeabi_fdiv+0x118>
 80009e6:	024b      	lsls	r3, r1, #9
 80009e8:	f43f af4c 	beq.w	8000884 <__aeabi_fmul+0x114>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e76e      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f4:	bf18      	it	ne
 80009f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	d1ca      	bne.n	8000992 <__aeabi_fdiv+0xba>
 80009fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a00:	f47f af5c 	bne.w	80008bc <__aeabi_fmul+0x14c>
 8000a04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a08:	f47f af3c 	bne.w	8000884 <__aeabi_fmul+0x114>
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0x15e>
 8000a0e:	bf00      	nop

08000a10 <__gesf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295
 8000a14:	e006      	b.n	8000a24 <__cmpsf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__lesf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpsf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpsf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d011      	beq.n	8000a60 <__cmpsf2+0x40>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a42:	bf18      	it	ne
 8000a44:	ea90 0f01 	teqne	r0, r1
 8000a48:	bf58      	it	pl
 8000a4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a4e:	bf88      	it	hi
 8000a50:	17c8      	asrhi	r0, r1, #31
 8000a52:	bf38      	it	cc
 8000a54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a58:	bf18      	it	ne
 8000a5a:	f040 0001 	orrne.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	d102      	bne.n	8000a6c <__cmpsf2+0x4c>
 8000a66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a6a:	d105      	bne.n	8000a78 <__cmpsf2+0x58>
 8000a6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a70:	d1e4      	bne.n	8000a3c <__cmpsf2+0x1c>
 8000a72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a76:	d0e1      	beq.n	8000a3c <__cmpsf2+0x1c>
 8000a78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cfrcmple>:
 8000a80:	4684      	mov	ip, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4661      	mov	r1, ip
 8000a86:	e7ff      	b.n	8000a88 <__aeabi_cfcmpeq>

08000a88 <__aeabi_cfcmpeq>:
 8000a88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a8a:	f7ff ffc9 	bl	8000a20 <__cmpsf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a98 <__aeabi_fcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cfcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_fcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffd2 	bl	8000a80 <__aeabi_cfrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc8 	bl	8000a80 <__aeabi_cfrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_f2uiz>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	d20e      	bcs.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b04:	d30b      	bcc.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b0e:	d409      	bmi.n	8000b24 <__aeabi_f2uiz+0x28>
 8000b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2uiz+0x32>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_f2uiz+0x38>
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <InitController+0x2c>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <InitController+0x30>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6013      	str	r3, [r2, #0]

	MyOutputs->xClutchBitepoint = xCLUTCH_BITE_POINT;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <InitController+0x30>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000b5a:	821a      	strh	r2, [r3, #16]

	IDLE_Entry();
 8000b5c:	f000 f944 	bl	8000de8 <IDLE_Entry>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000028 	.word	0x20000028
 8000b6c:	2000002c 	.word	0x2000002c

08000b70 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 8000b7a:	f002 fb87 	bl	800328c <HAL_GetTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a92      	ldr	r2, [pc, #584]	; (8000dcc <Controller+0x25c>)
 8000b82:	6013      	str	r3, [r2, #0]

	// ANTISTALL
		#ifdef ANTISTALL_ENABLED

			// if the shut down is activated and we are at gear greater than neutral we can enter
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError) {
 8000b84:	4b92      	ldr	r3, [pc, #584]	; (8000dd0 <Controller+0x260>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 8091 	bne.w	8000cb4 <Controller+0x144>
 8000b92:	4b8f      	ldr	r3, [pc, #572]	; (8000dd0 <Controller+0x260>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 808a 	beq.w	8000cb4 <Controller+0x144>
 8000ba0:	4b8b      	ldr	r3, [pc, #556]	; (8000dd0 <Controller+0x260>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f040 8083 	bne.w	8000cb4 <Controller+0x144>
 8000bae:	4b88      	ldr	r3, [pc, #544]	; (8000dd0 <Controller+0x260>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d17c      	bne.n	8000cb4 <Controller+0x144>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8000bba:	4b86      	ldr	r3, [pc, #536]	; (8000dd4 <Controller+0x264>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d03c      	beq.n	8000c40 <Controller+0xd0>
 8000bc6:	4b82      	ldr	r3, [pc, #520]	; (8000dd0 <Controller+0x260>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <Controller+0x260>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4b7f      	ldr	r3, [pc, #508]	; (8000dd8 <Controller+0x268>)
 8000bdc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dc2d      	bgt.n	8000c40 <Controller+0xd0>
 8000be4:	4b7a      	ldr	r3, [pc, #488]	; (8000dd0 <Controller+0x260>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000bec:	2b27      	cmp	r3, #39	; 0x27
 8000bee:	dc27      	bgt.n	8000c40 <Controller+0xd0>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 8000bf0:	4b78      	ldr	r3, [pc, #480]	; (8000dd4 <Controller+0x264>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d109      	bne.n	8000c10 <Controller+0xa0>
						MyOutputs->NAntistallState = Init;
 8000bfc:	4b75      	ldr	r3, [pc, #468]	; (8000dd4 <Controller+0x264>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						tAntistallTimmer = HAL_GetTick();
 8000c06:	f002 fb41 	bl	800328c <HAL_GetTick>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a73      	ldr	r2, [pc, #460]	; (8000ddc <Controller+0x26c>)
 8000c0e:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8000c10:	4b70      	ldr	r3, [pc, #448]	; (8000dd4 <Controller+0x264>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d111      	bne.n	8000c40 <Controller+0xd0>
 8000c1c:	4b6f      	ldr	r3, [pc, #444]	; (8000ddc <Controller+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000c24:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <Controller+0x25c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d209      	bcs.n	8000c40 <Controller+0xd0>
						MyOutputs->NAntistallState = Active;
 8000c2c:	4b69      	ldr	r3, [pc, #420]	; (8000dd4 <Controller+0x264>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2202      	movs	r2, #2
 8000c32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						MyOutputs->xClutchTargetProtection = xCLUTCH_ABSOLUTE_MAX;
 8000c36:	4b67      	ldr	r3, [pc, #412]	; (8000dd4 <Controller+0x264>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f640 0234 	movw	r2, #2100	; 0x834
 8000c3e:	809a      	strh	r2, [r3, #4]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8000c40:	4b64      	ldr	r3, [pc, #400]	; (8000dd4 <Controller+0x264>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d11d      	bne.n	8000c88 <Controller+0x118>
 8000c4c:	4b60      	ldr	r3, [pc, #384]	; (8000dd0 <Controller+0x260>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b5e      	ldr	r3, [pc, #376]	; (8000dd0 <Controller+0x260>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4b5d      	ldr	r3, [pc, #372]	; (8000dd8 <Controller+0x268>)
 8000c62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	dc05      	bgt.n	8000c76 <Controller+0x106>
 8000c6a:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <Controller+0x260>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c72:	2b5f      	cmp	r3, #95	; 0x5f
 8000c74:	dd08      	ble.n	8000c88 <Controller+0x118>
					MyOutputs->NAntistallState = Off;
 8000c76:	4b57      	ldr	r3, [pc, #348]	; (8000dd4 <Controller+0x264>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = 0;
 8000c80:	4b54      	ldr	r3, [pc, #336]	; (8000dd4 <Controller+0x264>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2200      	movs	r2, #0
 8000c86:	809a      	strh	r2, [r3, #4]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000c88:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <Controller+0x264>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d119      	bne.n	8000cc8 <Controller+0x158>
 8000c94:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <Controller+0x260>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c9c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c9e:	dd13      	ble.n	8000cc8 <Controller+0x158>
					MyOutputs->NAntistallState = Off;
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <Controller+0x264>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = 0;
 8000caa:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <Controller+0x264>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	809a      	strh	r2, [r3, #4]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000cb2:	e009      	b.n	8000cc8 <Controller+0x158>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <Controller+0x264>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				MyOutputs->xClutchTargetProtection = 0;
 8000cbe:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <Controller+0x264>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	809a      	strh	r2, [r3, #4]
 8000cc6:	e000      	b.n	8000cca <Controller+0x15a>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000cc8:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <Controller+0x260>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d114      	bne.n	8000d00 <Controller+0x190>
			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_MAX_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <Controller+0x260>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fcf2 	bl	80006c8 <__aeabi_i2f>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <Controller+0x264>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3308      	adds	r3, #8
 8000cec:	f04f 0100 	mov.w	r1, #0
 8000cf0:	9101      	str	r1, [sp, #4]
 8000cf2:	f04f 0100 	mov.w	r1, #0
 8000cf6:	9100      	str	r1, [sp, #0]
 8000cf8:	4939      	ldr	r1, [pc, #228]	; (8000de0 <Controller+0x270>)
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f002 f99c 	bl	8003038 <My2DMapInterpolate>
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MAX(MyOutputs->xClutchTargetProtection, MAX((uint16_t)MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift));
 8000d00:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <Controller+0x264>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	899c      	ldrh	r4, [r3, #12]
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <Controller+0x264>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fef5 	bl	8000afc <__aeabi_f2uiz>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	42a3      	cmp	r3, r4
 8000d18:	bf38      	it	cc
 8000d1a:	4623      	movcc	r3, r4
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <Controller+0x264>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	889a      	ldrh	r2, [r3, #4]
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <Controller+0x264>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	bf38      	it	cc
 8000d2c:	460a      	movcc	r2, r1
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	81da      	strh	r2, [r3, #14]


	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES & LEDS
		MyOutputs->BSWLEDA = MyInputs->NToggleSwitch01State;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <Controller+0x260>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <Controller+0x264>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		MyOutputs->BSWLEDB = MyInputs->NToggleSwitch02State;
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <Controller+0x260>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <Controller+0x264>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
 8000d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		MyOutputs->BSWLEDC = MyInputs->NToggleSwitch03State;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <Controller+0x260>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <Controller+0x264>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
 8000d5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <Controller+0x274>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d82c      	bhi.n	8000dc4 <Controller+0x254>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <Controller+0x200>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000d89 	.word	0x08000d89
 8000d74:	08000d93 	.word	0x08000d93
 8000d78:	08000d9d 	.word	0x08000d9d
 8000d7c:	08000da7 	.word	0x08000da7
 8000d80:	08000db1 	.word	0x08000db1
 8000d84:	08000dbb 	.word	0x08000dbb

		case IDLE_STATE:
			IDLE_Run();
 8000d88:	f000 f870 	bl	8000e6c <IDLE_Run>
			IDLE_Event();
 8000d8c:	f000 f844 	bl	8000e18 <IDLE_Event>
			break;
 8000d90:	e018      	b.n	8000dc4 <Controller+0x254>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 8000d92:	f000 f8ed 	bl	8000f70 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 8000d96:	f000 f88b 	bl	8000eb0 <PRE_UPSHIFT_Event>
			break;
 8000d9a:	e013      	b.n	8000dc4 <Controller+0x254>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 8000d9c:	f000 f9ca 	bl	8001134 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 8000da0:	f000 f97a 	bl	8001098 <PRE_DNSHIFT_Event>
			break;
 8000da4:	e00e      	b.n	8000dc4 <Controller+0x254>
		case SHIFTING_STATE:
			SHIFTING_Run();
 8000da6:	f000 fae1 	bl	800136c <SHIFTING_Run>
			SHIFTING_Event();
 8000daa:	f000 fab9 	bl	8001320 <SHIFTING_Event>
			break;
 8000dae:	e009      	b.n	8000dc4 <Controller+0x254>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 8000db0:	f000 fb46 	bl	8001440 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 8000db4:	f000 fb0a 	bl	80013cc <POSTSHIFT_Event>
			break;
 8000db8:	e004      	b.n	8000dc4 <Controller+0x254>
		case ERROR_STATE:
			ERROR_Run();
 8000dba:	f000 fb9d 	bl	80014f8 <ERROR_Run>
			ERROR_Event();
 8000dbe:	f000 fb89 	bl	80014d4 <ERROR_Event>
			break;
 8000dc2:	bf00      	nop
		}

}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20000034 	.word	0x20000034
 8000dd0:	20000028 	.word	0x20000028
 8000dd4:	2000002c 	.word	0x2000002c
 8000dd8:	08006dec 	.word	0x08006dec
 8000ddc:	20000048 	.word	0x20000048
 8000de0:	08006d94 	.word	0x08006d94
 8000de4:	20000030 	.word	0x20000030

08000de8 <IDLE_Entry>:


void IDLE_Entry(void) {
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <IDLE_Entry+0x1c>)
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <IDLE_Entry+0x20>)
 8000df2:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <IDLE_Entry+0x1c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000030 	.word	0x20000030
 8000e08:	20000031 	.word	0x20000031

08000e0c <IDLE_Exit>:
void IDLE_Exit(void) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <IDLE_Event>:
void IDLE_Event(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <IDLE_Event+0x50>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 f92f 	bl	8002084 <CheckFaults>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <IDLE_Event+0x1e>
		IDLE_Exit();
 8000e2c:	f7ff ffee 	bl	8000e0c <IDLE_Exit>
		ERROR_Entry();
 8000e30:	f000 fb2a 	bl	8001488 <ERROR_Entry>
		return;
 8000e34:	e017      	b.n	8000e66 <IDLE_Event+0x4e>
	}

	// TODO: do we need to also check controller errors here? I think no...

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <IDLE_Event+0x50>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <IDLE_Event+0x36>
        IDLE_Exit();
 8000e44:	f7ff ffe2 	bl	8000e0c <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8000e48:	f000 f816 	bl	8000e78 <PRE_UPSHIFT_Entry>
        return;
 8000e4c:	e00b      	b.n	8000e66 <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <IDLE_Event+0x50>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <IDLE_Event+0x4e>
        IDLE_Exit();
 8000e5c:	f7ff ffd6 	bl	8000e0c <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8000e60:	f000 f8fe 	bl	8001060 <PRE_DNSHIFT_Entry>
        return;
 8000e64:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000028 	.word	0x20000028

08000e6c <IDLE_Run>:
void IDLE_Run(void) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <PRE_UPSHIFT_Entry+0x20>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <PRE_UPSHIFT_Entry+0x24>)
 8000e82:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <PRE_UPSHIFT_Entry+0x20>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8000e8a:	f002 f9ff 	bl	800328c <HAL_GetTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <PRE_UPSHIFT_Entry+0x28>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000030 	.word	0x20000030
 8000e9c:	20000031 	.word	0x20000031
 8000ea0:	20000038 	.word	0x20000038

08000ea4 <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 8000eb0:	b598      	push	{r3, r4, r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <PRE_UPSHIFT_Event+0xb0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f8e3 	bl	8002084 <CheckFaults>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <PRE_UPSHIFT_Event+0x1e>
		PRE_UPSHIFT_Exit();
 8000ec4:	f7ff ffee 	bl	8000ea4 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000ec8:	f000 fade 	bl	8001488 <ERROR_Entry>
		return;
 8000ecc:	e046      	b.n	8000f5c <PRE_UPSHIFT_Event+0xac>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d12e      	bne.n	8000f36 <PRE_UPSHIFT_Event+0x86>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <PRE_UPSHIFT_Event+0xb0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3201      	adds	r2, #1
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_UPSHIFT || MyOutputs->BOverrideActuateClutchOnUpShift) {		// we check for clutch strategy during shift
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d011      	beq.n	8000f1a <PRE_UPSHIFT_Event+0x6a>
			MyOutputs->xClutchTargetShift = xClutchTargetUpShiftMap[MyInputs->NGear];
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <PRE_UPSHIFT_Event+0xb0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <PRE_UPSHIFT_Event+0xb8>)
 8000f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnUpShift = 0; 									// reset the strat for the next gear
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000f18:	e003      	b.n	8000f22 <PRE_UPSHIFT_Event+0x72>
		}
		else {
			MyOutputs->xClutchTargetShift = 0;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	819a      	strh	r2, [r3, #12]
		}

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		PRE_UPSHIFT_Exit();
 8000f2c:	f7ff ffba 	bl	8000ea4 <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8000f30:	f000 f97e 	bl	8001230 <SHIFTING_Entry>
		return;
 8000f34:	e012      	b.n	8000f5c <PRE_UPSHIFT_Event+0xac>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00d      	beq.n	8000f5c <PRE_UPSHIFT_Event+0xac>
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <PRE_UPSHIFT_Event+0xbc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000f48:	f002 f9a0 	bl	800328c <HAL_GetTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	429c      	cmp	r4, r3
 8000f50:	d804      	bhi.n	8000f5c <PRE_UPSHIFT_Event+0xac>
		PRE_UPSHIFT_Exit();
 8000f52:	f7ff ffa7 	bl	8000ea4 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000f56:	f000 fa97 	bl	8001488 <ERROR_Entry>
		return;
 8000f5a:	bf00      	nop
	}


}
 8000f5c:	bd98      	pop	{r3, r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000028 	.word	0x20000028
 8000f64:	2000002c 	.word	0x2000002c
 8000f68:	08006e10 	.word	0x08006e10
 8000f6c:	20000038 	.word	0x20000038

08000f70 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d113      	bne.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000f88:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8a:	dc0d      	bgt.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0202 	orr.w	r2, r2, #2
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	705a      	strb	r2, [r3, #1]
 8000fa6:	e008      	b.n	8000fba <PRE_UPSHIFT_Run+0x4a>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0202 	bic.w	r2, r2, #2
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift up with too low rpm
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <PRE_UPSHIFT_Run+0xec>)
 8000fd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	da13      	bge.n	8001000 <PRE_UPSHIFT_Run+0x90>
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10d      	bne.n	8001000 <PRE_UPSHIFT_Run+0x90>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0208 	orr.w	r2, r2, #8
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	705a      	strb	r2, [r3, #1]
 8000ffe:	e008      	b.n	8001012 <PRE_UPSHIFT_Run+0xa2>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0208 	bic.w	r2, r2, #8
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800101a:	2b04      	cmp	r3, #4
 800101c:	d90d      	bls.n	800103a <PRE_UPSHIFT_Run+0xca>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0210 	orr.w	r2, r2, #16
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2204      	movs	r2, #4
 8001036:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
}
 8001038:	e008      	b.n	800104c <PRE_UPSHIFT_Run+0xdc>
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0210 	bic.w	r2, r2, #16
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000028 	.word	0x20000028
 8001058:	2000002c 	.word	0x2000002c
 800105c:	08006df8 	.word	0x08006df8

08001060 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <PRE_DNSHIFT_Entry+0x24>)
 800106a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 800106e:	2202      	movs	r2, #2
 8001070:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8001072:	f002 f90b 	bl	800328c <HAL_GetTick>
 8001076:	4603      	mov	r3, r0
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <PRE_DNSHIFT_Entry+0x28>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000030 	.word	0x20000030
 8001084:	20000031 	.word	0x20000031
 8001088:	20000038 	.word	0x20000038

0800108c <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 8001098:	b598      	push	{r3, r4, r7, lr}
 800109a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 ffef 	bl	8002084 <CheckFaults>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <PRE_DNSHIFT_Event+0x1e>
		PRE_DNSHIFT_Exit();
 80010ac:	f7ff ffee 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 80010b0:	f000 f9ea 	bl	8001488 <ERROR_Entry>
		return;
 80010b4:	e035      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11d      	bne.n	80010fc <PRE_DNSHIFT_Event+0x64>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_DNSHIFT || MyOutputs->BOverrideActuateClutchOnDnShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetDnShiftMap[MyInputs->NGear];
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010da:	4619      	mov	r1, r3
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <PRE_DNSHIFT_Event+0x94>)
 80010e2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80010e6:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnDnShift = 0; 									// reset the strat for the next gear
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			MyOutputs->xClutchTargetShift = 0;
		}

		if(ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 80010f2:	f7ff ffcb 	bl	800108c <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 80010f6:	f000 f89b 	bl	8001230 <SHIFTING_Entry>
		return;
 80010fa:	e012      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <PRE_DNSHIFT_Event+0x8a>
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <PRE_DNSHIFT_Event+0x98>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 800110e:	f002 f8bd 	bl	800328c <HAL_GetTick>
 8001112:	4603      	mov	r3, r0
 8001114:	429c      	cmp	r4, r3
 8001116:	d804      	bhi.n	8001122 <PRE_DNSHIFT_Event+0x8a>
		PRE_DNSHIFT_Exit();
 8001118:	f7ff ffb8 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 800111c:	f000 f9b4 	bl	8001488 <ERROR_Entry>
		return;
 8001120:	bf00      	nop
	}

}
 8001122:	bd98      	pop	{r3, r4, r7, pc}
 8001124:	20000028 	.word	0x20000028
 8001128:	2000002c 	.word	0x2000002c
 800112c:	08006e24 	.word	0x08006e24
 8001130:	20000038 	.word	0x20000038

08001134 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH && !(MyInputs->BrClutchPaddleInError && ALLOW_NEUTRAL_WHEN_PADDLE_IN_ERROR)) {	// trying to put neutral gear without clutch
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001140:	2b01      	cmp	r3, #1
 8001142:	d119      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800114c:	2b5a      	cmp	r3, #90	; 0x5a
 800114e:	dc13      	bgt.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10d      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0204 	orr.w	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2202      	movs	r2, #2
 8001174:	705a      	strb	r2, [r3, #1]
 8001176:	e008      	b.n	800118a <PRE_DNSHIFT_Run+0x56>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0204 	bic.w	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift down with too high rpm
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001192:	461a      	mov	r2, r3
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800119c:	4619      	mov	r1, r3
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <PRE_DNSHIFT_Run+0xf8>)
 80011a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dd13      	ble.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10d      	bne.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2205      	movs	r2, #5
 80011cc:	705a      	strb	r2, [r3, #1]
 80011ce:	e008      	b.n	80011e2 <PRE_DNSHIFT_Run+0xae>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0220 	bic.w	r2, r2, #32
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <PRE_DNSHIFT_Run+0xd6>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2206      	movs	r2, #6
 8001206:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }

}
 8001208:	e008      	b.n	800121c <PRE_DNSHIFT_Run+0xe8>
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000028 	.word	0x20000028
 8001228:	2000002c 	.word	0x2000002c
 800122c:	08006e04 	.word	0x08006e04

08001230 <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <SHIFTING_Entry+0xc0>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <SHIFTING_Entry+0xc4>)
 800123a:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <SHIFTING_Entry+0xc0>)
 800123e:	2203      	movs	r2, #3
 8001240:	701a      	strb	r2, [r3, #0]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d11b      	bne.n	8001282 <SHIFTING_Entry+0x52>
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001252:	461a      	mov	r2, r3
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SHIFTING_Entry+0xcc>)
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <SHIFTING_Entry+0xd0>)
 800125c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Up;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <SHIFTING_Entry+0xd4>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d104      	bne.n	8001278 <SHIFTING_Entry+0x48>
			MyOutputs->BDnShiftPortState = 1;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2201      	movs	r2, #1
 8001274:	751a      	strb	r2, [r3, #20]
 8001276:	e034      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other upshifts are normal
			MyOutputs->BUpShiftPortState = 1;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <SHIFTING_Entry+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	74da      	strb	r2, [r3, #19]
 8001280:	e02f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d11b      	bne.n	80012c2 <SHIFTING_Entry+0x92>
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear - 1];
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001292:	3b01      	subs	r3, #1
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <SHIFTING_Entry+0xdc>)
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <SHIFTING_Entry+0xd0>)
 800129c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Down;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <SHIFTING_Entry+0xd4>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <SHIFTING_Entry+0x88>
			MyOutputs->BUpShiftPortState = 1;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	74da      	strb	r2, [r3, #19]
 80012b6:	e014      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other downshifts are normal
			MyOutputs->BDnShiftPortState = 1;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	751a      	strb	r2, [r3, #20]
 80012c0:	e00f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else {
		NCurrentState = Unknown;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <SHIFTING_Entry+0xc0>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2207      	movs	r2, #7
 80012e0:	705a      	strb	r2, [r3, #1]
	}

	tShiftTimer = HAL_GetTick();
 80012e2:	f001 ffd3 	bl	800328c <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <SHIFTING_Entry+0xe0>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000030 	.word	0x20000030
 80012f4:	20000031 	.word	0x20000031
 80012f8:	20000028 	.word	0x20000028
 80012fc:	08006e30 	.word	0x08006e30
 8001300:	20000040 	.word	0x20000040
 8001304:	20000032 	.word	0x20000032
 8001308:	2000002c 	.word	0x2000002c
 800130c:	08006e44 	.word	0x08006e44
 8001310:	2000003c 	.word	0x2000003c

08001314 <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SHIFTING_Event+0x3c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 feab 	bl	8002084 <CheckFaults>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <SHIFTING_Event+0x1e>
		SHIFTING_Exit();
 8001334:	f7ff ffee 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 8001338:	f000 f8a6 	bl	8001488 <ERROR_Entry>
		return;
 800133c:	e00d      	b.n	800135a <SHIFTING_Event+0x3a>
	}

	// TODO: keep checking for control errors ??


	if((tShiftTimer + tShifterMaxTransitTime) < tControllerTimmer) {	// the max time for the gear has expired
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <SHIFTING_Event+0x40>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SHIFTING_Event+0x44>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	441a      	add	r2, r3
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <SHIFTING_Event+0x48>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d204      	bcs.n	800135a <SHIFTING_Event+0x3a>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 8001350:	f7ff ffe0 	bl	8001314 <SHIFTING_Exit>
		POSTSHIFT_Entry();
 8001354:	f000 f810 	bl	8001378 <POSTSHIFT_Entry>
		return;
 8001358:	bf00      	nop
	}

}
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000028 	.word	0x20000028
 8001360:	2000003c 	.word	0x2000003c
 8001364:	20000040 	.word	0x20000040
 8001368:	20000034 	.word	0x20000034

0800136c <SHIFTING_Run>:
void SHIFTING_Run(void) {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	// PID


	// FEED FORWARD

}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <POSTSHIFT_Entry+0x3c>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <POSTSHIFT_Entry+0x40>)
 8001382:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <POSTSHIFT_Entry+0x3c>)
 8001386:	2204      	movs	r2, #4
 8001388:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <POSTSHIFT_Entry+0x44>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <POSTSHIFT_Entry+0x44>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShift = 0;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <POSTSHIFT_Entry+0x44>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	819a      	strh	r2, [r3, #12]
	MyOutputs->BSparkCut = 0;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <POSTSHIFT_Entry+0x44>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000030 	.word	0x20000030
 80013b8:	20000031 	.word	0x20000031
 80013bc:	2000002c 	.word	0x2000002c

080013c0 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

	// TODO: probably here we need to set the MyOutputs->NGear = MyInputs->NGear

}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 80013cc:	b598      	push	{r3, r4, r7, lr}
 80013ce:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <POSTSHIFT_Event+0x68>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fe55 	bl	8002084 <CheckFaults>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <POSTSHIFT_Event+0x1e>
		SHIFTING_Exit();
 80013e0:	f7ff ff98 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 80013e4:	f000 f850 	bl	8001488 <ERROR_Entry>
		return;
 80013e8:	e023      	b.n	8001432 <POSTSHIFT_Event+0x66>
	}


	if(!MyOutputs->NControlErrorStatus) {
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <POSTSHIFT_Event+0x6c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10b      	bne.n	800140c <POSTSHIFT_Event+0x40>
		// we update the Gear variable for the outputs
		MyOutputs->NGear = MyInputs->NGear;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <POSTSHIFT_Event+0x68>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <POSTSHIFT_Event+0x6c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8001400:	709a      	strb	r2, [r3, #2]
		POSTSHIFT_Exit();
 8001402:	f7ff ffdd 	bl	80013c0 <POSTSHIFT_Exit>
		IDLE_Entry();
 8001406:	f7ff fcef 	bl	8000de8 <IDLE_Entry>
		return;
 800140a:	e012      	b.n	8001432 <POSTSHIFT_Event+0x66>
	}


	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPostShiftTimer + POSTSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <POSTSHIFT_Event+0x6c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00d      	beq.n	8001432 <POSTSHIFT_Event+0x66>
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <POSTSHIFT_Event+0x70>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 800141e:	f001 ff35 	bl	800328c <HAL_GetTick>
 8001422:	4603      	mov	r3, r0
 8001424:	429c      	cmp	r4, r3
 8001426:	d804      	bhi.n	8001432 <POSTSHIFT_Event+0x66>
		POSTSHIFT_Exit();
 8001428:	f7ff ffca 	bl	80013c0 <POSTSHIFT_Exit>
		ERROR_Entry();
 800142c:	f000 f82c 	bl	8001488 <ERROR_Entry>
		return;
 8001430:	bf00      	nop
	}
}
 8001432:	bd98      	pop	{r3, r4, r7, pc}
 8001434:	20000028 	.word	0x20000028
 8001438:	2000002c 	.word	0x2000002c
 800143c:	20000044 	.word	0x20000044

08001440 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

	if(CHECK_POST_SHIFT_GEAR && MyInputs->NGear != MyOutputs->NGearTarget) {
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <POSTSHIFT_Run+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <POSTSHIFT_Run+0x44>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	78db      	ldrb	r3, [r3, #3]
 8001452:	429a      	cmp	r2, r3
 8001454:	d00a      	beq.n	800146c <POSTSHIFT_Run+0x2c>
		RaiseControlError(GEAR_TARGET_MISMATCH);
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <POSTSHIFT_Run+0x44>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <POSTSHIFT_Run+0x44>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <POSTSHIFT_Run+0x44>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2208      	movs	r2, #8
 8001468:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(GEAR_TARGET_MISMATCH); }

}
 800146a:	e005      	b.n	8001478 <POSTSHIFT_Run+0x38>
	else { ClearControlError(GEAR_TARGET_MISMATCH); }
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <POSTSHIFT_Run+0x44>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <POSTSHIFT_Run+0x44>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	701a      	strb	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000028 	.word	0x20000028
 8001484:	2000002c 	.word	0x2000002c

08001488 <ERROR_Entry>:


void ERROR_Entry(void) {
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <ERROR_Entry+0x34>)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <ERROR_Entry+0x38>)
 8001492:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <ERROR_Entry+0x34>)
 8001496:	2205      	movs	r2, #5
 8001498:	701a      	strb	r2, [r3, #0]

	// TODO: we need to open a led to indicate the Error State !!!

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <ERROR_Entry+0x3c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <ERROR_Entry+0x3c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	//MyOutputs->xClutchTarget = xCLUTCH_FULLY_ENGAGED;
	// clutch should always work... if we enter here during an actuation, not sure if it is correct to interrupt it
	MyOutputs->BSparkCut = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <ERROR_Entry+0x3c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000030 	.word	0x20000030
 80014c0:	20000031 	.word	0x20000031
 80014c4:	2000002c 	.word	0x2000002c

080014c8 <ERROR_Exit>:

void ERROR_Exit(void) {
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <ERROR_Event>:
void ERROR_Event(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

	// check that all faults are cleared
	if(!CheckFaults(MyInputs)) {
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <ERROR_Event+0x20>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fdd1 	bl	8002084 <CheckFaults>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d104      	bne.n	80014f2 <ERROR_Event+0x1e>
		ERROR_Exit();
 80014e8:	f7ff ffee 	bl	80014c8 <ERROR_Exit>
		IDLE_Entry();
 80014ec:	f7ff fc7c 	bl	8000de8 <IDLE_Entry>
		return;
 80014f0:	bf00      	nop
	// check that all control errors are cleared
	// and do not zero the logged error status
	// remember return in all functions

	// Remember to create the Strategy (and a way to exit the error) to be able to function without NGear (complete open loop)
}
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000028 	.word	0x20000028

080014f8 <ERROR_Run>:
void ERROR_Run(void) {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <ERROR_Run+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]


	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle

}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	2000002c 	.word	0x2000002c

08001510 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af02      	add	r7, sp, #8
 8001516:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 800151e:	f001 feb5 	bl	800328c <HAL_GetTick>
 8001522:	4603      	mov	r3, r0
 8001524:	4aa9      	ldr	r2, [pc, #676]	; (80017cc <ReadInputs+0x2bc>)
 8001526:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);	// PA0
 8001528:	4ba9      	ldr	r3, [pc, #676]	; (80017d0 <ReadInputs+0x2c0>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	2300      	movs	r3, #0
 8001530:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001534:	48a7      	ldr	r0, [pc, #668]	; (80017d4 <ReadInputs+0x2c4>)
 8001536:	f000 fe65 	bl	8002204 <MyHalfBufferAverage>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);	// PA1
 8001542:	4ba3      	ldr	r3, [pc, #652]	; (80017d0 <ReadInputs+0x2c0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	2301      	movs	r3, #1
 800154a:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800154e:	48a1      	ldr	r0, [pc, #644]	; (80017d4 <ReadInputs+0x2c4>)
 8001550:	f000 fe58 	bl	8002204 <MyHalfBufferAverage>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);	// PA2
 800155c:	4b9c      	ldr	r3, [pc, #624]	; (80017d0 <ReadInputs+0x2c0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	2302      	movs	r3, #2
 8001564:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001568:	489a      	ldr	r0, [pc, #616]	; (80017d4 <ReadInputs+0x2c4>)
 800156a:	f000 fe4b 	bl	8002204 <MyHalfBufferAverage>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);	// PA3
 8001576:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <ReadInputs+0x2c0>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	2303      	movs	r3, #3
 800157e:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001582:	4894      	ldr	r0, [pc, #592]	; (80017d4 <ReadInputs+0x2c4>)
 8001584:	f000 fe3e 	bl	8002204 <MyHalfBufferAverage>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);	// PA5
 8001590:	4b8f      	ldr	r3, [pc, #572]	; (80017d0 <ReadInputs+0x2c0>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	2305      	movs	r3, #5
 8001598:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800159c:	488d      	ldr	r0, [pc, #564]	; (80017d4 <ReadInputs+0x2c4>)
 800159e:	f000 fe31 	bl	8002204 <MyHalfBufferAverage>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);	// PA4
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <ReadInputs+0x2c0>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	2304      	movs	r3, #4
 80015b2:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015b6:	4887      	ldr	r0, [pc, #540]	; (80017d4 <ReadInputs+0x2c4>)
 80015b8:	f000 fe24 	bl	8002204 <MyHalfBufferAverage>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	865a      	strh	r2, [r3, #50]	; 0x32
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);	// PA7
 80015c4:	4b82      	ldr	r3, [pc, #520]	; (80017d0 <ReadInputs+0x2c0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	2307      	movs	r3, #7
 80015cc:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015d0:	4880      	ldr	r0, [pc, #512]	; (80017d4 <ReadInputs+0x2c4>)
 80015d2:	f000 fe17 	bl	8002204 <MyHalfBufferAverage>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	869a      	strh	r2, [r3, #52]	; 0x34
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);	// PA7
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <ReadInputs+0x2c0>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	2306      	movs	r3, #6
 80015e6:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015ea:	487a      	ldr	r0, [pc, #488]	; (80017d4 <ReadInputs+0x2c4>)
 80015ec:	f000 fe0a 	bl	8002204 <MyHalfBufferAverage>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	86da      	strh	r2, [r3, #54]	; 0x36

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f863 	bl	80006c8 <__aeabi_i2f>
 8001602:	4603      	mov	r3, r0
 8001604:	4974      	ldr	r1, [pc, #464]	; (80017d8 <ReadInputs+0x2c8>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f8b2 	bl	8000770 <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	4973      	ldr	r1, [pc, #460]	; (80017dc <ReadInputs+0x2cc>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f961 	bl	80008d8 <__aeabi_fdiv>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f850 	bl	80006c8 <__aeabi_i2f>
 8001628:	4603      	mov	r3, r0
 800162a:	496b      	ldr	r1, [pc, #428]	; (80017d8 <ReadInputs+0x2c8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f89f 	bl	8000770 <__aeabi_fmul>
 8001632:	4603      	mov	r3, r0
 8001634:	4969      	ldr	r1, [pc, #420]	; (80017dc <ReadInputs+0x2cc>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f94e 	bl	80008d8 <__aeabi_fdiv>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f83d 	bl	80006c8 <__aeabi_i2f>
 800164e:	4603      	mov	r3, r0
 8001650:	4961      	ldr	r1, [pc, #388]	; (80017d8 <ReadInputs+0x2c8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f88c 	bl	8000770 <__aeabi_fmul>
 8001658:	4603      	mov	r3, r0
 800165a:	4960      	ldr	r1, [pc, #384]	; (80017dc <ReadInputs+0x2cc>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f93b 	bl	80008d8 <__aeabi_fdiv>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f82a 	bl	80006c8 <__aeabi_i2f>
 8001674:	4603      	mov	r3, r0
 8001676:	4958      	ldr	r1, [pc, #352]	; (80017d8 <ReadInputs+0x2c8>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f879 	bl	8000770 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	4956      	ldr	r1, [pc, #344]	; (80017dc <ReadInputs+0x2cc>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f928 	bl	80008d8 <__aeabi_fdiv>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f817 	bl	80006c8 <__aeabi_i2f>
 800169a:	4603      	mov	r3, r0
 800169c:	494e      	ldr	r1, [pc, #312]	; (80017d8 <ReadInputs+0x2c8>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f866 	bl	8000770 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	494d      	ldr	r1, [pc, #308]	; (80017dc <ReadInputs+0x2cc>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f915 	bl	80008d8 <__aeabi_fdiv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f804 	bl	80006c8 <__aeabi_i2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4945      	ldr	r1, [pc, #276]	; (80017d8 <ReadInputs+0x2c8>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f853 	bl	8000770 <__aeabi_fmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4943      	ldr	r1, [pc, #268]	; (80017dc <ReadInputs+0x2cc>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f902 	bl	80008d8 <__aeabi_fdiv>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fff1 	bl	80006c8 <__aeabi_i2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	493b      	ldr	r1, [pc, #236]	; (80017d8 <ReadInputs+0x2c8>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f840 	bl	8000770 <__aeabi_fmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	493a      	ldr	r1, [pc, #232]	; (80017dc <ReadInputs+0x2cc>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f8ef 	bl	80008d8 <__aeabi_fdiv>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	621a      	str	r2, [r3, #32]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ffde 	bl	80006c8 <__aeabi_i2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4932      	ldr	r1, [pc, #200]	; (80017d8 <ReadInputs+0x2c8>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff f82d 	bl	8000770 <__aeabi_fmul>
 8001716:	4603      	mov	r3, r0
 8001718:	4930      	ldr	r1, [pc, #192]	; (80017dc <ReadInputs+0x2cc>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f8dc 	bl	80008d8 <__aeabi_fdiv>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	625a      	str	r2, [r3, #36]	; 0x24

	//Digital Inputs
	inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8001728:	2101      	movs	r1, #1
 800172a:	482d      	ldr	r0, [pc, #180]	; (80017e0 <ReadInputs+0x2d0>)
 800172c:	f003 fc2c 	bl	8004f88 <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 800173a:	2102      	movs	r1, #2
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <ReadInputs+0x2d0>)
 800173e:	f003 fc23 	bl	8004f88 <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 800174c:	2120      	movs	r1, #32
 800174e:	4824      	ldr	r0, [pc, #144]	; (80017e0 <ReadInputs+0x2d0>)
 8001750:	f003 fc1a 	bl	8004f88 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	481f      	ldr	r0, [pc, #124]	; (80017e0 <ReadInputs+0x2d0>)
 8001762:	f003 fc11 	bl	8004f88 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <ReadInputs+0x2d4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	inputs->BSWButtonB = BButtonBCAN;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <ReadInputs+0x2d8>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	inputs->BSWButtonC = BButtonCCAN;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <ReadInputs+0x2dc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	inputs->BSWButtonD = BButtonDCAN;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <ReadInputs+0x2e0>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	inputs->BSWButtonE = BButtonECAN;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <ReadInputs+0x2e4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	inputs->BSWButtonF = BButtonFCAN;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <ReadInputs+0x2e8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

		// Inverted logic!! DriverKill=1 means ShutDown is Open, DriverKill=0 means ShutDown is closed
	if(inputs->NSHIFTERDIN04 & (tBDriverKillTimer < tInputsTimmer) && inputs->BDriverKill) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017be:	4619      	mov	r1, r3
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <ReadInputs+0x2ec>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b01      	ldr	r3, [pc, #4]	; (80017cc <ReadInputs+0x2bc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	e019      	b.n	8001800 <ReadInputs+0x2f0>
 80017cc:	2000004c 	.word	0x2000004c
 80017d0:	20000084 	.word	0x20000084
 80017d4:	20000244 	.word	0x20000244
 80017d8:	4055c28f 	.word	0x4055c28f
 80017dc:	457ff000 	.word	0x457ff000
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	2000006d 	.word	0x2000006d
 80017e8:	2000006e 	.word	0x2000006e
 80017ec:	2000006f 	.word	0x2000006f
 80017f0:	20000070 	.word	0x20000070
 80017f4:	20000071 	.word	0x20000071
 80017f8:	20000072 	.word	0x20000072
 80017fc:	20000060 	.word	0x20000060
 8001800:	bf34      	ite	cc
 8001802:	2301      	movcc	r3, #1
 8001804:	2300      	movcs	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	400b      	ands	r3, r1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00e      	beq.n	800182c <ReadInputs+0x31c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <ReadInputs+0x31c>
		inputs->BDriverKill = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		tBDriverKillTimer = tInputsTimmer + DRIVER_KILL_DEBOUNCE;
 8001820:	4ba5      	ldr	r3, [pc, #660]	; (8001ab8 <ReadInputs+0x5a8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	33c8      	adds	r3, #200	; 0xc8
 8001826:	4aa5      	ldr	r2, [pc, #660]	; (8001abc <ReadInputs+0x5ac>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00d      	b.n	8001848 <ReadInputs+0x338>
	}
	else if(!inputs->NSHIFTERDIN04 & !inputs->BDriverKill) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001838:	4313      	orrs	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <ReadInputs+0x338>
		inputs->BDriverKill = 1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	// ---------------------------------------------------------------------------------------------------
	// NGear Conditioning

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3344      	adds	r3, #68	; 0x44
 8001858:	4999      	ldr	r1, [pc, #612]	; (8001ac0 <ReadInputs+0x5b0>)
 800185a:	9101      	str	r1, [sp, #4]
 800185c:	4998      	ldr	r1, [pc, #608]	; (8001ac0 <ReadInputs+0x5b0>)
 800185e:	9100      	str	r1, [sp, #0]
 8001860:	4998      	ldr	r1, [pc, #608]	; (8001ac4 <ReadInputs+0x5b4>)
 8001862:	2006      	movs	r0, #6
 8001864:	f001 fbe8 	bl	8003038 <My2DMapInterpolate>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	// TODO: think about checking the float NGear for +-0.2 to define false neutral

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fdcc 	bl	8000414 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f005 fa34 	bl	8006cf0 <round>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7fe fe40 	bl	8000514 <__aeabi_d2uiz>
 8001894:	4603      	mov	r3, r0
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	bf28      	it	cs
 80018a8:	2305      	movcs	r3, #5
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// check for errors
	if(inputs->BNGearInError) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <ReadInputs+0x3ba>
		RaiseFault(inputs, NGEAR_FAULT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	e005      	b.n	80018d6 <ReadInputs+0x3c6>
		// inputs->NGear = 1; // TODO: is it correct??? not sure. I would put 1 to be able trigger antistall and to be generic for all functions
	}
	else ClearFault(inputs, NGEAR_FAULT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 0201 	bic.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 80018d6:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <ReadInputs+0x5b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <ReadInputs+0x5a8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d204      	bcs.n	80018f0 <ReadInputs+0x3e0>
		inputs->BSteeringWheelFitted = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018ee:	e003      	b.n	80018f8 <ReadInputs+0x3e8>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <ReadInputs+0x408>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inputs->BDeclutchRequestInError = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8001916:	e007      	b.n	8001928 <ReadInputs+0x418>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Conditioning

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <ReadInputs+0x5bc>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b25b      	sxtb	r3, r3
 800192e:	b2da      	uxtb	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8001936:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <ReadInputs+0x5c0>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b25a      	sxtb	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	661a      	str	r2, [r3, #96]	; 0x60
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_PADDLE_MARGIN_MIN, VrCLUTCH_PADDLE_MARGIN_MAX);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3364      	adds	r3, #100	; 0x64
 8001952:	4960      	ldr	r1, [pc, #384]	; (8001ad4 <ReadInputs+0x5c4>)
 8001954:	9101      	str	r1, [sp, #4]
 8001956:	495f      	ldr	r1, [pc, #380]	; (8001ad4 <ReadInputs+0x5c4>)
 8001958:	9100      	str	r1, [sp, #0]
 800195a:	495f      	ldr	r1, [pc, #380]	; (8001ad8 <ReadInputs+0x5c8>)
 800195c:	2002      	movs	r0, #2
 800195e:	f001 fb6b 	bl	8003038 <My2DMapInterpolate>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <ReadInputs+0x48c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <ReadInputs+0x48c>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f993 205c 	ldrsb.w	r2, [r3, #92]	; 0x5c
 8001986:	4b55      	ldr	r3, [pc, #340]	; (8001adc <ReadInputs+0x5cc>)
 8001988:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800199a:	e02d      	b.n	80019f8 <ReadInputs+0x4e8>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11d      	bne.n	80019e2 <ReadInputs+0x4d2>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd32 	bl	8000414 <__aeabi_f2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f005 f99a 	bl	8006cf0 <round>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7fe fd7e 	bl	80004c4 <__aeabi_d2iz>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b25a      	sxtb	r2, r3
 80019cc:	4b43      	ldr	r3, [pc, #268]	; (8001adc <ReadInputs+0x5cc>)
 80019ce:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80019e0:	e00a      	b.n	80019f8 <ReadInputs+0x4e8>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		inputs->NrClutchPaddleSource = NoSource;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2202      	movs	r2, #2
 80019ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 80019f2:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <ReadInputs+0x5cc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <ReadInputs+0x506>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <ReadInputs+0x500>
 8001a0c:	2264      	movs	r2, #100	; 0x64
 8001a0e:	e000      	b.n	8001a12 <ReadInputs+0x502>
 8001a10:	2200      	movs	r2, #0
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <ReadInputs+0x5d0>)
 8001a14:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <ReadInputs+0x5d0>)
 8001a18:	f993 2000 	ldrsb.w	r2, [r3]
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <ReadInputs+0x5cc>)
 8001a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	bfb8      	it	lt
 8001a26:	4613      	movlt	r3, r2
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	2b63      	cmp	r3, #99	; 0x63
 8001a2c:	dc0d      	bgt.n	8001a4a <ReadInputs+0x53a>
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <ReadInputs+0x5d0>)
 8001a30:	f993 2000 	ldrsb.w	r2, [r3]
 8001a34:	4b29      	ldr	r3, [pc, #164]	; (8001adc <ReadInputs+0x5cc>)
 8001a36:	f993 3000 	ldrsb.w	r3, [r3]
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	bfb8      	it	lt
 8001a3e:	4613      	movlt	r3, r2
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a46:	b25a      	sxtb	r2, r3
 8001a48:	e000      	b.n	8001a4c <ReadInputs+0x53c>
 8001a4a:	2264      	movs	r2, #100	; 0x64
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Conditioning

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <ReadInputs+0x5d4>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8001a5e:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <ReadInputs+0x5d8>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <ReadInputs+0x5dc>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <ReadInputs+0x5e0>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Analog Input
	// TODO: Debouncing and STUCK detection ???
	inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fe19 	bl	80006c8 <__aeabi_i2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4916      	ldr	r1, [pc, #88]	; (8001af4 <ReadInputs+0x5e4>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f81a 	bl	8000ad4 <__aeabi_fcmpge>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d028      	beq.n	8001af8 <ReadInputs+0x5e8>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001ab6:	e078      	b.n	8001baa <ReadInputs+0x69a>
 8001ab8:	2000004c 	.word	0x2000004c
 8001abc:	20000060 	.word	0x20000060
 8001ac0:	3e4ccccd 	.word	0x3e4ccccd
 8001ac4:	08006e58 	.word	0x08006e58
 8001ac8:	20000078 	.word	0x20000078
 8001acc:	20000074 	.word	0x20000074
 8001ad0:	20000073 	.word	0x20000073
 8001ad4:	3dcccccd 	.word	0x3dcccccd
 8001ad8:	08006e88 	.word	0x08006e88
 8001adc:	20000085 	.word	0x20000085
 8001ae0:	20000086 	.word	0x20000086
 8001ae4:	2000006a 	.word	0x2000006a
 8001ae8:	2000006c 	.word	0x2000006c
 8001aec:	20000069 	.word	0x20000069
 8001af0:	2000006b 	.word	0x2000006b
 8001af4:	40200000 	.word	0x40200000
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afc:	4972      	ldr	r1, [pc, #456]	; (8001cc8 <ReadInputs+0x7b8>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe ffde 	bl	8000ac0 <__aeabi_fcmple>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d011      	beq.n	8001b2e <ReadInputs+0x61e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	496f      	ldr	r1, [pc, #444]	; (8001ccc <ReadInputs+0x7bc>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe ffdf 	bl	8000ad4 <__aeabi_fcmpge>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <ReadInputs+0x61e>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b2c:	e03d      	b.n	8001baa <ReadInputs+0x69a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	4967      	ldr	r1, [pc, #412]	; (8001cd0 <ReadInputs+0x7c0>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe ffc3 	bl	8000ac0 <__aeabi_fcmple>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d011      	beq.n	8001b64 <ReadInputs+0x654>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b44:	4963      	ldr	r1, [pc, #396]	; (8001cd4 <ReadInputs+0x7c4>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe ffc4 	bl	8000ad4 <__aeabi_fcmpge>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <ReadInputs+0x654>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b62:	e022      	b.n	8001baa <ReadInputs+0x69a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b68:	495b      	ldr	r1, [pc, #364]	; (8001cd8 <ReadInputs+0x7c8>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe ffa8 	bl	8000ac0 <__aeabi_fcmple>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d011      	beq.n	8001b9a <ReadInputs+0x68a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7a:	4958      	ldr	r1, [pc, #352]	; (8001cdc <ReadInputs+0x7cc>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe ffa9 	bl	8000ad4 <__aeabi_fcmpge>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <ReadInputs+0x68a>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b98:	e007      	b.n	8001baa <ReadInputs+0x69a>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <ReadInputs+0x6cc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <ReadInputs+0x6cc>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = CAN;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001bda:	e025      	b.n	8001c28 <ReadInputs+0x718>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d114      	bne.n	8001c10 <ReadInputs+0x700>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = Analog;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001c0e:	e00b      	b.n	8001c28 <ReadInputs+0x718>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = NoSource;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d013      	beq.n	8001c5a <ReadInputs+0x74a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10e      	bne.n	8001c5a <ReadInputs+0x74a>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = CAN;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001c58:	e025      	b.n	8001ca6 <ReadInputs+0x796>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d114      	bne.n	8001c8e <ReadInputs+0x77e>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	bf0c      	ite	eq
 8001c6e:	2301      	moveq	r3, #1
 8001c70:	2300      	movne	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = Analog;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001c8c:	e00b      	b.n	8001ca6 <ReadInputs+0x796>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = NoSource;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	// ---------------------------------------------------------------------------------------------------
	// Launch

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d017      	beq.n	8001ce0 <ReadInputs+0x7d0>
		inputs->BLaunchRequest = inputs->BSWButtonD;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		inputs->BLaunchRequestInError = 0;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001cc4:	e014      	b.n	8001cf0 <ReadInputs+0x7e0>
 8001cc6:	bf00      	nop
 8001cc8:	3f8ccccd 	.word	0x3f8ccccd
 8001ccc:	3f733333 	.word	0x3f733333
 8001cd0:	3ff33333 	.word	0x3ff33333
 8001cd4:	3fd9999a 	.word	0x3fd9999a
 8001cd8:	3f666666 	.word	0x3f666666
 8001cdc:	3f4ccccd 	.word	0x3f4ccccd
	}
	else {
		inputs->BLaunchRequestInError = 1;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	// ---------------------------------------------------------------------------------------------------
	// Toggle Switches

	// Toggle 1
	if(inputs->BSWButtonA && tToggleSwitch01 < tInputsTimmer) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d014      	beq.n	8001d24 <ReadInputs+0x814>
 8001cfa:	4b8f      	ldr	r3, [pc, #572]	; (8001f38 <ReadInputs+0xa28>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <ReadInputs+0xa2c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d20e      	bcs.n	8001d24 <ReadInputs+0x814>
		inputs->NToggleSwitch01State ^= 1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		tToggleSwitch01 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <ReadInputs+0xa2c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d20:	4a85      	ldr	r2, [pc, #532]	; (8001f38 <ReadInputs+0xa28>)
 8001d22:	6013      	str	r3, [r2, #0]
	}

	// Toggle 2
	if(inputs->BSWButtonB && tToggleSwitch02 < tInputsTimmer) {
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d014      	beq.n	8001d58 <ReadInputs+0x848>
 8001d2e:	4b84      	ldr	r3, [pc, #528]	; (8001f40 <ReadInputs+0xa30>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <ReadInputs+0xa2c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20e      	bcs.n	8001d58 <ReadInputs+0x848>
		inputs->NToggleSwitch02State ^= 1;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001d40:	f083 0301 	eor.w	r3, r3, #1
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		tToggleSwitch02 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d4c:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <ReadInputs+0xa2c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d54:	4a7a      	ldr	r2, [pc, #488]	; (8001f40 <ReadInputs+0xa30>)
 8001d56:	6013      	str	r3, [r2, #0]
	}

	// Toggle 3
	if(inputs->BSWButtonC && tToggleSwitch03 < tInputsTimmer) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <ReadInputs+0x87c>
 8001d62:	4b78      	ldr	r3, [pc, #480]	; (8001f44 <ReadInputs+0xa34>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b75      	ldr	r3, [pc, #468]	; (8001f3c <ReadInputs+0xa2c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d20e      	bcs.n	8001d8c <ReadInputs+0x87c>
		inputs->NToggleSwitch03State ^= 1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001d74:	f083 0301 	eor.w	r3, r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		tToggleSwitch03 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d80:	4b6e      	ldr	r3, [pc, #440]	; (8001f3c <ReadInputs+0xa2c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d88:	4a6e      	ldr	r2, [pc, #440]	; (8001f44 <ReadInputs+0xa34>)
 8001d8a:	6013      	str	r3, [r2, #0]
	}

	// Toggle 4
	if(inputs->BSWButtonE && tToggleSwitch04 < tInputsTimmer) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d014      	beq.n	8001dc0 <ReadInputs+0x8b0>
 8001d96:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <ReadInputs+0xa38>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <ReadInputs+0xa2c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d20e      	bcs.n	8001dc0 <ReadInputs+0x8b0>
		inputs->NToggleSwitch04State ^= 1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001da8:	f083 0301 	eor.w	r3, r3, #1
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		tToggleSwitch04 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001db4:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <ReadInputs+0xa2c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001dbc:	4a62      	ldr	r2, [pc, #392]	; (8001f48 <ReadInputs+0xa38>)
 8001dbe:	6013      	str	r3, [r2, #0]


	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSHIFTERAnalog01 / VSUPPLY_DIVIDER_GAIN;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4961      	ldr	r1, [pc, #388]	; (8001f4c <ReadInputs+0xa3c>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fd86 	bl	80008d8 <__aeabi_fdiv>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// ---------------------------------------------------------------------------------------------------
	// nEngine Conditioning

	// CAN Input

	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 8001dd6:	4b5e      	ldr	r3, [pc, #376]	; (8001f50 <ReadInputs+0xa40>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001dde:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <ReadInputs+0xa2c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d20c      	bcs.n	8001e00 <ReadInputs+0x8f0>
		inputs->BnEngineInError = 1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		inputs->nEngine = 0; 		// we force to zero if in error
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001dfe:	e007      	b.n	8001e10 <ReadInputs+0x900>
	}
	else {
		inputs->BnEngineInError = 0;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8001e10:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <ReadInputs+0xa44>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <ReadInputs+0x920>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8001e30:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <ReadInputs+0xa48>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 8001e3c:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <ReadInputs+0xa4c>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d112      	bne.n	8001e7a <ReadInputs+0x96a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00d      	beq.n	8001e7a <ReadInputs+0x96a>
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <ReadInputs+0xa50>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <ReadInputs+0x96a>
		BUpShiftRequested = 1;
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <ReadInputs+0xa50>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e016      	b.n	8001ea8 <ReadInputs+0x998>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <ReadInputs+0x998>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <ReadInputs+0x998>
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <ReadInputs+0xa50>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <ReadInputs+0x998>
		BUpShiftRequested = 0;
 8001e96:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <ReadInputs+0xa50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f043 0202 	orr.w	r2, r3, #2
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d112      	bne.n	8001ed8 <ReadInputs+0x9c8>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00d      	beq.n	8001ed8 <ReadInputs+0x9c8>
 8001ebc:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <ReadInputs+0xa54>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <ReadInputs+0x9c8>
		BDnShiftRequested = 1;
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <ReadInputs+0xa54>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f043 0204 	orr.w	r2, r3, #4
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e016      	b.n	8001f06 <ReadInputs+0x9f6>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d111      	bne.n	8001f06 <ReadInputs+0x9f6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10c      	bne.n	8001f06 <ReadInputs+0x9f6>
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <ReadInputs+0xa54>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <ReadInputs+0x9f6>
		BDnShiftRequested = 0;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <ReadInputs+0xa54>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f043 0208 	orr.w	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d12d      	bne.n	8001f6c <ReadInputs+0xa5c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d028      	beq.n	8001f6c <ReadInputs+0xa5c>
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <ReadInputs+0xa58>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d124      	bne.n	8001f6c <ReadInputs+0xa5c>
		BLaunchRequested = 1;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <ReadInputs+0xa58>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f043 0210 	orr.w	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e031      	b.n	8001f9a <ReadInputs+0xa8a>
 8001f36:	bf00      	nop
 8001f38:	20000050 	.word	0x20000050
 8001f3c:	2000004c 	.word	0x2000004c
 8001f40:	20000054 	.word	0x20000054
 8001f44:	20000058 	.word	0x20000058
 8001f48:	2000005c 	.word	0x2000005c
 8001f4c:	3e617c1c 	.word	0x3e617c1c
 8001f50:	2000007c 	.word	0x2000007c
 8001f54:	20000076 	.word	0x20000076
 8001f58:	20000080 	.word	0x20000080
 8001f5c:	20000082 	.word	0x20000082
 8001f60:	20000064 	.word	0x20000064
 8001f64:	20000065 	.word	0x20000065
 8001f68:	20000066 	.word	0x20000066
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d111      	bne.n	8001f9a <ReadInputs+0xa8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10c      	bne.n	8001f9a <ReadInputs+0xa8a>
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <ReadInputs+0xb44>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <ReadInputs+0xa8a>
		BLaunchRequested = 0;
 8001f88:	4b32      	ldr	r3, [pc, #200]	; (8002054 <ReadInputs+0xb44>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f043 0220 	orr.w	r2, r3, #32
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d112      	bne.n	8001fca <ReadInputs+0xaba>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <ReadInputs+0xaba>
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <ReadInputs+0xb48>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <ReadInputs+0xaba>
		BDeclutchRequested = 1;
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <ReadInputs+0xb48>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e016      	b.n	8001ff8 <ReadInputs+0xae8>
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <ReadInputs+0xae8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10c      	bne.n	8001ff8 <ReadInputs+0xae8>
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <ReadInputs+0xb48>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <ReadInputs+0xae8>
		BDeclutchRequested = 0;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <ReadInputs+0xb48>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d124      	bne.n	800204c <ReadInputs+0xb3c>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8002008:	2b4f      	cmp	r3, #79	; 0x4f
 800200a:	dd0d      	ble.n	8002028 <ReadInputs+0xb18>
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <ReadInputs+0xb4c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <ReadInputs+0xb18>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <ReadInputs+0xb4c>)
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]



	// ---------------------------------------------------------------------------------------------------

}
 8002026:	e011      	b.n	800204c <ReadInputs+0xb3c>
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800202e:	2b00      	cmp	r3, #0
 8002030:	dc0c      	bgt.n	800204c <ReadInputs+0xb3c>
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <ReadInputs+0xb4c>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <ReadInputs+0xb3c>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <ReadInputs+0xb4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000066 	.word	0x20000066
 8002058:	20000067 	.word	0x20000067
 800205c:	20000068 	.word	0x20000068

08002060 <InitInputs>:

void InitInputs(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <InitInputs+0x1c>)
 8002066:	f001 fd01 	bl	8003a6c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 800206a:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 800206e:	4904      	ldr	r1, [pc, #16]	; (8002080 <InitInputs+0x20>)
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <InitInputs+0x1c>)
 8002072:	f001 fa11 	bl	8003498 <HAL_ADC_Start_DMA>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000088 	.word	0x20000088
 8002080:	20000244 	.word	0x20000244

08002084 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <CheckFaults+0x14>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <CheckFaults+0x16>
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	f107 0214 	add.w	r2, r7, #20
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f001 ff8d 	bl	8003fd8 <HAL_CAN_GetRxMessage>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <CAN_RX+0x120>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <CAN_RX+0x120>)
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	e074      	b.n	80021be <CAN_RX+0x11a>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80020da:	d004      	beq.n	80020e6 <CAN_RX+0x42>
 80020dc:	f240 3211 	movw	r2, #785	; 0x311
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05c      	beq.n	800219e <CAN_RX+0xfa>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
		 break;

	 default:
		 break;
 80020e4:	e06b      	b.n	80021be <CAN_RX+0x11a>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 80020e6:	f001 f8d1 	bl	800328c <HAL_GetTick>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a36      	ldr	r2, [pc, #216]	; (80021c8 <CAN_RX+0x124>)
 80020ee:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 80020f0:	7b3b      	ldrb	r3, [r7, #12]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b34      	ldr	r3, [pc, #208]	; (80021cc <CAN_RX+0x128>)
 80020fa:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 80020fc:	7b3b      	ldrb	r3, [r7, #12]
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <CAN_RX+0x12c>)
 800210a:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 800210c:	7b3b      	ldrb	r3, [r7, #12]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	b2db      	uxtb	r3, r3
 8002112:	b25b      	sxtb	r3, r3
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	b25a      	sxtb	r2, r3
 800211a:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <CAN_RX+0x130>)
 800211c:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 800211e:	7b7b      	ldrb	r3, [r7, #13]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <CAN_RX+0x134>)
 8002128:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 800212a:	7b7b      	ldrb	r3, [r7, #13]
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <CAN_RX+0x138>)
 8002138:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 800213a:	7b7b      	ldrb	r3, [r7, #13]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	b2db      	uxtb	r3, r3
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <CAN_RX+0x13c>)
 8002148:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 800214a:	7b7b      	ldrb	r3, [r7, #13]
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <CAN_RX+0x140>)
 8002158:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 800215a:	7b7b      	ldrb	r3, [r7, #13]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <CAN_RX+0x144>)
 8002168:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 800216a:	7b7b      	ldrb	r3, [r7, #13]
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <CAN_RX+0x148>)
 8002178:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 800217a:	7b7b      	ldrb	r3, [r7, #13]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <CAN_RX+0x14c>)
 8002188:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	09db      	lsrs	r3, r3, #7
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <CAN_RX+0x150>)
 8002192:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	b25a      	sxtb	r2, r3
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <CAN_RX+0x154>)
 800219a:	701a      	strb	r2, [r3, #0]
		 break;
 800219c:	e00f      	b.n	80021be <CAN_RX+0x11a>
		 tCANECULastSeen = HAL_GetTick();
 800219e:	f001 f875 	bl	800328c <HAL_GetTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a15      	ldr	r2, [pc, #84]	; (80021fc <CAN_RX+0x158>)
 80021a6:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
 80021a8:	7b3b      	ldrb	r3, [r7, #12]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <CAN_RX+0x15c>)
 80021ba:	801a      	strh	r2, [r3, #0]
		 break;
 80021bc:	bf00      	nop
	 }
}
 80021be:	3730      	adds	r7, #48	; 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000082 	.word	0x20000082
 80021c8:	20000078 	.word	0x20000078
 80021cc:	2000006a 	.word	0x2000006a
 80021d0:	2000006c 	.word	0x2000006c
 80021d4:	20000074 	.word	0x20000074
 80021d8:	20000069 	.word	0x20000069
 80021dc:	2000006b 	.word	0x2000006b
 80021e0:	2000006d 	.word	0x2000006d
 80021e4:	2000006e 	.word	0x2000006e
 80021e8:	2000006f 	.word	0x2000006f
 80021ec:	20000070 	.word	0x20000070
 80021f0:	20000071 	.word	0x20000071
 80021f4:	20000072 	.word	0x20000072
 80021f8:	20000073 	.word	0x20000073
 80021fc:	2000007c 	.word	0x2000007c
 8002200:	20000076 	.word	0x20000076

08002204 <MyHalfBufferAverage>:
    }
    return 1; // If no match found, return error!
}


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4603      	mov	r3, r0
 8002214:	807b      	strh	r3, [r7, #2]
 8002216:	460b      	mov	r3, r1
 8002218:	707b      	strb	r3, [r7, #1]
 800221a:	4613      	mov	r3, r2
 800221c:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 8002222:	787b      	ldrb	r3, [r7, #1]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <MyHalfBufferAverage+0x28>
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	e000      	b.n	800222e <MyHalfBufferAverage+0x2a>
 800222c:	2300      	movs	r3, #0
 800222e:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	08db      	lsrs	r3, r3, #3
 8002234:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8002236:	2300      	movs	r3, #0
 8002238:	827b      	strh	r3, [r7, #18]
 800223a:	e010      	b.n	800225e <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 800223c:	8a7b      	ldrh	r3, [r7, #18]
 800223e:	00da      	lsls	r2, r3, #3
 8002240:	783b      	ldrb	r3, [r7, #0]
 8002242:	441a      	add	r2, r3
 8002244:	8a3b      	ldrh	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4413      	add	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8002258:	8a7b      	ldrh	r3, [r7, #18]
 800225a:	3301      	adds	r3, #1
 800225c:	827b      	strh	r3, [r7, #18]
 800225e:	8a7a      	ldrh	r2, [r7, #18]
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	429a      	cmp	r2, r3
 8002264:	d3ea      	bcc.n	800223c <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 8002266:	89fb      	ldrh	r3, [r7, #14]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	b29b      	uxth	r3, r3

}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8002286:	2100      	movs	r1, #0
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ff0b 	bl	80020a4 <CAN_RX>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 800229e:	2101      	movs	r1, #1
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff feff 	bl	80020a4 <CAN_RX>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_CAN_ErrorCallback+0x20>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3301      	adds	r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_CAN_ErrorCallback+0x20>)
 80022c4:	701a      	strb	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000080 	.word	0x20000080

080022d4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d107      	bne.n	80022f4 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f083 0301 	eor.w	r3, r3, #1
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80022f2:	701a      	strb	r2, [r3, #0]
	}
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000088 	.word	0x20000088
 8002304:	20000084 	.word	0x20000084

08002308 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800230c:	f3bf 8f4f 	dsb	sy
}
 8002310:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <__NVIC_SystemReset+0x24>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800231a:	4904      	ldr	r1, [pc, #16]	; (800232c <__NVIC_SystemReset+0x24>)
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <__NVIC_SystemReset+0x28>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002322:	f3bf 8f4f 	dsb	sy
}
 8002326:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <__NVIC_SystemReset+0x20>
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	05fa0004 	.word	0x05fa0004

08002334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002338:	f000 ff50 	bl	80031dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800233c:	f000 f83e 	bl	80023bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002340:	f000 fba4 	bl	8002a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8002344:	f000 fb84 	bl	8002a50 <MX_DMA_Init>
  MX_TIM3_Init();
 8002348:	f000 fb0a 	bl	8002960 <MX_TIM3_Init>
  MX_ADC1_Init();
 800234c:	f000 f892 	bl	8002474 <MX_ADC1_Init>
  MX_CAN_Init();
 8002350:	f000 f932 	bl	80025b8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002354:	f000 fb52 	bl	80029fc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002358:	f000 fab6 	bl	80028c8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800235c:	f000 fa14 	bl	8002788 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8002360:	4811      	ldr	r0, [pc, #68]	; (80023a8 <main+0x74>)
 8002362:	f003 fc57 	bl	8005c14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 8002366:	4811      	ldr	r0, [pc, #68]	; (80023ac <main+0x78>)
 8002368:	f003 fc0a 	bl	8005b80 <HAL_TIM_Base_Start>

  InitInputs();
 800236c:	f7ff fe78 	bl	8002060 <InitInputs>
  InitController(&Inputs,&Outputs);
 8002370:	490f      	ldr	r1, [pc, #60]	; (80023b0 <main+0x7c>)
 8002372:	4810      	ldr	r0, [pc, #64]	; (80023b4 <main+0x80>)
 8002374:	f7fe fbe2 	bl	8000b3c <InitController>
  InitOutputs();
 8002378:	f000 fbfe 	bl	8002b78 <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 800237c:	2032      	movs	r0, #50	; 0x32
 800237e:	f000 ff8f 	bl	80032a0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <main+0x84>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0fa      	beq.n	8002382 <main+0x4e>
		  BCycleTimerFlag = 0;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <main+0x84>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 8002392:	4808      	ldr	r0, [pc, #32]	; (80023b4 <main+0x80>)
 8002394:	f7ff f8bc 	bl	8001510 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 8002398:	4905      	ldr	r1, [pc, #20]	; (80023b0 <main+0x7c>)
 800239a:	4806      	ldr	r0, [pc, #24]	; (80023b4 <main+0x80>)
 800239c:	f7fe fbe8 	bl	8000b70 <Controller>
		  WriteOutputs(&Outputs);
 80023a0:	4803      	ldr	r0, [pc, #12]	; (80023b0 <main+0x7c>)
 80023a2:	f000 fbf7 	bl	8002b94 <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 80023a6:	e7ec      	b.n	8002382 <main+0x4e>
 80023a8:	200001b4 	.word	0x200001b4
 80023ac:	2000016c 	.word	0x2000016c
 80023b0:	20002510 	.word	0x20002510
 80023b4:	20002488 	.word	0x20002488
 80023b8:	20002484 	.word	0x20002484

080023bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b094      	sub	sp, #80	; 0x50
 80023c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c6:	2228      	movs	r2, #40	; 0x28
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 fc64 	bl	8006c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023fa:	2301      	movs	r3, #1
 80023fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fe:	2302      	movs	r3, #2
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002408:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800240c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800240e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002412:	4618      	mov	r0, r3
 8002414:	f002 fde8 	bl	8004fe8 <HAL_RCC_OscConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800241e:	f000 fba1 	bl	8002b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002422:	230f      	movs	r3, #15
 8002424:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800242e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002432:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2102      	movs	r1, #2
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f854 	bl	80054ec <HAL_RCC_ClockConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800244a:	f000 fb8b 	bl	8002b64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800244e:	2302      	movs	r3, #2
 8002450:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002452:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002456:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4618      	mov	r0, r3
 800245c:	f003 f9d4 	bl	8005808 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002466:	f000 fb7d 	bl	8002b64 <Error_Handler>
  }
}
 800246a:	bf00      	nop
 800246c:	3750      	adds	r7, #80	; 0x50
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002484:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <MX_ADC1_Init+0x13c>)
 8002486:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <MX_ADC1_Init+0x140>)
 8002488:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <MX_ADC1_Init+0x13c>)
 800248c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002490:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <MX_ADC1_Init+0x13c>)
 8002494:	2201      	movs	r2, #1
 8002496:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002498:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <MX_ADC1_Init+0x13c>)
 800249a:	2200      	movs	r2, #0
 800249c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800249e:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <MX_ADC1_Init+0x13c>)
 80024a0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024a6:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <MX_ADC1_Init+0x13c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <MX_ADC1_Init+0x13c>)
 80024ae:	2208      	movs	r2, #8
 80024b0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024b2:	483f      	ldr	r0, [pc, #252]	; (80025b0 <MX_ADC1_Init+0x13c>)
 80024b4:	f000 ff18 	bl	80032e8 <HAL_ADC_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80024be:	f000 fb51 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80024ca:	2303      	movs	r3, #3
 80024cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4837      	ldr	r0, [pc, #220]	; (80025b0 <MX_ADC1_Init+0x13c>)
 80024d4:	f001 f8d0 	bl	8003678 <HAL_ADC_ConfigChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80024de:	f000 fb41 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024e6:	2302      	movs	r3, #2
 80024e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4830      	ldr	r0, [pc, #192]	; (80025b0 <MX_ADC1_Init+0x13c>)
 80024f0:	f001 f8c2 	bl	8003678 <HAL_ADC_ConfigChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80024fa:	f000 fb33 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024fe:	2302      	movs	r3, #2
 8002500:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002502:	2303      	movs	r3, #3
 8002504:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4829      	ldr	r0, [pc, #164]	; (80025b0 <MX_ADC1_Init+0x13c>)
 800250c:	f001 f8b4 	bl	8003678 <HAL_ADC_ConfigChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002516:	f000 fb25 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800251a:	2303      	movs	r3, #3
 800251c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800251e:	2304      	movs	r3, #4
 8002520:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4822      	ldr	r0, [pc, #136]	; (80025b0 <MX_ADC1_Init+0x13c>)
 8002528:	f001 f8a6 	bl	8003678 <HAL_ADC_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002532:	f000 fb17 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002536:	2304      	movs	r3, #4
 8002538:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800253a:	2305      	movs	r3, #5
 800253c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	481b      	ldr	r0, [pc, #108]	; (80025b0 <MX_ADC1_Init+0x13c>)
 8002544:	f001 f898 	bl	8003678 <HAL_ADC_ConfigChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800254e:	f000 fb09 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002552:	2305      	movs	r3, #5
 8002554:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002556:	2306      	movs	r3, #6
 8002558:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <MX_ADC1_Init+0x13c>)
 8002560:	f001 f88a 	bl	8003678 <HAL_ADC_ConfigChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800256a:	f000 fafb 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800256e:	2306      	movs	r3, #6
 8002570:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002572:	2307      	movs	r3, #7
 8002574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4619      	mov	r1, r3
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <MX_ADC1_Init+0x13c>)
 800257c:	f001 f87c 	bl	8003678 <HAL_ADC_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002586:	f000 faed 	bl	8002b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800258a:	2307      	movs	r3, #7
 800258c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800258e:	2308      	movs	r3, #8
 8002590:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <MX_ADC1_Init+0x13c>)
 8002598:	f001 f86e 	bl	8003678 <HAL_ADC_ConfigChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80025a2:	f000 fadf 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000088 	.word	0x20000088
 80025b4:	40012400 	.word	0x40012400

080025b8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0a8      	sub	sp, #160	; 0xa0
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80025be:	4b70      	ldr	r3, [pc, #448]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025c0:	4a70      	ldr	r2, [pc, #448]	; (8002784 <MX_CAN_Init+0x1cc>)
 80025c2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025c6:	2204      	movs	r2, #4
 80025c8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025d0:	4b6b      	ldr	r3, [pc, #428]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025d8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80025dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025de:	4b68      	ldr	r3, [pc, #416]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025e4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80025e6:	4b66      	ldr	r3, [pc, #408]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80025ec:	4b64      	ldr	r3, [pc, #400]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <MX_CAN_Init+0x1c8>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80025fe:	4b60      	ldr	r3, [pc, #384]	; (8002780 <MX_CAN_Init+0x1c8>)
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <MX_CAN_Init+0x1c8>)
 8002606:	2200      	movs	r2, #0
 8002608:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800260a:	485d      	ldr	r0, [pc, #372]	; (8002780 <MX_CAN_Init+0x1c8>)
 800260c:	f001 fadc 	bl	8003bc8 <HAL_CAN_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002616:	f000 faa5 	bl	8002b64 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_RX_ID << 5 ;
 800261a:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800261e:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8002624:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 800264a:	2301      	movs	r3, #1
 800264c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8002650:	2301      	movs	r3, #1
 8002652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8002656:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800265a:	4619      	mov	r1, r3
 800265c:	4848      	ldr	r0, [pc, #288]	; (8002780 <MX_CAN_Init+0x1c8>)
 800265e:	f001 fbae 	bl	8003dbe <HAL_CAN_ConfigFilter>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8002668:	f000 fa7c 	bl	8002b64 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_RX_ID << 5 ;
 800266c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002670:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8002676:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800267a:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002680:	2301      	movs	r3, #1
 8002682:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8002684:	2301      	movs	r3, #1
 8002686:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 800268c:	2300      	movs	r3, #0
 800268e:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 8002690:	2301      	movs	r3, #1
 8002692:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8002694:	2301      	movs	r3, #1
 8002696:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8002698:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800269c:	4619      	mov	r1, r3
 800269e:	4838      	ldr	r0, [pc, #224]	; (8002780 <MX_CAN_Init+0x1c8>)
 80026a0:	f001 fb8d 	bl	8003dbe <HAL_CAN_ConfigFilter>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_CAN_Init+0xf6>
 	  Error_Handler();
 80026aa:	f000 fa5b 	bl	8002b64 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 80026ae:	f246 2320 	movw	r3, #25120	; 0x6220
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 80026b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 80026c6:	2302      	movs	r3, #2
 80026c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80026d2:	2301      	movs	r3, #1
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 80026da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026de:	4619      	mov	r1, r3
 80026e0:	4827      	ldr	r0, [pc, #156]	; (8002780 <MX_CAN_Init+0x1c8>)
 80026e2:	f001 fb6c 	bl	8003dbe <HAL_CAN_ConfigFilter>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_CAN_Init+0x138>
 	  Error_Handler();
 80026ec:	f000 fa3a 	bl	8002b64 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 80026f0:	f246 2320 	movw	r3, #25120	; 0x6220
 80026f4:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 80026fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80026fe:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002704:	2301      	movs	r3, #1
 8002706:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8002708:	2303      	movs	r3, #3
 800270a:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8002714:	2301      	movs	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8002718:	2301      	movs	r3, #1
 800271a:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 800271c:	463b      	mov	r3, r7
 800271e:	4619      	mov	r1, r3
 8002720:	4817      	ldr	r0, [pc, #92]	; (8002780 <MX_CAN_Init+0x1c8>)
 8002722:	f001 fb4c 	bl	8003dbe <HAL_CAN_ConfigFilter>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_CAN_Init+0x178>
 	  Error_Handler();
 800272c:	f000 fa1a 	bl	8002b64 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002730:	2102      	movs	r1, #2
 8002732:	4813      	ldr	r0, [pc, #76]	; (8002780 <MX_CAN_Init+0x1c8>)
 8002734:	f001 fd71 	bl	800421a <HAL_CAN_ActivateNotification>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_CAN_Init+0x18a>
	   Error_Handler();
 800273e:	f000 fa11 	bl	8002b64 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8002742:	2110      	movs	r1, #16
 8002744:	480e      	ldr	r0, [pc, #56]	; (8002780 <MX_CAN_Init+0x1c8>)
 8002746:	f001 fd68 	bl	800421a <HAL_CAN_ActivateNotification>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8002750:	f000 fa08 	bl	8002b64 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8002754:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <MX_CAN_Init+0x1c8>)
 800275a:	f001 fd5e 	bl	800421a <HAL_CAN_ActivateNotification>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8002764:	f000 f9fe 	bl	8002b64 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_CAN_Init+0x1c8>)
 800276a:	f001 fbf1 	bl	8003f50 <HAL_CAN_Start>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8002774:	f000 f9f6 	bl	8002b64 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	37a0      	adds	r7, #160	; 0xa0
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200000fc 	.word	0x200000fc
 8002784:	40006400 	.word	0x40006400

08002788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b096      	sub	sp, #88	; 0x58
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	615a      	str	r2, [r3, #20]
 80027b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2220      	movs	r2, #32
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fa69 	bl	8006c98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027c8:	4a3e      	ldr	r2, [pc, #248]	; (80028c4 <MX_TIM1_Init+0x13c>)
 80027ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80027cc:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027ce:	2247      	movs	r2, #71	; 0x47
 80027d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 80027d8:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027da:	f240 52db 	movw	r2, #1499	; 0x5db
 80027de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ec:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027f2:	4833      	ldr	r0, [pc, #204]	; (80028c0 <MX_TIM1_Init+0x138>)
 80027f4:	f003 f974 	bl	8005ae0 <HAL_TIM_Base_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80027fe:	f000 f9b1 	bl	8002b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800280c:	4619      	mov	r1, r3
 800280e:	482c      	ldr	r0, [pc, #176]	; (80028c0 <MX_TIM1_Init+0x138>)
 8002810:	f003 fc74 	bl	80060fc <HAL_TIM_ConfigClockSource>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800281a:	f000 f9a3 	bl	8002b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800281e:	4828      	ldr	r0, [pc, #160]	; (80028c0 <MX_TIM1_Init+0x138>)
 8002820:	f003 fa4a 	bl	8005cb8 <HAL_TIM_PWM_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800282a:	f000 f99b 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800283a:	4619      	mov	r1, r3
 800283c:	4820      	ldr	r0, [pc, #128]	; (80028c0 <MX_TIM1_Init+0x138>)
 800283e:	f004 f867 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002848:	f000 f98c 	bl	8002b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800284c:	2360      	movs	r3, #96	; 0x60
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002858:	2300      	movs	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800285c:	2304      	movs	r3, #4
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002860:	2300      	movs	r3, #0
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286c:	2204      	movs	r2, #4
 800286e:	4619      	mov	r1, r3
 8002870:	4813      	ldr	r0, [pc, #76]	; (80028c0 <MX_TIM1_Init+0x138>)
 8002872:	f003 fb81 	bl	8005f78 <HAL_TIM_PWM_ConfigChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800287c:	f000 f972 	bl	8002b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002898:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <MX_TIM1_Init+0x138>)
 80028a4:	f004 f892 	bl	80069cc <HAL_TIMEx_ConfigBreakDeadTime>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80028ae:	f000 f959 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <MX_TIM1_Init+0x138>)
 80028b4:	f000 faf4 	bl	8002ea0 <HAL_TIM_MspPostInit>

}
 80028b8:	bf00      	nop
 80028ba:	3758      	adds	r7, #88	; 0x58
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000124 	.word	0x20000124
 80028c4:	40012c00 	.word	0x40012c00

080028c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028dc:	463b      	mov	r3, r7
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_TIM2_Init+0x94>)
 80028e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_TIM2_Init+0x94>)
 80028ee:	2247      	movs	r2, #71	; 0x47
 80028f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_TIM2_Init+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_TIM2_Init+0x94>)
 80028fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_TIM2_Init+0x94>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <MX_TIM2_Init+0x94>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800290c:	4813      	ldr	r0, [pc, #76]	; (800295c <MX_TIM2_Init+0x94>)
 800290e:	f003 f8e7 	bl	8005ae0 <HAL_TIM_Base_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002918:	f000 f924 	bl	8002b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	4619      	mov	r1, r3
 8002928:	480c      	ldr	r0, [pc, #48]	; (800295c <MX_TIM2_Init+0x94>)
 800292a:	f003 fbe7 	bl	80060fc <HAL_TIM_ConfigClockSource>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002934:	f000 f916 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002940:	463b      	mov	r3, r7
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_TIM2_Init+0x94>)
 8002946:	f003 ffe3 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002950:	f000 f908 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	2000016c 	.word	0x2000016c

08002960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	463b      	mov	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <MX_TIM3_Init+0x94>)
 800297e:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <MX_TIM3_Init+0x98>)
 8002980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002984:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002988:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_TIM3_Init+0x94>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002992:	2263      	movs	r2, #99	; 0x63
 8002994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <MX_TIM3_Init+0x94>)
 800299e:	2200      	movs	r2, #0
 80029a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029a2:	4814      	ldr	r0, [pc, #80]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029a4:	f003 f89c 	bl	8005ae0 <HAL_TIM_Base_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80029ae:	f000 f8d9 	bl	8002b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029b8:	f107 0308 	add.w	r3, r7, #8
 80029bc:	4619      	mov	r1, r3
 80029be:	480d      	ldr	r0, [pc, #52]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029c0:	f003 fb9c 	bl	80060fc <HAL_TIM_ConfigClockSource>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80029ca:	f000 f8cb 	bl	8002b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d6:	463b      	mov	r3, r7
 80029d8:	4619      	mov	r1, r3
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029dc:	f003 ff98 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80029e6:	f000 f8bd 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200001b4 	.word	0x200001b4
 80029f8:	40000400 	.word	0x40000400

080029fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <MX_USART1_UART_Init+0x50>)
 8002a04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_USART1_UART_Init+0x4c>)
 8002a34:	f004 f851 	bl	8006ada <HAL_UART_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a3e:	f000 f891 	bl	8002b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200001fc 	.word	0x200001fc
 8002a4c:	40013800 	.word	0x40013800

08002a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <MX_DMA_Init+0x38>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <MX_DMA_Init+0x38>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6153      	str	r3, [r2, #20]
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <MX_DMA_Init+0x38>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	200b      	movs	r0, #11
 8002a74:	f001 fedf 	bl	8004836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a78:	200b      	movs	r0, #11
 8002a7a:	f001 fef8 	bl	800486e <HAL_NVIC_EnableIRQ>

}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40021000 	.word	0x40021000

08002a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a92:	f107 0310 	add.w	r3, r7, #16
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa0:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a23      	ldr	r2, [pc, #140]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002aa6:	f043 0320 	orr.w	r3, r3, #32
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a1d      	ldr	r2, [pc, #116]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6193      	str	r3, [r2, #24]
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <MX_GPIO_Init+0xa8>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8002aee:	4812      	ldr	r0, [pc, #72]	; (8002b38 <MX_GPIO_Init+0xac>)
 8002af0:	f002 fa61 	bl	8004fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8002af4:	237b      	movs	r3, #123	; 0x7b
 8002af6:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	4619      	mov	r1, r3
 8002b06:	480c      	ldr	r0, [pc, #48]	; (8002b38 <MX_GPIO_Init+0xac>)
 8002b08:	f002 f8ba 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 8002b0c:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8002b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	4619      	mov	r1, r3
 8002b24:	4804      	ldr	r0, [pc, #16]	; (8002b38 <MX_GPIO_Init+0xac>)
 8002b26:	f002 f8ab 	bl	8004c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b2a:	bf00      	nop
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010c00 	.word	0x40010c00

08002b3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d102      	bne.n	8002b52 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
	}
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	200001b4 	.word	0x200001b4
 8002b60:	20002484 	.word	0x20002484

08002b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b68:	b672      	cpsid	i
}
 8002b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002b6c:	20c8      	movs	r0, #200	; 0xc8
 8002b6e:	f000 fb97 	bl	80032a0 <HAL_Delay>
	  NVIC_SystemReset();
 8002b72:	f7ff fbc9 	bl	8002308 <__NVIC_SystemReset>
	...

08002b78 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0

	// TODO: start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <InitOutputs+0x18>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002b84:	2104      	movs	r1, #4
 8002b86:	4802      	ldr	r0, [pc, #8]	; (8002b90 <InitOutputs+0x18>)
 8002b88:	f003 fe24 	bl	80067d4 <HAL_TIMEx_PWMN_Start>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000124 	.word	0x20000124

08002b94 <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

	// CLUTCH

	// Clamping to avoid out of bounds values
	xClutchTargetOut = CLAMP(output->xClutchTarget, xCLUTCH_ABSOLUTE_MIN, xCLUTCH_ABSOLUTE_MAX);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	89db      	ldrh	r3, [r3, #14]
 8002ba0:	f640 0233 	movw	r2, #2099	; 0x833
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d808      	bhi.n	8002bba <WriteOutputs+0x26>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	89db      	ldrh	r3, [r3, #14]
 8002bac:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002bb0:	bf38      	it	cc
 8002bb2:	f44f 7361 	movcc.w	r3, #900	; 0x384
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	e001      	b.n	8002bbe <WriteOutputs+0x2a>
 8002bba:	f640 0334 	movw	r3, #2100	; 0x834
 8002bbe:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <WriteOutputs+0x88>)
 8002bc0:	8013      	strh	r3, [r2, #0]
	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to

	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	xClutchTargetOut *= 2;
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <WriteOutputs+0x88>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <WriteOutputs+0x88>)
 8002bcc:	801a      	strh	r2, [r3, #0]

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
//	__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, xClutchTargetOut -1 );
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <WriteOutputs+0x88>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	1e5a      	subs	r2, r3, #1
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <WriteOutputs+0x8c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <WriteOutputs+0x88>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <WriteOutputs+0x8c>)
 8002be4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, xClutchTargetOut/2);
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <WriteOutputs+0x88>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <WriteOutputs+0x8c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting Ports
	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, output->BUpShiftPortState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7cdb      	ldrb	r3, [r3, #19]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bfe:	4809      	ldr	r0, [pc, #36]	; (8002c24 <WriteOutputs+0x90>)
 8002c00:	f002 f9d9 	bl	8004fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, output->BDnShiftPortState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7d1b      	ldrb	r3, [r3, #20]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c0e:	4805      	ldr	r0, [pc, #20]	; (8002c24 <WriteOutputs+0x90>)
 8002c10:	f002 f9d1 	bl	8004fb6 <HAL_GPIO_WritePin>


	// CAN
	// add the info of the shutDown (DriverKill) in the CAN for others to see
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20002540 	.word	0x20002540
 8002c20:	20000124 	.word	0x20000124
 8002c24:	40010c00 	.word	0x40010c00

08002c28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6193      	str	r3, [r2, #24]
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_MspInit+0x60>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_MspInit+0x60>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000

08002c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0310 	add.w	r3, r7, #16
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a29      	ldr	r2, [pc, #164]	; (8002d4c <HAL_ADC_MspInit+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d14a      	bne.n	8002d42 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cac:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_ADC_MspInit+0xc4>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_ADC_MspInit+0xc4>)
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_ADC_MspInit+0xc4>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_ADC_MspInit+0xc4>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <HAL_ADC_MspInit+0xc4>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_ADC_MspInit+0xc4>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cdc:	23ff      	movs	r3, #255	; 0xff
 8002cde:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	4619      	mov	r1, r3
 8002cea:	481a      	ldr	r0, [pc, #104]	; (8002d54 <HAL_ADC_MspInit+0xc8>)
 8002cec:	f001 ffc8 	bl	8004c80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <HAL_ADC_MspInit+0xd0>)
 8002cf4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d26:	480c      	ldr	r0, [pc, #48]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d28:	f001 fdbc 	bl	80048a4 <HAL_DMA_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002d32:	f7ff ff17 	bl	8002b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d3a:	621a      	str	r2, [r3, #32]
 8002d3c:	4a06      	ldr	r2, [pc, #24]	; (8002d58 <HAL_ADC_MspInit+0xcc>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d42:	bf00      	nop
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40012400 	.word	0x40012400
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010800 	.word	0x40010800
 8002d58:	200000b8 	.word	0x200000b8
 8002d5c:	40020008 	.word	0x40020008

08002d60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a20      	ldr	r2, [pc, #128]	; (8002dfc <HAL_CAN_MspInit+0x9c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d139      	bne.n	8002df4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d80:	4b1f      	ldr	r3, [pc, #124]	; (8002e00 <HAL_CAN_MspInit+0xa0>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_CAN_MspInit+0xa0>)
 8002d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	61d3      	str	r3, [r2, #28]
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_CAN_MspInit+0xa0>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_CAN_MspInit+0xa0>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_CAN_MspInit+0xa0>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <HAL_CAN_MspInit+0xa0>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002db4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480f      	ldr	r0, [pc, #60]	; (8002e04 <HAL_CAN_MspInit+0xa4>)
 8002dc6:	f001 ff5b 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4809      	ldr	r0, [pc, #36]	; (8002e04 <HAL_CAN_MspInit+0xa4>)
 8002de0:	f001 ff4e 	bl	8004c80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2014      	movs	r0, #20
 8002dea:	f001 fd24 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002dee:	2014      	movs	r0, #20
 8002df0:	f001 fd3d 	bl	800486e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002df4:	bf00      	nop
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40006400 	.word	0x40006400
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40010800 	.word	0x40010800

08002e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <HAL_TIM_Base_MspInit+0x8c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10c      	bne.n	8002e34 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4a1e      	ldr	r2, [pc, #120]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e24:	6193      	str	r3, [r2, #24]
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e32:	e02a      	b.n	8002e8a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d10c      	bne.n	8002e58 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	61d3      	str	r3, [r2, #28]
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
}
 8002e56:	e018      	b.n	8002e8a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <HAL_TIM_Base_MspInit+0x94>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d113      	bne.n	8002e8a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	61d3      	str	r3, [r2, #28]
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_TIM_Base_MspInit+0x90>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	201d      	movs	r0, #29
 8002e80:	f001 fcd9 	bl	8004836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e84:	201d      	movs	r0, #29
 8002e86:	f001 fcf2 	bl	800486e <HAL_NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40000400 	.word	0x40000400

08002ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0310 	add.w	r3, r7, #16
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIM_MspPostInit+0x5c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d118      	bne.n	8002ef2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_TIM_MspPostInit+0x60>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <HAL_TIM_MspPostInit+0x60>)
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_TIM_MspPostInit+0x60>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 8002ed8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 8002ee6:	f107 0310 	add.w	r3, r7, #16
 8002eea:	4619      	mov	r1, r3
 8002eec:	4805      	ldr	r0, [pc, #20]	; (8002f04 <HAL_TIM_MspPostInit+0x64>)
 8002eee:	f001 fec7 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ef2:	bf00      	nop
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010c00 	.word	0x40010c00

08002f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <HAL_UART_MspInit+0x8c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d131      	bne.n	8002f8c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_UART_MspInit+0x90>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_UART_MspInit+0x90>)
 8002f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_UART_MspInit+0x90>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_UART_MspInit+0x90>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <HAL_UART_MspInit+0x90>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	6193      	str	r3, [r2, #24]
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_UART_MspInit+0x90>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480b      	ldr	r0, [pc, #44]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f6e:	f001 fe87 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 0310 	add.w	r3, r7, #16
 8002f84:	4619      	mov	r1, r3
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <HAL_UART_MspInit+0x94>)
 8002f88:	f001 fe7a 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40013800 	.word	0x40013800
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40010800 	.word	0x40010800

08002fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <NMI_Handler+0x4>

08002fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <HardFault_Handler+0x4>

08002fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <MemManage_Handler+0x4>

08002fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb6:	e7fe      	b.n	8002fb6 <BusFault_Handler+0x4>

08002fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <UsageFault_Handler+0x4>

08002fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe6:	f000 f93f 	bl	8003268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <DMA1_Channel1_IRQHandler+0x10>)
 8002ff6:	f001 fd0f 	bl	8004a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200000b8 	.word	0x200000b8

08003004 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800300a:	f001 f92b 	bl	8004264 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200000fc 	.word	0x200000fc

08003018 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <TIM3_IRQHandler+0x10>)
 800301e:	f002 fea3 	bl	8005d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200001b4 	.word	0x200001b4

0800302c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <My2DMapInterpolate>:
#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	68fe      	ldr	r6, [r7, #12]
 8003048:	1e73      	subs	r3, r6, #1
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	4632      	mov	r2, r6
 800304e:	2300      	movs	r3, #0
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	016b      	lsls	r3, r5, #5
 800305e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003062:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fa76 	bl	800055c <__aeabi_fsub>
 8003070:	4603      	mov	r3, r0
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fd fd19 	bl	8000aac <__aeabi_fcmplt>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8003080:	4633      	mov	r3, r6
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	4413      	add	r3, r2
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
		return 1;
 800308e:	2301      	movs	r3, #1
 8003090:	e07a      	b.n	8003188 <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1e5a      	subs	r2, r3, #1
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fa5e 	bl	8000560 <__addsf3>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fd fd1d 	bl	8000ae8 <__aeabi_fcmpgt>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 80030b4:	4633      	mov	r3, r6
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	4413      	add	r3, r2
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	3a01      	subs	r2, #1
 80030c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	601a      	str	r2, [r3, #0]
		return 1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e05d      	b.n	8003188 <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e00e      	b.n	80030f0 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fce4 	bl	8000aac <__aeabi_fcmplt>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d108      	bne.n	80030fc <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	dbeb      	blt.n	80030d2 <My2DMapInterpolate+0x9a>
 80030fa:	e000      	b.n	80030fe <My2DMapInterpolate+0xc6>
			break;
 80030fc:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	4619      	mov	r1, r3
 8003112:	f7fd fa23 	bl	800055c <__aeabi_fsub>
 8003116:	4603      	mov	r3, r0
 8003118:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 800311a:	4633      	mov	r3, r6
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	3201      	adds	r2, #1
 8003126:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800312a:	4633      	mov	r3, r6
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4413      	add	r3, r2
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	4619      	mov	r1, r3
 800313a:	f7fd fa0f 	bl	800055c <__aeabi_fsub>
 800313e:	4603      	mov	r3, r0
 8003140:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 8003142:	4633      	mov	r3, r6
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd f9fe 	bl	800055c <__aeabi_fsub>
 8003160:	4603      	mov	r3, r0
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fb03 	bl	8000770 <__aeabi_fmul>
 800316a:	4603      	mov	r3, r0
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fbb2 	bl	80008d8 <__aeabi_fdiv>
 8003174:	4603      	mov	r3, r0
 8003176:	4619      	mov	r1, r3
 8003178:	4620      	mov	r0, r4
 800317a:	f7fd f9f1 	bl	8000560 <__addsf3>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	601a      	str	r2, [r3, #0]
	return 0;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3724      	adds	r7, #36	; 0x24
 800318c:	46bd      	mov	sp, r7
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003190 <Reset_Handler>:
 8003190:	f7ff ff4c 	bl	800302c <SystemInit>
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <LoopFillZerobss+0xe>)
 8003196:	490c      	ldr	r1, [pc, #48]	; (80031c8 <LoopFillZerobss+0x12>)
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <LoopFillZerobss+0x16>)
 800319a:	2300      	movs	r3, #0
 800319c:	e002      	b.n	80031a4 <LoopCopyDataInit>

0800319e <CopyDataInit>:
 800319e:	58d4      	ldr	r4, [r2, r3]
 80031a0:	50c4      	str	r4, [r0, r3]
 80031a2:	3304      	adds	r3, #4

080031a4 <LoopCopyDataInit>:
 80031a4:	18c4      	adds	r4, r0, r3
 80031a6:	428c      	cmp	r4, r1
 80031a8:	d3f9      	bcc.n	800319e <CopyDataInit>
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <LoopFillZerobss+0x1a>)
 80031ac:	4c09      	ldr	r4, [pc, #36]	; (80031d4 <LoopFillZerobss+0x1e>)
 80031ae:	2300      	movs	r3, #0
 80031b0:	e001      	b.n	80031b6 <LoopFillZerobss>

080031b2 <FillZerobss>:
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	3204      	adds	r2, #4

080031b6 <LoopFillZerobss>:
 80031b6:	42a2      	cmp	r2, r4
 80031b8:	d3fb      	bcc.n	80031b2 <FillZerobss>
 80031ba:	f003 fd75 	bl	8006ca8 <__libc_init_array>
 80031be:	f7ff f8b9 	bl	8002334 <main>
 80031c2:	4770      	bx	lr
 80031c4:	20000000 	.word	0x20000000
 80031c8:	2000000c 	.word	0x2000000c
 80031cc:	08006ee0 	.word	0x08006ee0
 80031d0:	2000000c 	.word	0x2000000c
 80031d4:	20002548 	.word	0x20002548

080031d8 <ADC1_2_IRQHandler>:
 80031d8:	e7fe      	b.n	80031d8 <ADC1_2_IRQHandler>
	...

080031dc <HAL_Init>:
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_Init+0x28>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a07      	ldr	r2, [pc, #28]	; (8003204 <HAL_Init+0x28>)
 80031e6:	f043 0310 	orr.w	r3, r3, #16
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	2003      	movs	r0, #3
 80031ee:	f001 fb17 	bl	8004820 <HAL_NVIC_SetPriorityGrouping>
 80031f2:	200f      	movs	r0, #15
 80031f4:	f000 f808 	bl	8003208 <HAL_InitTick>
 80031f8:	f7ff fd16 	bl	8002c28 <HAL_MspInit>
 80031fc:	2300      	movs	r3, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40022000 	.word	0x40022000

08003208 <HAL_InitTick>:
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_InitTick+0x54>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_InitTick+0x58>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fb2f 	bl	800488a <HAL_SYSTICK_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_InitTick+0x2e>
 8003232:	2301      	movs	r3, #1
 8003234:	e00e      	b.n	8003254 <HAL_InitTick+0x4c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d80a      	bhi.n	8003252 <HAL_InitTick+0x4a>
 800323c:	2200      	movs	r2, #0
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f001 faf7 	bl	8004836 <HAL_NVIC_SetPriority>
 8003248:	4a06      	ldr	r2, [pc, #24]	; (8003264 <HAL_InitTick+0x5c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <HAL_InitTick+0x4c>
 8003252:	2301      	movs	r3, #1
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000000 	.word	0x20000000
 8003260:	20000008 	.word	0x20000008
 8003264:	20000004 	.word	0x20000004

08003268 <HAL_IncTick>:
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_IncTick+0x1c>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_IncTick+0x20>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4413      	add	r3, r2
 8003278:	4a03      	ldr	r2, [pc, #12]	; (8003288 <HAL_IncTick+0x20>)
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	20000008 	.word	0x20000008
 8003288:	20002544 	.word	0x20002544

0800328c <HAL_GetTick>:
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <HAL_GetTick+0x10>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20002544 	.word	0x20002544

080032a0 <HAL_Delay>:
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	f7ff fff0 	bl	800328c <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d005      	beq.n	80032c6 <HAL_Delay+0x26>
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_Delay+0x44>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	bf00      	nop
 80032c8:	f7ff ffe0 	bl	800328c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d8f7      	bhi.n	80032c8 <HAL_Delay+0x28>
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000008 	.word	0x20000008

080032e8 <HAL_ADC_Init>:
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	2300      	movs	r3, #0
 80032f2:	75fb      	strb	r3, [r7, #23]
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_Init+0x22>
 8003306:	2301      	movs	r3, #1
 8003308:	e0be      	b.n	8003488 <HAL_ADC_Init+0x1a0>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_ADC_Init+0x44>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fcb0 	bl	8002c8c <HAL_ADC_MspInit>
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 faf5 	bl	800391c <ADC_ConversionStop_Disable>
 8003332:	4603      	mov	r3, r0
 8003334:	75fb      	strb	r3, [r7, #23]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 8099 	bne.w	8003476 <HAL_ADC_Init+0x18e>
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 8095 	bne.w	8003476 <HAL_ADC_Init+0x18e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003354:	f023 0302 	bic.w	r3, r3, #2
 8003358:	f043 0202 	orr.w	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7b1b      	ldrb	r3, [r3, #12]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4313      	orrs	r3, r2
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003380:	d003      	beq.n	800338a <HAL_ADC_Init+0xa2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_ADC_Init+0xa8>
 800338a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338e:	e000      	b.n	8003392 <HAL_ADC_Init+0xaa>
 8003390:	2300      	movs	r3, #0
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7d1b      	ldrb	r3, [r3, #20]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d119      	bne.n	80033d4 <HAL_ADC_Init+0xec>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7b1b      	ldrb	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_ADC_Init+0xd4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	035a      	lsls	r2, r3, #13
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e00b      	b.n	80033d4 <HAL_ADC_Init+0xec>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_ADC_Init+0x1a8>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6093      	str	r3, [r2, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003404:	d003      	beq.n	800340e <HAL_ADC_Init+0x126>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d104      	bne.n	8003418 <HAL_ADC_Init+0x130>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	3b01      	subs	r3, #1
 8003414:	051b      	lsls	r3, r3, #20
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	430a      	orrs	r2, r1
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_ADC_Init+0x1ac>)
 8003434:	4013      	ands	r3, r2
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d10b      	bne.n	8003454 <HAL_ADC_Init+0x16c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
 8003452:	e018      	b.n	8003486 <HAL_ADC_Init+0x19e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f023 0312 	bic.w	r3, r3, #18
 800345c:	f043 0210 	orr.w	r2, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
 8003474:	e007      	b.n	8003486 <HAL_ADC_Init+0x19e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	ffe1f7fd 	.word	0xffe1f7fd
 8003494:	ff1f0efe 	.word	0xff1f0efe

08003498 <HAL_ADC_Start_DMA>:
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	2300      	movs	r3, #0
 80034a6:	75fb      	strb	r3, [r7, #23]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a64      	ldr	r2, [pc, #400]	; (8003640 <HAL_ADC_Start_DMA+0x1a8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_Start_DMA+0x24>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a63      	ldr	r2, [pc, #396]	; (8003644 <HAL_ADC_Start_DMA+0x1ac>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d106      	bne.n	80034ca <HAL_ADC_Start_DMA+0x32>
 80034bc:	4b60      	ldr	r3, [pc, #384]	; (8003640 <HAL_ADC_Start_DMA+0x1a8>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 80b3 	bne.w	8003630 <HAL_ADC_Start_DMA+0x198>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_Start_DMA+0x40>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0ae      	b.n	8003636 <HAL_ADC_Start_DMA+0x19e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f9c1 	bl	8003868 <ADC_Enable>
 80034e6:	4603      	mov	r3, r0
 80034e8:	75fb      	strb	r3, [r7, #23]
 80034ea:	7dfb      	ldrb	r3, [r7, #23]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f040 809a 	bne.w	8003626 <HAL_ADC_Start_DMA+0x18e>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4e      	ldr	r2, [pc, #312]	; (8003644 <HAL_ADC_Start_DMA+0x1ac>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d105      	bne.n	800351c <HAL_ADC_Start_DMA+0x84>
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_ADC_Start_DMA+0x1a8>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d115      	bne.n	8003548 <HAL_ADC_Start_DMA+0xb0>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d026      	beq.n	8003584 <HAL_ADC_Start_DMA+0xec>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800353e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	629a      	str	r2, [r3, #40]	; 0x28
 8003546:	e01d      	b.n	8003584 <HAL_ADC_Start_DMA+0xec>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a39      	ldr	r2, [pc, #228]	; (8003640 <HAL_ADC_Start_DMA+0x1a8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_ADC_Start_DMA+0xd0>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a38      	ldr	r2, [pc, #224]	; (8003644 <HAL_ADC_Start_DMA+0x1ac>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d10d      	bne.n	8003584 <HAL_ADC_Start_DMA+0xec>
 8003568:	4b35      	ldr	r3, [pc, #212]	; (8003640 <HAL_ADC_Start_DMA+0x1a8>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_ADC_Start_DMA+0xec>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800357c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <HAL_ADC_Start_DMA+0x106>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	f023 0206 	bic.w	r2, r3, #6
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
 800359c:	e002      	b.n	80035a4 <HAL_ADC_Start_DMA+0x10c>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <HAL_ADC_Start_DMA+0x1b0>)
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a24      	ldr	r2, [pc, #144]	; (800364c <HAL_ADC_Start_DMA+0x1b4>)
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4a23      	ldr	r2, [pc, #140]	; (8003650 <HAL_ADC_Start_DMA+0x1b8>)
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0202 	mvn.w	r2, #2
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a18      	ldr	r0, [r3, #32]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	334c      	adds	r3, #76	; 0x4c
 80035e8:	4619      	mov	r1, r3
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f001 f9b3 	bl	8004958 <HAL_DMA_Start_IT>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003600:	d108      	bne.n	8003614 <HAL_ADC_Start_DMA+0x17c>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	e00f      	b.n	8003634 <HAL_ADC_Start_DMA+0x19c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	e006      	b.n	8003634 <HAL_ADC_Start_DMA+0x19c>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800362e:	e001      	b.n	8003634 <HAL_ADC_Start_DMA+0x19c>
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40012400 	.word	0x40012400
 8003644:	40012800 	.word	0x40012800
 8003648:	0800399f 	.word	0x0800399f
 800364c:	08003a1b 	.word	0x08003a1b
 8003650:	08003a37 	.word	0x08003a37

08003654 <HAL_ADC_ConvCpltCallback>:
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <HAL_ADC_ErrorCallback>:
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <HAL_ADC_ConfigChannel>:
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x20>
 8003694:	2302      	movs	r3, #2
 8003696:	e0dc      	b.n	8003852 <HAL_ADC_ConfigChannel+0x1da>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b06      	cmp	r3, #6
 80036a6:	d81c      	bhi.n	80036e2 <HAL_ADC_ConfigChannel+0x6a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	3b05      	subs	r3, #5
 80036ba:	221f      	movs	r2, #31
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	4019      	ands	r1, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	3b05      	subs	r3, #5
 80036d4:	fa00 f203 	lsl.w	r2, r0, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	635a      	str	r2, [r3, #52]	; 0x34
 80036e0:	e03c      	b.n	800375c <HAL_ADC_ConfigChannel+0xe4>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d81c      	bhi.n	8003724 <HAL_ADC_ConfigChannel+0xac>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	3b23      	subs	r3, #35	; 0x23
 80036fc:	221f      	movs	r2, #31
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	4019      	ands	r1, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	3b23      	subs	r3, #35	; 0x23
 8003716:	fa00 f203 	lsl.w	r2, r0, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
 8003722:	e01b      	b.n	800375c <HAL_ADC_ConfigChannel+0xe4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	3b41      	subs	r3, #65	; 0x41
 8003736:	221f      	movs	r2, #31
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	4019      	ands	r1, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	3b41      	subs	r3, #65	; 0x41
 8003750:	fa00 f203 	lsl.w	r2, r0, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b09      	cmp	r3, #9
 8003762:	d91c      	bls.n	800379e <HAL_ADC_ConfigChannel+0x126>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68d9      	ldr	r1, [r3, #12]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	3b1e      	subs	r3, #30
 8003776:	2207      	movs	r2, #7
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	4019      	ands	r1, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6898      	ldr	r0, [r3, #8]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	3b1e      	subs	r3, #30
 8003790:	fa00 f203 	lsl.w	r2, r0, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	e019      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x15a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6919      	ldr	r1, [r3, #16]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	2207      	movs	r2, #7
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	4019      	ands	r1, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	6898      	ldr	r0, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	fa00 f203 	lsl.w	r2, r0, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	611a      	str	r2, [r3, #16]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d003      	beq.n	80037e2 <HAL_ADC_ConfigChannel+0x16a>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b11      	cmp	r3, #17
 80037e0:	d132      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x1d0>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_ADC_ConfigChannel+0x1e4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d125      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x1c0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d126      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x1d0>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b10      	cmp	r3, #16
 8003810:	d11a      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x1d0>
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_ADC_ConfigChannel+0x1e8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <HAL_ADC_ConfigChannel+0x1ec>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	0c9a      	lsrs	r2, r3, #18
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	e002      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1b8>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3b01      	subs	r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f9      	bne.n	800382a <HAL_ADC_ConfigChannel+0x1b2>
 8003836:	e007      	b.n	8003848 <HAL_ADC_ConfigChannel+0x1d0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	40012400 	.word	0x40012400
 8003860:	20000000 	.word	0x20000000
 8003864:	431bde83 	.word	0x431bde83

08003868 <ADC_Enable>:
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	2300      	movs	r3, #0
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d040      	beq.n	8003908 <ADC_Enable+0xa0>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <ADC_Enable+0xac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <ADC_Enable+0xb0>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	0c9b      	lsrs	r3, r3, #18
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	e002      	b.n	80038ac <ADC_Enable+0x44>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f9      	bne.n	80038a6 <ADC_Enable+0x3e>
 80038b2:	f7ff fceb 	bl	800328c <HAL_GetTick>
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	e01f      	b.n	80038fa <ADC_Enable+0x92>
 80038ba:	f7ff fce7 	bl	800328c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d918      	bls.n	80038fa <ADC_Enable+0x92>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d011      	beq.n	80038fa <ADC_Enable+0x92>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	f043 0210 	orr.w	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80038f6:	2301      	movs	r3, #1
 80038f8:	e007      	b.n	800390a <ADC_Enable+0xa2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d1d8      	bne.n	80038ba <ADC_Enable+0x52>
 8003908:	2300      	movs	r3, #0
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000
 8003918:	431bde83 	.word	0x431bde83

0800391c <ADC_ConversionStop_Disable>:
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d12e      	bne.n	8003994 <ADC_ConversionStop_Disable+0x78>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	f7ff fca1 	bl	800328c <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	e01b      	b.n	8003986 <ADC_ConversionStop_Disable+0x6a>
 800394e:	f7ff fc9d 	bl	800328c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d914      	bls.n	8003986 <ADC_ConversionStop_Disable+0x6a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b01      	cmp	r3, #1
 8003968:	d10d      	bne.n	8003986 <ADC_ConversionStop_Disable+0x6a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c
 8003982:	2301      	movs	r3, #1
 8003984:	e007      	b.n	8003996 <ADC_ConversionStop_Disable+0x7a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d0dc      	beq.n	800394e <ADC_ConversionStop_Disable+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <ADC_DMAConvCplt>:
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d127      	bne.n	8003a08 <ADC_DMAConvCplt+0x6a>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80039d2:	d115      	bne.n	8003a00 <ADC_DMAConvCplt+0x62>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	7b1b      	ldrb	r3, [r3, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d111      	bne.n	8003a00 <ADC_DMAConvCplt+0x62>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <ADC_DMAConvCplt+0x62>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff fe27 	bl	8003654 <HAL_ADC_ConvCpltCallback>
 8003a06:	e004      	b.n	8003a12 <ADC_DMAConvCplt+0x74>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <ADC_DMAHalfConvCplt>:
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7fe fc53 	bl	80022d4 <HAL_ADC_ConvHalfCpltCallback>
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <ADC_DMAError>:
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f043 0204 	orr.w	r2, r3, #4
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff fe02 	bl	8003666 <HAL_ADC_ErrorCallback>
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_ADCEx_Calibration_Start>:
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	2300      	movs	r3, #0
 8003a76:	75fb      	strb	r3, [r7, #23]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_ADCEx_Calibration_Start+0x1e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e097      	b.n	8003bba <HAL_ADCEx_Calibration_Start+0x14e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ff42 	bl	800391c <ADC_ConversionStop_Disable>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fee3 	bl	8003868 <ADC_Enable>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 8081 	bne.w	8003bb0 <HAL_ADCEx_Calibration_Start+0x144>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ab6:	f023 0302 	bic.w	r3, r3, #2
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac2:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_ADCEx_Calibration_Start+0x158>)
 8003ac4:	681c      	ldr	r4, [r3, #0]
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f001 ff54 	bl	8005974 <HAL_RCCEx_GetPeriphCLKFreq>
 8003acc:	4603      	mov	r3, r0
 8003ace:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e002      	b.n	8003ade <HAL_ADCEx_Calibration_Start+0x72>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f9      	bne.n	8003ad8 <HAL_ADCEx_Calibration_Start+0x6c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0208 	orr.w	r2, r2, #8
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	f7ff fbca 	bl	800328c <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]
 8003afa:	e01b      	b.n	8003b34 <HAL_ADCEx_Calibration_Start+0xc8>
 8003afc:	f7ff fbc6 	bl	800328c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b0a      	cmp	r3, #10
 8003b08:	d914      	bls.n	8003b34 <HAL_ADCEx_Calibration_Start+0xc8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00d      	beq.n	8003b34 <HAL_ADCEx_Calibration_Start+0xc8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	f023 0312 	bic.w	r3, r3, #18
 8003b20:	f043 0210 	orr.w	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b30:	2301      	movs	r3, #1
 8003b32:	e042      	b.n	8003bba <HAL_ADCEx_Calibration_Start+0x14e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1dc      	bne.n	8003afc <HAL_ADCEx_Calibration_Start+0x90>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0204 	orr.w	r2, r2, #4
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	f7ff fb9b 	bl	800328c <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]
 8003b58:	e01b      	b.n	8003b92 <HAL_ADCEx_Calibration_Start+0x126>
 8003b5a:	f7ff fb97 	bl	800328c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b0a      	cmp	r3, #10
 8003b66:	d914      	bls.n	8003b92 <HAL_ADCEx_Calibration_Start+0x126>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_ADCEx_Calibration_Start+0x126>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	f023 0312 	bic.w	r3, r3, #18
 8003b7e:	f043 0210 	orr.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	629a      	str	r2, [r3, #40]	; 0x28
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e013      	b.n	8003bba <HAL_ADCEx_Calibration_Start+0x14e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1dc      	bne.n	8003b5a <HAL_ADCEx_Calibration_Start+0xee>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f023 0303 	bic.w	r3, r3, #3
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <HAL_CAN_Init>:
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_CAN_Init+0x12>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0ed      	b.n	8003db6 <HAL_CAN_Init+0x1ee>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_CAN_Init+0x24>
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff f8ba 	bl	8002d60 <HAL_CAN_MspInit>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	f7ff fb46 	bl	800328c <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	e012      	b.n	8003c2a <HAL_CAN_Init+0x62>
 8003c04:	f7ff fb42 	bl	800328c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b0a      	cmp	r3, #10
 8003c10:	d90b      	bls.n	8003c2a <HAL_CAN_Init+0x62>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2205      	movs	r2, #5
 8003c22:	f883 2020 	strb.w	r2, [r3, #32]
 8003c26:	2301      	movs	r3, #1
 8003c28:	e0c5      	b.n	8003db6 <HAL_CAN_Init+0x1ee>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0e5      	beq.n	8003c04 <HAL_CAN_Init+0x3c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0202 	bic.w	r2, r2, #2
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f7ff fb20 	bl	800328c <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	e012      	b.n	8003c76 <HAL_CAN_Init+0xae>
 8003c50:	f7ff fb1c 	bl	800328c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b0a      	cmp	r3, #10
 8003c5c:	d90b      	bls.n	8003c76 <HAL_CAN_Init+0xae>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	f883 2020 	strb.w	r2, [r3, #32]
 8003c72:	2301      	movs	r3, #1
 8003c74:	e09f      	b.n	8003db6 <HAL_CAN_Init+0x1ee>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e5      	bne.n	8003c50 <HAL_CAN_Init+0x88>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7e1b      	ldrb	r3, [r3, #24]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d108      	bne.n	8003c9e <HAL_CAN_Init+0xd6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e007      	b.n	8003cae <HAL_CAN_Init+0xe6>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7e5b      	ldrb	r3, [r3, #25]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d108      	bne.n	8003cc8 <HAL_CAN_Init+0x100>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e007      	b.n	8003cd8 <HAL_CAN_Init+0x110>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7e9b      	ldrb	r3, [r3, #26]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d108      	bne.n	8003cf2 <HAL_CAN_Init+0x12a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0220 	orr.w	r2, r2, #32
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e007      	b.n	8003d02 <HAL_CAN_Init+0x13a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0220 	bic.w	r2, r2, #32
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	7edb      	ldrb	r3, [r3, #27]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d108      	bne.n	8003d1c <HAL_CAN_Init+0x154>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0210 	bic.w	r2, r2, #16
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e007      	b.n	8003d2c <HAL_CAN_Init+0x164>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0210 	orr.w	r2, r2, #16
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7f1b      	ldrb	r3, [r3, #28]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <HAL_CAN_Init+0x17e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e007      	b.n	8003d56 <HAL_CAN_Init+0x18e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0208 	bic.w	r2, r2, #8
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7f5b      	ldrb	r3, [r3, #29]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d108      	bne.n	8003d70 <HAL_CAN_Init+0x1a8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0204 	orr.w	r2, r2, #4
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	e007      	b.n	8003d80 <HAL_CAN_Init+0x1b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0204 	bic.w	r2, r2, #4
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	ea42 0103 	orr.w	r1, r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	1e5a      	subs	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	61da      	str	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2020 	strb.w	r2, [r3, #32]
 8003db4:	2300      	movs	r3, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_CAN_ConfigFilter>:
 8003dbe:	b480      	push	{r7}
 8003dc0:	b087      	sub	sp, #28
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd4:	74fb      	strb	r3, [r7, #19]
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d003      	beq.n	8003de4 <HAL_CAN_ConfigFilter+0x26>
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	f040 80aa 	bne.w	8003f38 <HAL_CAN_ConfigFilter+0x17a>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d123      	bne.n	8003e66 <HAL_CAN_ConfigFilter+0xa8>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	401a      	ands	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0419      	lsls	r1, r3, #16
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	6952      	ldr	r2, [r2, #20]
 8003e40:	4319      	orrs	r1, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3248      	adds	r2, #72	; 0x48
 8003e46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	0419      	lsls	r1, r3, #16
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	6979      	ldr	r1, [r7, #20]
 8003e5e:	3348      	adds	r3, #72	; 0x48
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d122      	bne.n	8003eb4 <HAL_CAN_ConfigFilter+0xf6>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	0419      	lsls	r1, r3, #16
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	6952      	ldr	r2, [r2, #20]
 8003e8e:	4319      	orrs	r1, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	3248      	adds	r2, #72	; 0x48
 8003e94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	0419      	lsls	r1, r3, #16
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	6979      	ldr	r1, [r7, #20]
 8003eac:	3348      	adds	r3, #72	; 0x48
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_CAN_ConfigFilter+0x112>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ece:	e007      	b.n	8003ee0 <HAL_CAN_ConfigFilter+0x122>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_CAN_ConfigFilter+0x13e>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003efa:	e007      	b.n	8003f0c <HAL_CAN_ConfigFilter+0x14e>
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d107      	bne.n	8003f24 <HAL_CAN_ConfigFilter+0x166>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003f34:	2300      	movs	r3, #0
 8003f36:	e006      	b.n	8003f46 <HAL_CAN_ConfigFilter+0x188>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
 8003f44:	2301      	movs	r3, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <HAL_CAN_Start>:
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d12e      	bne.n	8003fc2 <HAL_CAN_Start+0x72>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2020 	strb.w	r2, [r3, #32]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f7ff f986 	bl	800328c <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	e012      	b.n	8003faa <HAL_CAN_Start+0x5a>
 8003f84:	f7ff f982 	bl	800328c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b0a      	cmp	r3, #10
 8003f90:	d90b      	bls.n	8003faa <HAL_CAN_Start+0x5a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	f883 2020 	strb.w	r2, [r3, #32]
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e012      	b.n	8003fd0 <HAL_CAN_Start+0x80>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <HAL_CAN_Start+0x34>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e006      	b.n	8003fd0 <HAL_CAN_Start+0x80>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8003fce:	2301      	movs	r3, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_CAN_GetRxMessage>:
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fec:	75fb      	strb	r3, [r7, #23]
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d003      	beq.n	8003ffc <HAL_CAN_GetRxMessage+0x24>
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	f040 8103 	bne.w	8004202 <HAL_CAN_GetRxMessage+0x22a>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10e      	bne.n	8004020 <HAL_CAN_GetRxMessage+0x48>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0303 	and.w	r3, r3, #3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d116      	bne.n	800403e <HAL_CAN_GetRxMessage+0x66>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24
 800401c:	2301      	movs	r3, #1
 800401e:	e0f7      	b.n	8004210 <HAL_CAN_GetRxMessage+0x238>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d107      	bne.n	800403e <HAL_CAN_GetRxMessage+0x66>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
 800403a:	2301      	movs	r3, #1
 800403c:	e0e8      	b.n	8004210 <HAL_CAN_GetRxMessage+0x238>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	331b      	adds	r3, #27
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4413      	add	r3, r2
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0204 	and.w	r2, r3, #4
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10c      	bne.n	8004076 <HAL_CAN_GetRxMessage+0x9e>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	331b      	adds	r3, #27
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	4413      	add	r3, r2
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	0d5b      	lsrs	r3, r3, #21
 800406c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e00b      	b.n	800408e <HAL_CAN_GetRxMessage+0xb6>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	331b      	adds	r3, #27
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4413      	add	r3, r2
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	08db      	lsrs	r3, r3, #3
 8004086:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	331b      	adds	r3, #27
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4413      	add	r3, r2
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0202 	and.w	r2, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	331b      	adds	r3, #27
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_CAN_GetRxMessage+0xec>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2208      	movs	r2, #8
 80040c0:	611a      	str	r2, [r3, #16]
 80040c2:	e00b      	b.n	80040dc <HAL_CAN_GetRxMessage+0x104>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	331b      	adds	r3, #27
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	4413      	add	r3, r2
 80040d0:	3304      	adds	r3, #4
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	611a      	str	r2, [r3, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	331b      	adds	r3, #27
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	4413      	add	r3, r2
 80040e8:	3304      	adds	r3, #4
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	619a      	str	r2, [r3, #24]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	331b      	adds	r3, #27
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	4413      	add	r3, r2
 8004100:	3304      	adds	r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	b29a      	uxth	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	615a      	str	r2, [r3, #20]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	4413      	add	r3, r2
 800412c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	0a1a      	lsrs	r2, r3, #8
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	4413      	add	r3, r2
 8004146:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0c1a      	lsrs	r2, r3, #16
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	3302      	adds	r3, #2
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	4413      	add	r3, r2
 8004160:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e1a      	lsrs	r2, r3, #24
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	3303      	adds	r3, #3
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	4413      	add	r3, r2
 800417a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	3304      	adds	r3, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	4413      	add	r3, r2
 8004192:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0a1a      	lsrs	r2, r3, #8
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3305      	adds	r3, #5
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	0c1a      	lsrs	r2, r3, #16
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	3306      	adds	r3, #6
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e1a      	lsrs	r2, r3, #24
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	3307      	adds	r3, #7
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d108      	bne.n	80041ee <HAL_CAN_GetRxMessage+0x216>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0220 	orr.w	r2, r2, #32
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e007      	b.n	80041fe <HAL_CAN_GetRxMessage+0x226>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0220 	orr.w	r2, r2, #32
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	2300      	movs	r3, #0
 8004200:	e006      	b.n	8004210 <HAL_CAN_GetRxMessage+0x238>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	; 0x24
 800420e:	2301      	movs	r3, #1
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <HAL_CAN_ActivateNotification>:
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800422a:	73fb      	strb	r3, [r7, #15]
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d002      	beq.n	8004238 <HAL_CAN_ActivateNotification+0x1e>
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d109      	bne.n	800424c <HAL_CAN_ActivateNotification+0x32>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6959      	ldr	r1, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	615a      	str	r2, [r3, #20]
 8004248:	2300      	movs	r3, #0
 800424a:	e006      	b.n	800425a <HAL_CAN_ActivateNotification+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	625a      	str	r2, [r3, #36]	; 0x24
 8004258:	2301      	movs	r3, #1
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <HAL_CAN_IRQHandler>:
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d07c      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x140>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d023      	beq.n	80042fc <HAL_CAN_IRQHandler+0x98>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2201      	movs	r2, #1
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_CAN_IRQHandler+0x6a>
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f983 	bl	80045d2 <HAL_CAN_TxMailbox0CompleteCallback>
 80042cc:	e016      	b.n	80042fc <HAL_CAN_IRQHandler+0x98>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d004      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x7e>
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	e00c      	b.n	80042fc <HAL_CAN_IRQHandler+0x98>
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x92>
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	e002      	b.n	80042fc <HAL_CAN_IRQHandler+0x98>
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f986 	bl	8004608 <HAL_CAN_TxMailbox0AbortCallback>
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d024      	beq.n	8004350 <HAL_CAN_IRQHandler+0xec>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_CAN_IRQHandler+0xbe>
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f962 	bl	80045e4 <HAL_CAN_TxMailbox1CompleteCallback>
 8004320:	e016      	b.n	8004350 <HAL_CAN_IRQHandler+0xec>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <HAL_CAN_IRQHandler+0xd2>
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	e00c      	b.n	8004350 <HAL_CAN_IRQHandler+0xec>
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_CAN_IRQHandler+0xe6>
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	e002      	b.n	8004350 <HAL_CAN_IRQHandler+0xec>
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f965 	bl	800461a <HAL_CAN_TxMailbox1AbortCallback>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d024      	beq.n	80043a4 <HAL_CAN_IRQHandler+0x140>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_CAN_IRQHandler+0x112>
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f941 	bl	80045f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8004374:	e016      	b.n	80043a4 <HAL_CAN_IRQHandler+0x140>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <HAL_CAN_IRQHandler+0x126>
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	e00c      	b.n	80043a4 <HAL_CAN_IRQHandler+0x140>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_CAN_IRQHandler+0x13a>
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e002      	b.n	80043a4 <HAL_CAN_IRQHandler+0x140>
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f944 	bl	800462c <HAL_CAN_TxMailbox2AbortCallback>
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x164>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x164>
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2210      	movs	r2, #16
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_CAN_IRQHandler+0x186>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <HAL_CAN_IRQHandler+0x186>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f92a 	bl	800463e <HAL_CAN_RxFifo0FullCallback>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <HAL_CAN_IRQHandler+0x1a4>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_CAN_IRQHandler+0x1a4>
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd ff3b 	bl	800227e <HAL_CAN_RxFifo0MsgPendingCallback>
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_CAN_IRQHandler+0x1c8>
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_CAN_IRQHandler+0x1c8>
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2210      	movs	r2, #16
 800442a:	611a      	str	r2, [r3, #16]
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_CAN_IRQHandler+0x1ea>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_CAN_IRQHandler+0x1ea>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2208      	movs	r2, #8
 8004446:	611a      	str	r2, [r3, #16]
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f901 	bl	8004650 <HAL_CAN_RxFifo1FullCallback>
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_CAN_IRQHandler+0x208>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_CAN_IRQHandler+0x208>
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd ff15 	bl	8002296 <HAL_CAN_RxFifo1MsgPendingCallback>
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <HAL_CAN_IRQHandler+0x22a>
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <HAL_CAN_IRQHandler+0x22a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2210      	movs	r2, #16
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8ea 	bl	8004662 <HAL_CAN_SleepCallback>
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x24c>
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x24c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2208      	movs	r2, #8
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8e2 	bl	8004674 <HAL_CAN_WakeUpFromRxMsgCallback>
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07b      	beq.n	80045b2 <HAL_CAN_IRQHandler+0x34e>
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d072      	beq.n	80045aa <HAL_CAN_IRQHandler+0x346>
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x27c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x27c>
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_CAN_IRQHandler+0x298>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_CAN_IRQHandler+0x298>
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_CAN_IRQHandler+0x2b4>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_CAN_IRQHandler+0x2b4>
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f043 0304 	orr.w	r3, r3, #4
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800451e:	2b00      	cmp	r3, #0
 8004520:	d043      	beq.n	80045aa <HAL_CAN_IRQHandler+0x346>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004528:	2b00      	cmp	r3, #0
 800452a:	d03e      	beq.n	80045aa <HAL_CAN_IRQHandler+0x346>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004532:	2b60      	cmp	r3, #96	; 0x60
 8004534:	d02b      	beq.n	800458e <HAL_CAN_IRQHandler+0x32a>
 8004536:	2b60      	cmp	r3, #96	; 0x60
 8004538:	d82e      	bhi.n	8004598 <HAL_CAN_IRQHandler+0x334>
 800453a:	2b50      	cmp	r3, #80	; 0x50
 800453c:	d022      	beq.n	8004584 <HAL_CAN_IRQHandler+0x320>
 800453e:	2b50      	cmp	r3, #80	; 0x50
 8004540:	d82a      	bhi.n	8004598 <HAL_CAN_IRQHandler+0x334>
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d019      	beq.n	800457a <HAL_CAN_IRQHandler+0x316>
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d826      	bhi.n	8004598 <HAL_CAN_IRQHandler+0x334>
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	d010      	beq.n	8004570 <HAL_CAN_IRQHandler+0x30c>
 800454e:	2b30      	cmp	r3, #48	; 0x30
 8004550:	d822      	bhi.n	8004598 <HAL_CAN_IRQHandler+0x334>
 8004552:	2b10      	cmp	r3, #16
 8004554:	d002      	beq.n	800455c <HAL_CAN_IRQHandler+0x2f8>
 8004556:	2b20      	cmp	r3, #32
 8004558:	d005      	beq.n	8004566 <HAL_CAN_IRQHandler+0x302>
 800455a:	e01d      	b.n	8004598 <HAL_CAN_IRQHandler+0x334>
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	f043 0308 	orr.w	r3, r3, #8
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
 8004564:	e019      	b.n	800459a <HAL_CAN_IRQHandler+0x336>
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f043 0310 	orr.w	r3, r3, #16
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	e014      	b.n	800459a <HAL_CAN_IRQHandler+0x336>
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	f043 0320 	orr.w	r3, r3, #32
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
 8004578:	e00f      	b.n	800459a <HAL_CAN_IRQHandler+0x336>
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	e00a      	b.n	800459a <HAL_CAN_IRQHandler+0x336>
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e005      	b.n	800459a <HAL_CAN_IRQHandler+0x336>
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	e000      	b.n	800459a <HAL_CAN_IRQHandler+0x336>
 8004598:	bf00      	nop
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045a8:	619a      	str	r2, [r3, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2204      	movs	r2, #4
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_CAN_IRQHandler+0x366>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fd fe73 	bl	80022b0 <HAL_CAN_ErrorCallback>
 80045ca:	bf00      	nop
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_CAN_TxMailbox0CompleteCallback>:
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_CAN_TxMailbox2CompleteCallback>:
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_CAN_TxMailbox0AbortCallback>:
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_CAN_TxMailbox1AbortCallback>:
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HAL_CAN_TxMailbox2AbortCallback>:
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <HAL_CAN_RxFifo0FullCallback>:
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <HAL_CAN_RxFifo1FullCallback>:
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <HAL_CAN_SleepCallback>:
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
	...

08004688 <__NVIC_SetPriorityGrouping>:
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <__NVIC_SetPriorityGrouping+0x44>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046a4:	4013      	ands	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	021a      	lsls	r2, r3, #8
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	4a04      	ldr	r2, [pc, #16]	; (80046cc <__NVIC_SetPriorityGrouping+0x44>)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	60d3      	str	r3, [r2, #12]
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <__NVIC_GetPriorityGrouping>:
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <__NVIC_GetPriorityGrouping+0x18>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <__NVIC_EnableIRQ>:
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	db0b      	blt.n	8004716 <__NVIC_EnableIRQ+0x2a>
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	f003 021f 	and.w	r2, r3, #31
 8004704:	4906      	ldr	r1, [pc, #24]	; (8004720 <__NVIC_EnableIRQ+0x34>)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2001      	movs	r0, #1
 800470e:	fa00 f202 	lsl.w	r2, r0, r2
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	e000e100 	.word	0xe000e100

08004724 <__NVIC_SetPriority>:
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
 8004730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004734:	2b00      	cmp	r3, #0
 8004736:	db0a      	blt.n	800474e <__NVIC_SetPriority+0x2a>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	490c      	ldr	r1, [pc, #48]	; (8004770 <__NVIC_SetPriority+0x4c>)
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	440b      	add	r3, r1
 8004748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800474c:	e00a      	b.n	8004764 <__NVIC_SetPriority+0x40>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	4908      	ldr	r1, [pc, #32]	; (8004774 <__NVIC_SetPriority+0x50>)
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	3b04      	subs	r3, #4
 800475c:	0112      	lsls	r2, r2, #4
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	440b      	add	r3, r1
 8004762:	761a      	strb	r2, [r3, #24]
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e100 	.word	0xe000e100
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <NVIC_EncodePriority>:
 8004778:	b480      	push	{r7}
 800477a:	b089      	sub	sp, #36	; 0x24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f1c3 0307 	rsb	r3, r3, #7
 8004792:	2b04      	cmp	r3, #4
 8004794:	bf28      	it	cs
 8004796:	2304      	movcs	r3, #4
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3304      	adds	r3, #4
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d902      	bls.n	80047a8 <NVIC_EncodePriority+0x30>
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3b03      	subs	r3, #3
 80047a6:	e000      	b.n	80047aa <NVIC_EncodePriority+0x32>
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43da      	mvns	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	401a      	ands	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	409a      	lsls	r2, r3
 80047c0:	f04f 31ff 	mov.w	r1, #4294967295
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	43d9      	mvns	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	400b      	ands	r3, r1
 80047d0:	4313      	orrs	r3, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	3724      	adds	r7, #36	; 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <SysTick_Config>:
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ec:	d301      	bcc.n	80047f2 <SysTick_Config+0x16>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e00f      	b.n	8004812 <SysTick_Config+0x36>
 80047f2:	4a0a      	ldr	r2, [pc, #40]	; (800481c <SysTick_Config+0x40>)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	6053      	str	r3, [r2, #4]
 80047fa:	210f      	movs	r1, #15
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	f7ff ff90 	bl	8004724 <__NVIC_SetPriority>
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <SysTick_Config+0x40>)
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <SysTick_Config+0x40>)
 800480c:	2207      	movs	r2, #7
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	2300      	movs	r3, #0
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	e000e010 	.word	0xe000e010

08004820 <HAL_NVIC_SetPriorityGrouping>:
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff2d 	bl	8004688 <__NVIC_SetPriorityGrouping>
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_NVIC_SetPriority>:
 8004836:	b580      	push	{r7, lr}
 8004838:	b086      	sub	sp, #24
 800483a:	af00      	add	r7, sp, #0
 800483c:	4603      	mov	r3, r0
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	f7ff ff42 	bl	80046d0 <__NVIC_GetPriorityGrouping>
 800484c:	6178      	str	r0, [r7, #20]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	6978      	ldr	r0, [r7, #20]
 8004854:	f7ff ff90 	bl	8004778 <NVIC_EncodePriority>
 8004858:	4602      	mov	r2, r0
 800485a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800485e:	4611      	mov	r1, r2
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff ff5f 	bl	8004724 <__NVIC_SetPriority>
 8004866:	bf00      	nop
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_NVIC_EnableIRQ>:
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	4603      	mov	r3, r0
 8004876:	71fb      	strb	r3, [r7, #7]
 8004878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff35 	bl	80046ec <__NVIC_EnableIRQ>
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_SYSTICK_Config>:
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ffa2 	bl	80047dc <SysTick_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_DMA_Init>:
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_DMA_Init+0x16>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e043      	b.n	8004942 <HAL_DMA_Init+0x9e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <HAL_DMA_Init+0xa8>)
 80048c2:	4413      	add	r3, r2
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <HAL_DMA_Init+0xac>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	091b      	lsrs	r3, r3, #4
 80048cc:	009a      	lsls	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <HAL_DMA_Init+0xb0>)
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	4313      	orrs	r3, r2
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2020 	strb.w	r2, [r3, #32]
 8004940:	2300      	movs	r3, #0
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	bffdfff8 	.word	0xbffdfff8
 8004950:	cccccccd 	.word	0xcccccccd
 8004954:	40020000 	.word	0x40020000

08004958 <HAL_DMA_Start_IT>:
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_DMA_Start_IT+0x20>
 8004974:	2302      	movs	r3, #2
 8004976:	e04b      	b.n	8004a10 <HAL_DMA_Start_IT+0xb8>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2020 	strb.w	r2, [r3, #32]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d13a      	bne.n	8004a02 <HAL_DMA_Start_IT+0xaa>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f937 	bl	8004c24 <DMA_SetConfig>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_DMA_Start_IT+0x78>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 020e 	orr.w	r2, r2, #14
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e00f      	b.n	80049f0 <HAL_DMA_Start_IT+0x98>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0204 	bic.w	r2, r2, #4
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 020a 	orr.w	r2, r2, #10
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e005      	b.n	8004a0e <HAL_DMA_Start_IT+0xb6>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2020 	strb.w	r2, [r3, #32]
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	75fb      	strb	r3, [r7, #23]
 8004a0e:	7dfb      	ldrb	r3, [r7, #23]
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_DMA_IRQHandler>:
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2204      	movs	r2, #4
 8004a36:	409a      	lsls	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d04f      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0xc8>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04a      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0xc8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x50>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a66      	ldr	r2, [pc, #408]	; (8004c08 <HAL_DMA_IRQHandler+0x1f0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d029      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xae>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a65      	ldr	r2, [pc, #404]	; (8004c0c <HAL_DMA_IRQHandler+0x1f4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xaa>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a63      	ldr	r2, [pc, #396]	; (8004c10 <HAL_DMA_IRQHandler+0x1f8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01a      	beq.n	8004abc <HAL_DMA_IRQHandler+0xa4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a62      	ldr	r2, [pc, #392]	; (8004c14 <HAL_DMA_IRQHandler+0x1fc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d012      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x9e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a60      	ldr	r2, [pc, #384]	; (8004c18 <HAL_DMA_IRQHandler+0x200>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00a      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x98>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5f      	ldr	r2, [pc, #380]	; (8004c1c <HAL_DMA_IRQHandler+0x204>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d102      	bne.n	8004aaa <HAL_DMA_IRQHandler+0x92>
 8004aa4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004aa8:	e00e      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xb0>
 8004aaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004aae:	e00b      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xb0>
 8004ab0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ab4:	e008      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xb0>
 8004ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aba:	e005      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xb0>
 8004abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac0:	e002      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xb0>
 8004ac2:	2340      	movs	r3, #64	; 0x40
 8004ac4:	e000      	b.n	8004ac8 <HAL_DMA_IRQHandler+0xb0>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	4a55      	ldr	r2, [pc, #340]	; (8004c20 <HAL_DMA_IRQHandler+0x208>)
 8004aca:	6053      	str	r3, [r2, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8094 	beq.w	8004bfe <HAL_DMA_IRQHandler+0x1e6>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
 8004ade:	e08e      	b.n	8004bfe <HAL_DMA_IRQHandler+0x1e6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d056      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x186>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d051      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x186>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x108>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 020a 	bic.w	r2, r2, #10
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <HAL_DMA_IRQHandler+0x1f0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d029      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x166>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a37      	ldr	r2, [pc, #220]	; (8004c0c <HAL_DMA_IRQHandler+0x1f4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d022      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x162>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <HAL_DMA_IRQHandler+0x1f8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01a      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x15c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <HAL_DMA_IRQHandler+0x1fc>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d012      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x156>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <HAL_DMA_IRQHandler+0x200>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00a      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x150>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a31      	ldr	r2, [pc, #196]	; (8004c1c <HAL_DMA_IRQHandler+0x204>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d102      	bne.n	8004b62 <HAL_DMA_IRQHandler+0x14a>
 8004b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b60:	e00e      	b.n	8004b80 <HAL_DMA_IRQHandler+0x168>
 8004b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b66:	e00b      	b.n	8004b80 <HAL_DMA_IRQHandler+0x168>
 8004b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b6c:	e008      	b.n	8004b80 <HAL_DMA_IRQHandler+0x168>
 8004b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b72:	e005      	b.n	8004b80 <HAL_DMA_IRQHandler+0x168>
 8004b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b78:	e002      	b.n	8004b80 <HAL_DMA_IRQHandler+0x168>
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	e000      	b.n	8004b80 <HAL_DMA_IRQHandler+0x168>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <HAL_DMA_IRQHandler+0x208>)
 8004b82:	6053      	str	r3, [r2, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2020 	strb.w	r2, [r3, #32]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d034      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x1e6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
 8004b9c:	e02f      	b.n	8004bfe <HAL_DMA_IRQHandler+0x1e6>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d028      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x1e8>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d023      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x1e8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 020e 	bic.w	r2, r2, #14
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd6:	605a      	str	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2020 	strb.w	r2, [r3, #32]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x1e8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40020008 	.word	0x40020008
 8004c0c:	4002001c 	.word	0x4002001c
 8004c10:	40020030 	.word	0x40020030
 8004c14:	40020044 	.word	0x40020044
 8004c18:	40020058 	.word	0x40020058
 8004c1c:	4002006c 	.word	0x4002006c
 8004c20:	40020000 	.word	0x40020000

08004c24 <DMA_SetConfig>:
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d108      	bne.n	8004c64 <DMA_SetConfig+0x40>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	e007      	b.n	8004c74 <DMA_SetConfig+0x50>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_GPIO_Init>:
 8004c80:	b480      	push	{r7}
 8004c82:	b08b      	sub	sp, #44	; 0x2c
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
 8004c92:	e169      	b.n	8004f68 <HAL_GPIO_Init+0x2e8>
 8004c94:	2201      	movs	r2, #1
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	61fb      	str	r3, [r7, #28]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	f040 8158 	bne.w	8004f62 <HAL_GPIO_Init+0x2e2>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4a9a      	ldr	r2, [pc, #616]	; (8004f20 <HAL_GPIO_Init+0x2a0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d05e      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cbc:	4a98      	ldr	r2, [pc, #608]	; (8004f20 <HAL_GPIO_Init+0x2a0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d875      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cc2:	4a98      	ldr	r2, [pc, #608]	; (8004f24 <HAL_GPIO_Init+0x2a4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d058      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cc8:	4a96      	ldr	r2, [pc, #600]	; (8004f24 <HAL_GPIO_Init+0x2a4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d86f      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cce:	4a96      	ldr	r2, [pc, #600]	; (8004f28 <HAL_GPIO_Init+0x2a8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d052      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cd4:	4a94      	ldr	r2, [pc, #592]	; (8004f28 <HAL_GPIO_Init+0x2a8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d869      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cda:	4a94      	ldr	r2, [pc, #592]	; (8004f2c <HAL_GPIO_Init+0x2ac>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d04c      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004ce0:	4a92      	ldr	r2, [pc, #584]	; (8004f2c <HAL_GPIO_Init+0x2ac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d863      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004ce6:	4a92      	ldr	r2, [pc, #584]	; (8004f30 <HAL_GPIO_Init+0x2b0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d046      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cec:	4a90      	ldr	r2, [pc, #576]	; (8004f30 <HAL_GPIO_Init+0x2b0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d85d      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cf2:	2b12      	cmp	r3, #18
 8004cf4:	d82a      	bhi.n	8004d4c <HAL_GPIO_Init+0xcc>
 8004cf6:	2b12      	cmp	r3, #18
 8004cf8:	d859      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_GPIO_Init+0x80>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d7b 	.word	0x08004d7b
 8004d04:	08004d55 	.word	0x08004d55
 8004d08:	08004d67 	.word	0x08004d67
 8004d0c:	08004da9 	.word	0x08004da9
 8004d10:	08004daf 	.word	0x08004daf
 8004d14:	08004daf 	.word	0x08004daf
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004daf 	.word	0x08004daf
 8004d20:	08004daf 	.word	0x08004daf
 8004d24:	08004daf 	.word	0x08004daf
 8004d28:	08004daf 	.word	0x08004daf
 8004d2c:	08004daf 	.word	0x08004daf
 8004d30:	08004daf 	.word	0x08004daf
 8004d34:	08004daf 	.word	0x08004daf
 8004d38:	08004daf 	.word	0x08004daf
 8004d3c:	08004daf 	.word	0x08004daf
 8004d40:	08004daf 	.word	0x08004daf
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	4a79      	ldr	r2, [pc, #484]	; (8004f34 <HAL_GPIO_Init+0x2b4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004d52:	e02c      	b.n	8004dae <HAL_GPIO_Init+0x12e>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	e029      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	e024      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	e01f      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	330c      	adds	r3, #12
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	e01a      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_GPIO_Init+0x108>
 8004d82:	2304      	movs	r3, #4
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	e013      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <HAL_GPIO_Init+0x11c>
 8004d90:	2308      	movs	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	e009      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	615a      	str	r2, [r3, #20]
 8004da6:	e003      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
 8004dac:	e000      	b.n	8004db0 <HAL_GPIO_Init+0x130>
 8004dae:	bf00      	nop
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2bff      	cmp	r3, #255	; 0xff
 8004db4:	d801      	bhi.n	8004dba <HAL_GPIO_Init+0x13a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	e001      	b.n	8004dbe <HAL_GPIO_Init+0x13e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2bff      	cmp	r3, #255	; 0xff
 8004dc4:	d802      	bhi.n	8004dcc <HAL_GPIO_Init+0x14c>
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	e002      	b.n	8004dd2 <HAL_GPIO_Init+0x152>
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	3b08      	subs	r3, #8
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	210f      	movs	r1, #15
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	401a      	ands	r2, r3
 8004de4:	6a39      	ldr	r1, [r7, #32]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80b1 	beq.w	8004f62 <HAL_GPIO_Init+0x2e2>
 8004e00:	4b4d      	ldr	r3, [pc, #308]	; (8004f38 <HAL_GPIO_Init+0x2b8>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4a4c      	ldr	r2, [pc, #304]	; (8004f38 <HAL_GPIO_Init+0x2b8>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6193      	str	r3, [r2, #24]
 8004e0c:	4b4a      	ldr	r3, [pc, #296]	; (8004f38 <HAL_GPIO_Init+0x2b8>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a48      	ldr	r2, [pc, #288]	; (8004f3c <HAL_GPIO_Init+0x2bc>)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <HAL_GPIO_Init+0x2c0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <HAL_GPIO_Init+0x1ec>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <HAL_GPIO_Init+0x2c4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00d      	beq.n	8004e68 <HAL_GPIO_Init+0x1e8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3e      	ldr	r2, [pc, #248]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <HAL_GPIO_Init+0x1e4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3d      	ldr	r2, [pc, #244]	; (8004f4c <HAL_GPIO_Init+0x2cc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_GPIO_Init+0x1e0>
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e60:	2304      	movs	r3, #4
 8004e62:	e004      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e002      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	f002 0203 	and.w	r2, r2, #3
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	4093      	lsls	r3, r2
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	492f      	ldr	r1, [pc, #188]	; (8004f3c <HAL_GPIO_Init+0x2bc>)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d006      	beq.n	8004ea6 <HAL_GPIO_Init+0x226>
 8004e98:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	492c      	ldr	r1, [pc, #176]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	608b      	str	r3, [r1, #8]
 8004ea4:	e006      	b.n	8004eb4 <HAL_GPIO_Init+0x234>
 8004ea6:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	4928      	ldr	r1, [pc, #160]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	608b      	str	r3, [r1, #8]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <HAL_GPIO_Init+0x24e>
 8004ec0:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	4922      	ldr	r1, [pc, #136]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60cb      	str	r3, [r1, #12]
 8004ecc:	e006      	b.n	8004edc <HAL_GPIO_Init+0x25c>
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	491e      	ldr	r1, [pc, #120]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60cb      	str	r3, [r1, #12]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <HAL_GPIO_Init+0x276>
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	4918      	ldr	r1, [pc, #96]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x284>
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	4914      	ldr	r1, [pc, #80]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d021      	beq.n	8004f54 <HAL_GPIO_Init+0x2d4>
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	490e      	ldr	r1, [pc, #56]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	600b      	str	r3, [r1, #0]
 8004f1c:	e021      	b.n	8004f62 <HAL_GPIO_Init+0x2e2>
 8004f1e:	bf00      	nop
 8004f20:	10320000 	.word	0x10320000
 8004f24:	10310000 	.word	0x10310000
 8004f28:	10220000 	.word	0x10220000
 8004f2c:	10210000 	.word	0x10210000
 8004f30:	10120000 	.word	0x10120000
 8004f34:	10110000 	.word	0x10110000
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010800 	.word	0x40010800
 8004f44:	40010c00 	.word	0x40010c00
 8004f48:	40011000 	.word	0x40011000
 8004f4c:	40011400 	.word	0x40011400
 8004f50:	40010400 	.word	0x40010400
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_GPIO_Init+0x304>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	4909      	ldr	r1, [pc, #36]	; (8004f84 <HAL_GPIO_Init+0x304>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	3301      	adds	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f47f ae8e 	bne.w	8004c94 <HAL_GPIO_Init+0x14>
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	372c      	adds	r7, #44	; 0x2c
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	40010400 	.word	0x40010400

08004f88 <HAL_GPIO_ReadPin>:
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_GPIO_ReadPin+0x1e>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	e001      	b.n	8004faa <HAL_GPIO_ReadPin+0x22>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_GPIO_WritePin>:
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	807b      	strh	r3, [r7, #2]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	707b      	strb	r3, [r7, #1]
 8004fc6:	787b      	ldrb	r3, [r7, #1]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_WritePin+0x1e>
 8004fcc:	887a      	ldrh	r2, [r7, #2]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	611a      	str	r2, [r3, #16]
 8004fd2:	e003      	b.n	8004fdc <HAL_GPIO_WritePin+0x26>
 8004fd4:	887b      	ldrh	r3, [r7, #2]
 8004fd6:	041a      	lsls	r2, r3, #16
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	611a      	str	r2, [r3, #16]
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_RCC_OscConfig>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCC_OscConfig+0x12>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e272      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8087 	beq.w	8005116 <HAL_RCC_OscConfig+0x12e>
 8005008:	4b92      	ldr	r3, [pc, #584]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 030c 	and.w	r3, r3, #12
 8005010:	2b04      	cmp	r3, #4
 8005012:	d00c      	beq.n	800502e <HAL_RCC_OscConfig+0x46>
 8005014:	4b8f      	ldr	r3, [pc, #572]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d112      	bne.n	8005046 <HAL_RCC_OscConfig+0x5e>
 8005020:	4b8c      	ldr	r3, [pc, #560]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502c:	d10b      	bne.n	8005046 <HAL_RCC_OscConfig+0x5e>
 800502e:	4b89      	ldr	r3, [pc, #548]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d06c      	beq.n	8005114 <HAL_RCC_OscConfig+0x12c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d168      	bne.n	8005114 <HAL_RCC_OscConfig+0x12c>
 8005042:	2301      	movs	r3, #1
 8005044:	e24c      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504e:	d106      	bne.n	800505e <HAL_RCC_OscConfig+0x76>
 8005050:	4b80      	ldr	r3, [pc, #512]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a7f      	ldr	r2, [pc, #508]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e02e      	b.n	80050bc <HAL_RCC_OscConfig+0xd4>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0x98>
 8005066:	4b7b      	ldr	r3, [pc, #492]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7a      	ldr	r2, [pc, #488]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 800506c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b78      	ldr	r3, [pc, #480]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a77      	ldr	r2, [pc, #476]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e01d      	b.n	80050bc <HAL_RCC_OscConfig+0xd4>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0xbc>
 800508a:	4b72      	ldr	r3, [pc, #456]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a71      	ldr	r2, [pc, #452]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b6f      	ldr	r3, [pc, #444]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6e      	ldr	r2, [pc, #440]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0xd4>
 80050a4:	4b6b      	ldr	r3, [pc, #428]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6a      	ldr	r2, [pc, #424]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80050aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b68      	ldr	r3, [pc, #416]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a67      	ldr	r2, [pc, #412]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80050b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_RCC_OscConfig+0x104>
 80050c4:	f7fe f8e2 	bl	800328c <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xf6>
 80050cc:	f7fe f8de 	bl	800328c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xf6>
 80050da:	2303      	movs	r3, #3
 80050dc:	e200      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 80050de:	4b5d      	ldr	r3, [pc, #372]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0xe4>
 80050ea:	e014      	b.n	8005116 <HAL_RCC_OscConfig+0x12e>
 80050ec:	f7fe f8ce 	bl	800328c <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x11e>
 80050f4:	f7fe f8ca 	bl	800328c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x11e>
 8005102:	2303      	movs	r3, #3
 8005104:	e1ec      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 8005106:	4b53      	ldr	r3, [pc, #332]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x10c>
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x12e>
 8005114:	bf00      	nop
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d063      	beq.n	80051ea <HAL_RCC_OscConfig+0x202>
 8005122:	4b4c      	ldr	r3, [pc, #304]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_RCC_OscConfig+0x15e>
 800512e:	4b49      	ldr	r3, [pc, #292]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b08      	cmp	r3, #8
 8005138:	d11c      	bne.n	8005174 <HAL_RCC_OscConfig+0x18c>
 800513a:	4b46      	ldr	r3, [pc, #280]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d116      	bne.n	8005174 <HAL_RCC_OscConfig+0x18c>
 8005146:	4b43      	ldr	r3, [pc, #268]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_RCC_OscConfig+0x176>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x176>
 800515a:	2301      	movs	r3, #1
 800515c:	e1c0      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 800515e:	4b3d      	ldr	r3, [pc, #244]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4939      	ldr	r1, [pc, #228]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]
 8005172:	e03a      	b.n	80051ea <HAL_RCC_OscConfig+0x202>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_OscConfig+0x1d6>
 800517c:	4b36      	ldr	r3, [pc, #216]	; (8005258 <HAL_RCC_OscConfig+0x270>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	f7fe f883 	bl	800328c <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x1b4>
 800518a:	f7fe f87f 	bl	800328c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x1b4>
 8005198:	2303      	movs	r3, #3
 800519a:	e1a1      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x1a2>
 80051a8:	4b2a      	ldr	r3, [pc, #168]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4927      	ldr	r1, [pc, #156]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
 80051bc:	e015      	b.n	80051ea <HAL_RCC_OscConfig+0x202>
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <HAL_RCC_OscConfig+0x270>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f7fe f862 	bl	800328c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1f6>
 80051cc:	f7fe f85e 	bl	800328c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1f6>
 80051da:	2303      	movs	r3, #3
 80051dc:	e180      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x1e4>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d03a      	beq.n	800526c <HAL_RCC_OscConfig+0x284>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d019      	beq.n	8005232 <HAL_RCC_OscConfig+0x24a>
 80051fe:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	f7fe f842 	bl	800328c <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x236>
 800520c:	f7fe f83e 	bl	800328c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x236>
 800521a:	2303      	movs	r3, #3
 800521c:	e160      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <HAL_RCC_OscConfig+0x26c>)
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x224>
 800522a:	2001      	movs	r0, #1
 800522c:	f000 face 	bl	80057cc <RCC_Delay>
 8005230:	e01c      	b.n	800526c <HAL_RCC_OscConfig+0x284>
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f7fe f828 	bl	800328c <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]
 800523e:	e00f      	b.n	8005260 <HAL_RCC_OscConfig+0x278>
 8005240:	f7fe f824 	bl	800328c <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d908      	bls.n	8005260 <HAL_RCC_OscConfig+0x278>
 800524e:	2303      	movs	r3, #3
 8005250:	e146      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
 8005258:	42420000 	.word	0x42420000
 800525c:	42420480 	.word	0x42420480
 8005260:	4b92      	ldr	r3, [pc, #584]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e9      	bne.n	8005240 <HAL_RCC_OscConfig+0x258>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80a6 	beq.w	80053c6 <HAL_RCC_OscConfig+0x3de>
 800527a:	2300      	movs	r3, #0
 800527c:	75fb      	strb	r3, [r7, #23]
 800527e:	4b8b      	ldr	r3, [pc, #556]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <HAL_RCC_OscConfig+0x2be>
 800528a:	4b88      	ldr	r3, [pc, #544]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4a87      	ldr	r2, [pc, #540]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	61d3      	str	r3, [r2, #28]
 8005296:	4b85      	ldr	r3, [pc, #532]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
 80052a6:	4b82      	ldr	r3, [pc, #520]	; (80054b0 <HAL_RCC_OscConfig+0x4c8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d118      	bne.n	80052e4 <HAL_RCC_OscConfig+0x2fc>
 80052b2:	4b7f      	ldr	r3, [pc, #508]	; (80054b0 <HAL_RCC_OscConfig+0x4c8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a7e      	ldr	r2, [pc, #504]	; (80054b0 <HAL_RCC_OscConfig+0x4c8>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	f7fd ffe5 	bl	800328c <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x2f0>
 80052c6:	f7fd ffe1 	bl	800328c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b64      	cmp	r3, #100	; 0x64
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x2f0>
 80052d4:	2303      	movs	r3, #3
 80052d6:	e103      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 80052d8:	4b75      	ldr	r3, [pc, #468]	; (80054b0 <HAL_RCC_OscConfig+0x4c8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2de>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <HAL_RCC_OscConfig+0x312>
 80052ec:	4b6f      	ldr	r3, [pc, #444]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4a6e      	ldr	r2, [pc, #440]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6213      	str	r3, [r2, #32]
 80052f8:	e02d      	b.n	8005356 <HAL_RCC_OscConfig+0x36e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0x334>
 8005302:	4b6a      	ldr	r3, [pc, #424]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4a69      	ldr	r2, [pc, #420]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	6213      	str	r3, [r2, #32]
 800530e:	4b67      	ldr	r3, [pc, #412]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	4a66      	ldr	r2, [pc, #408]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005314:	f023 0304 	bic.w	r3, r3, #4
 8005318:	6213      	str	r3, [r2, #32]
 800531a:	e01c      	b.n	8005356 <HAL_RCC_OscConfig+0x36e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b05      	cmp	r3, #5
 8005322:	d10c      	bne.n	800533e <HAL_RCC_OscConfig+0x356>
 8005324:	4b61      	ldr	r3, [pc, #388]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	4a60      	ldr	r2, [pc, #384]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 800532a:	f043 0304 	orr.w	r3, r3, #4
 800532e:	6213      	str	r3, [r2, #32]
 8005330:	4b5e      	ldr	r3, [pc, #376]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	4a5d      	ldr	r2, [pc, #372]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	6213      	str	r3, [r2, #32]
 800533c:	e00b      	b.n	8005356 <HAL_RCC_OscConfig+0x36e>
 800533e:	4b5b      	ldr	r3, [pc, #364]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	4a5a      	ldr	r2, [pc, #360]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	6213      	str	r3, [r2, #32]
 800534a:	4b58      	ldr	r3, [pc, #352]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	4a57      	ldr	r2, [pc, #348]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005350:	f023 0304 	bic.w	r3, r3, #4
 8005354:	6213      	str	r3, [r2, #32]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d015      	beq.n	800538a <HAL_RCC_OscConfig+0x3a2>
 800535e:	f7fd ff95 	bl	800328c <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]
 8005364:	e00a      	b.n	800537c <HAL_RCC_OscConfig+0x394>
 8005366:	f7fd ff91 	bl	800328c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f241 3288 	movw	r2, #5000	; 0x1388
 8005374:	4293      	cmp	r3, r2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x394>
 8005378:	2303      	movs	r3, #3
 800537a:	e0b1      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 800537c:	4b4b      	ldr	r3, [pc, #300]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ee      	beq.n	8005366 <HAL_RCC_OscConfig+0x37e>
 8005388:	e014      	b.n	80053b4 <HAL_RCC_OscConfig+0x3cc>
 800538a:	f7fd ff7f 	bl	800328c <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]
 8005390:	e00a      	b.n	80053a8 <HAL_RCC_OscConfig+0x3c0>
 8005392:	f7fd ff7b 	bl	800328c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x3c0>
 80053a4:	2303      	movs	r3, #3
 80053a6:	e09b      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 80053a8:	4b40      	ldr	r3, [pc, #256]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ee      	bne.n	8005392 <HAL_RCC_OscConfig+0x3aa>
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d105      	bne.n	80053c6 <HAL_RCC_OscConfig+0x3de>
 80053ba:	4b3c      	ldr	r3, [pc, #240]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	4a3b      	ldr	r2, [pc, #236]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 80053c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c4:	61d3      	str	r3, [r2, #28]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8087 	beq.w	80054de <HAL_RCC_OscConfig+0x4f6>
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d061      	beq.n	80054a0 <HAL_RCC_OscConfig+0x4b8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d146      	bne.n	8005472 <HAL_RCC_OscConfig+0x48a>
 80053e4:	4b33      	ldr	r3, [pc, #204]	; (80054b4 <HAL_RCC_OscConfig+0x4cc>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f7fd ff4f 	bl	800328c <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x41c>
 80053f2:	f7fd ff4b 	bl	800328c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x41c>
 8005400:	2303      	movs	r3, #3
 8005402:	e06d      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 8005404:	4b29      	ldr	r3, [pc, #164]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f0      	bne.n	80053f2 <HAL_RCC_OscConfig+0x40a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005418:	d108      	bne.n	800542c <HAL_RCC_OscConfig+0x444>
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4921      	ldr	r1, [pc, #132]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
 800542c:	4b1f      	ldr	r3, [pc, #124]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a19      	ldr	r1, [r3, #32]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	430b      	orrs	r3, r1
 800543e:	491b      	ldr	r1, [pc, #108]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
 8005444:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <HAL_RCC_OscConfig+0x4cc>)
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	f7fd ff1f 	bl	800328c <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x47c>
 8005452:	f7fd ff1b 	bl	800328c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x47c>
 8005460:	2303      	movs	r3, #3
 8005462:	e03d      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 8005464:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x46a>
 8005470:	e035      	b.n	80054de <HAL_RCC_OscConfig+0x4f6>
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <HAL_RCC_OscConfig+0x4cc>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f7fd ff08 	bl	800328c <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x4aa>
 8005480:	f7fd ff04 	bl	800328c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x4aa>
 800548e:	2303      	movs	r3, #3
 8005490:	e026      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCC_OscConfig+0x4c4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x498>
 800549e:	e01e      	b.n	80054de <HAL_RCC_OscConfig+0x4f6>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_RCC_OscConfig+0x4d0>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e019      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40007000 	.word	0x40007000
 80054b4:	42420060 	.word	0x42420060
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <HAL_RCC_OscConfig+0x500>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d106      	bne.n	80054da <HAL_RCC_OscConfig+0x4f2>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d001      	beq.n	80054de <HAL_RCC_OscConfig+0x4f6>
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <HAL_RCC_OscConfig+0x4f8>
 80054de:	2300      	movs	r3, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40021000 	.word	0x40021000

080054ec <HAL_RCC_ClockConfig>:
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x14>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0d0      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
 8005500:	4b6a      	ldr	r3, [pc, #424]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d910      	bls.n	8005530 <HAL_RCC_ClockConfig+0x44>
 800550e:	4b67      	ldr	r3, [pc, #412]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 0207 	bic.w	r2, r3, #7
 8005516:	4965      	ldr	r1, [pc, #404]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]
 800551e:	4b63      	ldr	r3, [pc, #396]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_ClockConfig+0x44>
 800552c:	2301      	movs	r3, #1
 800552e:	e0b8      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_ClockConfig+0x92>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCC_ClockConfig+0x68>
 8005548:	4b59      	ldr	r3, [pc, #356]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4a58      	ldr	r2, [pc, #352]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005552:	6053      	str	r3, [r2, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x80>
 8005560:	4b53      	ldr	r3, [pc, #332]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4a52      	ldr	r2, [pc, #328]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800556a:	6053      	str	r3, [r2, #4]
 800556c:	4b50      	ldr	r3, [pc, #320]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	494d      	ldr	r1, [pc, #308]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d040      	beq.n	800560c <HAL_RCC_ClockConfig+0x120>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xb6>
 8005592:	4b47      	ldr	r3, [pc, #284]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d115      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
 800559e:	2301      	movs	r3, #1
 80055a0:	e07f      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xce>
 80055aa:	4b41      	ldr	r3, [pc, #260]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e073      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
 80055ba:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e06b      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
 80055ca:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4936      	ldr	r1, [pc, #216]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	604b      	str	r3, [r1, #4]
 80055dc:	f7fd fe56 	bl	800328c <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_ClockConfig+0x10e>
 80055e4:	f7fd fe52 	bl	800328c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x10e>
 80055f6:	2303      	movs	r3, #3
 80055f8:	e053      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
 80055fa:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 020c 	and.w	r2, r3, #12
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d1eb      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xf8>
 800560c:	4b27      	ldr	r3, [pc, #156]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d210      	bcs.n	800563c <HAL_RCC_ClockConfig+0x150>
 800561a:	4b24      	ldr	r3, [pc, #144]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0207 	bic.w	r2, r3, #7
 8005622:	4922      	ldr	r1, [pc, #136]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
 800562a:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d001      	beq.n	800563c <HAL_RCC_ClockConfig+0x150>
 8005638:	2301      	movs	r3, #1
 800563a:	e032      	b.n	80056a2 <HAL_RCC_ClockConfig+0x1b6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCC_ClockConfig+0x16e>
 8005648:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4916      	ldr	r1, [pc, #88]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <HAL_RCC_ClockConfig+0x18e>
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	490e      	ldr	r1, [pc, #56]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
 800567a:	f000 f821 	bl	80056c0 <HAL_RCC_GetSysClockFreq>
 800567e:	4602      	mov	r2, r0
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	091b      	lsrs	r3, r3, #4
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	490a      	ldr	r1, [pc, #40]	; (80056b4 <HAL_RCC_ClockConfig+0x1c8>)
 800568c:	5ccb      	ldrb	r3, [r1, r3]
 800568e:	fa22 f303 	lsr.w	r3, r2, r3
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <HAL_RCC_ClockConfig+0x1cc>)
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4b09      	ldr	r3, [pc, #36]	; (80056bc <HAL_RCC_ClockConfig+0x1d0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f7fd fdb4 	bl	8003208 <HAL_InitTick>
 80056a0:	2300      	movs	r3, #0
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40022000 	.word	0x40022000
 80056b0:	40021000 	.word	0x40021000
 80056b4:	08006e98 	.word	0x08006e98
 80056b8:	20000000 	.word	0x20000000
 80056bc:	20000004 	.word	0x20000004

080056c0 <HAL_RCC_GetSysClockFreq>:
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	2300      	movs	r3, #0
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <HAL_RCC_GetSysClockFreq+0x94>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d002      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0x30>
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d003      	beq.n	80056f6 <HAL_RCC_GetSysClockFreq+0x36>
 80056ee:	e027      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0x80>
 80056f0:	4b19      	ldr	r3, [pc, #100]	; (8005758 <HAL_RCC_GetSysClockFreq+0x98>)
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	e027      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x86>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	0c9b      	lsrs	r3, r3, #18
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005700:	5cd3      	ldrb	r3, [r2, r3]
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d010      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x70>
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <HAL_RCC_GetSysClockFreq+0x94>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	0c5b      	lsrs	r3, r3, #17
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	4a11      	ldr	r2, [pc, #68]	; (8005760 <HAL_RCC_GetSysClockFreq+0xa0>)
 800571a:	5cd3      	ldrb	r3, [r2, r3]
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a0d      	ldr	r2, [pc, #52]	; (8005758 <HAL_RCC_GetSysClockFreq+0x98>)
 8005722:	fb03 f202 	mul.w	r2, r3, r2
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e004      	b.n	800573a <HAL_RCC_GetSysClockFreq+0x7a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0c      	ldr	r2, [pc, #48]	; (8005764 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005734:	fb02 f303 	mul.w	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	e002      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0x86>
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetSysClockFreq+0x98>)
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	bf00      	nop
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4618      	mov	r0, r3
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	007a1200 	.word	0x007a1200
 800575c:	08006eb0 	.word	0x08006eb0
 8005760:	08006ec0 	.word	0x08006ec0
 8005764:	003d0900 	.word	0x003d0900

08005768 <HAL_RCC_GetHCLKFreq>:
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
 800576c:	4b02      	ldr	r3, [pc, #8]	; (8005778 <HAL_RCC_GetHCLKFreq+0x10>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	20000000 	.word	0x20000000

0800577c <HAL_RCC_GetPCLK1Freq>:
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
 8005780:	f7ff fff2 	bl	8005768 <HAL_RCC_GetHCLKFreq>
 8005784:	4602      	mov	r2, r0
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	4903      	ldr	r1, [pc, #12]	; (80057a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005792:	5ccb      	ldrb	r3, [r1, r3]
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	4618      	mov	r0, r3
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40021000 	.word	0x40021000
 80057a0:	08006ea8 	.word	0x08006ea8

080057a4 <HAL_RCC_GetPCLK2Freq>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	f7ff ffde 	bl	8005768 <HAL_RCC_GetHCLKFreq>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	0adb      	lsrs	r3, r3, #11
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	4903      	ldr	r1, [pc, #12]	; (80057c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ba:	5ccb      	ldrb	r3, [r1, r3]
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
 80057c0:	4618      	mov	r0, r3
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40021000 	.word	0x40021000
 80057c8:	08006ea8 	.word	0x08006ea8

080057cc <RCC_Delay>:
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <RCC_Delay+0x34>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <RCC_Delay+0x38>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	0a5b      	lsrs	r3, r3, #9
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	bf00      	nop
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1e5a      	subs	r2, r3, #1
 80057ee:	60fa      	str	r2, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f9      	bne.n	80057e8 <RCC_Delay+0x1c>
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr
 8005800:	20000000 	.word	0x20000000
 8005804:	10624dd3 	.word	0x10624dd3

08005808 <HAL_RCCEx_PeriphCLKConfig>:
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d07d      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8005824:	2300      	movs	r3, #0
 8005826:	75fb      	strb	r3, [r7, #23]
 8005828:	4b4f      	ldr	r3, [pc, #316]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10d      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8005834:	4b4c      	ldr	r3, [pc, #304]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	4a4b      	ldr	r2, [pc, #300]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583e:	61d3      	str	r3, [r2, #28]
 8005840:	4b49      	ldr	r3, [pc, #292]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2301      	movs	r3, #1
 800584e:	75fb      	strb	r3, [r7, #23]
 8005850:	4b46      	ldr	r3, [pc, #280]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d118      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x86>
 800585c:	4b43      	ldr	r3, [pc, #268]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a42      	ldr	r2, [pc, #264]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	f7fd fd10 	bl	800328c <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]
 800586e:	e008      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005870:	f7fd fd0c 	bl	800328c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800587e:	2303      	movs	r3, #3
 8005880:	e06d      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005882:	4b3a      	ldr	r3, [pc, #232]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800588e:	4b36      	ldr	r3, [pc, #216]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d02e      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d027      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058ac:	4b2e      	ldr	r3, [pc, #184]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	4b2e      	ldr	r3, [pc, #184]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	4a29      	ldr	r2, [pc, #164]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6213      	str	r3, [r2, #32]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d014      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058d2:	f7fd fcdb 	bl	800328c <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]
 80058d8:	e00a      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80058da:	f7fd fcd7 	bl	800328c <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80058ec:	2303      	movs	r3, #3
 80058ee:	e036      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x156>
 80058f0:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ee      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80058fc:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4917      	ldr	r1, [pc, #92]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590a:	4313      	orrs	r3, r2
 800590c:	620b      	str	r3, [r1, #32]
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8005914:	4b14      	ldr	r3, [pc, #80]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	4a13      	ldr	r2, [pc, #76]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591e:	61d3      	str	r3, [r2, #28]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800592c:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	490b      	ldr	r1, [pc, #44]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593a:	4313      	orrs	r3, r2
 800593c:	604b      	str	r3, [r1, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	4904      	ldr	r1, [pc, #16]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]
 800595c:	2300      	movs	r3, #0
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
 800596c:	40007000 	.word	0x40007000
 8005970:	42420440 	.word	0x42420440

08005974 <HAL_RCCEx_GetPeriphCLKFreq>:
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	2300      	movs	r3, #0
 800598e:	61bb      	str	r3, [r7, #24]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b10      	cmp	r3, #16
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b10      	cmp	r3, #16
 800599a:	f200 808a 	bhi.w	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d045      	beq.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d075      	beq.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80059aa:	e082      	b.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80059ac:	4b46      	ldr	r3, [pc, #280]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	4b45      	ldr	r3, [pc, #276]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d07b      	beq.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	0c9b      	lsrs	r3, r3, #18
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	4a41      	ldr	r2, [pc, #260]	; (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80059c8:	5cd3      	ldrb	r3, [r2, r3]
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d015      	beq.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 80059d6:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	0c5b      	lsrs	r3, r3, #17
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	4a3b      	ldr	r2, [pc, #236]	; (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80059e2:	5cd3      	ldrb	r3, [r2, r3]
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80059f0:	4a38      	ldr	r2, [pc, #224]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	fb02 f303 	mul.w	r3, r2, r3
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e004      	b.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4a34      	ldr	r2, [pc, #208]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a18:	d102      	bne.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	e04a      	b.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4a2d      	ldr	r2, [pc, #180]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	e042      	b.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a40:	d108      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a50:	61bb      	str	r3, [r7, #24]
 8005a52:	e01f      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5e:	d109      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005a6c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	e00f      	b.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a7e:	d11c      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d016      	beq.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a8c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e012      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a94:	e011      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a96:	f7ff fe85 	bl	80057a4 <HAL_RCC_GetPCLK2Freq>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	0b9b      	lsrs	r3, r3, #14
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e004      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005ab2:	bf00      	nop
 8005ab4:	e002      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005ab6:	bf00      	nop
 8005ab8:	e000      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005aba:	bf00      	nop
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	08006ec4 	.word	0x08006ec4
 8005ad0:	08006ed4 	.word	0x08006ed4
 8005ad4:	007a1200 	.word	0x007a1200
 8005ad8:	003d0900 	.word	0x003d0900
 8005adc:	aaaaaaab 	.word	0xaaaaaaab

08005ae0 <HAL_TIM_Base_Init>:
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_Base_Init+0x12>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e041      	b.n	8005b76 <HAL_TIM_Base_Init+0x96>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_TIM_Base_Init+0x2c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fd f97e 	bl	8002e08 <HAL_TIM_Base_MspInit>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f000 fbd8 	bl	80062d4 <TIM_Base_SetConfig>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b74:	2300      	movs	r3, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <HAL_TIM_Base_Start>:
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d001      	beq.n	8005b98 <HAL_TIM_Base_Start+0x18>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e032      	b.n	8005bfe <HAL_TIM_Base_Start+0x7e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <HAL_TIM_Base_Start+0x88>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_TIM_Base_Start+0x48>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d009      	beq.n	8005bc8 <HAL_TIM_Base_Start+0x48>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <HAL_TIM_Base_Start+0x8c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_TIM_Base_Start+0x48>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a13      	ldr	r2, [pc, #76]	; (8005c10 <HAL_TIM_Base_Start+0x90>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d111      	bne.n	8005bec <HAL_TIM_Base_Start+0x6c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d010      	beq.n	8005bfc <HAL_TIM_Base_Start+0x7c>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 0201 	orr.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e007      	b.n	8005bfc <HAL_TIM_Base_Start+0x7c>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800

08005c14 <HAL_TIM_Base_Start_IT>:
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d001      	beq.n	8005c2c <HAL_TIM_Base_Start_IT+0x18>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e03a      	b.n	8005ca2 <HAL_TIM_Base_Start_IT+0x8e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	60da      	str	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a18      	ldr	r2, [pc, #96]	; (8005cac <HAL_TIM_Base_Start_IT+0x98>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x58>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c56:	d009      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x58>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x58>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d111      	bne.n	8005c90 <HAL_TIM_Base_Start_IT+0x7c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d010      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x8c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e007      	b.n	8005ca0 <HAL_TIM_Base_Start_IT+0x8c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40000800 	.word	0x40000800

08005cb8 <HAL_TIM_PWM_Init>:
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_PWM_Init+0x12>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e041      	b.n	8005d4e <HAL_TIM_PWM_Init+0x96>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_PWM_Init+0x2c>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f839 	bl	8005d56 <HAL_TIM_PWM_MspInit>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 faec 	bl	80062d4 <TIM_Base_SetConfig>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_PWM_MspInit>:
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bc80      	pop	{r7}
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIM_IRQHandler>:
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d122      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x5c>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d11b      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x5c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0202 	mvn.w	r2, #2
 8005d94:	611a      	str	r2, [r3, #16]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	771a      	strb	r2, [r3, #28]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_TIM_IRQHandler+0x4a>
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa76 	bl	800629c <HAL_TIM_IC_CaptureCallback>
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_IRQHandler+0x56>
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa69 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fa78 	bl	80062ae <HAL_TIM_PWM_PulseFinishedCallback>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	771a      	strb	r2, [r3, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d122      	bne.n	8005e18 <HAL_TIM_IRQHandler+0xb0>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d11b      	bne.n	8005e18 <HAL_TIM_IRQHandler+0xb0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0204 	mvn.w	r2, #4
 8005de8:	611a      	str	r2, [r3, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	771a      	strb	r2, [r3, #28]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_TIM_IRQHandler+0x9e>
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa4c 	bl	800629c <HAL_TIM_IC_CaptureCallback>
 8005e04:	e005      	b.n	8005e12 <HAL_TIM_IRQHandler+0xaa>
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa3f 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa4e 	bl	80062ae <HAL_TIM_PWM_PulseFinishedCallback>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	771a      	strb	r2, [r3, #28]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d122      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x104>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d11b      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x104>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0208 	mvn.w	r2, #8
 8005e3c:	611a      	str	r2, [r3, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2204      	movs	r2, #4
 8005e42:	771a      	strb	r2, [r3, #28]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0xf2>
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa22 	bl	800629c <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0xfe>
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa15 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa24 	bl	80062ae <HAL_TIM_PWM_PulseFinishedCallback>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x158>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0x158>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0210 	mvn.w	r2, #16
 8005e90:	611a      	str	r2, [r3, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2208      	movs	r2, #8
 8005e96:	771a      	strb	r2, [r3, #28]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x146>
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9f8 	bl	800629c <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0x152>
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f9eb 	bl	800628a <HAL_TIM_OC_DelayElapsedCallback>
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f9fa 	bl	80062ae <HAL_TIM_PWM_PulseFinishedCallback>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d10e      	bne.n	8005eec <HAL_TIM_IRQHandler+0x184>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <HAL_TIM_IRQHandler+0x184>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0201 	mvn.w	r2, #1
 8005ee4:	611a      	str	r2, [r3, #16]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fc fe28 	bl	8002b3c <HAL_TIM_PeriodElapsedCallback>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b80      	cmp	r3, #128	; 0x80
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x1b0>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f04:	2b80      	cmp	r3, #128	; 0x80
 8005f06:	d107      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x1b0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f10:	611a      	str	r2, [r3, #16]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fdb4 	bl	8006a80 <HAL_TIMEx_BreakCallback>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1dc>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1dc>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f3c:	611a      	str	r2, [r3, #16]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9be 	bl	80062c0 <HAL_TIM_TriggerCallback>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x208>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x208>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0220 	mvn.w	r2, #32
 8005f68:	611a      	str	r2, [r3, #16]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fd7f 	bl	8006a6e <HAL_TIMEx_CommutCallback>
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_PWM_ConfigChannel>:
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	2300      	movs	r3, #0
 8005f86:	75fb      	strb	r3, [r7, #23]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e0ae      	b.n	80060f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	f200 809f 	bhi.w	80060e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08005fe1 	.word	0x08005fe1
 8005fb0:	080060e5 	.word	0x080060e5
 8005fb4:	080060e5 	.word	0x080060e5
 8005fb8:	080060e5 	.word	0x080060e5
 8005fbc:	08006021 	.word	0x08006021
 8005fc0:	080060e5 	.word	0x080060e5
 8005fc4:	080060e5 	.word	0x080060e5
 8005fc8:	080060e5 	.word	0x080060e5
 8005fcc:	08006063 	.word	0x08006063
 8005fd0:	080060e5 	.word	0x080060e5
 8005fd4:	080060e5 	.word	0x080060e5
 8005fd8:	080060e5 	.word	0x080060e5
 8005fdc:	080060a3 	.word	0x080060a3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f9d6 	bl	8006398 <TIM_OC1_SetConfig>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	619a      	str	r2, [r3, #24]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0204 	bic.w	r2, r2, #4
 800600a:	619a      	str	r2, [r3, #24]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6999      	ldr	r1, [r3, #24]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	619a      	str	r2, [r3, #24]
 800601e:	e064      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fa1c 	bl	8006464 <TIM_OC2_SetConfig>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800603a:	619a      	str	r2, [r3, #24]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604a:	619a      	str	r2, [r3, #24]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6999      	ldr	r1, [r3, #24]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	619a      	str	r2, [r3, #24]
 8006060:	e043      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fa65 	bl	8006538 <TIM_OC3_SetConfig>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0208 	orr.w	r2, r2, #8
 800607c:	61da      	str	r2, [r3, #28]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0204 	bic.w	r2, r2, #4
 800608c:	61da      	str	r2, [r3, #28]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69d9      	ldr	r1, [r3, #28]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	61da      	str	r2, [r3, #28]
 80060a0:	e023      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 faaf 	bl	800660c <TIM_OC4_SetConfig>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060bc:	61da      	str	r2, [r3, #28]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060cc:	61da      	str	r2, [r3, #28]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69d9      	ldr	r1, [r3, #28]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	021a      	lsls	r2, r3, #8
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	61da      	str	r2, [r3, #28]
 80060e2:	e002      	b.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x172>
 80060e4:	2301      	movs	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
 80060e8:	bf00      	nop
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_ConfigClockSource>:
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIM_ConfigClockSource+0x1c>
 8006114:	2302      	movs	r3, #2
 8006116:	e0b4      	b.n	8006282 <HAL_TIM_ConfigClockSource+0x186>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006136:	60bb      	str	r3, [r7, #8]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613e:	60bb      	str	r3, [r7, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006150:	d03e      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006156:	f200 8087 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	f000 8086 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x172>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	d87f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b70      	cmp	r3, #112	; 0x70
 800616a:	d01a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xa6>
 800616c:	2b70      	cmp	r3, #112	; 0x70
 800616e:	d87b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b60      	cmp	r3, #96	; 0x60
 8006172:	d050      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x11a>
 8006174:	2b60      	cmp	r3, #96	; 0x60
 8006176:	d877      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b50      	cmp	r3, #80	; 0x50
 800617a:	d03c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xfa>
 800617c:	2b50      	cmp	r3, #80	; 0x50
 800617e:	d873      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d058      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x13a>
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d86f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006188:	2b30      	cmp	r3, #48	; 0x30
 800618a:	d064      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800618c:	2b30      	cmp	r3, #48	; 0x30
 800618e:	d86b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d060      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d867      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d05a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x15a>
 80061a0:	e062      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x16c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f000 faf0 	bl	8006796 <TIM_ETR_SetConfig>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
 80061ce:	e04f      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6899      	ldr	r1, [r3, #8]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f000 fad9 	bl	8006796 <TIM_ETR_SetConfig>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f2:	609a      	str	r2, [r3, #8]
 80061f4:	e03c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	461a      	mov	r2, r3
 8006204:	f000 fa50 	bl	80066a8 <TIM_TI1_ConfigInputStage>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2150      	movs	r1, #80	; 0x50
 800620e:	4618      	mov	r0, r3
 8006210:	f000 faa7 	bl	8006762 <TIM_ITRx_SetConfig>
 8006214:	e02c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	461a      	mov	r2, r3
 8006224:	f000 fa6e 	bl	8006704 <TIM_TI2_ConfigInputStage>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2160      	movs	r1, #96	; 0x60
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fa97 	bl	8006762 <TIM_ITRx_SetConfig>
 8006234:	e01c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	461a      	mov	r2, r3
 8006244:	f000 fa30 	bl	80066a8 <TIM_TI1_ConfigInputStage>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2140      	movs	r1, #64	; 0x40
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fa87 	bl	8006762 <TIM_ITRx_SetConfig>
 8006254:	e00c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 fa7e 	bl	8006762 <TIM_ITRx_SetConfig>
 8006266:	e003      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
 800626c:	e000      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x174>
 800626e:	bf00      	nop
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_TIM_OC_DelayElapsedCallback>:
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <HAL_TIM_IC_CaptureCallback>:
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_TriggerCallback>:
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
	...

080062d4 <TIM_Base_SetConfig>:
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a29      	ldr	r2, [pc, #164]	; (800638c <TIM_Base_SetConfig+0xb8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00b      	beq.n	8006304 <TIM_Base_SetConfig+0x30>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f2:	d007      	beq.n	8006304 <TIM_Base_SetConfig+0x30>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a26      	ldr	r2, [pc, #152]	; (8006390 <TIM_Base_SetConfig+0xbc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_Base_SetConfig+0x30>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a25      	ldr	r2, [pc, #148]	; (8006394 <TIM_Base_SetConfig+0xc0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d108      	bne.n	8006316 <TIM_Base_SetConfig+0x42>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a1c      	ldr	r2, [pc, #112]	; (800638c <TIM_Base_SetConfig+0xb8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0x62>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0x62>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a19      	ldr	r2, [pc, #100]	; (8006390 <TIM_Base_SetConfig+0xbc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0x62>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a18      	ldr	r2, [pc, #96]	; (8006394 <TIM_Base_SetConfig+0xc0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0x74>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	; 0x28
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a07      	ldr	r2, [pc, #28]	; (800638c <TIM_Base_SetConfig+0xb8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d103      	bne.n	800637c <TIM_Base_SetConfig+0xa8>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	615a      	str	r2, [r3, #20]
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800

08006398 <TIM_OC1_SetConfig>:
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f023 0201 	bic.w	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	621a      	str	r2, [r3, #32]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0303 	bic.w	r3, r3, #3
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f023 0302 	bic.w	r3, r3, #2
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1c      	ldr	r2, [pc, #112]	; (8006460 <TIM_OC1_SetConfig+0xc8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10c      	bne.n	800640e <TIM_OC1_SetConfig+0x76>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0308 	bic.w	r3, r3, #8
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 0304 	bic.w	r3, r3, #4
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a13      	ldr	r2, [pc, #76]	; (8006460 <TIM_OC1_SetConfig+0xc8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d111      	bne.n	800643a <TIM_OC1_SetConfig+0xa2>
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	619a      	str	r2, [r3, #24]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	635a      	str	r2, [r3, #52]	; 0x34
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	621a      	str	r2, [r3, #32]
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00

08006464 <TIM_OC2_SetConfig>:
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f023 0210 	bic.w	r2, r3, #16
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	621a      	str	r2, [r3, #32]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <TIM_OC2_SetConfig+0xd0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d10d      	bne.n	80064e0 <TIM_OC2_SetConfig+0x7c>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a14      	ldr	r2, [pc, #80]	; (8006534 <TIM_OC2_SetConfig+0xd0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d113      	bne.n	8006510 <TIM_OC2_SetConfig+0xac>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	619a      	str	r2, [r3, #24]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	621a      	str	r2, [r3, #32]
 800652a:	bf00      	nop
 800652c:	371c      	adds	r7, #28
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr
 8006534:	40012c00 	.word	0x40012c00

08006538 <TIM_OC3_SetConfig>:
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	621a      	str	r2, [r3, #32]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <TIM_OC3_SetConfig+0xd0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10d      	bne.n	80065b2 <TIM_OC3_SetConfig+0x7a>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a14      	ldr	r2, [pc, #80]	; (8006608 <TIM_OC3_SetConfig+0xd0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d113      	bne.n	80065e2 <TIM_OC3_SetConfig+0xaa>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	605a      	str	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	61da      	str	r2, [r3, #28]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	621a      	str	r2, [r3, #32]
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00

0800660c <TIM_OC4_SetConfig>:
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	031b      	lsls	r3, r3, #12
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a0f      	ldr	r2, [pc, #60]	; (80066a4 <TIM_OC4_SetConfig+0x98>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d109      	bne.n	8006680 <TIM_OC4_SetConfig+0x74>
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	019b      	lsls	r3, r3, #6
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	61da      	str	r2, [r3, #28]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	621a      	str	r2, [r3, #32]
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr
 80066a4:	40012c00 	.word	0x40012c00

080066a8 <TIM_TI1_ConfigInputStage>:
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 030a 	bic.w	r3, r3, #10
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	619a      	str	r2, [r3, #24]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <TIM_TI2_ConfigInputStage>:
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0210 	bic.w	r2, r3, #16
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	031b      	lsls	r3, r3, #12
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	619a      	str	r2, [r3, #24]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	621a      	str	r2, [r3, #32]
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <TIM_ITRx_SetConfig>:
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	f043 0307 	orr.w	r3, r3, #7
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	609a      	str	r2, [r3, #8]
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr

08006796 <TIM_ETR_SetConfig>:
 8006796:	b480      	push	{r7}
 8006798:	b087      	sub	sp, #28
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	021a      	lsls	r2, r3, #8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4313      	orrs	r3, r2
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	609a      	str	r2, [r3, #8]
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_PWMN_Start>:
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <HAL_TIMEx_PWMN_Start+0x24>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	bf14      	ite	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	2300      	moveq	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e022      	b.n	800683e <HAL_TIMEx_PWMN_Start+0x6a>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d109      	bne.n	8006812 <HAL_TIMEx_PWMN_Start+0x3e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b01      	cmp	r3, #1
 8006808:	bf14      	ite	ne
 800680a:	2301      	movne	r3, #1
 800680c:	2300      	moveq	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	e015      	b.n	800683e <HAL_TIMEx_PWMN_Start+0x6a>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d109      	bne.n	800682c <HAL_TIMEx_PWMN_Start+0x58>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	bf14      	ite	ne
 8006824:	2301      	movne	r3, #1
 8006826:	2300      	moveq	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	e008      	b.n	800683e <HAL_TIMEx_PWMN_Start+0x6a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b01      	cmp	r3, #1
 8006836:	bf14      	ite	ne
 8006838:	2301      	movne	r3, #1
 800683a:	2300      	moveq	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <HAL_TIMEx_PWMN_Start+0x72>
 8006842:	2301      	movs	r3, #1
 8006844:	e059      	b.n	80068fa <HAL_TIMEx_PWMN_Start+0x126>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <HAL_TIMEx_PWMN_Start+0x82>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006854:	e013      	b.n	800687e <HAL_TIMEx_PWMN_Start+0xaa>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b04      	cmp	r3, #4
 800685a:	d104      	bne.n	8006866 <HAL_TIMEx_PWMN_Start+0x92>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006864:	e00b      	b.n	800687e <HAL_TIMEx_PWMN_Start+0xaa>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b08      	cmp	r3, #8
 800686a:	d104      	bne.n	8006876 <HAL_TIMEx_PWMN_Start+0xa2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006874:	e003      	b.n	800687e <HAL_TIMEx_PWMN_Start+0xaa>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2204      	movs	r2, #4
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f903 	bl	8006a92 <TIM_CCxNChannelCmd>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800689a:	645a      	str	r2, [r3, #68]	; 0x44
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a18      	ldr	r2, [pc, #96]	; (8006904 <HAL_TIMEx_PWMN_Start+0x130>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00e      	beq.n	80068c4 <HAL_TIMEx_PWMN_Start+0xf0>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ae:	d009      	beq.n	80068c4 <HAL_TIMEx_PWMN_Start+0xf0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a14      	ldr	r2, [pc, #80]	; (8006908 <HAL_TIMEx_PWMN_Start+0x134>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_TIMEx_PWMN_Start+0xf0>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a13      	ldr	r2, [pc, #76]	; (800690c <HAL_TIMEx_PWMN_Start+0x138>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d111      	bne.n	80068e8 <HAL_TIMEx_PWMN_Start+0x114>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d010      	beq.n	80068f8 <HAL_TIMEx_PWMN_Start+0x124>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0201 	orr.w	r2, r2, #1
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e007      	b.n	80068f8 <HAL_TIMEx_PWMN_Start+0x124>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	2300      	movs	r3, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e046      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a10      	ldr	r2, [pc, #64]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069b4:	2300      	movs	r3, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800

080069cc <HAL_TIMEx_ConfigBreakDeadTime>:
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e03d      	b.n	8006a64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a62:	2300      	movs	r3, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <HAL_TIMEx_CommutCallback>:
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIMEx_BreakCallback>:
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <TIM_CCxNChannelCmd>:
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	401a      	ands	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1a      	ldr	r2, [r3, #32]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	621a      	str	r2, [r3, #32]
 8006ad0:	bf00      	nop
 8006ad2:	371c      	adds	r7, #28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr

08006ada <HAL_UART_Init>:
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_UART_Init+0x12>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e042      	b.n	8006b72 <HAL_UART_Init+0x98>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_UART_Init+0x2c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fc fa01 	bl	8002f08 <HAL_UART_MspInit>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2224      	movs	r2, #36	; 0x24
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f82c 	bl	8006b7c <UART_SetConfig>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b32:	611a      	str	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b42:	615a      	str	r2, [r3, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b52:	60da      	str	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	645a      	str	r2, [r3, #68]	; 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	635a      	str	r2, [r3, #52]	; 0x34
 8006b70:	2300      	movs	r3, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <UART_SetConfig>:
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	611a      	str	r2, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006bb6:	f023 030c 	bic.w	r3, r3, #12
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	60d3      	str	r3, [r2, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	615a      	str	r2, [r3, #20]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2c      	ldr	r2, [pc, #176]	; (8006c90 <UART_SetConfig+0x114>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d103      	bne.n	8006bec <UART_SetConfig+0x70>
 8006be4:	f7fe fdde 	bl	80057a4 <HAL_RCC_GetPCLK2Freq>
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	e002      	b.n	8006bf2 <UART_SetConfig+0x76>
 8006bec:	f7fe fdc6 	bl	800577c <HAL_RCC_GetPCLK1Freq>
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009a      	lsls	r2, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	4a22      	ldr	r2, [pc, #136]	; (8006c94 <UART_SetConfig+0x118>)
 8006c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	0119      	lsls	r1, r3, #4
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009a      	lsls	r2, r3, #2
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c28:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <UART_SetConfig+0x118>)
 8006c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	2064      	movs	r0, #100	; 0x64
 8006c32:	fb00 f303 	mul.w	r3, r0, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	3332      	adds	r3, #50	; 0x32
 8006c3c:	4a15      	ldr	r2, [pc, #84]	; (8006c94 <UART_SetConfig+0x118>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c48:	4419      	add	r1, r3
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009a      	lsls	r2, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <UART_SetConfig+0x118>)
 8006c62:	fba3 0302 	umull	r0, r3, r3, r2
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2064      	movs	r0, #100	; 0x64
 8006c6a:	fb00 f303 	mul.w	r3, r0, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	3332      	adds	r3, #50	; 0x32
 8006c74:	4a07      	ldr	r2, [pc, #28]	; (8006c94 <UART_SetConfig+0x118>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	440a      	add	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40013800 	.word	0x40013800
 8006c94:	51eb851f 	.word	0x51eb851f

08006c98 <memset>:
 8006c98:	4603      	mov	r3, r0
 8006c9a:	4402      	add	r2, r0
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d100      	bne.n	8006ca2 <memset+0xa>
 8006ca0:	4770      	bx	lr
 8006ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca6:	e7f9      	b.n	8006c9c <memset+0x4>

08006ca8 <__libc_init_array>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	2600      	movs	r6, #0
 8006cac:	4d0c      	ldr	r5, [pc, #48]	; (8006ce0 <__libc_init_array+0x38>)
 8006cae:	4c0d      	ldr	r4, [pc, #52]	; (8006ce4 <__libc_init_array+0x3c>)
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	42a6      	cmp	r6, r4
 8006cb6:	d109      	bne.n	8006ccc <__libc_init_array+0x24>
 8006cb8:	f000 f860 	bl	8006d7c <_init>
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	4d0a      	ldr	r5, [pc, #40]	; (8006ce8 <__libc_init_array+0x40>)
 8006cc0:	4c0a      	ldr	r4, [pc, #40]	; (8006cec <__libc_init_array+0x44>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	42a6      	cmp	r6, r4
 8006cc8:	d105      	bne.n	8006cd6 <__libc_init_array+0x2e>
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd0:	4798      	blx	r3
 8006cd2:	3601      	adds	r6, #1
 8006cd4:	e7ee      	b.n	8006cb4 <__libc_init_array+0xc>
 8006cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cda:	4798      	blx	r3
 8006cdc:	3601      	adds	r6, #1
 8006cde:	e7f2      	b.n	8006cc6 <__libc_init_array+0x1e>
 8006ce0:	08006ed8 	.word	0x08006ed8
 8006ce4:	08006ed8 	.word	0x08006ed8
 8006ce8:	08006ed8 	.word	0x08006ed8
 8006cec:	08006edc 	.word	0x08006edc

08006cf0 <round>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006cf6:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8006cfa:	2a13      	cmp	r2, #19
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4605      	mov	r5, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	dc18      	bgt.n	8006d36 <round+0x46>
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	da09      	bge.n	8006d1c <round+0x2c>
 8006d08:	3201      	adds	r2, #1
 8006d0a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006d0e:	d103      	bne.n	8006d18 <round+0x28>
 8006d10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006d14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006d18:	2200      	movs	r2, #0
 8006d1a:	e029      	b.n	8006d70 <round+0x80>
 8006d1c:	4816      	ldr	r0, [pc, #88]	; (8006d78 <round+0x88>)
 8006d1e:	4110      	asrs	r0, r2
 8006d20:	4001      	ands	r1, r0
 8006d22:	4329      	orrs	r1, r5
 8006d24:	d011      	beq.n	8006d4a <round+0x5a>
 8006d26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006d2a:	fa41 f202 	asr.w	r2, r1, r2
 8006d2e:	4413      	add	r3, r2
 8006d30:	ea23 0300 	bic.w	r3, r3, r0
 8006d34:	e7f0      	b.n	8006d18 <round+0x28>
 8006d36:	2a33      	cmp	r2, #51	; 0x33
 8006d38:	dd0a      	ble.n	8006d50 <round+0x60>
 8006d3a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006d3e:	d104      	bne.n	8006d4a <round+0x5a>
 8006d40:	4602      	mov	r2, r0
 8006d42:	f7f9 fa09 	bl	8000158 <__adddf3>
 8006d46:	4605      	mov	r5, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006d58:	40f8      	lsrs	r0, r7
 8006d5a:	4228      	tst	r0, r5
 8006d5c:	d0f5      	beq.n	8006d4a <round+0x5a>
 8006d5e:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8006d62:	2201      	movs	r2, #1
 8006d64:	408a      	lsls	r2, r1
 8006d66:	1952      	adds	r2, r2, r5
 8006d68:	bf28      	it	cs
 8006d6a:	3301      	addcs	r3, #1
 8006d6c:	ea22 0200 	bic.w	r2, r2, r0
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	e7e7      	b.n	8006d46 <round+0x56>
 8006d76:	bf00      	nop
 8006d78:	000fffff 	.word	0x000fffff

08006d7c <_init>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr

08006d88 <_fini>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr
