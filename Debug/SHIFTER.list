
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb4  08005fb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005fb4  08005fb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fb4  08005fb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  2000000c  08005fc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08005fc8  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012429  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b71  00000000  00000000  000324a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00035018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb1  00000000  00000000  00036068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cdc  00000000  00000000  00036d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001372a  00000000  00000000  000509f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000939b8  00000000  00000000  0006411f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004674  00000000  00000000  000f7ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000fc14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e7c 	.word	0x08005e7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005e7c 	.word	0x08005e7c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_f2uiz>:
 8000f74:	0042      	lsls	r2, r0, #1
 8000f76:	d20e      	bcs.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f7c:	d30b      	bcc.n	8000f96 <__aeabi_f2uiz+0x22>
 8000f7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f86:	d409      	bmi.n	8000f9c <__aeabi_f2uiz+0x28>
 8000f88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f90:	fa23 f002 	lsr.w	r0, r3, r2
 8000f94:	4770      	bx	lr
 8000f96:	f04f 0000 	mov.w	r0, #0
 8000f9a:	4770      	bx	lr
 8000f9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_f2uiz+0x32>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	d102      	bne.n	8000fac <__aeabi_f2uiz+0x38>
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8000faa:	4770      	bx	lr
 8000fac:	f04f 0000 	mov.w	r0, #0
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = (1 << (uint32_t)(fault_)); }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000fbe:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <InitController+0x24>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000fc4:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <InitController+0x28>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	6013      	str	r3, [r2, #0]

	IDLE_Entry();
 8000fca:	f000 f929 	bl	8001220 <IDLE_Entry>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000028 	.word	0x20000028
 8000fdc:	2000002c 	.word	0x2000002c

08000fe0 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]

//	myInputs = inputs;   // TODO: previously here... we should not need to do the copy every time, they are pointers
//	myOutputs = outputs;
	tControllerTimmer = HAL_GetTick();
 8000fea:	f001 ff03 	bl	8002df4 <HAL_GetTick>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a84      	ldr	r2, [pc, #528]	; (8001204 <Controller+0x224>)
 8000ff2:	6013      	str	r3, [r2, #0]

	// ANTISTALL
		#ifdef ANTISTALL_ACTIVE

			// if the shut down is activated and we are at gear greater than neutral
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError) {
 8000ff4:	4b84      	ldr	r3, [pc, #528]	; (8001208 <Controller+0x228>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	7d5b      	ldrb	r3, [r3, #21]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 808d 	bne.w	800111a <Controller+0x13a>
 8001000:	4b81      	ldr	r3, [pc, #516]	; (8001208 <Controller+0x228>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	7d1b      	ldrb	r3, [r3, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8087 	beq.w	800111a <Controller+0x13a>
 800100c:	4b7e      	ldr	r3, [pc, #504]	; (8001208 <Controller+0x228>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	7a1b      	ldrb	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 8081 	bne.w	800111a <Controller+0x13a>
 8001018:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <Controller+0x228>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001020:	2b00      	cmp	r3, #0
 8001022:	d17a      	bne.n	800111a <Controller+0x13a>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8001024:	4b79      	ldr	r3, [pc, #484]	; (800120c <Controller+0x22c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800102c:	2b02      	cmp	r3, #2
 800102e:	d03b      	beq.n	80010a8 <Controller+0xc8>
 8001030:	4b75      	ldr	r3, [pc, #468]	; (8001208 <Controller+0x228>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001038:	461a      	mov	r2, r3
 800103a:	4b73      	ldr	r3, [pc, #460]	; (8001208 <Controller+0x228>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	7d1b      	ldrb	r3, [r3, #20]
 8001040:	4619      	mov	r1, r3
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <Controller+0x230>)
 8001044:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001048:	429a      	cmp	r2, r3
 800104a:	dc2d      	bgt.n	80010a8 <Controller+0xc8>
 800104c:	4b6e      	ldr	r3, [pc, #440]	; (8001208 <Controller+0x228>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001054:	2b27      	cmp	r3, #39	; 0x27
 8001056:	dc27      	bgt.n	80010a8 <Controller+0xc8>

					if(MyOutputs->NAntistallState == Off) {
 8001058:	4b6c      	ldr	r3, [pc, #432]	; (800120c <Controller+0x22c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <Controller+0x98>
						MyOutputs->NAntistallState = Init;
 8001064:	4b69      	ldr	r3, [pc, #420]	; (800120c <Controller+0x22c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						tAntistallTimmer = HAL_GetTick();
 800106e:	f001 fec1 	bl	8002df4 <HAL_GetTick>
 8001072:	4603      	mov	r3, r0
 8001074:	4a67      	ldr	r2, [pc, #412]	; (8001214 <Controller+0x234>)
 8001076:	6013      	str	r3, [r2, #0]
					}

					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8001078:	4b64      	ldr	r3, [pc, #400]	; (800120c <Controller+0x22c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001080:	2b01      	cmp	r3, #1
 8001082:	d111      	bne.n	80010a8 <Controller+0xc8>
 8001084:	4b63      	ldr	r3, [pc, #396]	; (8001214 <Controller+0x234>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800108c:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <Controller+0x224>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d209      	bcs.n	80010a8 <Controller+0xc8>
						MyOutputs->NAntistallState = Active;
 8001094:	4b5d      	ldr	r3, [pc, #372]	; (800120c <Controller+0x22c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2202      	movs	r2, #2
 800109a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						MyOutputs->xClutchTargetProtection = CLUTCH_MAX_OPENING;
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <Controller+0x22c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f240 726c 	movw	r2, #1900	; 0x76c
 80010a6:	835a      	strh	r2, [r3, #26]
					}
				}

				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 80010a8:	4b58      	ldr	r3, [pc, #352]	; (800120c <Controller+0x22c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d11c      	bne.n	80010ee <Controller+0x10e>
 80010b4:	4b54      	ldr	r3, [pc, #336]	; (8001208 <Controller+0x228>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80010bc:	461a      	mov	r2, r3
 80010be:	4b52      	ldr	r3, [pc, #328]	; (8001208 <Controller+0x228>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	7d1b      	ldrb	r3, [r3, #20]
 80010c4:	4619      	mov	r1, r3
 80010c6:	4b52      	ldr	r3, [pc, #328]	; (8001210 <Controller+0x230>)
 80010c8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dc05      	bgt.n	80010dc <Controller+0xfc>
 80010d0:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <Controller+0x228>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 80010d8:	2b5f      	cmp	r3, #95	; 0x5f
 80010da:	dd08      	ble.n	80010ee <Controller+0x10e>
					MyOutputs->NAntistallState = Off;
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <Controller+0x22c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					MyOutputs->xClutchTargetProtection = 0;
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <Controller+0x22c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	835a      	strh	r2, [r3, #26]
				}

				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <Controller+0x22c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d119      	bne.n	800112e <Controller+0x14e>
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <Controller+0x228>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001102:	2b5f      	cmp	r3, #95	; 0x5f
 8001104:	dd13      	ble.n	800112e <Controller+0x14e>
					MyOutputs->NAntistallState = Off;
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <Controller+0x22c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					MyOutputs->xClutchTargetProtection = 0;
 8001110:	4b3e      	ldr	r3, [pc, #248]	; (800120c <Controller+0x22c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	835a      	strh	r2, [r3, #26]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8001118:	e009      	b.n	800112e <Controller+0x14e>
				}
			}

			else {
				MyOutputs->NAntistallState = Off;
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <Controller+0x22c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				MyOutputs->xClutchTargetProtection = 0;
 8001124:	4b39      	ldr	r3, [pc, #228]	; (800120c <Controller+0x22c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	835a      	strh	r2, [r3, #26]
 800112c:	e000      	b.n	8001130 <Controller+0x150>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 800112e:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8001130:	4b35      	ldr	r3, [pc, #212]	; (8001208 <Controller+0x228>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001138:	2b00      	cmp	r3, #0
 800113a:	d114      	bne.n	8001166 <Controller+0x186>
			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_MAX_POINTS, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <Controller+0x228>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fcfb 	bl	8000b40 <__aeabi_i2f>
 800114a:	4602      	mov	r2, r0
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <Controller+0x22c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	331c      	adds	r3, #28
 8001152:	f04f 0100 	mov.w	r1, #0
 8001156:	9101      	str	r1, [sp, #4]
 8001158:	f04f 0100 	mov.w	r1, #0
 800115c:	9100      	str	r1, [sp, #0]
 800115e:	492e      	ldr	r1, [pc, #184]	; (8001218 <Controller+0x238>)
 8001160:	200b      	movs	r0, #11
 8001162:	f000 ffab 	bl	80020bc <My2DMapInterpolate>
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MAX(MyOutputs->xClutchTargetProtection, MAX((uint16_t)MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift));
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <Controller+0x22c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	8c1c      	ldrh	r4, [r3, #32]
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <Controller+0x22c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fefe 	bl	8000f74 <__aeabi_f2uiz>
 8001178:	4603      	mov	r3, r0
 800117a:	b29b      	uxth	r3, r3
 800117c:	42a3      	cmp	r3, r4
 800117e:	bf38      	it	cc
 8001180:	4623      	movcc	r3, r4
 8001182:	b299      	uxth	r1, r3
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <Controller+0x22c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	8b5a      	ldrh	r2, [r3, #26]
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <Controller+0x22c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	428a      	cmp	r2, r1
 8001190:	bf38      	it	cc
 8001192:	460a      	movcc	r2, r1
 8001194:	b292      	uxth	r2, r2
 8001196:	845a      	strh	r2, [r3, #34]	; 0x22

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <Controller+0x23c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d82d      	bhi.n	80011fc <Controller+0x21c>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <Controller+0x1c8>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011c1 	.word	0x080011c1
 80011ac:	080011cb 	.word	0x080011cb
 80011b0:	080011d5 	.word	0x080011d5
 80011b4:	080011df 	.word	0x080011df
 80011b8:	080011e9 	.word	0x080011e9
 80011bc:	080011f3 	.word	0x080011f3

		case IDLE_STATE:
			IDLE_Run();
 80011c0:	f000 f870 	bl	80012a4 <IDLE_Run>
			IDLE_Event();
 80011c4:	f000 f844 	bl	8001250 <IDLE_Event>
			break;
 80011c8:	e018      	b.n	80011fc <Controller+0x21c>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 80011ca:	f000 f8eb 	bl	80013a4 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 80011ce:	f000 f88b 	bl	80012e8 <PRE_UPSHIFT_Event>
			break;
 80011d2:	e013      	b.n	80011fc <Controller+0x21c>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 80011d4:	f000 f9c4 	bl	8001560 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 80011d8:	f000 f976 	bl	80014c8 <PRE_DNSHIFT_Event>
			break;
 80011dc:	e00e      	b.n	80011fc <Controller+0x21c>
		case SHIFTING_STATE:
			SHIFTING_Run();
 80011de:	f000 fabf 	bl	8001760 <SHIFTING_Run>
			SHIFTING_Event();
 80011e2:	f000 fa97 	bl	8001714 <SHIFTING_Event>
			break;
 80011e6:	e009      	b.n	80011fc <Controller+0x21c>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 80011e8:	f000 faec 	bl	80017c4 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 80011ec:	f000 fae4 	bl	80017b8 <POSTSHIFT_Event>
			break;
 80011f0:	e004      	b.n	80011fc <Controller+0x21c>
		case ERROR_STATE:
			ERROR_Run();
 80011f2:	f000 fb17 	bl	8001824 <ERROR_Run>
			ERROR_Event();
 80011f6:	f000 fb03 	bl	8001800 <ERROR_Event>
			break;
 80011fa:	bf00      	nop
		}

}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	20000034 	.word	0x20000034
 8001208:	20000028 	.word	0x20000028
 800120c:	2000002c 	.word	0x2000002c
 8001210:	08005eec 	.word	0x08005eec
 8001214:	20000044 	.word	0x20000044
 8001218:	08005e94 	.word	0x08005e94
 800121c:	20000030 	.word	0x20000030

08001220 <IDLE_Entry>:


void IDLE_Entry(void) {
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <IDLE_Entry+0x1c>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <IDLE_Entry+0x20>)
 800122a:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <IDLE_Entry+0x1c>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000030 	.word	0x20000030
 8001240:	20000031 	.word	0x20000031

08001244 <IDLE_Exit>:
void IDLE_Exit(void) {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <IDLE_Event>:
void IDLE_Event(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <IDLE_Event+0x50>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fe01 	bl	8001e60 <CheckFaults>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <IDLE_Event+0x1e>
		IDLE_Exit();
 8001264:	f7ff ffee 	bl	8001244 <IDLE_Exit>
		ERROR_Entry();
 8001268:	f000 fab2 	bl	80017d0 <ERROR_Entry>
		return;
 800126c:	e017      	b.n	800129e <IDLE_Event+0x4e>
	}

	// TODO: do we need to also check controller errors here? I think no...

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <IDLE_Event+0x50>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <IDLE_Event+0x36>
        IDLE_Exit();
 800127c:	f7ff ffe2 	bl	8001244 <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8001280:	f000 f816 	bl	80012b0 <PRE_UPSHIFT_Entry>
        return;
 8001284:	e00b      	b.n	800129e <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <IDLE_Event+0x50>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <IDLE_Event+0x4e>
        IDLE_Exit();
 8001294:	f7ff ffd6 	bl	8001244 <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8001298:	f000 f8fa 	bl	8001490 <PRE_DNSHIFT_Entry>
        return;
 800129c:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000028 	.word	0x20000028

080012a4 <IDLE_Run>:
void IDLE_Run(void) {
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <PRE_UPSHIFT_Entry+0x20>)
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <PRE_UPSHIFT_Entry+0x24>)
 80012ba:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <PRE_UPSHIFT_Entry+0x20>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 80012c2:	f001 fd97 	bl	8002df4 <HAL_GetTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <PRE_UPSHIFT_Entry+0x28>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000030 	.word	0x20000030
 80012d4:	20000031 	.word	0x20000031
 80012d8:	20000038 	.word	0x20000038

080012dc <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 80012e8:	b598      	push	{r3, r4, r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <PRE_UPSHIFT_Event+0xac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fdb5 	bl	8001e60 <CheckFaults>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <PRE_UPSHIFT_Event+0x1e>
		PRE_UPSHIFT_Exit();
 80012fc:	f7ff ffee 	bl	80012dc <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8001300:	f000 fa66 	bl	80017d0 <ERROR_Entry>
		return;
 8001304:	e044      	b.n	8001390 <PRE_UPSHIFT_Event+0xa8>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7d5b      	ldrb	r3, [r3, #21]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d12c      	bne.n	800136a <PRE_UPSHIFT_Event+0x82>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <PRE_UPSHIFT_Event+0xac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	7d1a      	ldrb	r2, [r3, #20]
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3201      	adds	r2, #1
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	761a      	strb	r2, [r3, #24]

		if(CLUTCH_ACTUATION_DURING_UPSHIFT || MyOutputs->BOverrideActuateClutchOnUpShift) {		// we check for clutch strategy during shift
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001328:	2b00      	cmp	r3, #0
 800132a:	d010      	beq.n	800134e <PRE_UPSHIFT_Event+0x66>
			MyOutputs->xClutchTargetShift = xClutchTargetUpShiftMap[MyInputs->NGear];
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <PRE_UPSHIFT_Event+0xac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	7d1b      	ldrb	r3, [r3, #20]
 8001332:	461a      	mov	r2, r3
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <PRE_UPSHIFT_Event+0xb4>)
 8001336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b292      	uxth	r2, r2
 8001340:	841a      	strh	r2, [r3, #32]
			MyOutputs->BOverrideActuateClutchOnUpShift = 0; 									// reset the strat for the next gear
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800134c:	e003      	b.n	8001356 <PRE_UPSHIFT_Event+0x6e>
		}
		else {
			MyOutputs->xClutchTargetShift = 0;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2200      	movs	r2, #0
 8001354:	841a      	strh	r2, [r3, #32]
		}

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		PRE_UPSHIFT_Exit();
 8001360:	f7ff ffbc 	bl	80012dc <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8001364:	f000 f972 	bl	800164c <SHIFTING_Entry>
		return;
 8001368:	e012      	b.n	8001390 <PRE_UPSHIFT_Event+0xa8>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <PRE_UPSHIFT_Event+0xb0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	7d5b      	ldrb	r3, [r3, #21]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00d      	beq.n	8001390 <PRE_UPSHIFT_Event+0xa8>
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <PRE_UPSHIFT_Event+0xb8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800137c:	f001 fd3a 	bl	8002df4 <HAL_GetTick>
 8001380:	4603      	mov	r3, r0
 8001382:	429c      	cmp	r4, r3
 8001384:	d804      	bhi.n	8001390 <PRE_UPSHIFT_Event+0xa8>
		PRE_UPSHIFT_Exit();
 8001386:	f7ff ffa9 	bl	80012dc <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 800138a:	f000 fa21 	bl	80017d0 <ERROR_Entry>
		return;
 800138e:	bf00      	nop
	}


}
 8001390:	bd98      	pop	{r3, r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	20000028 	.word	0x20000028
 8001398:	2000002c 	.word	0x2000002c
 800139c:	08005f10 	.word	0x08005f10
 80013a0:	20000038 	.word	0x20000038

080013a4 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <PRE_UPSHIFT_Run+0xe0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	7d1b      	ldrb	r3, [r3, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d113      	bne.n	80013da <PRE_UPSHIFT_Run+0x36>
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <PRE_UPSHIFT_Run+0xe0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 80013ba:	2b5a      	cmp	r3, #90	; 0x5a
 80013bc:	dc0d      	bgt.n	80013da <PRE_UPSHIFT_Run+0x36>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	7d5a      	ldrb	r2, [r3, #21]
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0202 	orr.w	r2, r2, #2
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	755a      	strb	r2, [r3, #21]
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2202      	movs	r2, #2
 80013d6:	759a      	strb	r2, [r3, #22]
 80013d8:	e008      	b.n	80013ec <PRE_UPSHIFT_Run+0x48>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7d5a      	ldrb	r2, [r3, #21]
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0202 	bic.w	r2, r2, #2
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	755a      	strb	r2, [r3, #21]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift up with too low rpm
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <PRE_UPSHIFT_Run+0xe0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <PRE_UPSHIFT_Run+0xe0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	7d1b      	ldrb	r3, [r3, #20]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <PRE_UPSHIFT_Run+0xe8>)
 8001400:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001404:	429a      	cmp	r2, r3
 8001406:	da13      	bge.n	8001430 <PRE_UPSHIFT_Run+0x8c>
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <PRE_UPSHIFT_Run+0xe0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10d      	bne.n	8001430 <PRE_UPSHIFT_Run+0x8c>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	7d5a      	ldrb	r2, [r3, #21]
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0208 	orr.w	r2, r2, #8
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	755a      	strb	r2, [r3, #21]
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2208      	movs	r2, #8
 800142c:	759a      	strb	r2, [r3, #22]
 800142e:	e008      	b.n	8001442 <PRE_UPSHIFT_Run+0x9e>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7d5a      	ldrb	r2, [r3, #21]
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0208 	bic.w	r2, r2, #8
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	755a      	strb	r2, [r3, #21]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <PRE_UPSHIFT_Run+0xe0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	7d1b      	ldrb	r3, [r3, #20]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d90d      	bls.n	8001468 <PRE_UPSHIFT_Run+0xc4>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	7d5a      	ldrb	r2, [r3, #21]
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0210 	orr.w	r2, r2, #16
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	755a      	strb	r2, [r3, #21]
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2210      	movs	r2, #16
 8001464:	759a      	strb	r2, [r3, #22]
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
}
 8001466:	e008      	b.n	800147a <PRE_UPSHIFT_Run+0xd6>
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	7d5a      	ldrb	r2, [r3, #21]
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <PRE_UPSHIFT_Run+0xe4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0210 	bic.w	r2, r2, #16
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	755a      	strb	r2, [r3, #21]
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000028 	.word	0x20000028
 8001488:	2000002c 	.word	0x2000002c
 800148c:	08005ef8 	.word	0x08005ef8

08001490 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <PRE_DNSHIFT_Entry+0x20>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <PRE_DNSHIFT_Entry+0x24>)
 800149a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <PRE_DNSHIFT_Entry+0x20>)
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 80014a2:	f001 fca7 	bl	8002df4 <HAL_GetTick>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <PRE_DNSHIFT_Entry+0x28>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000030 	.word	0x20000030
 80014b4:	20000031 	.word	0x20000031
 80014b8:	20000038 	.word	0x20000038

080014bc <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 80014c8:	b598      	push	{r3, r4, r7, lr}
 80014ca:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80014cc:	4b20      	ldr	r3, [pc, #128]	; (8001550 <PRE_DNSHIFT_Event+0x88>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fcc5 	bl	8001e60 <CheckFaults>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <PRE_DNSHIFT_Event+0x1e>
		PRE_DNSHIFT_Exit();
 80014dc:	f7ff ffee 	bl	80014bc <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 80014e0:	f000 f976 	bl	80017d0 <ERROR_Entry>
		return;
 80014e4:	e033      	b.n	800154e <PRE_DNSHIFT_Event+0x86>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 80014e6:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <PRE_DNSHIFT_Event+0x8c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	7d5b      	ldrb	r3, [r3, #21]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d11b      	bne.n	8001528 <PRE_DNSHIFT_Event+0x60>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <PRE_DNSHIFT_Event+0x88>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	7d1a      	ldrb	r2, [r3, #20]
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <PRE_DNSHIFT_Event+0x8c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3a01      	subs	r2, #1
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	761a      	strb	r2, [r3, #24]

		if(CLUTCH_ACTUATION_DURING_DNSHIFT || MyOutputs->BOverrideActuateClutchOnDnShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetDnShiftMap[MyInputs->NGear];
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <PRE_DNSHIFT_Event+0x88>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	7d1b      	ldrb	r3, [r3, #20]
 8001506:	4619      	mov	r1, r3
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <PRE_DNSHIFT_Event+0x8c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <PRE_DNSHIFT_Event+0x90>)
 800150e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001512:	841a      	strh	r2, [r3, #32]
			MyOutputs->BOverrideActuateClutchOnDnShift = 0; 									// reset the strat for the next gear
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <PRE_DNSHIFT_Event+0x8c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			MyOutputs->xClutchTargetShift = 0;
		}

		if(ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 800151e:	f7ff ffcd 	bl	80014bc <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 8001522:	f000 f893 	bl	800164c <SHIFTING_Entry>
		return;
 8001526:	e012      	b.n	800154e <PRE_DNSHIFT_Event+0x86>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <PRE_DNSHIFT_Event+0x8c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	7d5b      	ldrb	r3, [r3, #21]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00d      	beq.n	800154e <PRE_DNSHIFT_Event+0x86>
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <PRE_DNSHIFT_Event+0x94>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 800153a:	f001 fc5b 	bl	8002df4 <HAL_GetTick>
 800153e:	4603      	mov	r3, r0
 8001540:	429c      	cmp	r4, r3
 8001542:	d804      	bhi.n	800154e <PRE_DNSHIFT_Event+0x86>
		PRE_DNSHIFT_Exit();
 8001544:	f7ff ffba 	bl	80014bc <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 8001548:	f000 f942 	bl	80017d0 <ERROR_Entry>
		return;
 800154c:	bf00      	nop
	}

}
 800154e:	bd98      	pop	{r3, r4, r7, pc}
 8001550:	20000028 	.word	0x20000028
 8001554:	2000002c 	.word	0x2000002c
 8001558:	08005f24 	.word	0x08005f24
 800155c:	20000038 	.word	0x20000038

08001560 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH) {	// trying to put neutral gear without clutch
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <PRE_DNSHIFT_Run+0xe0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	7d1b      	ldrb	r3, [r3, #20]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d113      	bne.n	8001596 <PRE_DNSHIFT_Run+0x36>
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <PRE_DNSHIFT_Run+0xe0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001576:	2b5a      	cmp	r3, #90	; 0x5a
 8001578:	dc0d      	bgt.n	8001596 <PRE_DNSHIFT_Run+0x36>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	7d5a      	ldrb	r2, [r3, #21]
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0204 	orr.w	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	755a      	strb	r2, [r3, #21]
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2204      	movs	r2, #4
 8001592:	759a      	strb	r2, [r3, #22]
 8001594:	e008      	b.n	80015a8 <PRE_DNSHIFT_Run+0x48>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	7d5a      	ldrb	r2, [r3, #21]
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0204 	bic.w	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	755a      	strb	r2, [r3, #21]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift down with too high rpm
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <PRE_DNSHIFT_Run+0xe0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <PRE_DNSHIFT_Run+0xe0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	7d1b      	ldrb	r3, [r3, #20]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <PRE_DNSHIFT_Run+0xe8>)
 80015bc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dd13      	ble.n	80015ec <PRE_DNSHIFT_Run+0x8c>
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <PRE_DNSHIFT_Run+0xe0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10d      	bne.n	80015ec <PRE_DNSHIFT_Run+0x8c>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	7d5a      	ldrb	r2, [r3, #21]
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	755a      	strb	r2, [r3, #21]
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2220      	movs	r2, #32
 80015e8:	759a      	strb	r2, [r3, #22]
 80015ea:	e008      	b.n	80015fe <PRE_DNSHIFT_Run+0x9e>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	7d5a      	ldrb	r2, [r3, #21]
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0220 	bic.w	r2, r2, #32
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	755a      	strb	r2, [r3, #21]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <PRE_DNSHIFT_Run+0xe0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	7d1b      	ldrb	r3, [r3, #20]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10d      	bne.n	8001624 <PRE_DNSHIFT_Run+0xc4>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	7d5a      	ldrb	r2, [r3, #21]
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	755a      	strb	r2, [r3, #21]
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	759a      	strb	r2, [r3, #22]
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }

}
 8001622:	e008      	b.n	8001636 <PRE_DNSHIFT_Run+0xd6>
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	7d5a      	ldrb	r2, [r3, #21]
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <PRE_DNSHIFT_Run+0xe4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	755a      	strb	r2, [r3, #21]
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000028 	.word	0x20000028
 8001644:	2000002c 	.word	0x2000002c
 8001648:	08005f04 	.word	0x08005f04

0800164c <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <SHIFTING_Entry+0x98>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <SHIFTING_Entry+0x9c>)
 8001656:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <SHIFTING_Entry+0x98>)
 800165a:	2203      	movs	r2, #3
 800165c:	701a      	strb	r2, [r3, #0]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <SHIFTING_Entry+0x9c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d111      	bne.n	800168a <SHIFTING_Entry+0x3e>
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <SHIFTING_Entry+0xa0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	7d1b      	ldrb	r3, [r3, #20]
 800166c:	461a      	mov	r2, r3
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <SHIFTING_Entry+0xa4>)
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	4a1f      	ldr	r2, [pc, #124]	; (80016f4 <SHIFTING_Entry+0xa8>)
 8001676:	6013      	str	r3, [r2, #0]
		NShiftRequest = Up;
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <SHIFTING_Entry+0xac>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
		MyOutputs->BUpShiftPortState = 1;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <SHIFTING_Entry+0xb0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001688:	e025      	b.n	80016d6 <SHIFTING_Entry+0x8a>
	}
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <SHIFTING_Entry+0x9c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d111      	bne.n	80016b6 <SHIFTING_Entry+0x6a>
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear];
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <SHIFTING_Entry+0xa0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	7d1b      	ldrb	r3, [r3, #20]
 8001698:	461a      	mov	r2, r3
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <SHIFTING_Entry+0xb4>)
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <SHIFTING_Entry+0xa8>)
 80016a2:	6013      	str	r3, [r2, #0]
		NShiftRequest = Down;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <SHIFTING_Entry+0xac>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
		MyOutputs->BDnShiftPortState = 1;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <SHIFTING_Entry+0xb0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80016b4:	e00f      	b.n	80016d6 <SHIFTING_Entry+0x8a>
	}
	else {
		NCurrentState = Unknown;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <SHIFTING_Entry+0x98>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <SHIFTING_Entry+0xb0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	7d5a      	ldrb	r2, [r3, #21]
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <SHIFTING_Entry+0xb0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	755a      	strb	r2, [r3, #21]
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <SHIFTING_Entry+0xb0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	759a      	strb	r2, [r3, #22]
	}

	tShiftTimer = HAL_GetTick();
 80016d6:	f001 fb8d 	bl	8002df4 <HAL_GetTick>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a09      	ldr	r2, [pc, #36]	; (8001704 <SHIFTING_Entry+0xb8>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000030 	.word	0x20000030
 80016e8:	20000031 	.word	0x20000031
 80016ec:	20000028 	.word	0x20000028
 80016f0:	08005f30 	.word	0x08005f30
 80016f4:	20000040 	.word	0x20000040
 80016f8:	20000032 	.word	0x20000032
 80016fc:	2000002c 	.word	0x2000002c
 8001700:	08005f44 	.word	0x08005f44
 8001704:	2000003c 	.word	0x2000003c

08001708 <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <SHIFTING_Event+0x3c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fb9f 	bl	8001e60 <CheckFaults>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <SHIFTING_Event+0x1e>
		SHIFTING_Exit();
 8001728:	f7ff ffee 	bl	8001708 <SHIFTING_Exit>
		ERROR_Entry();
 800172c:	f000 f850 	bl	80017d0 <ERROR_Entry>
		return;
 8001730:	e00d      	b.n	800174e <SHIFTING_Event+0x3a>
	}

	// TODO: keep checking for control errors


	if((tShiftTimer + tShifterMaxTransitTime) < tControllerTimmer) {	// the max time for the gear has expired
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <SHIFTING_Event+0x40>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <SHIFTING_Event+0x44>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	441a      	add	r2, r3
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <SHIFTING_Event+0x48>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d204      	bcs.n	800174e <SHIFTING_Event+0x3a>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 8001744:	f7ff ffe0 	bl	8001708 <SHIFTING_Exit>
		POSTSHIFT_Entry();
 8001748:	f000 f810 	bl	800176c <POSTSHIFT_Entry>
		return;
 800174c:	bf00      	nop
	}

}
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000028 	.word	0x20000028
 8001754:	2000003c 	.word	0x2000003c
 8001758:	20000040 	.word	0x20000040
 800175c:	20000034 	.word	0x20000034

08001760 <SHIFTING_Run>:
void SHIFTING_Run(void) {
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	// PID


	// FEED FORWARD

}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <POSTSHIFT_Entry+0x40>)
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <POSTSHIFT_Entry+0x44>)
 8001776:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <POSTSHIFT_Entry+0x40>)
 800177a:	2204      	movs	r2, #4
 800177c:	701a      	strb	r2, [r3, #0]

	// stop all actuation
	MyOutputs->BUpShiftPortState = 0;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <POSTSHIFT_Entry+0x48>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	MyOutputs->BDnShiftPortState = 0;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <POSTSHIFT_Entry+0x48>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShift = 0;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <POSTSHIFT_Entry+0x48>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	841a      	strh	r2, [r3, #32]
	MyOutputs->BSparkCut = 0;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <POSTSHIFT_Entry+0x48>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000030 	.word	0x20000030
 80017b0:	20000031 	.word	0x20000031
 80017b4:	2000002c 	.word	0x2000002c

080017b8 <POSTSHIFT_Event>:
void POSTSHIFT_Exit(void) {

	// TODO: probably here we need to set the MyOutputs->NGear = MyInputs->NGear

}
void POSTSHIFT_Event(void) {
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0


	// remember return in all functions
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <ERROR_Entry>:


void ERROR_Entry(void) {
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <ERROR_Entry+0x1c>)
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <ERROR_Entry+0x20>)
 80017da:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <ERROR_Entry+0x1c>)
 80017de:	2205      	movs	r2, #5
 80017e0:	701a      	strb	r2, [r3, #0]

	// TODO: evaluate if it is correct to stop all output actions here...maybe not
	// clutch should always work... if we entere here during an actuation, not sure if it is correct to interrupt it
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000030 	.word	0x20000030
 80017f0:	20000031 	.word	0x20000031

080017f4 <ERROR_Exit>:
void ERROR_Exit(void) {
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <ERROR_Event>:
void ERROR_Event(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

	// check that all faults are cleared
	if(!CheckFaults(MyInputs)) {
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <ERROR_Event+0x20>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fb29 	bl	8001e60 <CheckFaults>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <ERROR_Event+0x1e>
		ERROR_Exit();
 8001814:	f7ff ffee 	bl	80017f4 <ERROR_Exit>
		IDLE_Entry();
 8001818:	f7ff fd02 	bl	8001220 <IDLE_Entry>
		return;
 800181c:	bf00      	nop
	// TODO: it must not be completely blocking to be able to comeback from an error.
	// the concept is to keep a counter for the number of errors of each type and after a certain point come back and continue normal running with less features
	// check that all control errors are cleared
	// and do not zero the logged error status
	// remember return in all functions
}
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000028 	.word	0x20000028

08001824 <ERROR_Run>:
void ERROR_Run(void) {
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

	// we save the last error
	if(MyOutputs->NControlErrorStatus != 0) {
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <ERROR_Run+0x24>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	7d5b      	ldrb	r3, [r3, #21]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <ERROR_Run+0x1a>
		MyOutputs->NControlErrorStatusLogged = MyOutputs->NControlErrorStatus;
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <ERROR_Run+0x24>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <ERROR_Run+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	7d52      	ldrb	r2, [r2, #21]
 800183c:	759a      	strb	r2, [r3, #22]
	}

	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle

}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	2000002c 	.word	0x2000002c
 800184c:	00000000 	.word	0x00000000

08001850 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side);

void ReadInputs(InputStruct *inputs){
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af02      	add	r7, sp, #8
 8001856:	6078      	str	r0, [r7, #4]

	// Reset events
	    inputs->nEventStatus = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

	    tCurrent = HAL_GetTick();
 800185e:	f001 fac9 	bl	8002df4 <HAL_GetTick>
 8001862:	4603      	mov	r3, r0
 8001864:	4aa6      	ldr	r2, [pc, #664]	; (8001b00 <ReadInputs+0x2b0>)
 8001866:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	    // NGear Conditioning

		// ADC averaging
		NGearRawADCFiltered = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide);
 8001868:	4ba6      	ldr	r3, [pc, #664]	; (8001b04 <ReadInputs+0x2b4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	f240 1165 	movw	r1, #357	; 0x165
 8001874:	48a4      	ldr	r0, [pc, #656]	; (8001b08 <ReadInputs+0x2b8>)
 8001876:	f000 fb85 	bl	8001f84 <MyHalfBufferAverage>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4ba3      	ldr	r3, [pc, #652]	; (8001b0c <ReadInputs+0x2bc>)
 8001880:	801a      	strh	r2, [r3, #0]

		// voltage conversion
		inputs->VNGearRaw = (float)(NGearRawADCFiltered * 3.3 / 4095.0);
 8001882:	4ba2      	ldr	r3, [pc, #648]	; (8001b0c <ReadInputs+0x2bc>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdb4 	bl	80003f4 <__aeabi_i2d>
 800188c:	a398      	add	r3, pc, #608	; (adr r3, 8001af0 <ReadInputs+0x2a0>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fe19 	bl	80004c8 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	a396      	add	r3, pc, #600	; (adr r3, 8001af8 <ReadInputs+0x2a8>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe ff3a 	bl	800071c <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f83c 	bl	800092c <__aeabi_d2f>
 80018b4:	4602      	mov	r2, r0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60da      	str	r2, [r3, #12]

		// mapping
		inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGearRaw, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3310      	adds	r3, #16
 80018c2:	4993      	ldr	r1, [pc, #588]	; (8001b10 <ReadInputs+0x2c0>)
 80018c4:	9101      	str	r1, [sp, #4]
 80018c6:	4992      	ldr	r1, [pc, #584]	; (8001b10 <ReadInputs+0x2c0>)
 80018c8:	9100      	str	r1, [sp, #0]
 80018ca:	4992      	ldr	r1, [pc, #584]	; (8001b14 <ReadInputs+0x2c4>)
 80018cc:	2006      	movs	r0, #6
 80018ce:	f000 fbf5 	bl	80020bc <My2DMapInterpolate>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	721a      	strb	r2, [r3, #8]

		// TODO: think about checking the float NGear for +-0.2 to define false neutral

		// conditioning (round float to nearest integer)
		inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fd9a 	bl	8000418 <__aeabi_f2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f004 fa80 	bl	8005df0 <round>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7fe fff8 	bl	80008ec <__aeabi_d2uiz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	751a      	strb	r2, [r3, #20]

		// CLAMPING
		inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7d1b      	ldrb	r3, [r3, #20]
 8001908:	2b05      	cmp	r3, #5
 800190a:	bf28      	it	cs
 800190c:	2305      	movcs	r3, #5
 800190e:	b2da      	uxtb	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	751a      	strb	r2, [r3, #20]

		// check for errors
		if(inputs->BNGearInError) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7a1b      	ldrb	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <ReadInputs+0xda>
			RaiseFault(inputs, NGEAR_FAULT);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f043 0201 	orr.w	r2, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	e005      	b.n	8001936 <ReadInputs+0xe6>
			// inputs->NGear = 1; // TODO: is it correct??? not sure. I would put 1 to be able trigger antistall and to be generic for all functions
		}
		else ClearFault(inputs, NGEAR_FAULT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f023 0201 	bic.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
		// Steering Wheel Fitted Check

		if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tCurrent) {
 8001936:	4b78      	ldr	r3, [pc, #480]	; (8001b18 <ReadInputs+0x2c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <ReadInputs+0x2b0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d20a      	bcs.n	800195c <ReadInputs+0x10c>
			inputs->BSteeringWheelFitted = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			RaiseFault(inputs, STEERING_WHEEL_FAULT);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f043 0202 	orr.w	r2, r3, #2
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	e009      	b.n	8001970 <ReadInputs+0x120>
		}
		else {
			inputs->BSteeringWheelFitted = 1;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			ClearFault(inputs, STEERING_WHEEL_FAULT);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 0202 	bic.w	r2, r3, #2
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
		// Emergency Button Conditioning

		// CAN Input
		inputs->BEmergencyButtonCANInError = BEmergencyButtonCANInError;
 8001970:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <ReadInputs+0x2cc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		inputs->BEmergencyButtonCAN = BEmergencyButtonCAN;
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <ReadInputs+0x2d0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				// do the window up and down checks and define if in the correct range
				// define if in error


		// Emergency Input Strategy
		if(inputs->BSteeringWheelFitted && !inputs->BEmergencyButtonCANInError) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800198e:	2b00      	cmp	r3, #0
 8001990:	d013      	beq.n	80019ba <ReadInputs+0x16a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10e      	bne.n	80019ba <ReadInputs+0x16a>
			inputs->BEmergencyRequest = inputs->BEmergencyButtonCAN;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			inputs->NBEmergencyRequestSource = CAN;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			inputs->BEmergencyRequestInError = 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80019b8:	e01b      	b.n	80019f2 <ReadInputs+0x1a2>
		}
		else if(!inputs->BEmergencyButtonAnalogInError) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10e      	bne.n	80019e2 <ReadInputs+0x192>
			inputs->BEmergencyRequest = inputs->BEmergencyButtonAnalog;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			inputs->NBEmergencyRequestSource = Analog;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			inputs->BEmergencyRequestInError = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80019e0:	e007      	b.n	80019f2 <ReadInputs+0x1a2>
		}
		else {
			inputs->BEmergencyRequestInError = 1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			inputs->BEmergencyRequest = 0;		// we force to zero if in error
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	// ---------------------------------------------------------------------------------------------------
		// Clutch Paddle Conditioning

		// CAN Input
		inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 80019f2:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <ReadInputs+0x2d4>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8001a00:	4b49      	ldr	r3, [pc, #292]	; (8001b28 <ReadInputs+0x2d8>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b25a      	sxtb	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		// Analog Input
		// TODO: analog read, convert to voltage and map to -x% 10x%

		// Clutch Paddle Input Strategy
		if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <ReadInputs+0x1ec>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <ReadInputs+0x1ec>
			rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f993 202e 	ldrsb.w	r2, [r3, #46]	; 0x2e
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <ReadInputs+0x2dc>)
 8001a28:	701a      	strb	r2, [r3, #0]
			inputs->NrClutchPaddleSource = CAN;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inputs->BrClutchPaddleInError = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001a3a:	e020      	b.n	8001a7e <ReadInputs+0x22e>

		}
		else if(!inputs->BrClutchPaddleRawAnalogInError) {
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <ReadInputs+0x212>
			rClutchPaddleRaw = inputs->rClutchPaddleRawAnalog;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <ReadInputs+0x2dc>)
 8001a4e:	701a      	strb	r2, [r3, #0]
			inputs->NrClutchPaddleSource = Analog;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inputs->BrClutchPaddleInError = 0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001a60:	e00d      	b.n	8001a7e <ReadInputs+0x22e>
		}
		else {
			inputs->BrClutchPaddleInError = 1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			rClutchPaddleRaw = (inputs->BEmergencyRequest == 1 ? 100 : 0);	// we use the extra button to fully press the clutch
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <ReadInputs+0x228>
 8001a74:	2264      	movs	r2, #100	; 0x64
 8001a76:	e000      	b.n	8001a7a <ReadInputs+0x22a>
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <ReadInputs+0x2dc>)
 8001a7c:	701a      	strb	r2, [r3, #0]
		}

		// CLAMPING
		inputs->rClutchPaddle = CLAMP(rClutchPaddleRaw, CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <ReadInputs+0x2dc>)
 8001a80:	f993 3000 	ldrsb.w	r3, [r3]
 8001a84:	2b63      	cmp	r3, #99	; 0x63
 8001a86:	dc06      	bgt.n	8001a96 <ReadInputs+0x246>
 8001a88:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <ReadInputs+0x2dc>)
 8001a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	e000      	b.n	8001a98 <ReadInputs+0x248>
 8001a96:	2264      	movs	r2, #100	; 0x64
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	// ---------------------------------------------------------------------------------------------------
		// Up-Dn Shift Conditioning

		// CAN Input
		inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <ReadInputs+0x2e0>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	759a      	strb	r2, [r3, #22]
		inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <ReadInputs+0x2e4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	761a      	strb	r2, [r3, #24]
		inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <ReadInputs+0x2e8>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	75da      	strb	r2, [r3, #23]
		inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <ReadInputs+0x2ec>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	765a      	strb	r2, [r3, #25]
				// do the window up and down checks and define if in the correct range
				// define if in error


		// UpShift Input Strategy
		if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d037      	beq.n	8001b40 <ReadInputs+0x2f0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7d9b      	ldrb	r3, [r3, #22]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d133      	bne.n	8001b40 <ReadInputs+0x2f0>
			inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7dda      	ldrb	r2, [r3, #23]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	775a      	strb	r2, [r3, #29]
			inputs->NBUpshiftRequestSource = CAN;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]
			inputs->BUpShiftRequestInError = 0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	771a      	strb	r2, [r3, #28]
 8001aee:	e043      	b.n	8001b78 <ReadInputs+0x328>
 8001af0:	66666666 	.word	0x66666666
 8001af4:	400a6666 	.word	0x400a6666
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40affe00 	.word	0x40affe00
 8001b00:	20000048 	.word	0x20000048
 8001b04:	2000006a 	.word	0x2000006a
 8001b08:	20000228 	.word	0x20000228
 8001b0c:	20000068 	.word	0x20000068
 8001b10:	3e4ccccd 	.word	0x3e4ccccd
 8001b14:	08005f58 	.word	0x08005f58
 8001b18:	2000005c 	.word	0x2000005c
 8001b1c:	20000057 	.word	0x20000057
 8001b20:	20000056 	.word	0x20000056
 8001b24:	20000059 	.word	0x20000059
 8001b28:	20000058 	.word	0x20000058
 8001b2c:	2000006b 	.word	0x2000006b
 8001b30:	20000051 	.word	0x20000051
 8001b34:	20000053 	.word	0x20000053
 8001b38:	20000050 	.word	0x20000050
 8001b3c:	20000052 	.word	0x20000052
		}
		else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e9b      	ldrb	r3, [r3, #26]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d111      	bne.n	8001b6c <ReadInputs+0x31c>
			inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7edb      	ldrb	r3, [r3, #27]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	bf0c      	ite	eq
 8001b50:	2301      	moveq	r3, #1
 8001b52:	2300      	movne	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	461a      	mov	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	775a      	strb	r2, [r3, #29]
			inputs->NBUpshiftRequestSource = Analog;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2020 	strb.w	r2, [r3, #32]
			inputs->BUpShiftRequestInError = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	771a      	strb	r2, [r3, #28]
 8001b6a:	e005      	b.n	8001b78 <ReadInputs+0x328>
		}
		else {
			inputs->BUpShiftRequestInError = 1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	771a      	strb	r2, [r3, #28]
			inputs->BUpShiftRequest = 0;		// we force to zero if in error
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	775a      	strb	r2, [r3, #29]
		}

		// DnShift Input Strategy
		if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00f      	beq.n	8001ba2 <ReadInputs+0x352>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7e1b      	ldrb	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10b      	bne.n	8001ba2 <ReadInputs+0x352>
			inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7e5a      	ldrb	r2, [r3, #25]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	77da      	strb	r2, [r3, #31]
			inputs->NBDnshiftRequestSource = CAN;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			inputs->BDnShiftRequestInError = 0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	779a      	strb	r2, [r3, #30]
 8001ba0:	e01b      	b.n	8001bda <ReadInputs+0x38a>
		}
		else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7e9b      	ldrb	r3, [r3, #26]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d111      	bne.n	8001bce <ReadInputs+0x37e>
			inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7edb      	ldrb	r3, [r3, #27]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	77da      	strb	r2, [r3, #31]
			inputs->NBDnshiftRequestSource = Analog;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			inputs->BDnShiftRequestInError = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	779a      	strb	r2, [r3, #30]
 8001bcc:	e005      	b.n	8001bda <ReadInputs+0x38a>
		}
		else {
			inputs->BDnShiftRequestInError = 1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	779a      	strb	r2, [r3, #30]
			inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	77da      	strb	r2, [r3, #31]
		}

	// ---------------------------------------------------------------------------------------------------
		// Launch Button Conditioning

		inputs->BLaunchButtonCANInError = BLaunchButtonCANInError;
 8001bda:	4b8f      	ldr	r3, [pc, #572]	; (8001e18 <ReadInputs+0x5c8>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		inputs->BLaunchButtonCAN = BLaunchRequestCAN;
 8001be6:	4b8d      	ldr	r3, [pc, #564]	; (8001e1c <ReadInputs+0x5cc>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		// Launch Input Strategy
		if(inputs->BSteeringWheelFitted && !inputs->BLaunchButtonCANInError) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00f      	beq.n	8001c1c <ReadInputs+0x3cc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10a      	bne.n	8001c1c <ReadInputs+0x3cc>
			inputs->BLaunchRequest = inputs->BLaunchButtonCAN;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			inputs->BLaunchRequestInError = 0;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001c1a:	e007      	b.n	8001c2c <ReadInputs+0x3dc>
		}
		else {
			inputs->BLaunchRequestInError = 1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			inputs->BLaunchRequest = 0;		// we force to zero if in error
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	// ---------------------------------------------------------------------------------------------------
		// nEngine Conditioning

		// CAN Input
		if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tCurrent) {
 8001c2c:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <ReadInputs+0x5d0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001c34:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <ReadInputs+0x5d4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d20b      	bcs.n	8001c54 <ReadInputs+0x404>
			inputs->BnEngineInError = 1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inputs->BnEngineReliable = 0;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			inputs->nEngine = 0; 		// we force to zero if in error
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c52:	e00d      	b.n	8001c70 <ReadInputs+0x420>
//			RaiseFault(inputs, ECU_COMMS_FAULT); // TODO: we temporarily comment if for testing without the ECU
		}
		else {
			inputs->BnEngineInError = 0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inputs->BnEngineReliable = 1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			ClearFault(inputs, ECU_COMMS_FAULT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	605a      	str	r2, [r3, #4]
		}

		inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8001c70:	4b6d      	ldr	r3, [pc, #436]	; (8001e28 <ReadInputs+0x5d8>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	86da      	strh	r2, [r3, #54]	; 0x36
		// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
		// think about doing extra checks apart from CANRx timing


		if(inputs->BnEngineInError) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <ReadInputs+0x43c>
			inputs->nEngine = 0; 		// we force to zero if in error
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	86da      	strh	r2, [r3, #54]	; 0x36
		}

	// ---------------------------------------------------------------------------------------------------
		// CAN Diagnostics
		inputs->NCANErrors = NCANErrorCount;			// update can error count
 8001c8c:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <ReadInputs+0x5dc>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		inputs->NCANRxErrors = NCanGetRxErrorCount;	// update can Rx error count
 8001c98:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <ReadInputs+0x5e0>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	// ---------------------------------------------------------------------------------------------------
		// EVENTS

		if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7f1b      	ldrb	r3, [r3, #28]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d111      	bne.n	8001cd2 <ReadInputs+0x482>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7f5b      	ldrb	r3, [r3, #29]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <ReadInputs+0x482>
 8001cb6:	4b5f      	ldr	r3, [pc, #380]	; (8001e34 <ReadInputs+0x5e4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <ReadInputs+0x482>
			BUpShiftRequested = 1;
 8001cbe:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <ReadInputs+0x5e4>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e014      	b.n	8001cfc <ReadInputs+0x4ac>
		}
		else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7f1b      	ldrb	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d110      	bne.n	8001cfc <ReadInputs+0x4ac>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7f5b      	ldrb	r3, [r3, #29]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <ReadInputs+0x4ac>
 8001ce2:	4b54      	ldr	r3, [pc, #336]	; (8001e34 <ReadInputs+0x5e4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <ReadInputs+0x4ac>
			BUpShiftRequested = 0;
 8001cea:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <ReadInputs+0x5e4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f043 0202 	orr.w	r2, r3, #2
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	601a      	str	r2, [r3, #0]
		}

		if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7f9b      	ldrb	r3, [r3, #30]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d111      	bne.n	8001d28 <ReadInputs+0x4d8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	7fdb      	ldrb	r3, [r3, #31]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <ReadInputs+0x4d8>
 8001d0c:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <ReadInputs+0x5e8>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <ReadInputs+0x4d8>
			BDnShiftRequested = 1;
 8001d14:	4b48      	ldr	r3, [pc, #288]	; (8001e38 <ReadInputs+0x5e8>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, DNSHIFT_PRESS_EVT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f043 0204 	orr.w	r2, r3, #4
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e014      	b.n	8001d52 <ReadInputs+0x502>
		}
		else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7f9b      	ldrb	r3, [r3, #30]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d110      	bne.n	8001d52 <ReadInputs+0x502>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7fdb      	ldrb	r3, [r3, #31]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10c      	bne.n	8001d52 <ReadInputs+0x502>
 8001d38:	4b3f      	ldr	r3, [pc, #252]	; (8001e38 <ReadInputs+0x5e8>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <ReadInputs+0x502>
			BDnShiftRequested = 0;
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <ReadInputs+0x5e8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f043 0208 	orr.w	r2, r3, #8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
		}

		if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d112      	bne.n	8001d82 <ReadInputs+0x532>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <ReadInputs+0x532>
 8001d66:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <ReadInputs+0x5ec>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <ReadInputs+0x532>
			BLaunchRequested = 1;
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <ReadInputs+0x5ec>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, LAUNCH_PRESS_EVT);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e016      	b.n	8001db0 <ReadInputs+0x560>
		}
		else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <ReadInputs+0x560>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <ReadInputs+0x560>
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <ReadInputs+0x5ec>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <ReadInputs+0x560>
			BLaunchRequested = 0;
 8001d9e:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <ReadInputs+0x5ec>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, LAUNCH_RELEASE_EVT);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	601a      	str	r2, [r3, #0]
		}

		if(!inputs->BEmergencyRequestInError && inputs->BEmergencyRequest && !BEmergencyRequested) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d112      	bne.n	8001de0 <ReadInputs+0x590>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00d      	beq.n	8001de0 <ReadInputs+0x590>
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <ReadInputs+0x5f0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d109      	bne.n	8001de0 <ReadInputs+0x590>
			BEmergencyRequested = 1;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <ReadInputs+0x5f0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, EMERGENCY_PRESS_EVT);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
//		}


	// ---------------------------------------------------------------------------------------------------

}
 8001dde:	e016      	b.n	8001e0e <ReadInputs+0x5be>
		else if(!inputs->BEmergencyRequestInError && !inputs->BEmergencyRequest && BEmergencyRequested) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d111      	bne.n	8001e0e <ReadInputs+0x5be>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <ReadInputs+0x5be>
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <ReadInputs+0x5f0>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <ReadInputs+0x5be>
			BEmergencyRequested = 0;
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <ReadInputs+0x5f0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, EMERGENCY_RELEASE_EVT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000055 	.word	0x20000055
 8001e1c:	20000054 	.word	0x20000054
 8001e20:	20000060 	.word	0x20000060
 8001e24:	20000048 	.word	0x20000048
 8001e28:	2000005a 	.word	0x2000005a
 8001e2c:	20000064 	.word	0x20000064
 8001e30:	20000066 	.word	0x20000066
 8001e34:	2000004c 	.word	0x2000004c
 8001e38:	2000004d 	.word	0x2000004d
 8001e3c:	2000004e 	.word	0x2000004e
 8001e40:	2000004f 	.word	0x2000004f

08001e44 <InitInputs>:

void InitInputs(void){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 8001e48:	f240 22ca 	movw	r2, #714	; 0x2ca
 8001e4c:	4902      	ldr	r1, [pc, #8]	; (8001e58 <InitInputs+0x14>)
 8001e4e:	4803      	ldr	r0, [pc, #12]	; (8001e5c <InitInputs+0x18>)
 8001e50:	f001 f8d6 	bl	8003000 <HAL_ADC_Start_DMA>
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000228 	.word	0x20000228
 8001e5c:	2000006c 	.word	0x2000006c

08001e60 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <CheckFaults+0x14>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <CheckFaults+0x16>
	return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	f107 0214 	add.w	r2, r7, #20
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f001 fda4 	bl	80039e2 <HAL_CAN_GetRxMessage>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <CAN_RX+0xd0>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <CAN_RX+0xd0>)
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	e04c      	b.n	8001f4a <CAN_RX+0xca>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001eb6:	d004      	beq.n	8001ec2 <CAN_RX+0x42>
 8001eb8:	f240 3211 	movw	r2, #785	; 0x311
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d034      	beq.n	8001f2a <CAN_RX+0xaa>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = RxBuffer[0] << 8 | RxBuffer[1];
		 break;

	 default:
		 break;
 8001ec0:	e043      	b.n	8001f4a <CAN_RX+0xca>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 8001ec2:	f000 ff97 	bl	8002df4 <HAL_GetTick>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a22      	ldr	r2, [pc, #136]	; (8001f54 <CAN_RX+0xd4>)
 8001eca:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCAN = RxBuffer[0] & 0x01;
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <CAN_RX+0xd8>)
 8001ed6:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCANInError = RxBuffer[0] & 0x80;	// TODO: TBC...
 8001ed8:	7b3b      	ldrb	r3, [r7, #12]
 8001eda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <CAN_RX+0xdc>)
 8001ee2:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN = RxBuffer[1] & 0x01;
 8001ee4:	7b7b      	ldrb	r3, [r7, #13]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <CAN_RX+0xe0>)
 8001eee:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError = RxBuffer[1] & 0x80; 	// TODO: TBC...
 8001ef0:	7b7b      	ldrb	r3, [r7, #13]
 8001ef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <CAN_RX+0xe4>)
 8001efa:	701a      	strb	r2, [r3, #0]
		 BLaunchRequestCAN = RxBuffer[2];
 8001efc:	7bba      	ldrb	r2, [r7, #14]
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <CAN_RX+0xe8>)
 8001f00:	701a      	strb	r2, [r3, #0]
		 BLaunchButtonCANInError = RxBuffer[2] & 0x80; 	// TODO: TBC...
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <CAN_RX+0xec>)
 8001f0c:	701a      	strb	r2, [r3, #0]
		 BEmergencyButtonCAN = RxBuffer[3];
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <CAN_RX+0xf0>)
 8001f12:	701a      	strb	r2, [r3, #0]
		 BEmergencyButtonCANInError = RxBuffer[3] & 0x80; // TODO: TBC...
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <CAN_RX+0xf4>)
 8001f1e:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN = RxBuffer[4];
 8001f20:	7c3b      	ldrb	r3, [r7, #16]
 8001f22:	b25a      	sxtb	r2, r3
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <CAN_RX+0xf8>)
 8001f26:	701a      	strb	r2, [r3, #0]
		 break;
 8001f28:	e00f      	b.n	8001f4a <CAN_RX+0xca>
		 tCANECULastSeen = HAL_GetTick();
 8001f2a:	f000 ff63 	bl	8002df4 <HAL_GetTick>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <CAN_RX+0xfc>)
 8001f32:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = RxBuffer[0] << 8 | RxBuffer[1];
 8001f34:	7b3b      	ldrb	r3, [r7, #12]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	7b7b      	ldrb	r3, [r7, #13]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <CAN_RX+0x100>)
 8001f46:	801a      	strh	r2, [r3, #0]
		 break;
 8001f48:	bf00      	nop
	 }
}
 8001f4a:	3730      	adds	r7, #48	; 0x30
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000066 	.word	0x20000066
 8001f54:	2000005c 	.word	0x2000005c
 8001f58:	20000050 	.word	0x20000050
 8001f5c:	20000051 	.word	0x20000051
 8001f60:	20000052 	.word	0x20000052
 8001f64:	20000053 	.word	0x20000053
 8001f68:	20000054 	.word	0x20000054
 8001f6c:	20000055 	.word	0x20000055
 8001f70:	20000056 	.word	0x20000056
 8001f74:	20000057 	.word	0x20000057
 8001f78:	20000058 	.word	0x20000058
 8001f7c:	20000060 	.word	0x20000060
 8001f80:	2000005a 	.word	0x2000005a

08001f84 <MyHalfBufferAverage>:
    }
    return 1; // If no match found, return error!
}


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side) {
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]

	uint32_t Accumulator=0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
	uint16_t Offset = (side == 1 ? halfsize : 0);
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <MyHalfBufferAverage+0x1e>
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	e000      	b.n	8001fa4 <MyHalfBufferAverage+0x20>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	813b      	strh	r3, [r7, #8]

	for(uint16_t i=0; i<halfsize; i++) {
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	817b      	strh	r3, [r7, #10]
 8001faa:	e00d      	b.n	8001fc8 <MyHalfBufferAverage+0x44>
		Accumulator += buffer[i + Offset];
 8001fac:	897a      	ldrh	r2, [r7, #10]
 8001fae:	893b      	ldrh	r3, [r7, #8]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0; i<halfsize; i++) {
 8001fc2:	897b      	ldrh	r3, [r7, #10]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	817b      	strh	r3, [r7, #10]
 8001fc8:	897a      	ldrh	r2, [r7, #10]
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d3ed      	bcc.n	8001fac <MyHalfBufferAverage+0x28>
	}

	Accumulator /= halfsize;
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
	return (uint16_t)Accumulator;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	b29b      	uxth	r3, r3

}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ff44 	bl	8001e80 <CAN_RX>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 8002008:	2101      	movs	r1, #1
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff38 	bl	8001e80 <CAN_RX>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_CAN_ErrorCallback+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_CAN_ErrorCallback+0x20>)
 800202c:	701a      	strb	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	20000064 	.word	0x20000064

0800203c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800205a:	701a      	strb	r2, [r3, #0]
	}
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000006c 	.word	0x2000006c
 800206c:	2000006a 	.word	0x2000006a

08002070 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

	// TODO: start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	// remember: Upshift: activated when writing 0 and not activating when writing 1
	//			 Dnshift: activated when writing 1 and not activating when writing 0

	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	// TODO: remember that the inverted sign is only for testing with the old cooling PCBs
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, !output->BUpShiftPortState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <WriteOutputs+0x3c>)
 800209a:	f002 fc79 	bl	8004990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, output->BDnShiftPortState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80020a4:	461a      	mov	r2, r3
 80020a6:	2140      	movs	r1, #64	; 0x40
 80020a8:	4803      	ldr	r0, [pc, #12]	; (80020b8 <WriteOutputs+0x3c>)
 80020aa:	f002 fc71 	bl	8004990 <HAL_GPIO_WritePin>


	// CAN


}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40010800 	.word	0x40010800

080020bc <My2DMapInterpolate>:
#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	68fe      	ldr	r6, [r7, #12]
 80020cc:	1e73      	subs	r3, r6, #1
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	4632      	mov	r2, r6
 80020d2:	2300      	movs	r3, #0
 80020d4:	4614      	mov	r4, r2
 80020d6:	461d      	mov	r5, r3
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	016b      	lsls	r3, r5, #5
 80020e2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80020e6:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fc70 	bl	80009d4 <__aeabi_fsub>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7fe ff13 	bl	8000f24 <__aeabi_fcmplt>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8002104:	4633      	mov	r3, r6
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4413      	add	r3, r2
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	601a      	str	r2, [r3, #0]
		return 1;
 8002112:	2301      	movs	r3, #1
 8002114:	e07a      	b.n	800220c <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fc58 	bl	80009d8 <__addsf3>
 8002128:	4603      	mov	r3, r0
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe ff17 	bl	8000f60 <__aeabi_fcmpgt>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 8002138:	4633      	mov	r3, r6
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4413      	add	r3, r2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	3a01      	subs	r2, #1
 8002144:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	601a      	str	r2, [r3, #0]
		return 1;
 800214c:	2301      	movs	r3, #1
 800214e:	e05d      	b.n	800220c <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e00e      	b.n	8002174 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	4619      	mov	r1, r3
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe fede 	bl	8000f24 <__aeabi_fcmplt>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3b01      	subs	r3, #1
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbeb      	blt.n	8002156 <My2DMapInterpolate+0x9a>
 800217e:	e000      	b.n	8002182 <My2DMapInterpolate+0xc6>
			break;
 8002180:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fc1d 	bl	80009d4 <__aeabi_fsub>
 800219a:	4603      	mov	r3, r0
 800219c:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 800219e:	4633      	mov	r3, r6
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	3201      	adds	r2, #1
 80021aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80021ae:	4633      	mov	r3, r6
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4413      	add	r3, r2
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fc09 	bl	80009d4 <__aeabi_fsub>
 80021c2:	4603      	mov	r3, r0
 80021c4:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 80021c6:	4633      	mov	r3, r6
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fbf8 	bl	80009d4 <__aeabi_fsub>
 80021e4:	4603      	mov	r3, r0
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fcfd 	bl	8000be8 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fdac 	bl	8000d50 <__aeabi_fdiv>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4619      	mov	r1, r3
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7fe fbeb 	bl	80009d8 <__addsf3>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	601a      	str	r2, [r3, #0]
	return 0;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3724      	adds	r7, #36	; 0x24
 8002210:	46bd      	mov	sp, r7
 8002212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002214 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002218:	f3bf 8f4f 	dsb	sy
}
 800221c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <__NVIC_SystemReset+0x24>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002226:	4904      	ldr	r1, [pc, #16]	; (8002238 <__NVIC_SystemReset+0x24>)
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__NVIC_SystemReset+0x28>)
 800222a:	4313      	orrs	r3, r2
 800222c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800222e:	f3bf 8f4f 	dsb	sy
}
 8002232:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <__NVIC_SystemReset+0x20>
 8002238:	e000ed00 	.word	0xe000ed00
 800223c:	05fa0004 	.word	0x05fa0004

08002240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002244:	f000 fd7e 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002248:	f000 f83e 	bl	80022c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800224c:	f000 faf2 	bl	8002834 <MX_GPIO_Init>
  MX_DMA_Init();
 8002250:	f000 fad2 	bl	80027f8 <MX_DMA_Init>
  MX_TIM3_Init();
 8002254:	f000 fa58 	bl	8002708 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002258:	f000 f892 	bl	8002380 <MX_ADC1_Init>
  MX_CAN_Init();
 800225c:	f000 f8ce 	bl	80023fc <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002260:	f000 faa0 	bl	80027a4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002264:	f000 fa02 	bl	800266c <MX_TIM2_Init>
  MX_TIM1_Init();
 8002268:	f000 f9b0 	bl	80025cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);		// general 1MHz timer for timing
 800226c:	4811      	ldr	r0, [pc, #68]	; (80022b4 <main+0x74>)
 800226e:	f003 f8bd 	bl	80053ec <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8002272:	4811      	ldr	r0, [pc, #68]	; (80022b8 <main+0x78>)
 8002274:	f003 f904 	bl	8005480 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start(&htim2);		// general timer for PWM use


  InitInputs();
 8002278:	f7ff fde4 	bl	8001e44 <InitInputs>
  InitController(&Inputs,&Outputs);
 800227c:	490f      	ldr	r1, [pc, #60]	; (80022bc <main+0x7c>)
 800227e:	4810      	ldr	r0, [pc, #64]	; (80022c0 <main+0x80>)
 8002280:	f7fe fe98 	bl	8000fb4 <InitController>
  InitOutputs();
 8002284:	f7ff fef4 	bl	8002070 <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 8002288:	2032      	movs	r0, #50	; 0x32
 800228a:	f000 fdbd 	bl	8002e08 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <main+0x84>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0fa      	beq.n	800228e <main+0x4e>
		  BCycleTimerFlag = 0;
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <main+0x84>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 800229e:	4808      	ldr	r0, [pc, #32]	; (80022c0 <main+0x80>)
 80022a0:	f7ff fad6 	bl	8001850 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 80022a4:	4905      	ldr	r1, [pc, #20]	; (80022bc <main+0x7c>)
 80022a6:	4806      	ldr	r0, [pc, #24]	; (80022c0 <main+0x80>)
 80022a8:	f7fe fe9a 	bl	8000fe0 <Controller>
		  WriteOutputs(&Outputs);
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <main+0x7c>)
 80022ae:	f7ff fee5 	bl	800207c <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 80022b2:	e7ec      	b.n	800228e <main+0x4e>
 80022b4:	20000108 	.word	0x20000108
 80022b8:	20000198 	.word	0x20000198
 80022bc:	20000800 	.word	0x20000800
 80022c0:	200007c0 	.word	0x200007c0
 80022c4:	200007bc 	.word	0x200007bc

080022c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b094      	sub	sp, #80	; 0x50
 80022cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d2:	2228      	movs	r2, #40	; 0x28
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fd5e 	bl	8005d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022f8:	2301      	movs	r3, #1
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002302:	2300      	movs	r3, #0
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002306:	2301      	movs	r3, #1
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800230a:	2302      	movs	r3, #2
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800230e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002314:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fb4e 	bl	80049c0 <HAL_RCC_OscConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800232a:	f000 fb07 	bl	800293c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800232e:	230f      	movs	r3, #15
 8002330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800233a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2102      	movs	r1, #2
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fdba 	bl	8004ec4 <HAL_RCC_ClockConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002356:	f000 faf1 	bl	800293c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800235a:	2302      	movs	r3, #2
 800235c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800235e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002362:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	4618      	mov	r0, r3
 8002368:	f002 ff3a 	bl	80051e0 <HAL_RCCEx_PeriphCLKConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002372:	f000 fae3 	bl	800293c <Error_Handler>
  }
}
 8002376:	bf00      	nop
 8002378:	3750      	adds	r7, #80	; 0x50
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <MX_ADC1_Init+0x74>)
 8002392:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <MX_ADC1_Init+0x78>)
 8002394:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <MX_ADC1_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <MX_ADC1_Init+0x74>)
 800239e:	2201      	movs	r2, #1
 80023a0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <MX_ADC1_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <MX_ADC1_Init+0x74>)
 80023aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80023ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <MX_ADC1_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_ADC1_Init+0x74>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <MX_ADC1_Init+0x74>)
 80023be:	f000 fd47 	bl	8002e50 <HAL_ADC_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80023c8:	f000 fab8 	bl	800293c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023d0:	2301      	movs	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80023d4:	2307      	movs	r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_ADC1_Init+0x74>)
 80023de:	f000 feff 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80023e8:	f000 faa8 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000006c 	.word	0x2000006c
 80023f8:	40012400 	.word	0x40012400

080023fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0a8      	sub	sp, #160	; 0xa0
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002402:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002404:	4a70      	ldr	r2, [pc, #448]	; (80025c8 <MX_CAN_Init+0x1cc>)
 8002406:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002408:	4b6e      	ldr	r3, [pc, #440]	; (80025c4 <MX_CAN_Init+0x1c8>)
 800240a:	2204      	movs	r2, #4
 800240c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800240e:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002414:	4b6b      	ldr	r3, [pc, #428]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800241a:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <MX_CAN_Init+0x1c8>)
 800241c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002420:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002422:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002424:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002428:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800242a:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <MX_CAN_Init+0x1c8>)
 800242c:	2200      	movs	r2, #0
 800242e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002430:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002432:	2201      	movs	r2, #1
 8002434:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002438:	2200      	movs	r2, #0
 800243a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800243c:	4b61      	ldr	r3, [pc, #388]	; (80025c4 <MX_CAN_Init+0x1c8>)
 800243e:	2201      	movs	r2, #1
 8002440:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002442:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002448:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <MX_CAN_Init+0x1c8>)
 800244a:	2200      	movs	r2, #0
 800244c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800244e:	485d      	ldr	r0, [pc, #372]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002450:	f001 f8bf 	bl	80035d2 <HAL_CAN_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800245a:	f000 fa6f 	bl	800293c <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = STEERING_RX_ID << 5 ;
 800245e:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002462:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8002468:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800246c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 800248e:	2301      	movs	r3, #1
 8002490:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8002494:	2301      	movs	r3, #1
 8002496:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 800249a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800249e:	4619      	mov	r1, r3
 80024a0:	4848      	ldr	r0, [pc, #288]	; (80025c4 <MX_CAN_Init+0x1c8>)
 80024a2:	f001 f991 	bl	80037c8 <HAL_CAN_ConfigFilter>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_CAN_Init+0xb4>
 	  Error_Handler();
 80024ac:	f000 fa46 	bl	800293c <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = STEERING_RX_ID << 5 ;
 80024b0:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80024b4:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 80024ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024be:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 80024d4:	2301      	movs	r3, #1
 80024d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 80024d8:	2301      	movs	r3, #1
 80024da:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 80024dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024e0:	4619      	mov	r1, r3
 80024e2:	4838      	ldr	r0, [pc, #224]	; (80025c4 <MX_CAN_Init+0x1c8>)
 80024e4:	f001 f970 	bl	80037c8 <HAL_CAN_ConfigFilter>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_CAN_Init+0xf6>
 	  Error_Handler();
 80024ee:	f000 fa25 	bl	800293c <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 80024f2:	f246 2320 	movw	r3, #25120	; 0x6220
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 80024fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002506:	2300      	movs	r3, #0
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 800250a:	2302      	movs	r3, #2
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002512:	2300      	movs	r3, #0
 8002514:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002516:	2301      	movs	r3, #1
 8002518:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 800251a:	2301      	movs	r3, #1
 800251c:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 800251e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002522:	4619      	mov	r1, r3
 8002524:	4827      	ldr	r0, [pc, #156]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002526:	f001 f94f 	bl	80037c8 <HAL_CAN_ConfigFilter>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_CAN_Init+0x138>
 	  Error_Handler();
 8002530:	f000 fa04 	bl	800293c <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 8002534:	f246 2320 	movw	r3, #25120	; 0x6220
 8002538:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 800253e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002542:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002548:	2301      	movs	r3, #1
 800254a:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 800254c:	2303      	movs	r3, #3
 800254e:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8002558:	2301      	movs	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 800255c:	2301      	movs	r3, #1
 800255e:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8002560:	463b      	mov	r3, r7
 8002562:	4619      	mov	r1, r3
 8002564:	4817      	ldr	r0, [pc, #92]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002566:	f001 f92f 	bl	80037c8 <HAL_CAN_ConfigFilter>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_CAN_Init+0x178>
 	  Error_Handler();
 8002570:	f000 f9e4 	bl	800293c <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002574:	2102      	movs	r1, #2
 8002576:	4813      	ldr	r0, [pc, #76]	; (80025c4 <MX_CAN_Init+0x1c8>)
 8002578:	f001 fb54 	bl	8003c24 <HAL_CAN_ActivateNotification>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_CAN_Init+0x18a>
	   Error_Handler();
 8002582:	f000 f9db 	bl	800293c <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8002586:	2110      	movs	r1, #16
 8002588:	480e      	ldr	r0, [pc, #56]	; (80025c4 <MX_CAN_Init+0x1c8>)
 800258a:	f001 fb4b 	bl	8003c24 <HAL_CAN_ActivateNotification>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8002594:	f000 f9d2 	bl	800293c <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8002598:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 800259c:	4809      	ldr	r0, [pc, #36]	; (80025c4 <MX_CAN_Init+0x1c8>)
 800259e:	f001 fb41 	bl	8003c24 <HAL_CAN_ActivateNotification>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_CAN_Init+0x1b0>
	   Error_Handler();
 80025a8:	f000 f9c8 	bl	800293c <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_CAN_Init+0x1c8>)
 80025ae:	f001 f9d4 	bl	800395a <HAL_CAN_Start>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 80025b8:	f000 f9c0 	bl	800293c <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	37a0      	adds	r7, #160	; 0xa0
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200000e0 	.word	0x200000e0
 80025c8:	40006400 	.word	0x40006400

080025cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e0:	463b      	mov	r3, r7
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <MX_TIM1_Init+0x98>)
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <MX_TIM1_Init+0x9c>)
 80025ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <MX_TIM1_Init+0x98>)
 80025f0:	2247      	movs	r2, #71	; 0x47
 80025f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <MX_TIM1_Init+0x98>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <MX_TIM1_Init+0x98>)
 80025fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002600:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <MX_TIM1_Init+0x98>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <MX_TIM1_Init+0x98>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <MX_TIM1_Init+0x98>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002614:	4813      	ldr	r0, [pc, #76]	; (8002664 <MX_TIM1_Init+0x98>)
 8002616:	f002 fe99 	bl	800534c <HAL_TIM_Base_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002620:	f000 f98c 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002628:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800262a:	f107 0308 	add.w	r3, r7, #8
 800262e:	4619      	mov	r1, r3
 8002630:	480c      	ldr	r0, [pc, #48]	; (8002664 <MX_TIM1_Init+0x98>)
 8002632:	f003 f87f 	bl	8005734 <HAL_TIM_ConfigClockSource>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800263c:	f000 f97e 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002648:	463b      	mov	r3, r7
 800264a:	4619      	mov	r1, r3
 800264c:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_TIM1_Init+0x98>)
 800264e:	f003 fa55 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002658:	f000 f970 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000108 	.word	0x20000108
 8002668:	40012c00 	.word	0x40012c00

0800266c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002680:	463b      	mov	r3, r7
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <MX_TIM2_Init+0x98>)
 800268a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800268e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <MX_TIM2_Init+0x98>)
 8002692:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8002696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_TIM2_Init+0x98>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <MX_TIM2_Init+0x98>)
 80026a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <MX_TIM2_Init+0x98>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_TIM2_Init+0x98>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026b2:	4814      	ldr	r0, [pc, #80]	; (8002704 <MX_TIM2_Init+0x98>)
 80026b4:	f002 fe4a 	bl	800534c <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026be:	f000 f93d 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4619      	mov	r1, r3
 80026ce:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_TIM2_Init+0x98>)
 80026d0:	f003 f830 	bl	8005734 <HAL_TIM_ConfigClockSource>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026da:	f000 f92f 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_TIM2_Init+0x98>)
 80026ec:	f003 fa06 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026f6:	f000 f921 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000150 	.word	0x20000150

08002708 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271c:	463b      	mov	r3, r7
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <MX_TIM3_Init+0x94>)
 8002726:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <MX_TIM3_Init+0x98>)
 8002728:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <MX_TIM3_Init+0x94>)
 800272c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002730:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <MX_TIM3_Init+0x94>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <MX_TIM3_Init+0x94>)
 800273a:	2263      	movs	r2, #99	; 0x63
 800273c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <MX_TIM3_Init+0x94>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <MX_TIM3_Init+0x94>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800274a:	4814      	ldr	r0, [pc, #80]	; (800279c <MX_TIM3_Init+0x94>)
 800274c:	f002 fdfe 	bl	800534c <HAL_TIM_Base_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002756:	f000 f8f1 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	4619      	mov	r1, r3
 8002766:	480d      	ldr	r0, [pc, #52]	; (800279c <MX_TIM3_Init+0x94>)
 8002768:	f002 ffe4 	bl	8005734 <HAL_TIM_ConfigClockSource>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002772:	f000 f8e3 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277e:	463b      	mov	r3, r7
 8002780:	4619      	mov	r1, r3
 8002782:	4806      	ldr	r0, [pc, #24]	; (800279c <MX_TIM3_Init+0x94>)
 8002784:	f003 f9ba 	bl	8005afc <HAL_TIMEx_MasterConfigSynchronization>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800278e:	f000 f8d5 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000198 	.word	0x20000198
 80027a0:	40000400 	.word	0x40000400

080027a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <MX_USART1_UART_Init+0x50>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART1_UART_Init+0x4c>)
 80027dc:	f003 f9fe 	bl	8005bdc <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027e6:	f000 f8a9 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200001e0 	.word	0x200001e0
 80027f4:	40013800 	.word	0x40013800

080027f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_DMA_Init+0x38>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <MX_DMA_Init+0x38>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6153      	str	r3, [r2, #20]
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_DMA_Init+0x38>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2100      	movs	r1, #0
 800281a:	200b      	movs	r0, #11
 800281c:	f001 fd0f 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002820:	200b      	movs	r0, #11
 8002822:	f001 fd28 	bl	8004276 <HAL_NVIC_EnableIRQ>

}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002848:	4b2f      	ldr	r3, [pc, #188]	; (8002908 <MX_GPIO_Init+0xd4>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	4a2e      	ldr	r2, [pc, #184]	; (8002908 <MX_GPIO_Init+0xd4>)
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <MX_GPIO_Init+0xd4>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <MX_GPIO_Init+0xd4>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a28      	ldr	r2, [pc, #160]	; (8002908 <MX_GPIO_Init+0xd4>)
 8002866:	f043 0320 	orr.w	r3, r3, #32
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <MX_GPIO_Init+0xd4>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <MX_GPIO_Init+0xd4>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a22      	ldr	r2, [pc, #136]	; (8002908 <MX_GPIO_Init+0xd4>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <MX_GPIO_Init+0xd4>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002890:	2200      	movs	r2, #0
 8002892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002896:	481d      	ldr	r0, [pc, #116]	; (800290c <MX_GPIO_Init+0xd8>)
 8002898:	f002 f87a 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VCC_Pin|DOWN_PORT_Pin, GPIO_PIN_RESET);
 800289c:	2200      	movs	r2, #0
 800289e:	2141      	movs	r1, #65	; 0x41
 80028a0:	481b      	ldr	r0, [pc, #108]	; (8002910 <MX_GPIO_Init+0xdc>)
 80028a2:	f002 f875 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UP_PORT_GPIO_Port, UP_PORT_Pin, GPIO_PIN_SET);
 80028a6:	2201      	movs	r2, #1
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	4819      	ldr	r0, [pc, #100]	; (8002910 <MX_GPIO_Init+0xdc>)
 80028ac:	f002 f870 	bl	8004990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80028b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2302      	movs	r3, #2
 80028c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4619      	mov	r1, r3
 80028c8:	4810      	ldr	r0, [pc, #64]	; (800290c <MX_GPIO_Init+0xd8>)
 80028ca:	f001 fedd 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_Pin DOWN_PORT_Pin UP_PORT_Pin */
  GPIO_InitStruct.Pin = VCC_Pin|DOWN_PORT_Pin|UP_PORT_Pin;
 80028ce:	23c1      	movs	r3, #193	; 0xc1
 80028d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d2:	2301      	movs	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2302      	movs	r3, #2
 80028dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 0310 	add.w	r3, r7, #16
 80028e2:	4619      	mov	r1, r3
 80028e4:	480a      	ldr	r0, [pc, #40]	; (8002910 <MX_GPIO_Init+0xdc>)
 80028e6:	f001 fecf 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028ea:	2302      	movs	r3, #2
 80028ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ee:	2303      	movs	r3, #3
 80028f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f107 0310 	add.w	r3, r7, #16
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_GPIO_Init+0xdc>)
 80028fa:	f001 fec5 	bl	8004688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028fe:	bf00      	nop
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	40011000 	.word	0x40011000
 8002910:	40010800 	.word	0x40010800

08002914 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d102      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
	}
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000198 	.word	0x20000198
 8002938:	200007bc 	.word	0x200007bc

0800293c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002940:	b672      	cpsid	i
}
 8002942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002944:	20c8      	movs	r0, #200	; 0xc8
 8002946:	f000 fa5f 	bl	8002e08 <HAL_Delay>
	  NVIC_SystemReset();
 800294a:	f7ff fc63 	bl	8002214 <__NVIC_SystemReset>
	...

08002950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_MspInit+0x5c>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_MspInit+0x5c>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6193      	str	r3, [r2, #24]
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_MspInit+0x5c>)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <HAL_MspInit+0x5c>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <HAL_MspInit+0x5c>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	61d3      	str	r3, [r2, #28]
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_MspInit+0x5c>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_MspInit+0x60>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_MspInit+0x60>)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010000 	.word	0x40010000

080029b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a29      	ldr	r2, [pc, #164]	; (8002a74 <HAL_ADC_MspInit+0xc0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d14a      	bne.n	8002a6a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029d4:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <HAL_ADC_MspInit+0xc4>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4a27      	ldr	r2, [pc, #156]	; (8002a78 <HAL_ADC_MspInit+0xc4>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029de:	6193      	str	r3, [r2, #24]
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_ADC_MspInit+0xc4>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_ADC_MspInit+0xc4>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_ADC_MspInit+0xc4>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6193      	str	r3, [r2, #24]
 80029f8:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <HAL_ADC_MspInit+0xc4>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a04:	2302      	movs	r3, #2
 8002a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	4619      	mov	r1, r3
 8002a12:	481a      	ldr	r0, [pc, #104]	; (8002a7c <HAL_ADC_MspInit+0xc8>)
 8002a14:	f001 fe38 	bl	8004688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a1a:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <HAL_ADC_MspInit+0xd0>)
 8002a1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a42:	2220      	movs	r2, #32
 8002a44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a4e:	480c      	ldr	r0, [pc, #48]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a50:	f001 fc2c 	bl	80042ac <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002a5a:	f7ff ff6f 	bl	800293c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a62:	621a      	str	r2, [r3, #32]
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_ADC_MspInit+0xcc>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40012400 	.word	0x40012400
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010800 	.word	0x40010800
 8002a80:	2000009c 	.word	0x2000009c
 8002a84:	40020008 	.word	0x40020008

08002a88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a20      	ldr	r2, [pc, #128]	; (8002b24 <HAL_CAN_MspInit+0x9c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d139      	bne.n	8002b1c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_CAN_MspInit+0xa0>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_CAN_MspInit+0xa0>)
 8002aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	61d3      	str	r3, [r2, #28]
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_CAN_MspInit+0xa0>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_CAN_MspInit+0xa0>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_CAN_MspInit+0xa0>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_CAN_MspInit+0xa0>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ad8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	4619      	mov	r1, r3
 8002aec:	480f      	ldr	r0, [pc, #60]	; (8002b2c <HAL_CAN_MspInit+0xa4>)
 8002aee:	f001 fdcb 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	4619      	mov	r1, r3
 8002b06:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_CAN_MspInit+0xa4>)
 8002b08:	f001 fdbe 	bl	8004688 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2014      	movs	r0, #20
 8002b12:	f001 fb94 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002b16:	2014      	movs	r0, #20
 8002b18:	f001 fbad 	bl	8004276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40006400 	.word	0x40006400
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40010800 	.word	0x40010800

08002b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_TIM_Base_MspInit+0x8c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10c      	bne.n	8002b5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b4c:	6193      	str	r3, [r2, #24]
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b5a:	e02a      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
}
 8002b7e:	e018      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <HAL_TIM_Base_MspInit+0x94>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	61d3      	str	r3, [r2, #28]
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_TIM_Base_MspInit+0x90>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	201d      	movs	r0, #29
 8002ba8:	f001 fb49 	bl	800423e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bac:	201d      	movs	r0, #29
 8002bae:	f001 fb62 	bl	8004276 <HAL_NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_UART_MspInit+0x8c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d131      	bne.n	8002c4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_UART_MspInit+0x90>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <HAL_UART_MspInit+0x90>)
 8002bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_UART_MspInit+0x90>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c00:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_UART_MspInit+0x90>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_UART_MspInit+0x90>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_UART_MspInit+0x90>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	480b      	ldr	r0, [pc, #44]	; (8002c5c <HAL_UART_MspInit+0x94>)
 8002c2e:	f001 fd2b 	bl	8004688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	4619      	mov	r1, r3
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <HAL_UART_MspInit+0x94>)
 8002c48:	f001 fd1e 	bl	8004688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40013800 	.word	0x40013800
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010800 	.word	0x40010800

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c64:	e7fe      	b.n	8002c64 <NMI_Handler+0x4>

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler+0x4>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca6:	f000 f893 	bl	8002dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA1_Channel1_IRQHandler+0x10>)
 8002cb6:	f001 fbb3 	bl	8004420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000009c 	.word	0x2000009c

08002cc4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002cca:	f000 ffd0 	bl	8003c6e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200000e0 	.word	0x200000e0

08002cd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <TIM3_IRQHandler+0x10>)
 8002cde:	f002 fc21 	bl	8005524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000198 	.word	0x20000198

08002cec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cf8:	f7ff fff8 	bl	8002cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cfc:	480b      	ldr	r0, [pc, #44]	; (8002d2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cfe:	490c      	ldr	r1, [pc, #48]	; (8002d30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d14:	4c09      	ldr	r4, [pc, #36]	; (8002d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d22:	f003 f841 	bl	8005da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d26:	f7ff fa8b 	bl	8002240 <main>
  bx lr
 8002d2a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d30:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d34:	08005fbc 	.word	0x08005fbc
  ldr r2, =_sbss
 8002d38:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d3c:	20000840 	.word	0x20000840

08002d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC1_2_IRQHandler>
	...

08002d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_Init+0x28>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <HAL_Init+0x28>)
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d54:	2003      	movs	r0, #3
 8002d56:	f001 fa67 	bl	8004228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d5a:	200f      	movs	r0, #15
 8002d5c:	f000 f808 	bl	8002d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d60:	f7ff fdf6 	bl	8002950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40022000 	.word	0x40022000

08002d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_InitTick+0x54>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_InitTick+0x58>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 fa7f 	bl	8004292 <HAL_SYSTICK_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00e      	b.n	8002dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d80a      	bhi.n	8002dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da4:	2200      	movs	r2, #0
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f001 fa47 	bl	800423e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002db0:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <HAL_InitTick+0x5c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e000      	b.n	8002dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000008 	.word	0x20000008
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_IncTick+0x1c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_IncTick+0x20>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4413      	add	r3, r2
 8002de0:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <HAL_IncTick+0x20>)
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	20000008 	.word	0x20000008
 8002df0:	2000083c 	.word	0x2000083c

08002df4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <HAL_GetTick+0x10>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	2000083c 	.word	0x2000083c

08002e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d005      	beq.n	8002e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_Delay+0x44>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e2e:	bf00      	nop
 8002e30:	f7ff ffe0 	bl	8002df4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d8f7      	bhi.n	8002e30 <HAL_Delay+0x28>
  {
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0be      	b.n	8002ff0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fd90 	bl	80029b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 faf5 	bl	8003484 <ADC_ConversionStop_Disable>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 8099 	bne.w	8002fde <HAL_ADC_Init+0x18e>
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 8095 	bne.w	8002fde <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ebc:	f023 0302 	bic.w	r3, r3, #2
 8002ec0:	f043 0202 	orr.w	r2, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ed0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7b1b      	ldrb	r3, [r3, #12]
 8002ed6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ed8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee8:	d003      	beq.n	8002ef2 <HAL_ADC_Init+0xa2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_ADC_Init+0xa8>
 8002ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef6:	e000      	b.n	8002efa <HAL_ADC_Init+0xaa>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7d1b      	ldrb	r3, [r3, #20]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d119      	bne.n	8002f3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7b1b      	ldrb	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	035a      	lsls	r2, r3, #13
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	e00b      	b.n	8002f3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_ADC_Init+0x1a8>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6c:	d003      	beq.n	8002f76 <HAL_ADC_Init+0x126>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d104      	bne.n	8002f80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	051b      	lsls	r3, r3, #20
 8002f7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_ADC_Init+0x1ac>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d10b      	bne.n	8002fbc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fba:	e018      	b.n	8002fee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	f023 0312 	bic.w	r3, r3, #18
 8002fc4:	f043 0210 	orr.w	r2, r3, #16
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fdc:	e007      	b.n	8002fee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	ffe1f7fd 	.word	0xffe1f7fd
 8002ffc:	ff1f0efe 	.word	0xff1f0efe

08003000 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a64      	ldr	r2, [pc, #400]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_ADC_Start_DMA+0x24>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_ADC_Start_DMA+0x1ac>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d106      	bne.n	8003032 <HAL_ADC_Start_DMA+0x32>
 8003024:	4b60      	ldr	r3, [pc, #384]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 80b3 	bne.w	8003198 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_ADC_Start_DMA+0x40>
 800303c:	2302      	movs	r3, #2
 800303e:	e0ae      	b.n	800319e <HAL_ADC_Start_DMA+0x19e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f9c1 	bl	80033d0 <ADC_Enable>
 800304e:	4603      	mov	r3, r0
 8003050:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 809a 	bne.w	800318e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_ADC_Start_DMA+0x1ac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d105      	bne.n	8003084 <HAL_ADC_Start_DMA+0x84>
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d115      	bne.n	80030b0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d026      	beq.n	80030ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ae:	e01d      	b.n	80030ec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a39      	ldr	r2, [pc, #228]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_ADC_Start_DMA+0xd0>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a38      	ldr	r2, [pc, #224]	; (80031ac <HAL_ADC_Start_DMA+0x1ac>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10d      	bne.n	80030ec <HAL_ADC_Start_DMA+0xec>
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f023 0206 	bic.w	r2, r3, #6
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
 8003104:	e002      	b.n	800310c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <HAL_ADC_Start_DMA+0x1b0>)
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_ADC_Start_DMA+0x1b4>)
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_ADC_Start_DMA+0x1b8>)
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0202 	mvn.w	r2, #2
 8003134:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a18      	ldr	r0, [r3, #32]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	334c      	adds	r3, #76	; 0x4c
 8003150:	4619      	mov	r1, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f001 f903 	bl	8004360 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003164:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003168:	d108      	bne.n	800317c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003178:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800317a:	e00f      	b.n	800319c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800318a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800318c:	e006      	b.n	800319c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003196:	e001      	b.n	800319c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800319c:	7dfb      	ldrb	r3, [r7, #23]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40012400 	.word	0x40012400
 80031ac:	40012800 	.word	0x40012800
 80031b0:	08003507 	.word	0x08003507
 80031b4:	08003583 	.word	0x08003583
 80031b8:	0800359f 	.word	0x0800359f

080031bc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x20>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0dc      	b.n	80033ba <HAL_ADC_ConfigChannel+0x1da>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d81c      	bhi.n	800324a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	3b05      	subs	r3, #5
 8003222:	221f      	movs	r2, #31
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	4019      	ands	r1, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	3b05      	subs	r3, #5
 800323c:	fa00 f203 	lsl.w	r2, r0, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	635a      	str	r2, [r3, #52]	; 0x34
 8003248:	e03c      	b.n	80032c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b0c      	cmp	r3, #12
 8003250:	d81c      	bhi.n	800328c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3b23      	subs	r3, #35	; 0x23
 8003264:	221f      	movs	r2, #31
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	4019      	ands	r1, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	3b23      	subs	r3, #35	; 0x23
 800327e:	fa00 f203 	lsl.w	r2, r0, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
 800328a:	e01b      	b.n	80032c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b41      	subs	r3, #65	; 0x41
 800329e:	221f      	movs	r2, #31
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	4019      	ands	r1, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b41      	subs	r3, #65	; 0x41
 80032b8:	fa00 f203 	lsl.w	r2, r0, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d91c      	bls.n	8003306 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68d9      	ldr	r1, [r3, #12]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	3b1e      	subs	r3, #30
 80032de:	2207      	movs	r2, #7
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4019      	ands	r1, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6898      	ldr	r0, [r3, #8]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	3b1e      	subs	r3, #30
 80032f8:	fa00 f203 	lsl.w	r2, r0, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	e019      	b.n	800333a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6919      	ldr	r1, [r3, #16]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	2207      	movs	r2, #7
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	4019      	ands	r1, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6898      	ldr	r0, [r3, #8]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	fa00 f203 	lsl.w	r2, r0, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b10      	cmp	r3, #16
 8003340:	d003      	beq.n	800334a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003346:	2b11      	cmp	r3, #17
 8003348:	d132      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d125      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d126      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003370:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d11a      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a13      	ldr	r2, [pc, #76]	; (80033cc <HAL_ADC_ConfigChannel+0x1ec>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	0c9a      	lsrs	r2, r3, #18
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003390:	e002      	b.n	8003398 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	3b01      	subs	r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f9      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x1b2>
 800339e:	e007      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012400 	.word	0x40012400
 80033c8:	20000000 	.word	0x20000000
 80033cc:	431bde83 	.word	0x431bde83

080033d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d040      	beq.n	8003470 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033fe:	4b1f      	ldr	r3, [pc, #124]	; (800347c <ADC_Enable+0xac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1f      	ldr	r2, [pc, #124]	; (8003480 <ADC_Enable+0xb0>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	0c9b      	lsrs	r3, r3, #18
 800340a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800340c:	e002      	b.n	8003414 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3b01      	subs	r3, #1
 8003412:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f9      	bne.n	800340e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800341a:	f7ff fceb 	bl	8002df4 <HAL_GetTick>
 800341e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003420:	e01f      	b.n	8003462 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003422:	f7ff fce7 	bl	8002df4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d918      	bls.n	8003462 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d011      	beq.n	8003462 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e007      	b.n	8003472 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d1d8      	bne.n	8003422 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000
 8003480:	431bde83 	.word	0x431bde83

08003484 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d12e      	bne.n	80034fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ae:	f7ff fca1 	bl	8002df4 <HAL_GetTick>
 80034b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034b4:	e01b      	b.n	80034ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034b6:	f7ff fc9d 	bl	8002df4 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d914      	bls.n	80034ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10d      	bne.n	80034ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	f043 0210 	orr.w	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e007      	b.n	80034fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d0dc      	beq.n	80034b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800351c:	2b00      	cmp	r3, #0
 800351e:	d127      	bne.n	8003570 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003536:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800353a:	d115      	bne.n	8003568 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003540:	2b00      	cmp	r3, #0
 8003542:	d111      	bne.n	8003568 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fe27 	bl	80031bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800356e:	e004      	b.n	800357a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7fe fd53 	bl	800203c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff fe02 	bl	80031ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0ed      	b.n	80037c0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fa49 	bl	8002a88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003606:	f7ff fbf5 	bl	8002df4 <HAL_GetTick>
 800360a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800360c:	e012      	b.n	8003634 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800360e:	f7ff fbf1 	bl	8002df4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b0a      	cmp	r3, #10
 800361a:	d90b      	bls.n	8003634 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2205      	movs	r2, #5
 800362c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0c5      	b.n	80037c0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0e5      	beq.n	800360e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0202 	bic.w	r2, r2, #2
 8003650:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003652:	f7ff fbcf 	bl	8002df4 <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003658:	e012      	b.n	8003680 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800365a:	f7ff fbcb 	bl	8002df4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b0a      	cmp	r3, #10
 8003666:	d90b      	bls.n	8003680 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2205      	movs	r2, #5
 8003678:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e09f      	b.n	80037c0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e5      	bne.n	800365a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7e1b      	ldrb	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d108      	bne.n	80036a8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e007      	b.n	80036b8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7e5b      	ldrb	r3, [r3, #25]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d108      	bne.n	80036d2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e007      	b.n	80036e2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7e9b      	ldrb	r3, [r3, #26]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d108      	bne.n	80036fc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 0220 	orr.w	r2, r2, #32
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e007      	b.n	800370c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0220 	bic.w	r2, r2, #32
 800370a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7edb      	ldrb	r3, [r3, #27]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d108      	bne.n	8003726 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0210 	bic.w	r2, r2, #16
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0210 	orr.w	r2, r2, #16
 8003734:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7f1b      	ldrb	r3, [r3, #28]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d108      	bne.n	8003750 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0208 	orr.w	r2, r2, #8
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e007      	b.n	8003760 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0208 	bic.w	r2, r2, #8
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7f5b      	ldrb	r3, [r3, #29]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d108      	bne.n	800377a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0204 	orr.w	r2, r2, #4
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e007      	b.n	800378a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0204 	bic.w	r2, r2, #4
 8003788:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	ea42 0103 	orr.w	r1, r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d003      	beq.n	80037ee <HAL_CAN_ConfigFilter+0x26>
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	f040 80aa 	bne.w	8003942 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2201      	movs	r2, #1
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43db      	mvns	r3, r3
 8003818:	401a      	ands	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d123      	bne.n	8003870 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800384a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3248      	adds	r2, #72	; 0x48
 8003850:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003864:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003866:	6979      	ldr	r1, [r7, #20]
 8003868:	3348      	adds	r3, #72	; 0x48
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	440b      	add	r3, r1
 800386e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d122      	bne.n	80038be <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	431a      	orrs	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003898:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3248      	adds	r2, #72	; 0x48
 800389e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038b4:	6979      	ldr	r1, [r7, #20]
 80038b6:	3348      	adds	r3, #72	; 0x48
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	401a      	ands	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80038d8:	e007      	b.n	80038ea <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	401a      	ands	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003904:	e007      	b.n	8003916 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	431a      	orrs	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	431a      	orrs	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003934:	f023 0201 	bic.w	r2, r3, #1
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e006      	b.n	8003950 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d12e      	bne.n	80039cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003986:	f7ff fa35 	bl	8002df4 <HAL_GetTick>
 800398a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800398c:	e012      	b.n	80039b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800398e:	f7ff fa31 	bl	8002df4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b0a      	cmp	r3, #10
 800399a:	d90b      	bls.n	80039b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2205      	movs	r2, #5
 80039ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e012      	b.n	80039da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e5      	bne.n	800398e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e006      	b.n	80039da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039e2:	b480      	push	{r7}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d003      	beq.n	8003a06 <HAL_CAN_GetRxMessage+0x24>
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	f040 8103 	bne.w	8003c0c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10e      	bne.n	8003a2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0f7      	b.n	8003c1a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0e8      	b.n	8003c1a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	331b      	adds	r3, #27
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	4413      	add	r3, r2
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0204 	and.w	r2, r3, #4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	331b      	adds	r3, #27
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	4413      	add	r3, r2
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0d5b      	lsrs	r3, r3, #21
 8003a76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e00b      	b.n	8003a98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	331b      	adds	r3, #27
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	08db      	lsrs	r3, r3, #3
 8003a90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	331b      	adds	r3, #27
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0202 	and.w	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	331b      	adds	r3, #27
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4413      	add	r3, r2
 8003aba:	3304      	adds	r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	611a      	str	r2, [r3, #16]
 8003acc:	e00b      	b.n	8003ae6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	331b      	adds	r3, #27
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	331b      	adds	r3, #27
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	4413      	add	r3, r2
 8003af2:	3304      	adds	r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	331b      	adds	r3, #27
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0a1a      	lsrs	r2, r3, #8
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0c1a      	lsrs	r2, r3, #16
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	0e1a      	lsrs	r2, r3, #24
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	3303      	adds	r3, #3
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0a1a      	lsrs	r2, r3, #8
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	3305      	adds	r3, #5
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0c1a      	lsrs	r2, r3, #16
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	3306      	adds	r3, #6
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	0e1a      	lsrs	r2, r3, #24
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	3307      	adds	r3, #7
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0220 	orr.w	r2, r2, #32
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	e007      	b.n	8003c08 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0220 	orr.w	r2, r2, #32
 8003c06:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e006      	b.n	8003c1a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d002      	beq.n	8003c42 <HAL_CAN_ActivateNotification+0x1e>
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d109      	bne.n	8003c56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6959      	ldr	r1, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e006      	b.n	8003c64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
  }
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b08a      	sub	sp, #40	; 0x28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d07c      	beq.n	8003dae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f983 	bl	8003fdc <HAL_CAN_TxMailbox0CompleteCallback>
 8003cd6:	e016      	b.n	8003d06 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	e00c      	b.n	8003d06 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	e002      	b.n	8003d06 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f986 	bl	8004012 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d024      	beq.n	8003d5a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f962 	bl	8003fee <HAL_CAN_TxMailbox1CompleteCallback>
 8003d2a:	e016      	b.n	8003d5a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	e00c      	b.n	8003d5a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
 8003d52:	e002      	b.n	8003d5a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f965 	bl	8004024 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d024      	beq.n	8003dae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f941 	bl	8004000 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d7e:	e016      	b.n	8003dae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	e00c      	b.n	8003dae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
 8003da6:	e002      	b.n	8003dae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f944 	bl	8004036 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2210      	movs	r2, #16
 8003dd0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d006      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2208      	movs	r2, #8
 8003dec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f92a 	bl	8004048 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fe f8eb 	bl	8001fe8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00c      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2210      	movs	r2, #16
 8003e34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00b      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d006      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2208      	movs	r2, #8
 8003e50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f901 	bl	800405a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fe f8c5 	bl	8002000 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2210      	movs	r2, #16
 8003e90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f8ea 	bl	800406c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8e2 	bl	800407e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d07b      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d072      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d043      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03e      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d02b      	beq.n	8003f98 <HAL_CAN_IRQHandler+0x32a>
 8003f40:	2b60      	cmp	r3, #96	; 0x60
 8003f42:	d82e      	bhi.n	8003fa2 <HAL_CAN_IRQHandler+0x334>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d022      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x320>
 8003f48:	2b50      	cmp	r3, #80	; 0x50
 8003f4a:	d82a      	bhi.n	8003fa2 <HAL_CAN_IRQHandler+0x334>
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d019      	beq.n	8003f84 <HAL_CAN_IRQHandler+0x316>
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d826      	bhi.n	8003fa2 <HAL_CAN_IRQHandler+0x334>
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d010      	beq.n	8003f7a <HAL_CAN_IRQHandler+0x30c>
 8003f58:	2b30      	cmp	r3, #48	; 0x30
 8003f5a:	d822      	bhi.n	8003fa2 <HAL_CAN_IRQHandler+0x334>
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d002      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x2f8>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d005      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f64:	e01d      	b.n	8003fa2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f6e:	e019      	b.n	8003fa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	f043 0310 	orr.w	r3, r3, #16
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f78:	e014      	b.n	8003fa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	f043 0320 	orr.w	r3, r3, #32
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f82:	e00f      	b.n	8003fa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f8c:	e00a      	b.n	8003fa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f96:	e005      	b.n	8003fa4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fa0:	e000      	b.n	8003fa4 <HAL_CAN_IRQHandler+0x336>
            break;
 8003fa2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fb2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2204      	movs	r2, #4
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe f822 	bl	8002018 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3728      	adds	r7, #40	; 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <__NVIC_SetPriorityGrouping>:
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	60d3      	str	r3, [r2, #12]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_GetPriorityGrouping>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <__NVIC_GetPriorityGrouping+0x18>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0307 	and.w	r3, r3, #7
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_EnableIRQ>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db0b      	blt.n	800411e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4906      	ldr	r1, [pc, #24]	; (8004128 <__NVIC_EnableIRQ+0x34>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100

0800412c <__NVIC_SetPriority>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	2b00      	cmp	r3, #0
 800413e:	db0a      	blt.n	8004156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <__NVIC_SetPriority+0x4c>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	440b      	add	r3, r1
 8004150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004154:	e00a      	b.n	800416c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4908      	ldr	r1, [pc, #32]	; (800417c <__NVIC_SetPriority+0x50>)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	3b04      	subs	r3, #4
 8004164:	0112      	lsls	r2, r2, #4
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	440b      	add	r3, r1
 800416a:	761a      	strb	r2, [r3, #24]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <NVIC_EncodePriority>:
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f1c3 0307 	rsb	r3, r3, #7
 800419a:	2b04      	cmp	r3, #4
 800419c:	bf28      	it	cs
 800419e:	2304      	movcs	r3, #4
 80041a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d902      	bls.n	80041b0 <NVIC_EncodePriority+0x30>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3b03      	subs	r3, #3
 80041ae:	e000      	b.n	80041b2 <NVIC_EncodePriority+0x32>
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	401a      	ands	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c8:	f04f 31ff 	mov.w	r1, #4294967295
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	4313      	orrs	r3, r2
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3724      	adds	r7, #36	; 0x24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f4:	d301      	bcc.n	80041fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00f      	b.n	800421a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <SysTick_Config+0x40>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3b01      	subs	r3, #1
 8004200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004202:	210f      	movs	r1, #15
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	f7ff ff90 	bl	800412c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SysTick_Config+0x40>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <SysTick_Config+0x40>)
 8004214:	2207      	movs	r2, #7
 8004216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000e010 	.word	0xe000e010

08004228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff2d 	bl	8004090 <__NVIC_SetPriorityGrouping>
}
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004250:	f7ff ff42 	bl	80040d8 <__NVIC_GetPriorityGrouping>
 8004254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff ff90 	bl	8004180 <NVIC_EncodePriority>
 8004260:	4602      	mov	r2, r0
 8004262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff5f 	bl	800412c <__NVIC_SetPriority>
}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff35 	bl	80040f4 <__NVIC_EnableIRQ>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ffa2 	bl	80041e4 <SysTick_Config>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e043      	b.n	800434a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <HAL_DMA_Init+0xa8>)
 80042ca:	4413      	add	r3, r2
 80042cc:	4a22      	ldr	r2, [pc, #136]	; (8004358 <HAL_DMA_Init+0xac>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	009a      	lsls	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <HAL_DMA_Init+0xb0>)
 80042de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80042f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800431c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	bffdfff8 	.word	0xbffdfff8
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	40020000 	.word	0x40020000

08004360 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_DMA_Start_IT+0x20>
 800437c:	2302      	movs	r3, #2
 800437e:	e04b      	b.n	8004418 <HAL_DMA_Start_IT+0xb8>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d13a      	bne.n	800440a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f937 	bl	800462c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 020e 	orr.w	r2, r2, #14
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e00f      	b.n	80043f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0204 	bic.w	r2, r2, #4
 80043e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 020a 	orr.w	r2, r2, #10
 80043f6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e005      	b.n	8004416 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004412:	2302      	movs	r3, #2
 8004414:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004416:	7dfb      	ldrb	r3, [r7, #23]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	2204      	movs	r2, #4
 800443e:	409a      	lsls	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d04f      	beq.n	80044e8 <HAL_DMA_IRQHandler+0xc8>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d04a      	beq.n	80044e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a66      	ldr	r2, [pc, #408]	; (8004610 <HAL_DMA_IRQHandler+0x1f0>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d029      	beq.n	80044ce <HAL_DMA_IRQHandler+0xae>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a65      	ldr	r2, [pc, #404]	; (8004614 <HAL_DMA_IRQHandler+0x1f4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d022      	beq.n	80044ca <HAL_DMA_IRQHandler+0xaa>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a63      	ldr	r2, [pc, #396]	; (8004618 <HAL_DMA_IRQHandler+0x1f8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01a      	beq.n	80044c4 <HAL_DMA_IRQHandler+0xa4>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a62      	ldr	r2, [pc, #392]	; (800461c <HAL_DMA_IRQHandler+0x1fc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d012      	beq.n	80044be <HAL_DMA_IRQHandler+0x9e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a60      	ldr	r2, [pc, #384]	; (8004620 <HAL_DMA_IRQHandler+0x200>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00a      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x98>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a5f      	ldr	r2, [pc, #380]	; (8004624 <HAL_DMA_IRQHandler+0x204>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d102      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x92>
 80044ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044b0:	e00e      	b.n	80044d0 <HAL_DMA_IRQHandler+0xb0>
 80044b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044b6:	e00b      	b.n	80044d0 <HAL_DMA_IRQHandler+0xb0>
 80044b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044bc:	e008      	b.n	80044d0 <HAL_DMA_IRQHandler+0xb0>
 80044be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044c2:	e005      	b.n	80044d0 <HAL_DMA_IRQHandler+0xb0>
 80044c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c8:	e002      	b.n	80044d0 <HAL_DMA_IRQHandler+0xb0>
 80044ca:	2340      	movs	r3, #64	; 0x40
 80044cc:	e000      	b.n	80044d0 <HAL_DMA_IRQHandler+0xb0>
 80044ce:	2304      	movs	r3, #4
 80044d0:	4a55      	ldr	r2, [pc, #340]	; (8004628 <HAL_DMA_IRQHandler+0x208>)
 80044d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8094 	beq.w	8004606 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80044e6:	e08e      	b.n	8004606 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2202      	movs	r2, #2
 80044ee:	409a      	lsls	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d056      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x186>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d051      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 020a 	bic.w	r2, r2, #10
 800451e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a38      	ldr	r2, [pc, #224]	; (8004610 <HAL_DMA_IRQHandler+0x1f0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d029      	beq.n	8004586 <HAL_DMA_IRQHandler+0x166>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a37      	ldr	r2, [pc, #220]	; (8004614 <HAL_DMA_IRQHandler+0x1f4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d022      	beq.n	8004582 <HAL_DMA_IRQHandler+0x162>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a35      	ldr	r2, [pc, #212]	; (8004618 <HAL_DMA_IRQHandler+0x1f8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01a      	beq.n	800457c <HAL_DMA_IRQHandler+0x15c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a34      	ldr	r2, [pc, #208]	; (800461c <HAL_DMA_IRQHandler+0x1fc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d012      	beq.n	8004576 <HAL_DMA_IRQHandler+0x156>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a32      	ldr	r2, [pc, #200]	; (8004620 <HAL_DMA_IRQHandler+0x200>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00a      	beq.n	8004570 <HAL_DMA_IRQHandler+0x150>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a31      	ldr	r2, [pc, #196]	; (8004624 <HAL_DMA_IRQHandler+0x204>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d102      	bne.n	800456a <HAL_DMA_IRQHandler+0x14a>
 8004564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004568:	e00e      	b.n	8004588 <HAL_DMA_IRQHandler+0x168>
 800456a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800456e:	e00b      	b.n	8004588 <HAL_DMA_IRQHandler+0x168>
 8004570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004574:	e008      	b.n	8004588 <HAL_DMA_IRQHandler+0x168>
 8004576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800457a:	e005      	b.n	8004588 <HAL_DMA_IRQHandler+0x168>
 800457c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004580:	e002      	b.n	8004588 <HAL_DMA_IRQHandler+0x168>
 8004582:	2320      	movs	r3, #32
 8004584:	e000      	b.n	8004588 <HAL_DMA_IRQHandler+0x168>
 8004586:	2302      	movs	r3, #2
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <HAL_DMA_IRQHandler+0x208>)
 800458a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	2b00      	cmp	r3, #0
 800459a:	d034      	beq.n	8004606 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045a4:	e02f      	b.n	8004606 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2208      	movs	r2, #8
 80045ac:	409a      	lsls	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d028      	beq.n	8004608 <HAL_DMA_IRQHandler+0x1e8>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d023      	beq.n	8004608 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 020e 	bic.w	r2, r2, #14
 80045ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	2101      	movs	r1, #1
 80045da:	fa01 f202 	lsl.w	r2, r1, r2
 80045de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
    }
  }
  return;
 8004606:	bf00      	nop
 8004608:	bf00      	nop
}
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40020008 	.word	0x40020008
 8004614:	4002001c 	.word	0x4002001c
 8004618:	40020030 	.word	0x40020030
 800461c:	40020044 	.word	0x40020044
 8004620:	40020058 	.word	0x40020058
 8004624:	4002006c 	.word	0x4002006c
 8004628:	40020000 	.word	0x40020000

0800462c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2101      	movs	r1, #1
 8004644:	fa01 f202 	lsl.w	r2, r1, r2
 8004648:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b10      	cmp	r3, #16
 8004658:	d108      	bne.n	800466c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800466a:	e007      	b.n	800467c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
	...

08004688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004688:	b480      	push	{r7}
 800468a:	b08b      	sub	sp, #44	; 0x2c
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004692:	2300      	movs	r3, #0
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004696:	2300      	movs	r3, #0
 8004698:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469a:	e169      	b.n	8004970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800469c:	2201      	movs	r2, #1
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	f040 8158 	bne.w	800496a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a9a      	ldr	r2, [pc, #616]	; (8004928 <HAL_GPIO_Init+0x2a0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d05e      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046c4:	4a98      	ldr	r2, [pc, #608]	; (8004928 <HAL_GPIO_Init+0x2a0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d875      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046ca:	4a98      	ldr	r2, [pc, #608]	; (800492c <HAL_GPIO_Init+0x2a4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d058      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046d0:	4a96      	ldr	r2, [pc, #600]	; (800492c <HAL_GPIO_Init+0x2a4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d86f      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046d6:	4a96      	ldr	r2, [pc, #600]	; (8004930 <HAL_GPIO_Init+0x2a8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d052      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046dc:	4a94      	ldr	r2, [pc, #592]	; (8004930 <HAL_GPIO_Init+0x2a8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d869      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046e2:	4a94      	ldr	r2, [pc, #592]	; (8004934 <HAL_GPIO_Init+0x2ac>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04c      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046e8:	4a92      	ldr	r2, [pc, #584]	; (8004934 <HAL_GPIO_Init+0x2ac>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d863      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046ee:	4a92      	ldr	r2, [pc, #584]	; (8004938 <HAL_GPIO_Init+0x2b0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d046      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046f4:	4a90      	ldr	r2, [pc, #576]	; (8004938 <HAL_GPIO_Init+0x2b0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d85d      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046fa:	2b12      	cmp	r3, #18
 80046fc:	d82a      	bhi.n	8004754 <HAL_GPIO_Init+0xcc>
 80046fe:	2b12      	cmp	r3, #18
 8004700:	d859      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <HAL_GPIO_Init+0x80>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004783 	.word	0x08004783
 800470c:	0800475d 	.word	0x0800475d
 8004710:	0800476f 	.word	0x0800476f
 8004714:	080047b1 	.word	0x080047b1
 8004718:	080047b7 	.word	0x080047b7
 800471c:	080047b7 	.word	0x080047b7
 8004720:	080047b7 	.word	0x080047b7
 8004724:	080047b7 	.word	0x080047b7
 8004728:	080047b7 	.word	0x080047b7
 800472c:	080047b7 	.word	0x080047b7
 8004730:	080047b7 	.word	0x080047b7
 8004734:	080047b7 	.word	0x080047b7
 8004738:	080047b7 	.word	0x080047b7
 800473c:	080047b7 	.word	0x080047b7
 8004740:	080047b7 	.word	0x080047b7
 8004744:	080047b7 	.word	0x080047b7
 8004748:	080047b7 	.word	0x080047b7
 800474c:	08004765 	.word	0x08004765
 8004750:	08004779 	.word	0x08004779
 8004754:	4a79      	ldr	r2, [pc, #484]	; (800493c <HAL_GPIO_Init+0x2b4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800475a:	e02c      	b.n	80047b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	623b      	str	r3, [r7, #32]
          break;
 8004762:	e029      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	3304      	adds	r3, #4
 800476a:	623b      	str	r3, [r7, #32]
          break;
 800476c:	e024      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	3308      	adds	r3, #8
 8004774:	623b      	str	r3, [r7, #32]
          break;
 8004776:	e01f      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	330c      	adds	r3, #12
 800477e:	623b      	str	r3, [r7, #32]
          break;
 8004780:	e01a      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800478a:	2304      	movs	r3, #4
 800478c:	623b      	str	r3, [r7, #32]
          break;
 800478e:	e013      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004798:	2308      	movs	r3, #8
 800479a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	611a      	str	r2, [r3, #16]
          break;
 80047a2:	e009      	b.n	80047b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047a4:	2308      	movs	r3, #8
 80047a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	615a      	str	r2, [r3, #20]
          break;
 80047ae:	e003      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047b0:	2300      	movs	r3, #0
 80047b2:	623b      	str	r3, [r7, #32]
          break;
 80047b4:	e000      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          break;
 80047b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2bff      	cmp	r3, #255	; 0xff
 80047bc:	d801      	bhi.n	80047c2 <HAL_GPIO_Init+0x13a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	e001      	b.n	80047c6 <HAL_GPIO_Init+0x13e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2bff      	cmp	r3, #255	; 0xff
 80047cc:	d802      	bhi.n	80047d4 <HAL_GPIO_Init+0x14c>
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	e002      	b.n	80047da <HAL_GPIO_Init+0x152>
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	3b08      	subs	r3, #8
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	210f      	movs	r1, #15
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	401a      	ands	r2, r3
 80047ec:	6a39      	ldr	r1, [r7, #32]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80b1 	beq.w	800496a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004808:	4b4d      	ldr	r3, [pc, #308]	; (8004940 <HAL_GPIO_Init+0x2b8>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	4a4c      	ldr	r2, [pc, #304]	; (8004940 <HAL_GPIO_Init+0x2b8>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6193      	str	r3, [r2, #24]
 8004814:	4b4a      	ldr	r3, [pc, #296]	; (8004940 <HAL_GPIO_Init+0x2b8>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004820:	4a48      	ldr	r2, [pc, #288]	; (8004944 <HAL_GPIO_Init+0x2bc>)
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	220f      	movs	r2, #15
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a40      	ldr	r2, [pc, #256]	; (8004948 <HAL_GPIO_Init+0x2c0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d013      	beq.n	8004874 <HAL_GPIO_Init+0x1ec>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3f      	ldr	r2, [pc, #252]	; (800494c <HAL_GPIO_Init+0x2c4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00d      	beq.n	8004870 <HAL_GPIO_Init+0x1e8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3e      	ldr	r2, [pc, #248]	; (8004950 <HAL_GPIO_Init+0x2c8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <HAL_GPIO_Init+0x1e4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3d      	ldr	r2, [pc, #244]	; (8004954 <HAL_GPIO_Init+0x2cc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_GPIO_Init+0x1e0>
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <HAL_GPIO_Init+0x1ee>
 8004868:	2304      	movs	r3, #4
 800486a:	e004      	b.n	8004876 <HAL_GPIO_Init+0x1ee>
 800486c:	2302      	movs	r3, #2
 800486e:	e002      	b.n	8004876 <HAL_GPIO_Init+0x1ee>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_GPIO_Init+0x1ee>
 8004874:	2300      	movs	r3, #0
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	f002 0203 	and.w	r2, r2, #3
 800487c:	0092      	lsls	r2, r2, #2
 800487e:	4093      	lsls	r3, r2
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004886:	492f      	ldr	r1, [pc, #188]	; (8004944 <HAL_GPIO_Init+0x2bc>)
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	3302      	adds	r3, #2
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048a0:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	492c      	ldr	r1, [pc, #176]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	608b      	str	r3, [r1, #8]
 80048ac:	e006      	b.n	80048bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048ae:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	4928      	ldr	r1, [pc, #160]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048c8:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	4922      	ldr	r1, [pc, #136]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60cb      	str	r3, [r1, #12]
 80048d4:	e006      	b.n	80048e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	43db      	mvns	r3, r3
 80048de:	491e      	ldr	r1, [pc, #120]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d006      	beq.n	80048fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	4918      	ldr	r1, [pc, #96]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
 80048fc:	e006      	b.n	800490c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048fe:	4b16      	ldr	r3, [pc, #88]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	43db      	mvns	r3, r3
 8004906:	4914      	ldr	r1, [pc, #80]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 8004908:	4013      	ands	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d021      	beq.n	800495c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	490e      	ldr	r1, [pc, #56]	; (8004958 <HAL_GPIO_Init+0x2d0>)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
 8004924:	e021      	b.n	800496a <HAL_GPIO_Init+0x2e2>
 8004926:	bf00      	nop
 8004928:	10320000 	.word	0x10320000
 800492c:	10310000 	.word	0x10310000
 8004930:	10220000 	.word	0x10220000
 8004934:	10210000 	.word	0x10210000
 8004938:	10120000 	.word	0x10120000
 800493c:	10110000 	.word	0x10110000
 8004940:	40021000 	.word	0x40021000
 8004944:	40010000 	.word	0x40010000
 8004948:	40010800 	.word	0x40010800
 800494c:	40010c00 	.word	0x40010c00
 8004950:	40011000 	.word	0x40011000
 8004954:	40011400 	.word	0x40011400
 8004958:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_GPIO_Init+0x304>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	43db      	mvns	r3, r3
 8004964:	4909      	ldr	r1, [pc, #36]	; (800498c <HAL_GPIO_Init+0x304>)
 8004966:	4013      	ands	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	3301      	adds	r3, #1
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	f47f ae8e 	bne.w	800469c <HAL_GPIO_Init+0x14>
  }
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	372c      	adds	r7, #44	; 0x2c
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	40010400 	.word	0x40010400

08004990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
 800499c:	4613      	mov	r3, r2
 800499e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049a0:	787b      	ldrb	r3, [r7, #1]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049ac:	e003      	b.n	80049b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	041a      	lsls	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e272      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 8087 	beq.w	8004aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e0:	4b92      	ldr	r3, [pc, #584]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 030c 	and.w	r3, r3, #12
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d00c      	beq.n	8004a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049ec:	4b8f      	ldr	r3, [pc, #572]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d112      	bne.n	8004a1e <HAL_RCC_OscConfig+0x5e>
 80049f8:	4b8c      	ldr	r3, [pc, #560]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d10b      	bne.n	8004a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a06:	4b89      	ldr	r3, [pc, #548]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d06c      	beq.n	8004aec <HAL_RCC_OscConfig+0x12c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d168      	bne.n	8004aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e24c      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a26:	d106      	bne.n	8004a36 <HAL_RCC_OscConfig+0x76>
 8004a28:	4b80      	ldr	r3, [pc, #512]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a7f      	ldr	r2, [pc, #508]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e02e      	b.n	8004a94 <HAL_RCC_OscConfig+0xd4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x98>
 8004a3e:	4b7b      	ldr	r3, [pc, #492]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7a      	ldr	r2, [pc, #488]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b78      	ldr	r3, [pc, #480]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a77      	ldr	r2, [pc, #476]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e01d      	b.n	8004a94 <HAL_RCC_OscConfig+0xd4>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0xbc>
 8004a62:	4b72      	ldr	r3, [pc, #456]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a71      	ldr	r2, [pc, #452]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b6f      	ldr	r3, [pc, #444]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6e      	ldr	r2, [pc, #440]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_OscConfig+0xd4>
 8004a7c:	4b6b      	ldr	r3, [pc, #428]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a6a      	ldr	r2, [pc, #424]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b68      	ldr	r3, [pc, #416]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a67      	ldr	r2, [pc, #412]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d013      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fe f9aa 	bl	8002df4 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fe f9a6 	bl	8002df4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e200      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b5d      	ldr	r3, [pc, #372]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xe4>
 8004ac2:	e014      	b.n	8004aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fe f996 	bl	8002df4 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fe f992 	bl	8002df4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1ec      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x10c>
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d063      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004afa:	4b4c      	ldr	r3, [pc, #304]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b06:	4b49      	ldr	r3, [pc, #292]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d11c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x18c>
 8004b12:	4b46      	ldr	r3, [pc, #280]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d116      	bne.n	8004b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1e:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_RCC_OscConfig+0x176>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e1c0      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b36:	4b3d      	ldr	r3, [pc, #244]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4939      	ldr	r1, [pc, #228]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	e03a      	b.n	8004bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b54:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_RCC_OscConfig+0x270>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5a:	f7fe f94b 	bl	8002df4 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fe f947 	bl	8002df4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e1a1      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b74:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	4b2a      	ldr	r3, [pc, #168]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4927      	ldr	r1, [pc, #156]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
 8004b94:	e015      	b.n	8004bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b96:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <HAL_RCC_OscConfig+0x270>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe f92a 	bl	8002df4 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba4:	f7fe f926 	bl	8002df4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e180      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d03a      	beq.n	8004c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d019      	beq.n	8004c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bdc:	f7fe f90a 	bl	8002df4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be4:	f7fe f906 	bl	8002df4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e160      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c02:	2001      	movs	r0, #1
 8004c04:	f000 face 	bl	80051a4 <RCC_Delay>
 8004c08:	e01c      	b.n	8004c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c10:	f7fe f8f0 	bl	8002df4 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c16:	e00f      	b.n	8004c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c18:	f7fe f8ec 	bl	8002df4 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d908      	bls.n	8004c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e146      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
 8004c2a:	bf00      	nop
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	42420000 	.word	0x42420000
 8004c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b92      	ldr	r3, [pc, #584]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e9      	bne.n	8004c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a6 	beq.w	8004d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b8b      	ldr	r3, [pc, #556]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	4b88      	ldr	r3, [pc, #544]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4a87      	ldr	r2, [pc, #540]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	61d3      	str	r3, [r2, #28]
 8004c6e:	4b85      	ldr	r3, [pc, #532]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b82      	ldr	r3, [pc, #520]	; (8004e88 <HAL_RCC_OscConfig+0x4c8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d118      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8a:	4b7f      	ldr	r3, [pc, #508]	; (8004e88 <HAL_RCC_OscConfig+0x4c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a7e      	ldr	r2, [pc, #504]	; (8004e88 <HAL_RCC_OscConfig+0x4c8>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c96:	f7fe f8ad 	bl	8002df4 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fe f8a9 	bl	8002df4 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b64      	cmp	r3, #100	; 0x64
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e103      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	4b75      	ldr	r3, [pc, #468]	; (8004e88 <HAL_RCC_OscConfig+0x4c8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x312>
 8004cc4:	4b6f      	ldr	r3, [pc, #444]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4a6e      	ldr	r2, [pc, #440]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6213      	str	r3, [r2, #32]
 8004cd0:	e02d      	b.n	8004d2e <HAL_RCC_OscConfig+0x36e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x334>
 8004cda:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	4a69      	ldr	r2, [pc, #420]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6213      	str	r3, [r2, #32]
 8004ce6:	4b67      	ldr	r3, [pc, #412]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	4a66      	ldr	r2, [pc, #408]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	f023 0304 	bic.w	r3, r3, #4
 8004cf0:	6213      	str	r3, [r2, #32]
 8004cf2:	e01c      	b.n	8004d2e <HAL_RCC_OscConfig+0x36e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	2b05      	cmp	r3, #5
 8004cfa:	d10c      	bne.n	8004d16 <HAL_RCC_OscConfig+0x356>
 8004cfc:	4b61      	ldr	r3, [pc, #388]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4a60      	ldr	r2, [pc, #384]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	f043 0304 	orr.w	r3, r3, #4
 8004d06:	6213      	str	r3, [r2, #32]
 8004d08:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	4a5d      	ldr	r2, [pc, #372]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	6213      	str	r3, [r2, #32]
 8004d14:	e00b      	b.n	8004d2e <HAL_RCC_OscConfig+0x36e>
 8004d16:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4a5a      	ldr	r2, [pc, #360]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6213      	str	r3, [r2, #32]
 8004d22:	4b58      	ldr	r3, [pc, #352]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4a57      	ldr	r2, [pc, #348]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	f023 0304 	bic.w	r3, r3, #4
 8004d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d015      	beq.n	8004d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d36:	f7fe f85d 	bl	8002df4 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3e:	f7fe f859 	bl	8002df4 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e0b1      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d54:	4b4b      	ldr	r3, [pc, #300]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ee      	beq.n	8004d3e <HAL_RCC_OscConfig+0x37e>
 8004d60:	e014      	b.n	8004d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d62:	f7fe f847 	bl	8002df4 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fe f843 	bl	8002df4 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e09b      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d80:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ee      	bne.n	8004d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d105      	bne.n	8004d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d92:	4b3c      	ldr	r3, [pc, #240]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	4a3b      	ldr	r2, [pc, #236]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8087 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da8:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d061      	beq.n	8004e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d146      	bne.n	8004e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbc:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_RCC_OscConfig+0x4cc>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fe f817 	bl	8002df4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fe f813 	bl	8002df4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e06d      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ddc:	4b29      	ldr	r3, [pc, #164]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f0      	bne.n	8004dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d108      	bne.n	8004e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	4921      	ldr	r1, [pc, #132]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a19      	ldr	r1, [r3, #32]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	430b      	orrs	r3, r1
 8004e16:	491b      	ldr	r1, [pc, #108]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x4cc>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fd ffe7 	bl	8002df4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fd ffe3 	bl	8002df4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e03d      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x46a>
 8004e48:	e035      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCC_OscConfig+0x4cc>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fd ffd0 	bl	8002df4 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fd ffcc 	bl	8002df4 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e026      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x498>
 8004e76:	e01e      	b.n	8004eb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e019      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_OscConfig+0x500>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000

08004ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0d0      	b.n	800507a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d910      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b67      	ldr	r3, [pc, #412]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f023 0207 	bic.w	r2, r3, #7
 8004eee:	4965      	ldr	r1, [pc, #404]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b63      	ldr	r3, [pc, #396]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0b8      	b.n	800507a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f20:	4b59      	ldr	r3, [pc, #356]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4a58      	ldr	r2, [pc, #352]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f38:	4b53      	ldr	r3, [pc, #332]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4a52      	ldr	r2, [pc, #328]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b50      	ldr	r3, [pc, #320]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	494d      	ldr	r1, [pc, #308]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d040      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b47      	ldr	r3, [pc, #284]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d115      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e07f      	b.n	800507a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e073      	b.n	800507a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f92:	4b3d      	ldr	r3, [pc, #244]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e06b      	b.n	800507a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa2:	4b39      	ldr	r3, [pc, #228]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f023 0203 	bic.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4936      	ldr	r1, [pc, #216]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb4:	f7fd ff1e 	bl	8002df4 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fbc:	f7fd ff1a 	bl	8002df4 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e053      	b.n	800507a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 020c 	and.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d1eb      	bne.n	8004fbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b27      	ldr	r3, [pc, #156]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d210      	bcs.n	8005014 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f023 0207 	bic.w	r2, r3, #7
 8004ffa:	4922      	ldr	r1, [pc, #136]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b20      	ldr	r3, [pc, #128]	; (8005084 <HAL_RCC_ClockConfig+0x1c0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e032      	b.n	800507a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4916      	ldr	r1, [pc, #88]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800503e:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	490e      	ldr	r1, [pc, #56]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 800504e:	4313      	orrs	r3, r2
 8005050:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005052:	f000 f821 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8005056:	4602      	mov	r2, r0
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_ClockConfig+0x1c4>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	490a      	ldr	r1, [pc, #40]	; (800508c <HAL_RCC_ClockConfig+0x1c8>)
 8005064:	5ccb      	ldrb	r3, [r1, r3]
 8005066:	fa22 f303 	lsr.w	r3, r2, r3
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <HAL_RCC_ClockConfig+0x1cc>)
 800506c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <HAL_RCC_ClockConfig+0x1d0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fd fe7c 	bl	8002d70 <HAL_InitTick>

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40022000 	.word	0x40022000
 8005088:	40021000 	.word	0x40021000
 800508c:	08005f88 	.word	0x08005f88
 8005090:	20000000 	.word	0x20000000
 8005094:	20000004 	.word	0x20000004

08005098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	2300      	movs	r3, #0
 80050ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050b2:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_RCC_GetSysClockFreq+0x94>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 030c 	and.w	r3, r3, #12
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d002      	beq.n	80050c8 <HAL_RCC_GetSysClockFreq+0x30>
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d003      	beq.n	80050ce <HAL_RCC_GetSysClockFreq+0x36>
 80050c6:	e027      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050c8:	4b19      	ldr	r3, [pc, #100]	; (8005130 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ca:	613b      	str	r3, [r7, #16]
      break;
 80050cc:	e027      	b.n	800511e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	0c9b      	lsrs	r3, r3, #18
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	4a17      	ldr	r2, [pc, #92]	; (8005134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050d8:	5cd3      	ldrb	r3, [r2, r3]
 80050da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <HAL_RCC_GetSysClockFreq+0x94>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	0c5b      	lsrs	r3, r3, #17
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	4a11      	ldr	r2, [pc, #68]	; (8005138 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050f2:	5cd3      	ldrb	r3, [r2, r3]
 80050f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <HAL_RCC_GetSysClockFreq+0x98>)
 80050fa:	fb03 f202 	mul.w	r2, r3, r2
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	e004      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <HAL_RCC_GetSysClockFreq+0xa4>)
 800510c:	fb02 f303 	mul.w	r3, r2, r3
 8005110:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	613b      	str	r3, [r7, #16]
      break;
 8005116:	e002      	b.n	800511e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetSysClockFreq+0x98>)
 800511a:	613b      	str	r3, [r7, #16]
      break;
 800511c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800511e:	693b      	ldr	r3, [r7, #16]
}
 8005120:	4618      	mov	r0, r3
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	007a1200 	.word	0x007a1200
 8005134:	08005fa0 	.word	0x08005fa0
 8005138:	08005fb0 	.word	0x08005fb0
 800513c:	003d0900 	.word	0x003d0900

08005140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005144:	4b02      	ldr	r3, [pc, #8]	; (8005150 <HAL_RCC_GetHCLKFreq+0x10>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	20000000 	.word	0x20000000

08005154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005158:	f7ff fff2 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	0a1b      	lsrs	r3, r3, #8
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4903      	ldr	r1, [pc, #12]	; (8005178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40021000 	.word	0x40021000
 8005178:	08005f98 	.word	0x08005f98

0800517c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005180:	f7ff ffde 	bl	8005140 <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	0adb      	lsrs	r3, r3, #11
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4903      	ldr	r1, [pc, #12]	; (80051a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40021000 	.word	0x40021000
 80051a0:	08005f98 	.word	0x08005f98

080051a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <RCC_Delay+0x34>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <RCC_Delay+0x38>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	0a5b      	lsrs	r3, r3, #9
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051c0:	bf00      	nop
  }
  while (Delay --);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1e5a      	subs	r2, r3, #1
 80051c6:	60fa      	str	r2, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f9      	bne.n	80051c0 <RCC_Delay+0x1c>
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	20000000 	.word	0x20000000
 80051dc:	10624dd3 	.word	0x10624dd3

080051e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d07d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051fc:	2300      	movs	r3, #0
 80051fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005200:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10d      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520c:	4b4c      	ldr	r3, [pc, #304]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	4a4b      	ldr	r2, [pc, #300]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005216:	61d3      	str	r3, [r2, #28]
 8005218:	4b49      	ldr	r3, [pc, #292]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005228:	4b46      	ldr	r3, [pc, #280]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d118      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005234:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a42      	ldr	r2, [pc, #264]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800523a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005240:	f7fd fdd8 	bl	8002df4 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005246:	e008      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005248:	f7fd fdd4 	bl	8002df4 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	; 0x64
 8005254:	d901      	bls.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e06d      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b3a      	ldr	r3, [pc, #232]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005266:	4b36      	ldr	r3, [pc, #216]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d02e      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	429a      	cmp	r2, r3
 8005282:	d027      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005284:	4b2e      	ldr	r3, [pc, #184]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800528e:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005294:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800529a:	4a29      	ldr	r2, [pc, #164]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052aa:	f7fd fda3 	bl	8002df4 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fd fd9f 	bl	8002df4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e036      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ee      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4917      	ldr	r1, [pc, #92]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ec:	4b14      	ldr	r3, [pc, #80]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	490b      	ldr	r1, [pc, #44]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005312:	4313      	orrs	r3, r2
 8005314:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005322:	4b07      	ldr	r3, [pc, #28]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	4904      	ldr	r1, [pc, #16]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	40007000 	.word	0x40007000
 8005348:	42420440 	.word	0x42420440

0800534c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e041      	b.n	80053e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fd fbdc 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f000 fabe 	bl	800590c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e032      	b.n	800546a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a18      	ldr	r2, [pc, #96]	; (8005474 <HAL_TIM_Base_Start+0x88>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_Base_Start+0x48>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d009      	beq.n	8005434 <HAL_TIM_Base_Start+0x48>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <HAL_TIM_Base_Start+0x8c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_Base_Start+0x48>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a13      	ldr	r2, [pc, #76]	; (800547c <HAL_TIM_Base_Start+0x90>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d111      	bne.n	8005458 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d010      	beq.n	8005468 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005456:	e007      	b.n	8005468 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800

08005480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e03a      	b.n	800550e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIM_Base_Start_IT+0x98>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x58>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d009      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x58>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a14      	ldr	r2, [pc, #80]	; (800551c <HAL_TIM_Base_Start_IT+0x9c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x58>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <HAL_TIM_Base_Start_IT+0xa0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d111      	bne.n	80054fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d010      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fa:	e007      	b.n	800550c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800

08005524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b02      	cmp	r3, #2
 8005538:	d122      	bne.n	8005580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b02      	cmp	r3, #2
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0202 	mvn.w	r2, #2
 8005550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9b4 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9a7 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f9b6 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b04      	cmp	r3, #4
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0204 	mvn.w	r2, #4
 80055a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f98a 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f97d 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f98c 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0208 	mvn.w	r2, #8
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2204      	movs	r2, #4
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f960 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f953 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f962 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b10      	cmp	r3, #16
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b10      	cmp	r3, #16
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0210 	mvn.w	r2, #16
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2208      	movs	r2, #8
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f936 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f929 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f938 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d10e      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0201 	mvn.w	r2, #1
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fd f936 	bl	8002914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d10e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa7b 	bl	8005bca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d10e      	bne.n	8005700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d107      	bne.n	8005700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f8fc 	bl	80058f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d10e      	bne.n	800572c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b20      	cmp	r3, #32
 800571a:	d107      	bne.n	800572c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0220 	mvn.w	r2, #32
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa46 	bl	8005bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIM_ConfigClockSource+0x1c>
 800574c:	2302      	movs	r3, #2
 800574e:	e0b4      	b.n	80058ba <HAL_TIM_ConfigClockSource+0x186>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800576e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005788:	d03e      	beq.n	8005808 <HAL_TIM_ConfigClockSource+0xd4>
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578e:	f200 8087 	bhi.w	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	f000 8086 	beq.w	80058a6 <HAL_TIM_ConfigClockSource+0x172>
 800579a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579e:	d87f      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b70      	cmp	r3, #112	; 0x70
 80057a2:	d01a      	beq.n	80057da <HAL_TIM_ConfigClockSource+0xa6>
 80057a4:	2b70      	cmp	r3, #112	; 0x70
 80057a6:	d87b      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b60      	cmp	r3, #96	; 0x60
 80057aa:	d050      	beq.n	800584e <HAL_TIM_ConfigClockSource+0x11a>
 80057ac:	2b60      	cmp	r3, #96	; 0x60
 80057ae:	d877      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b50      	cmp	r3, #80	; 0x50
 80057b2:	d03c      	beq.n	800582e <HAL_TIM_ConfigClockSource+0xfa>
 80057b4:	2b50      	cmp	r3, #80	; 0x50
 80057b6:	d873      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b40      	cmp	r3, #64	; 0x40
 80057ba:	d058      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x13a>
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d86f      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b30      	cmp	r3, #48	; 0x30
 80057c2:	d064      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057c4:	2b30      	cmp	r3, #48	; 0x30
 80057c6:	d86b      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d060      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d867      	bhi.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d05c      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d05a      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x15a>
 80057d8:	e062      	b.n	80058a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057ea:	f000 f968 	bl	8005abe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	609a      	str	r2, [r3, #8]
      break;
 8005806:	e04f      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	f000 f951 	bl	8005abe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800582a:	609a      	str	r2, [r3, #8]
      break;
 800582c:	e03c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	461a      	mov	r2, r3
 800583c:	f000 f8c8 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2150      	movs	r1, #80	; 0x50
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f91f 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 800584c:	e02c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800585a:	461a      	mov	r2, r3
 800585c:	f000 f8e6 	bl	8005a2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2160      	movs	r1, #96	; 0x60
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f90f 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 800586c:	e01c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	461a      	mov	r2, r3
 800587c:	f000 f8a8 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f8ff 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 800588c:	e00c      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f000 f8f6 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 800589e:	e003      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	73fb      	strb	r3, [r7, #15]
      break;
 80058a4:	e000      	b.n	80058a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr
	...

0800590c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x30>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a25      	ldr	r2, [pc, #148]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <TIM_Base_SetConfig+0xbc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x62>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <TIM_Base_SetConfig+0xc0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <TIM_Base_SetConfig+0xb8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800

080059d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 030a 	bic.w	r3, r3, #10
 8005a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr

08005a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f023 0210 	bic.w	r2, r3, #16
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	031b      	lsls	r3, r3, #12
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	621a      	str	r2, [r3, #32]
}
 8005a80:	bf00      	nop
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr

08005a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f043 0307 	orr.w	r3, r3, #7
 8005aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b087      	sub	sp, #28
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	021a      	lsls	r2, r3, #8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	609a      	str	r2, [r3, #8]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e046      	b.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a16      	ldr	r2, [pc, #88]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b60:	d009      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10c      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	40012c00 	.word	0x40012c00
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800

08005bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e042      	b.n	8005c74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc ffe0 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2224      	movs	r2, #36	; 0x24
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f82b 	bl	8005c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695a      	ldr	r2, [r3, #20]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cb6:	f023 030c 	bic.w	r3, r3, #12
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a2c      	ldr	r2, [pc, #176]	; (8005d90 <UART_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d103      	bne.n	8005cec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ce4:	f7ff fa4a 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	e002      	b.n	8005cf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7ff fa32 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009a      	lsls	r2, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	4a22      	ldr	r2, [pc, #136]	; (8005d94 <UART_SetConfig+0x118>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	0119      	lsls	r1, r3, #4
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009a      	lsls	r2, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <UART_SetConfig+0x118>)
 8005d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2064      	movs	r0, #100	; 0x64
 8005d32:	fb00 f303 	mul.w	r3, r0, r3
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	3332      	adds	r3, #50	; 0x32
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <UART_SetConfig+0x118>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d48:	4419      	add	r1, r3
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009a      	lsls	r2, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <UART_SetConfig+0x118>)
 8005d62:	fba3 0302 	umull	r0, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	2064      	movs	r0, #100	; 0x64
 8005d6a:	fb00 f303 	mul.w	r3, r0, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	3332      	adds	r3, #50	; 0x32
 8005d74:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <UART_SetConfig+0x118>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	f003 020f 	and.w	r2, r3, #15
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	440a      	add	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40013800 	.word	0x40013800
 8005d94:	51eb851f 	.word	0x51eb851f

08005d98 <memset>:
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4402      	add	r2, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d100      	bne.n	8005da2 <memset+0xa>
 8005da0:	4770      	bx	lr
 8005da2:	f803 1b01 	strb.w	r1, [r3], #1
 8005da6:	e7f9      	b.n	8005d9c <memset+0x4>

08005da8 <__libc_init_array>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	2600      	movs	r6, #0
 8005dac:	4d0c      	ldr	r5, [pc, #48]	; (8005de0 <__libc_init_array+0x38>)
 8005dae:	4c0d      	ldr	r4, [pc, #52]	; (8005de4 <__libc_init_array+0x3c>)
 8005db0:	1b64      	subs	r4, r4, r5
 8005db2:	10a4      	asrs	r4, r4, #2
 8005db4:	42a6      	cmp	r6, r4
 8005db6:	d109      	bne.n	8005dcc <__libc_init_array+0x24>
 8005db8:	f000 f860 	bl	8005e7c <_init>
 8005dbc:	2600      	movs	r6, #0
 8005dbe:	4d0a      	ldr	r5, [pc, #40]	; (8005de8 <__libc_init_array+0x40>)
 8005dc0:	4c0a      	ldr	r4, [pc, #40]	; (8005dec <__libc_init_array+0x44>)
 8005dc2:	1b64      	subs	r4, r4, r5
 8005dc4:	10a4      	asrs	r4, r4, #2
 8005dc6:	42a6      	cmp	r6, r4
 8005dc8:	d105      	bne.n	8005dd6 <__libc_init_array+0x2e>
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd0:	4798      	blx	r3
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	e7ee      	b.n	8005db4 <__libc_init_array+0xc>
 8005dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dda:	4798      	blx	r3
 8005ddc:	3601      	adds	r6, #1
 8005dde:	e7f2      	b.n	8005dc6 <__libc_init_array+0x1e>
 8005de0:	08005fb4 	.word	0x08005fb4
 8005de4:	08005fb4 	.word	0x08005fb4
 8005de8:	08005fb4 	.word	0x08005fb4
 8005dec:	08005fb8 	.word	0x08005fb8

08005df0 <round>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005df6:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8005dfa:	2a13      	cmp	r2, #19
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4605      	mov	r5, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	dc18      	bgt.n	8005e36 <round+0x46>
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	da09      	bge.n	8005e1c <round+0x2c>
 8005e08:	3201      	adds	r2, #1
 8005e0a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005e0e:	d103      	bne.n	8005e18 <round+0x28>
 8005e10:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e18:	2200      	movs	r2, #0
 8005e1a:	e029      	b.n	8005e70 <round+0x80>
 8005e1c:	4816      	ldr	r0, [pc, #88]	; (8005e78 <round+0x88>)
 8005e1e:	4110      	asrs	r0, r2
 8005e20:	4001      	ands	r1, r0
 8005e22:	4329      	orrs	r1, r5
 8005e24:	d011      	beq.n	8005e4a <round+0x5a>
 8005e26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005e2a:	fa41 f202 	asr.w	r2, r1, r2
 8005e2e:	4413      	add	r3, r2
 8005e30:	ea23 0300 	bic.w	r3, r3, r0
 8005e34:	e7f0      	b.n	8005e18 <round+0x28>
 8005e36:	2a33      	cmp	r2, #51	; 0x33
 8005e38:	dd0a      	ble.n	8005e50 <round+0x60>
 8005e3a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005e3e:	d104      	bne.n	8005e4a <round+0x5a>
 8005e40:	4602      	mov	r2, r0
 8005e42:	f7fa f98b 	bl	800015c <__adddf3>
 8005e46:	4605      	mov	r5, r0
 8005e48:	460c      	mov	r4, r1
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005e58:	40f8      	lsrs	r0, r7
 8005e5a:	4228      	tst	r0, r5
 8005e5c:	d0f5      	beq.n	8005e4a <round+0x5a>
 8005e5e:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8005e62:	2201      	movs	r2, #1
 8005e64:	408a      	lsls	r2, r1
 8005e66:	1952      	adds	r2, r2, r5
 8005e68:	bf28      	it	cs
 8005e6a:	3301      	addcs	r3, #1
 8005e6c:	ea22 0200 	bic.w	r2, r2, r0
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	e7e7      	b.n	8005e46 <round+0x56>
 8005e76:	bf00      	nop
 8005e78:	000fffff 	.word	0x000fffff

08005e7c <_init>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr

08005e88 <_fini>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr
