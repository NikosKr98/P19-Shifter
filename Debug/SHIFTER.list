
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004920  08004920  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004920  08004920  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004920  08004920  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000024  0800494c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800494c  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001101f  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002910  00000000  00000000  000310af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  000339c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c91  00000000  00000000  000349e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019790  00000000  00000000  00035679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000128dc  00000000  00000000  0004ee09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009291c  00000000  00000000  000616e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004324  00000000  00000000  000f4004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f8328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080048dc 	.word	0x080048dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080048dc 	.word	0x080048dc

0800014c <InitApplication>:
#define RaiseControlError(fault_) MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_))
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitApplication(InputStruct *inputs, OutputStruct *outputs) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000156:	4a06      	ldr	r2, [pc, #24]	; (8000170 <InitApplication+0x24>)
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 800015c:	4a05      	ldr	r2, [pc, #20]	; (8000174 <InitApplication+0x28>)
 800015e:	683b      	ldr	r3, [r7, #0]
 8000160:	6013      	str	r3, [r2, #0]

	IDLE_Entry();
 8000162:	f000 f845 	bl	80001f0 <IDLE_Entry>
}
 8000166:	bf00      	nop
 8000168:	3708      	adds	r7, #8
 800016a:	46bd      	mov	sp, r7
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	2000004c 	.word	0x2000004c
 8000174:	20000050 	.word	0x20000050

08000178 <RunApplication>:



void RunApplication(InputStruct *inputs, OutputStruct *outputs){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
 8000180:	6039      	str	r1, [r7, #0]
//	myInputs = inputs;   // TODO: previously here... we should not need to do the copy every time, they are pointers
//	myOutputs = outputs;


	// SHIFTER STATE MACHINE
	switch (NCurrentState) {
 8000182:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <RunApplication+0x74>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b05      	cmp	r3, #5
 8000188:	d82c      	bhi.n	80001e4 <RunApplication+0x6c>
 800018a:	a201      	add	r2, pc, #4	; (adr r2, 8000190 <RunApplication+0x18>)
 800018c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000190:	080001a9 	.word	0x080001a9
 8000194:	080001b3 	.word	0x080001b3
 8000198:	080001bd 	.word	0x080001bd
 800019c:	080001c7 	.word	0x080001c7
 80001a0:	080001d1 	.word	0x080001d1
 80001a4:	080001db 	.word	0x080001db

	case IDLE_STATE:
		IDLE_Run();
 80001a8:	f000 f864 	bl	8000274 <IDLE_Run>
		IDLE_Event();
 80001ac:	f000 f838 	bl	8000220 <IDLE_Event>
		break;
 80001b0:	e018      	b.n	80001e4 <RunApplication+0x6c>
	case PRE_UPSHIFT_STATE:
		PRE_UPSHIFT_Run();
 80001b2:	f000 f8b5 	bl	8000320 <PRE_UPSHIFT_Run>
		PRE_UPSHIFT_Event();
 80001b6:	f000 f87f 	bl	80002b8 <PRE_UPSHIFT_Event>
		break;
 80001ba:	e013      	b.n	80001e4 <RunApplication+0x6c>
	case PRE_DNSHIFT_STATE:
		PRE_DNSHIFT_Run();
 80001bc:	f000 f92c 	bl	8000418 <PRE_DNSHIFT_Run>
		PRE_DNSHIFT_Event();
 80001c0:	f000 f924 	bl	800040c <PRE_DNSHIFT_Event>
		break;
 80001c4:	e00e      	b.n	80001e4 <RunApplication+0x6c>
	case SHIFTING_STATE:
		SHIFTING_Run();
 80001c6:	f000 f945 	bl	8000454 <SHIFTING_Run>
		SHIFTING_Event();
 80001ca:	f000 f93d 	bl	8000448 <SHIFTING_Event>
		break;
 80001ce:	e009      	b.n	80001e4 <RunApplication+0x6c>
	case POSTSHIFT_STATE:
		POSTSHIFT_Run();
 80001d0:	f000 f94c 	bl	800046c <POSTSHIFT_Run>
		POSTSHIFT_Event();
 80001d4:	f000 f944 	bl	8000460 <POSTSHIFT_Event>
		break;
 80001d8:	e004      	b.n	80001e4 <RunApplication+0x6c>
	case ERROR_STATE:
		ERROR_Run();
 80001da:	f000 f965 	bl	80004a8 <ERROR_Run>
		ERROR_Event();
 80001de:	f000 f95d 	bl	800049c <ERROR_Event>
		break;
 80001e2:	bf00      	nop
	}


}
 80001e4:	bf00      	nop
 80001e6:	3708      	adds	r7, #8
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000054 	.word	0x20000054

080001f0 <IDLE_Entry>:


void IDLE_Entry(void) {
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <IDLE_Entry+0x1c>)
 80001f6:	781a      	ldrb	r2, [r3, #0]
 80001f8:	4b05      	ldr	r3, [pc, #20]	; (8000210 <IDLE_Entry+0x20>)
 80001fa:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <IDLE_Entry+0x1c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000054 	.word	0x20000054
 8000210:	20000055 	.word	0x20000055

08000214 <IDLE_Exit>:
void IDLE_Exit(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <IDLE_Event>:
void IDLE_Event(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {		// TODO: not sure how to handle this...how do we come back
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <IDLE_Event+0x50>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fa49 	bl	80006c0 <CheckFaults>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d004      	beq.n	800023e <IDLE_Event+0x1e>
		IDLE_Exit();
 8000234:	f7ff ffee 	bl	8000214 <IDLE_Exit>
		ERROR_Entry();
 8000238:	f000 f91e 	bl	8000478 <ERROR_Entry>
		return;
 800023c:	e017      	b.n	800026e <IDLE_Event+0x4e>
	}


    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <IDLE_Event+0x50>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d004      	beq.n	8000256 <IDLE_Event+0x36>
        IDLE_Exit();
 800024c:	f7ff ffe2 	bl	8000214 <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8000250:	f000 f816 	bl	8000280 <PRE_UPSHIFT_Entry>
        return;
 8000254:	e00b      	b.n	800026e <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <IDLE_Event+0x50>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d004      	beq.n	800026e <IDLE_Event+0x4e>
        IDLE_Exit();
 8000264:	f7ff ffd6 	bl	8000214 <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8000268:	f000 f8be 	bl	80003e8 <PRE_DNSHIFT_Entry>
        return;
 800026c:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000004c 	.word	0x2000004c

08000274 <IDLE_Run>:
void IDLE_Run(void) {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

	 // TODO: Clutch handle with Rpm check and conditioning (Map)

}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <PRE_UPSHIFT_Entry+0x20>)
 8000286:	781a      	ldrb	r2, [r3, #0]
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <PRE_UPSHIFT_Entry+0x24>)
 800028a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <PRE_UPSHIFT_Entry+0x20>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]

	tPreShiftThreshold = HAL_GetTick();
 8000292:	f001 fa55 	bl	8001740 <HAL_GetTick>
 8000296:	4603      	mov	r3, r0
 8000298:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <PRE_UPSHIFT_Entry+0x28>)
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000054 	.word	0x20000054
 80002a4:	20000055 	.word	0x20000055
 80002a8:	2000005c 	.word	0x2000005c

080002ac <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0

}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr

080002b8 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 80002b8:	b598      	push	{r3, r4, r7, lr}
 80002ba:	af00      	add	r7, sp, #0

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <PRE_UPSHIFT_Event+0x54>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	7d5b      	ldrb	r3, [r3, #21]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d10e      	bne.n	80002e4 <PRE_UPSHIFT_Event+0x2c>
		NGearTarget = MyInputs->NGear +1;		// we go to the next gear
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <PRE_UPSHIFT_Event+0x58>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	7a1b      	ldrb	r3, [r3, #8]
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <PRE_UPSHIFT_Event+0x5c>)
 80002d2:	701a      	strb	r2, [r3, #0]
		xClutchTarget = 0;						// we do not need any clutch opening
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <PRE_UPSHIFT_Event+0x60>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	801a      	strh	r2, [r3, #0]
		PRE_UPSHIFT_Exit();
 80002da:	f7ff ffe7 	bl	80002ac <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 80002de:	f000 f8a1 	bl	8000424 <SHIFTING_Entry>
		return;
 80002e2:	e012      	b.n	800030a <PRE_UPSHIFT_Event+0x52>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftThreshold + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <PRE_UPSHIFT_Event+0x54>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	7d5b      	ldrb	r3, [r3, #21]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d00d      	beq.n	800030a <PRE_UPSHIFT_Event+0x52>
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <PRE_UPSHIFT_Event+0x64>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f103 0464 	add.w	r4, r3, #100	; 0x64
 80002f6:	f001 fa23 	bl	8001740 <HAL_GetTick>
 80002fa:	4603      	mov	r3, r0
 80002fc:	429c      	cmp	r4, r3
 80002fe:	d804      	bhi.n	800030a <PRE_UPSHIFT_Event+0x52>
		PRE_UPSHIFT_Exit();
 8000300:	f7ff ffd4 	bl	80002ac <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000304:	f000 f8b8 	bl	8000478 <ERROR_Entry>
		return;
 8000308:	bf00      	nop
	}


}
 800030a:	bd98      	pop	{r3, r4, r7, pc}
 800030c:	20000050 	.word	0x20000050
 8000310:	2000004c 	.word	0x2000004c
 8000314:	20000056 	.word	0x20000056
 8000318:	20000058 	.word	0x20000058
 800031c:	2000005c 	.word	0x2000005c

08000320 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST)
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <PRE_UPSHIFT_Run+0xbc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	7a1b      	ldrb	r3, [r3, #8]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d10f      	bne.n	800034e <PRE_UPSHIFT_Run+0x2e>
 800032e:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <PRE_UPSHIFT_Run+0xbc>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8000336:	2b3c      	cmp	r3, #60	; 0x3c
 8000338:	dc09      	bgt.n	800034e <PRE_UPSHIFT_Run+0x2e>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	7d5a      	ldrb	r2, [r3, #21]
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f042 0201 	orr.w	r2, r2, #1
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	755a      	strb	r2, [r3, #21]
 800034c:	e008      	b.n	8000360 <PRE_UPSHIFT_Run+0x40>
	else
		ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	7d5a      	ldrb	r2, [r3, #21]
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f022 0201 	bic.w	r2, r2, #1
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	755a      	strb	r2, [r3, #21]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear])
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <PRE_UPSHIFT_Run+0xbc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000368:	461a      	mov	r2, r3
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <PRE_UPSHIFT_Run+0xbc>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	7a1b      	ldrb	r3, [r3, #8]
 8000370:	4619      	mov	r1, r3
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <PRE_UPSHIFT_Run+0xc4>)
 8000374:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000378:	429a      	cmp	r2, r3
 800037a:	da09      	bge.n	8000390 <PRE_UPSHIFT_Run+0x70>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	7d5a      	ldrb	r2, [r3, #21]
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f042 0202 	orr.w	r2, r2, #2
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	755a      	strb	r2, [r3, #21]
 800038e:	e008      	b.n	80003a2 <PRE_UPSHIFT_Run+0x82>
	else
		ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	7d5a      	ldrb	r2, [r3, #21]
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f022 0202 	bic.w	r2, r2, #2
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	755a      	strb	r2, [r3, #21]

	if(MyInputs->NGear + 1 > TOTAL_GEARS)
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <PRE_UPSHIFT_Run+0xbc>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	7a1b      	ldrb	r3, [r3, #8]
 80003a8:	2b05      	cmp	r3, #5
 80003aa:	d909      	bls.n	80003c0 <PRE_UPSHIFT_Run+0xa0>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	7d5a      	ldrb	r2, [r3, #21]
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f042 0204 	orr.w	r2, r2, #4
 80003ba:	b2d2      	uxtb	r2, r2
 80003bc:	755a      	strb	r2, [r3, #21]
	else
		ClearControlError(TARGET_GEAR_EXCEEDS_MAX);
}
 80003be:	e008      	b.n	80003d2 <PRE_UPSHIFT_Run+0xb2>
		ClearControlError(TARGET_GEAR_EXCEEDS_MAX);
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	7d5a      	ldrb	r2, [r3, #21]
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <PRE_UPSHIFT_Run+0xc0>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f022 0204 	bic.w	r2, r2, #4
 80003ce:	b2d2      	uxtb	r2, r2
 80003d0:	755a      	strb	r2, [r3, #21]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	2000004c 	.word	0x2000004c
 80003e0:	20000050 	.word	0x20000050
 80003e4:	20000040 	.word	0x20000040

080003e8 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <PRE_DNSHIFT_Entry+0x1c>)
 80003ee:	781a      	ldrb	r2, [r3, #0]
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <PRE_DNSHIFT_Entry+0x20>)
 80003f2:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <PRE_DNSHIFT_Entry+0x1c>)
 80003f6:	2202      	movs	r2, #2
 80003f8:	701a      	strb	r2, [r3, #0]
}
 80003fa:	bf00      	nop
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000054 	.word	0x20000054
 8000408:	20000055 	.word	0x20000055

0800040c <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Exit(void) {

}
void PRE_DNSHIFT_Event(void) {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0


}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <SHIFTING_Entry+0x1c>)
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SHIFTING_Entry+0x20>)
 800042e:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <SHIFTING_Entry+0x1c>)
 8000432:	2203      	movs	r2, #3
 8000434:	701a      	strb	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000054 	.word	0x20000054
 8000444:	20000055 	.word	0x20000055

08000448 <SHIFTING_Event>:
void SHIFTING_Exit(void) {

}
void SHIFTING_Event(void) {
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <SHIFTING_Run>:
void SHIFTING_Run(void) {
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

	// remember to copy NGear from input struct to output struct because we need it in outputs
	// TODO: attention to xClutch , (always??? take the max of Manualtarget and ControlTarget)
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <POSTSHIFT_Event>:
	NCurrentState = POSTSHIFT_STATE;
}
void POSTSHIFT_Exit(void) {

}
void POSTSHIFT_Event(void) {
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <ERROR_Entry>:


void ERROR_Entry(void) {
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <ERROR_Entry+0x1c>)
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <ERROR_Entry+0x20>)
 8000482:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 8000484:	4b03      	ldr	r3, [pc, #12]	; (8000494 <ERROR_Entry+0x1c>)
 8000486:	2205      	movs	r2, #5
 8000488:	701a      	strb	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	20000054 	.word	0x20000054
 8000498:	20000055 	.word	0x20000055

0800049c <ERROR_Event>:
void ERROR_Exit(void) {

}
void ERROR_Event(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <ERROR_Run>:
void ERROR_Run(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side);

void ReadInputs(InputStruct *inputs){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

	// Reset events
	    inputs->nEventStatus = 0;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]

	// ---------------------------------------------------------------------------------------------------
		// NGear Conditioning

		// averaging
		NGearRawFiltered = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide);
 80004c2:	4b6b      	ldr	r3, [pc, #428]	; (8000670 <ReadInputs+0x1bc>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	f240 1177 	movw	r1, #375	; 0x177
 80004ce:	4869      	ldr	r0, [pc, #420]	; (8000674 <ReadInputs+0x1c0>)
 80004d0:	f000 f97c 	bl	80007cc <MyHalfBufferAverage>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b67      	ldr	r3, [pc, #412]	; (8000678 <ReadInputs+0x1c4>)
 80004da:	801a      	strh	r2, [r3, #0]
				// doing the average (in this case a round function) to determine the NGear from the raw value
				// the error will be if we exceed the up and down limits -> pot broken. in this case we need strategy to come back and use fully open loop control
				//currently if there is not a patch in the table we will be left with the last value which is not correct


		inputs->BNGearInError = calculateActualNGear(inputs->NGear, NGearRawFiltered);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7a1b      	ldrb	r3, [r3, #8]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	4a65      	ldr	r2, [pc, #404]	; (8000678 <ReadInputs+0x1c4>)
 80004e4:	8812      	ldrh	r2, [r2, #0]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 f943 	bl	8000774 <calculateActualNGear>
 80004ee:	4603      	mov	r3, r0
 80004f0:	461a      	mov	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	725a      	strb	r2, [r3, #9]

		if(inputs->BNGearInError) {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	7a5b      	ldrb	r3, [r3, #9]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d006      	beq.n	800050c <ReadInputs+0x58>
			RaiseFault(inputs, NGEAR_IN_ERROR_FAULT);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	f043 0201 	orr.w	r2, r3, #1
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	e005      	b.n	8000518 <ReadInputs+0x64>
		}
		else {
			ClearFault(inputs, NGEAR_IN_ERROR_FAULT);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	f023 0201 	bic.w	r2, r3, #1
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	605a      	str	r2, [r3, #4]
		}
	// ---------------------------------------------------------------------------------------------------
		// Clutch Paddle Conditioning

		inputs->rClutchPaddleRaw = rClutchPaddleCAN;
 8000518:	4b58      	ldr	r3, [pc, #352]	; (800067c <ReadInputs+0x1c8>)
 800051a:	f993 2000 	ldrsb.w	r2, [r3]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	735a      	strb	r2, [r3, #13]
		inputs->rClutchPaddle = CLAMP(inputs->rClutchPaddleRaw, CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8000528:	2b63      	cmp	r3, #99	; 0x63
 800052a:	dc06      	bgt.n	800053a <ReadInputs+0x86>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8000532:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000536:	b25a      	sxtb	r2, r3
 8000538:	e000      	b.n	800053c <ReadInputs+0x88>
 800053a:	2264      	movs	r2, #100	; 0x64
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	739a      	strb	r2, [r3, #14]
		// TODO: set the analog inputs and decide filtering (or not)

	// ---------------------------------------------------------------------------------------------------
		// Copy CAN data to struct

		inputs->BUpShiftRequest = BUpShiftRequestCAN;
 8000540:	4b4f      	ldr	r3, [pc, #316]	; (8000680 <ReadInputs+0x1cc>)
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	729a      	strb	r2, [r3, #10]
		inputs->BDnShiftRequest = BDnShiftRequestCAN;
 8000548:	4b4e      	ldr	r3, [pc, #312]	; (8000684 <ReadInputs+0x1d0>)
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	72da      	strb	r2, [r3, #11]
		inputs->BLaunchRequest = BLaunchRequestCAN;
 8000550:	4b4d      	ldr	r3, [pc, #308]	; (8000688 <ReadInputs+0x1d4>)
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	731a      	strb	r2, [r3, #12]

		inputs->nEngine = nEngineCAN;
 8000558:	4b4c      	ldr	r3, [pc, #304]	; (800068c <ReadInputs+0x1d8>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	b21a      	sxth	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	821a      	strh	r2, [r3, #16]

		inputs->NCANErrors = NCANErrorCount;			// update can error count
 8000562:	4b4b      	ldr	r3, [pc, #300]	; (8000690 <ReadInputs+0x1dc>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	749a      	strb	r2, [r3, #18]
		inputs->NCANRxErrors = NCanGetRxErrorCount;	// update can Rx error count
 800056c:	4b49      	ldr	r3, [pc, #292]	; (8000694 <ReadInputs+0x1e0>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	b29b      	uxth	r3, r3
 8000572:	b2da      	uxtb	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	74da      	strb	r2, [r3, #19]

	// ---------------------------------------------------------------------------------------------------
		// Events Parsing

		if(inputs->BUpShiftRequest && !BUpShiftRequested) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7a9b      	ldrb	r3, [r3, #10]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00d      	beq.n	800059c <ReadInputs+0xe8>
 8000580:	4b45      	ldr	r3, [pc, #276]	; (8000698 <ReadInputs+0x1e4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <ReadInputs+0xe8>
			BUpShiftRequested = 1;
 8000588:	4b43      	ldr	r3, [pc, #268]	; (8000698 <ReadInputs+0x1e4>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, UPSHIFT_PRESS_EVT);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f043 0201 	orr.w	r2, r3, #1
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e00a      	b.n	80005b2 <ReadInputs+0xfe>
		}
		else if(!inputs->BUpShiftRequest && BUpShiftRequested) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a9b      	ldrb	r3, [r3, #10]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d106      	bne.n	80005b2 <ReadInputs+0xfe>
 80005a4:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <ReadInputs+0x1e4>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <ReadInputs+0xfe>
			BUpShiftRequested = 0;
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <ReadInputs+0x1e4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
		}

		if(inputs->BDnShiftRequest && !BDnShiftRequested) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7adb      	ldrb	r3, [r3, #11]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d00d      	beq.n	80005d6 <ReadInputs+0x122>
 80005ba:	4b38      	ldr	r3, [pc, #224]	; (800069c <ReadInputs+0x1e8>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <ReadInputs+0x122>
			BDnShiftRequested = 1;
 80005c2:	4b36      	ldr	r3, [pc, #216]	; (800069c <ReadInputs+0x1e8>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, DNSHIFT_PRESS_EVT);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f043 0202 	orr.w	r2, r3, #2
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e00a      	b.n	80005ec <ReadInputs+0x138>
		}
		else if(!inputs->BDnShiftRequest && BDnShiftRequested) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7adb      	ldrb	r3, [r3, #11]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d106      	bne.n	80005ec <ReadInputs+0x138>
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <ReadInputs+0x1e8>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <ReadInputs+0x138>
			BDnShiftRequested = 0;
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <ReadInputs+0x1e8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
		}

		if(inputs->BLaunchRequest && !BLaunchRequested) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7b1b      	ldrb	r3, [r3, #12]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00d      	beq.n	8000610 <ReadInputs+0x15c>
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <ReadInputs+0x1ec>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d109      	bne.n	8000610 <ReadInputs+0x15c>
			BLaunchRequested = 1;
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <ReadInputs+0x1ec>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
			PushEvent(inputs, LAUNCH_PRESS_EVT);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f043 0204 	orr.w	r2, r3, #4
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	e00a      	b.n	8000626 <ReadInputs+0x172>
		}
		else if(!inputs->BLaunchRequest && BLaunchRequested) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7b1b      	ldrb	r3, [r3, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d106      	bne.n	8000626 <ReadInputs+0x172>
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <ReadInputs+0x1ec>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <ReadInputs+0x172>
			BLaunchRequested = 0;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <ReadInputs+0x1ec>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
		}

		if(inputs->rClutchPaddle > CLUTCH_PADDLE_PRESSED_THRESHOLD) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800062c:	2b0a      	cmp	r3, #10
 800062e:	dd05      	ble.n	800063c <ReadInputs+0x188>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f043 0208 	orr.w	r2, r3, #8
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
		}

		if(inputs->BUpShiftRequest && inputs->BDnShiftRequest) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7a9b      	ldrb	r3, [r3, #10]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00a      	beq.n	800065a <ReadInputs+0x1a6>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7adb      	ldrb	r3, [r3, #11]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d006      	beq.n	800065a <ReadInputs+0x1a6>
			RaiseFault(inputs, BOTH_PADS_PRESSED_FAULT);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f043 0202 	orr.w	r2, r3, #2
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	e006      	b.n	8000668 <ReadInputs+0x1b4>
		}
		else {
			ClearFault(inputs, BOTH_PADS_PRESSED_FAULT);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	f023 0202 	bic.w	r2, r3, #2
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	605a      	str	r2, [r3, #4]





}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000070 	.word	0x20000070
 8000674:	20000230 	.word	0x20000230
 8000678:	2000006e 	.word	0x2000006e
 800067c:	20000066 	.word	0x20000066
 8000680:	20000063 	.word	0x20000063
 8000684:	20000064 	.word	0x20000064
 8000688:	20000065 	.word	0x20000065
 800068c:	20000068 	.word	0x20000068
 8000690:	2000006a 	.word	0x2000006a
 8000694:	2000006c 	.word	0x2000006c
 8000698:	20000060 	.word	0x20000060
 800069c:	20000061 	.word	0x20000061
 80006a0:	20000062 	.word	0x20000062

080006a4 <InitInputs>:

void InitInputs(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 80006a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80006ac:	4902      	ldr	r1, [pc, #8]	; (80006b8 <InitInputs+0x14>)
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <InitInputs+0x18>)
 80006b0:	f001 f94c 	bl	800194c <HAL_ADC_Start_DMA>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000230 	.word	0x20000230
 80006bc:	20000074 	.word	0x20000074

080006c0 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <CheckFaults+0x14>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <CheckFaults+0x16>
	return 0;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	f107 0214 	add.w	r2, r7, #20
 80006f2:	6839      	ldr	r1, [r7, #0]
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f001 fee9 	bl	80024cc <HAL_CAN_GetRxMessage>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d007      	beq.n	8000710 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <CAN_RX+0x7c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b29b      	uxth	r3, r3
 8000706:	3301      	adds	r3, #1
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <CAN_RX+0x7c>)
 800070c:	801a      	strh	r2, [r3, #0]
 800070e:	e021      	b.n	8000754 <CAN_RX+0x74>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8000716:	d004      	beq.n	8000722 <CAN_RX+0x42>
 8000718:	f240 3211 	movw	r2, #785	; 0x311
 800071c:	4293      	cmp	r3, r2
 800071e:	d00e      	beq.n	800073e <CAN_RX+0x5e>
		 nEngineCAN = RxBuffer[0] << 8 | RxBuffer[1];

		 break;

	 default:
		 break;
 8000720:	e018      	b.n	8000754 <CAN_RX+0x74>
		BUpShiftRequestCAN = RxBuffer[0];
 8000722:	7b3a      	ldrb	r2, [r7, #12]
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <CAN_RX+0x80>)
 8000726:	701a      	strb	r2, [r3, #0]
		BDnShiftRequestCAN = RxBuffer[1];
 8000728:	7b7a      	ldrb	r2, [r7, #13]
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <CAN_RX+0x84>)
 800072c:	701a      	strb	r2, [r3, #0]
		BLaunchRequestCAN = RxBuffer[2];
 800072e:	7bba      	ldrb	r2, [r7, #14]
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <CAN_RX+0x88>)
 8000732:	701a      	strb	r2, [r3, #0]
		rClutchPaddleCAN = RxBuffer[3];
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	b25a      	sxtb	r2, r3
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <CAN_RX+0x8c>)
 800073a:	701a      	strb	r2, [r3, #0]
		break;
 800073c:	e00a      	b.n	8000754 <CAN_RX+0x74>
		 nEngineCAN = RxBuffer[0] << 8 | RxBuffer[1];
 800073e:	7b3b      	ldrb	r3, [r7, #12]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21a      	sxth	r2, r3
 8000744:	7b7b      	ldrb	r3, [r7, #13]
 8000746:	b21b      	sxth	r3, r3
 8000748:	4313      	orrs	r3, r2
 800074a:	b21b      	sxth	r3, r3
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <CAN_RX+0x90>)
 8000750:	801a      	strh	r2, [r3, #0]
		 break;
 8000752:	bf00      	nop
	 }
}
 8000754:	3730      	adds	r7, #48	; 0x30
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000006c 	.word	0x2000006c
 8000760:	20000063 	.word	0x20000063
 8000764:	20000064 	.word	0x20000064
 8000768:	20000065 	.word	0x20000065
 800076c:	20000066 	.word	0x20000066
 8000770:	20000068 	.word	0x20000068

08000774 <calculateActualNGear>:


uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw) {
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	80fb      	strh	r3, [r7, #6]
 8000780:	4613      	mov	r3, r2
 8000782:	80bb      	strh	r3, [r7, #4]

    for (uint8_t gear = 0; gear < TOTAL_GEARS; ++gear) {
 8000784:	2300      	movs	r3, #0
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e015      	b.n	80007b6 <calculateActualNGear+0x42>
        if (NGearRaw >= NGearMap[gear][0] && NGearRaw <= NGearMap[gear][1]) {
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <calculateActualNGear+0x54>)
 800078e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000792:	88ba      	ldrh	r2, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	d30b      	bcc.n	80007b0 <calculateActualNGear+0x3c>
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <calculateActualNGear+0x54>)
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	885b      	ldrh	r3, [r3, #2]
 80007a2:	88ba      	ldrh	r2, [r7, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d803      	bhi.n	80007b0 <calculateActualNGear+0x3c>
        	NGear = gear;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	80fb      	strh	r3, [r7, #6]
        	return 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e006      	b.n	80007be <calculateActualNGear+0x4a>
    for (uint8_t gear = 0; gear < TOTAL_GEARS; ++gear) {
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	3301      	adds	r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	d9e6      	bls.n	800078a <calculateActualNGear+0x16>
        }
    }
    return 1; // If no match found, return error!
 80007bc:	2301      	movs	r3, #1
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000000 	.word	0x20000000

080007cc <MyHalfBufferAverage>:


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side) {
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
 80007d8:	4613      	mov	r3, r2
 80007da:	707b      	strb	r3, [r7, #1]

	uint32_t Accumulator=0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
	uint16_t Offset = (side == 1 ? halfsize : 0);
 80007e0:	787b      	ldrb	r3, [r7, #1]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d101      	bne.n	80007ea <MyHalfBufferAverage+0x1e>
 80007e6:	887b      	ldrh	r3, [r7, #2]
 80007e8:	e000      	b.n	80007ec <MyHalfBufferAverage+0x20>
 80007ea:	2300      	movs	r3, #0
 80007ec:	813b      	strh	r3, [r7, #8]

	for(uint16_t i=0; i<halfsize; i++) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	817b      	strh	r3, [r7, #10]
 80007f2:	e00d      	b.n	8000810 <MyHalfBufferAverage+0x44>
		Accumulator += buffer[i + Offset];
 80007f4:	897a      	ldrh	r2, [r7, #10]
 80007f6:	893b      	ldrh	r3, [r7, #8]
 80007f8:	4413      	add	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0; i<halfsize; i++) {
 800080a:	897b      	ldrh	r3, [r7, #10]
 800080c:	3301      	adds	r3, #1
 800080e:	817b      	strh	r3, [r7, #10]
 8000810:	897a      	ldrh	r2, [r7, #10]
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3ed      	bcc.n	80007f4 <MyHalfBufferAverage+0x28>
	}

	Accumulator /= halfsize;
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000820:	60fb      	str	r3, [r7, #12]
	return (uint16_t)Accumulator;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	b29b      	uxth	r3, r3

}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8000838:	2100      	movs	r1, #0
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff50 	bl	80006e0 <CAN_RX>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 8000850:	2101      	movs	r1, #1
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff44 	bl	80006e0 <CAN_RX>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_CAN_ErrorCallback+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_CAN_ErrorCallback+0x20>)
 8000874:	701a      	strb	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	2000006a 	.word	0x2000006a

08000884 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d107      	bne.n	80008a4 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f083 0301 	eor.w	r3, r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80008a2:	701a      	strb	r2, [r3, #0]
	}
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000074 	.word	0x20000074
 80008b4:	20000070 	.word	0x20000070

080008b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008bc:	f3bf 8f4f 	dsb	sy
}
 80008c0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <__NVIC_SystemReset+0x24>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008ca:	4904      	ldr	r1, [pc, #16]	; (80008dc <__NVIC_SystemReset+0x24>)
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__NVIC_SystemReset+0x28>)
 80008ce:	4313      	orrs	r3, r2
 80008d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
}
 80008d6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <__NVIC_SystemReset+0x20>
 80008dc:	e000ed00 	.word	0xe000ed00
 80008e0:	05fa0004 	.word	0x05fa0004

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 fed2 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f83c 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 faf0 	bl	8000ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f4:	f000 fad0 	bl	8000e98 <MX_DMA_Init>
  MX_TIM3_Init();
 80008f8:	f000 fa56 	bl	8000da8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80008fc:	f000 f890 	bl	8000a20 <MX_ADC1_Init>
  MX_CAN_Init();
 8000900:	f000 f8cc 	bl	8000a9c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000904:	f000 fa9e 	bl	8000e44 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000908:	f000 fa00 	bl	8000d0c <MX_TIM2_Init>
  MX_TIM1_Init();
 800090c:	f000 f9ae 	bl	8000c6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);		// general 1MHz timer for timing
 8000910:	4810      	ldr	r0, [pc, #64]	; (8000954 <main+0x70>)
 8000912:	f003 fae1 	bl	8003ed8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <main+0x74>)
 8000918:	f003 fb28 	bl	8003f6c <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start(&htim2);		// general timer for PWM use


  InitInputs();
 800091c:	f7ff fec2 	bl	80006a4 <InitInputs>
  InitApplication(&Inputs,&Outputs);
 8000920:	490e      	ldr	r1, [pc, #56]	; (800095c <main+0x78>)
 8000922:	480f      	ldr	r0, [pc, #60]	; (8000960 <main+0x7c>)
 8000924:	f7ff fc12 	bl	800014c <InitApplication>
  InitOutputs();
 8000928:	f000 fb61 	bl	8000fee <InitOutputs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <main+0x80>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0fa      	beq.n	800092c <main+0x48>
		  BCycleTimerFlag = 0;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <main+0x80>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <main+0x7c>)
 800093e:	f7ff fdb9 	bl	80004b4 <ReadInputs>
		  RunApplication(&Inputs,&Outputs);
 8000942:	4906      	ldr	r1, [pc, #24]	; (800095c <main+0x78>)
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <main+0x7c>)
 8000946:	f7ff fc17 	bl	8000178 <RunApplication>
		  WriteOutputs(&Outputs);
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <main+0x78>)
 800094c:	f000 fb56 	bl	8000ffc <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8000950:	e7ec      	b.n	800092c <main+0x48>
 8000952:	bf00      	nop
 8000954:	20000110 	.word	0x20000110
 8000958:	200001a0 	.word	0x200001a0
 800095c:	20000828 	.word	0x20000828
 8000960:	20000810 	.word	0x20000810
 8000964:	2000080c 	.word	0x2000080c

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000972:	2228      	movs	r2, #40	; 0x28
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 ff84 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a6:	2301      	movs	r3, #1
 80009a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	2302      	movs	r3, #2
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fd74 	bl	80034ac <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009ca:	f000 fb07 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 ffe0 	bl	80039b0 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009f6:	f000 faf1 	bl	8000fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009fa:	2302      	movs	r3, #2
 80009fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80009fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 f960 	bl	8003ccc <HAL_RCCEx_PeriphCLKConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a12:	f000 fae3 	bl	8000fdc <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	; 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <MX_ADC1_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a5e:	f000 fe9d 	bl	800179c <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fab8 	bl	8000fdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a74:	2307      	movs	r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC1_Init+0x74>)
 8000a7e:	f001 f855 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 faa8 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000074 	.word	0x20000074
 8000a98:	40012400 	.word	0x40012400

08000a9c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0a8      	sub	sp, #160	; 0xa0
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000aa2:	4b70      	ldr	r3, [pc, #448]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000aa4:	4a70      	ldr	r2, [pc, #448]	; (8000c68 <MX_CAN_Init+0x1cc>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000aa8:	4b6e      	ldr	r3, [pc, #440]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000aaa:	2204      	movs	r2, #4
 8000aac:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000aae:	4b6d      	ldr	r3, [pc, #436]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab4:	4b6b      	ldr	r3, [pc, #428]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000aba:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000abc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000ac0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ac2:	4b68      	ldr	r3, [pc, #416]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000ac4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ac8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000aca:	4b66      	ldr	r3, [pc, #408]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000ad0:	4b64      	ldr	r3, [pc, #400]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ad6:	4b63      	ldr	r3, [pc, #396]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000adc:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ae2:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ae8:	4b5e      	ldr	r3, [pc, #376]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000aee:	485d      	ldr	r0, [pc, #372]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000af0:	f001 fa15 	bl	8001f1e <HAL_CAN_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000afa:	f000 fa6f 	bl	8000fdc <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = STEERING_RX_ID << 5 ;
 8000afe:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000b02:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8000b08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8000b34:	2301      	movs	r3, #1
 8000b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8000b3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4848      	ldr	r0, [pc, #288]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000b42:	f001 fae7 	bl	8002114 <HAL_CAN_ConfigFilter>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8000b4c:	f000 fa46 	bl	8000fdc <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = STEERING_RX_ID << 5 ;
 8000b50:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000b54:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8000b5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b74:	2301      	movs	r3, #1
 8000b76:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8000b7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b80:	4619      	mov	r1, r3
 8000b82:	4838      	ldr	r0, [pc, #224]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000b84:	f001 fac6 	bl	8002114 <HAL_CAN_ConfigFilter>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_CAN_Init+0xf6>
 	  Error_Handler();
 8000b8e:	f000 fa25 	bl	8000fdc <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 8000b92:	f246 2320 	movw	r3, #25120	; 0x6220
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8000b9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8000bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4827      	ldr	r0, [pc, #156]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000bc6:	f001 faa5 	bl	8002114 <HAL_CAN_ConfigFilter>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_CAN_Init+0x138>
 	  Error_Handler();
 8000bd0:	f000 fa04 	bl	8000fdc <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 8000bd4:	f246 2320 	movw	r3, #25120	; 0x6220
 8000bd8:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 8000bde:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000be2:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8000bec:	2303      	movs	r3, #3
 8000bee:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000c06:	f001 fa85 	bl	8002114 <HAL_CAN_ConfigFilter>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_CAN_Init+0x178>
 	  Error_Handler();
 8000c10:	f000 f9e4 	bl	8000fdc <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000c14:	2102      	movs	r1, #2
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000c18:	f001 fd79 	bl	800270e <HAL_CAN_ActivateNotification>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_CAN_Init+0x18a>
	   Error_Handler();
 8000c22:	f000 f9db 	bl	8000fdc <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8000c26:	2110      	movs	r1, #16
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000c2a:	f001 fd70 	bl	800270e <HAL_CAN_ActivateNotification>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8000c34:	f000 f9d2 	bl	8000fdc <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8000c38:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000c3e:	f001 fd66 	bl	800270e <HAL_CAN_ActivateNotification>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8000c48:	f000 f9c8 	bl	8000fdc <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_CAN_Init+0x1c8>)
 8000c4e:	f001 fb2a 	bl	80022a6 <HAL_CAN_Start>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8000c58:	f000 f9c0 	bl	8000fdc <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	37a0      	adds	r7, #160	; 0xa0
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200000e8 	.word	0x200000e8
 8000c68:	40006400 	.word	0x40006400

08000c6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <MX_TIM1_Init+0x9c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000c90:	2247      	movs	r2, #71	; 0x47
 8000c92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000cb6:	f003 f8bf 	bl	8003e38 <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f98c 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000cd2:	f003 faa5 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cdc:	f000 f97e 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM1_Init+0x98>)
 8000cee:	f003 fc7b 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cf8:	f000 f970 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000110 	.word	0x20000110
 8000d08:	40012c00 	.word	0x40012c00

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d32:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d54:	f003 f870 	bl	8003e38 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d5e:	f000 f93d 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d70:	f003 fa56 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d7a:	f000 f92f 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d8c:	f003 fc2c 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d96:	f000 f921 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000158 	.word	0x20000158

08000da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <MX_TIM3_Init+0x98>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000dcc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000dd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000dda:	2263      	movs	r2, #99	; 0x63
 8000ddc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dea:	4814      	ldr	r0, [pc, #80]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000dec:	f003 f824 	bl	8003e38 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000df6:	f000 f8f1 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000e08:	f003 fa0a 	bl	8004220 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f000 f8e3 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_TIM3_Init+0x94>)
 8000e24:	f003 fbe0 	bl	80045e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e2e:	f000 f8d5 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001a0 	.word	0x200001a0
 8000e40:	40000400 	.word	0x40000400

08000e44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <MX_USART1_UART_Init+0x50>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f003 fc24 	bl	80046c8 <HAL_UART_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e86:	f000 f8a9 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001e8 	.word	0x200001e8
 8000e94:	40013800 	.word	0x40013800

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_DMA_Init+0x38>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <MX_DMA_Init+0x38>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_DMA_Init+0x38>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	200b      	movs	r0, #11
 8000ebc:	f001 ff35 	bl	8002d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec0:	200b      	movs	r0, #11
 8000ec2:	f001 ff4e 	bl	8002d62 <HAL_NVIC_EnableIRQ>

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a28      	ldr	r2, [pc, #160]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_GPIO_Init+0xd4>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f36:	481d      	ldr	r0, [pc, #116]	; (8000fac <MX_GPIO_Init+0xd8>)
 8000f38:	f002 faa0 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VCC_Pin|DOWN_PORT_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2141      	movs	r1, #65	; 0x41
 8000f40:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <MX_GPIO_Init+0xdc>)
 8000f42:	f002 fa9b 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UP_PORT_GPIO_Port, UP_PORT_Pin, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <MX_GPIO_Init+0xdc>)
 8000f4c:	f002 fa96 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <MX_GPIO_Init+0xd8>)
 8000f6a:	f002 f903 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_Pin DOWN_PORT_Pin UP_PORT_Pin */
  GPIO_InitStruct.Pin = VCC_Pin|DOWN_PORT_Pin|UP_PORT_Pin;
 8000f6e:	23c1      	movs	r3, #193	; 0xc1
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <MX_GPIO_Init+0xdc>)
 8000f86:	f002 f8f5 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_GPIO_Init+0xdc>)
 8000f9a:	f002 f8eb 	bl	8003174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40010800 	.word	0x40010800

08000fb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d102      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
	}
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	200001a0 	.word	0x200001a0
 8000fd8:	2000080c 	.word	0x2000080c

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8000fe4:	20c8      	movs	r0, #200	; 0xc8
 8000fe6:	f000 fbb5 	bl	8001754 <HAL_Delay>
	  NVIC_SystemReset();
 8000fea:	f7ff fc65 	bl	80008b8 <__NVIC_SystemReset>

08000fee <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	end_of_shift(output);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f919 	bl	800123c <end_of_shift>


	if(output->up_button_out){
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7a1b      	ldrb	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d044      	beq.n	800109c <WriteOutputs+0xa0>
		output->target_gear++;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3301      	adds	r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	b25a      	sxtb	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	705a      	strb	r2, [r3, #1]

		if(output->target_gear!=output->current_gear+1){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f993 3000 	ldrsb.w	r3, [r3]
 8001032:	3301      	adds	r3, #1
 8001034:	429a      	cmp	r2, r3
 8001036:	d008      	beq.n	800104a <WriteOutputs+0x4e>
			output->target_gear--;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3b01      	subs	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b25a      	sxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	705a      	strb	r2, [r3, #1]
		}

		if(output->target_gear > TOTAL_GEARS){
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001050:	2b06      	cmp	r3, #6
 8001052:	dd03      	ble.n	800105c <WriteOutputs+0x60>
			output->target_gear=5;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2205      	movs	r2, #5
 8001058:	705a      	strb	r2, [r3, #1]
 800105a:	e01f      	b.n	800109c <WriteOutputs+0xa0>
		}
		else if(output->target_gear > 1 && output->target_gear <= 5){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001062:	2b01      	cmp	r3, #1
 8001064:	dd08      	ble.n	8001078 <WriteOutputs+0x7c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800106c:	2b05      	cmp	r3, #5
 800106e:	dc03      	bgt.n	8001078 <WriteOutputs+0x7c>
			shiftup_activation(output);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f891 	bl	8001198 <shiftup_activation>
 8001076:	e011      	b.n	800109c <WriteOutputs+0xa0>
		}
		else if(output->target_gear == 1 && output->clutch_detection){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d107      	bne.n	8001092 <WriteOutputs+0x96>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7d1b      	ldrb	r3, [r3, #20]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <WriteOutputs+0x96>
			shiftdown_activation(output);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f8a0 	bl	80011d0 <shiftdown_activation>
 8001090:	e004      	b.n	800109c <WriteOutputs+0xa0>
		}
		else {
			output->target_gear = output-> current_gear;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f993 2000 	ldrsb.w	r2, [r3]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	705a      	strb	r2, [r3, #1]
		}
	}


	if(output->down_button_out){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a5b      	ldrb	r3, [r3, #9]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d03a      	beq.n	800111a <WriteOutputs+0x11e>
		output->target_gear--;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	3b01      	subs	r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	b25a      	sxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	705a      	strb	r2, [r3, #1]

		if(output->target_gear!= output->current_gear-1){
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f993 3000 	ldrsb.w	r3, [r3]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d008      	beq.n	80010dc <WriteOutputs+0xe0>
			output->target_gear++;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	b25a      	sxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	705a      	strb	r2, [r3, #1]
		}

		if(output->target_gear < 0){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da08      	bge.n	80010f8 <WriteOutputs+0xfc>
			output->target_gear=0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	705a      	strb	r2, [r3, #1]
			output->current_gear=output->target_gear;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e010      	b.n	800111a <WriteOutputs+0x11e>
		}
		else if(output->target_gear<1){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dc03      	bgt.n	800110a <WriteOutputs+0x10e>
			neutral_activation(output);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f880 	bl	8001208 <neutral_activation>
 8001108:	e007      	b.n	800111a <WriteOutputs+0x11e>
		}
		else if(output->target_gear>=1){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd02      	ble.n	800111a <WriteOutputs+0x11e>
			shiftdown_activation(output);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f85b 	bl	80011d0 <shiftdown_activation>





		TxData[0]=(output->down_port_state || output->up_port_state);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	78db      	ldrb	r3, [r3, #3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <WriteOutputs+0x12e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	789b      	ldrb	r3, [r3, #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <WriteOutputs+0x132>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <WriteOutputs+0x134>
 800112e:	2300      	movs	r3, #0
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <WriteOutputs+0x15c>)
 8001134:	701a      	strb	r2, [r3, #0]
		TxData[1]=output->current_gear;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f993 3000 	ldrsb.w	r3, [r3]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <WriteOutputs+0x15c>)
 8001140:	705a      	strb	r2, [r3, #1]

		CAN_Tx(STEERING_ID,2,TxData);
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <WriteOutputs+0x15c>)
 8001144:	2102      	movs	r1, #2
 8001146:	f44f 7048 	mov.w	r0, #800	; 0x320
 800114a:	f000 f807 	bl	800115c <CAN_Tx>

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000854 	.word	0x20000854

0800115c <CAN_Tx>:

void CAN_Tx(uint32_t ID, uint8_t dlc, uint8_t* data) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	460b      	mov	r3, r1
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	TxHeader.DLC = dlc;
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.StdId = ID;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24

	// TODO: fix CANTx with round robin
	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	f107 0118 	add.w	r1, r7, #24
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <CAN_Tx+0x38>)
 8001186:	f001 f8d2 	bl	800232e <HAL_CAN_AddTxMessage>

	}

}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	; 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000e8 	.word	0x200000e8

08001198 <shiftup_activation>:


void shiftup_activation(OutputStruct *output){ // Shift up function
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <shiftup_activation+0x30>)
 80011a6:	f002 f969 	bl	800347c <HAL_GPIO_WritePin>

	output->up_port_state = 1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + shifting_interval;
 80011b0:	f000 fac6 	bl	8001740 <HAL_GetTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <shiftup_activation+0x34>)
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010800 	.word	0x40010800
 80011cc:	20000850 	.word	0x20000850

080011d0 <shiftdown_activation>:

void shiftdown_activation(OutputStruct *output){ // Shift down function
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2140      	movs	r1, #64	; 0x40
 80011dc:	4808      	ldr	r0, [pc, #32]	; (8001200 <shiftdown_activation+0x30>)
 80011de:	f002 f94d 	bl	800347c <HAL_GPIO_WritePin>

	output->down_port_state = 1;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	70da      	strb	r2, [r3, #3]

	shift_end_time = HAL_GetTick() + shifting_interval;
 80011e8:	f000 faaa 	bl	8001740 <HAL_GetTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <shiftdown_activation+0x34>)
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010800 	.word	0x40010800
 8001204:	20000850 	.word	0x20000850

08001208 <neutral_activation>:

void neutral_activation(OutputStruct *output){ //Neutral shift function
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <neutral_activation+0x2c>)
 8001216:	f002 f931 	bl	800347c <HAL_GPIO_WritePin>

	output->up_port_state = 1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + neutral_interval;
 8001220:	f000 fa8e 	bl	8001740 <HAL_GetTick>
 8001224:	4603      	mov	r3, r0
 8001226:	330a      	adds	r3, #10
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <neutral_activation+0x30>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010800 	.word	0x40010800
 8001238:	20000850 	.word	0x20000850

0800123c <end_of_shift>:



void end_of_shift(OutputStruct *output) {  //Shift Handling
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

	// Check if a shift is in progress and if the delay has ended
	if ((output->up_port_state || output->down_port_state) && HAL_GetTick() >= shift_end_time) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d103      	bne.n	8001254 <end_of_shift+0x18>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01b      	beq.n	800128c <end_of_shift+0x50>
 8001254:	f000 fa74 	bl	8001740 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <end_of_shift+0x58>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d314      	bcc.n	800128c <end_of_shift+0x50>

		// Reset the port action and update the current gear

		HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <end_of_shift+0x5c>)
 8001268:	f002 f908 	bl	800347c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <end_of_shift+0x5c>)
 8001272:	f002 f903 	bl	800347c <HAL_GPIO_WritePin>

		output-> current_gear = output->target_gear;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	701a      	strb	r2, [r3, #0]
		output->up_port_state = 0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	709a      	strb	r2, [r3, #2]
		output->down_port_state=0;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	70da      	strb	r2, [r3, #3]
	}
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000850 	.word	0x20000850
 8001298:	40010800 	.word	0x40010800

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_MspInit+0x5c>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <HAL_MspInit+0x5c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_MspInit+0x5c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x5c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x5c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x5c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_MspInit+0x60>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_MspInit+0x60>)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000

08001300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a29      	ldr	r2, [pc, #164]	; (80013c0 <HAL_ADC_MspInit+0xc0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d14a      	bne.n	80013b6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_ADC_MspInit+0xc4>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_ADC_MspInit+0xc4>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_ADC_MspInit+0xc4>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_ADC_MspInit+0xc4>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <HAL_ADC_MspInit+0xc4>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <HAL_ADC_MspInit+0xc4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001350:	2302      	movs	r3, #2
 8001352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001354:	2303      	movs	r3, #3
 8001356:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	481a      	ldr	r0, [pc, #104]	; (80013c8 <HAL_ADC_MspInit+0xc8>)
 8001360:	f001 ff08 	bl	8003174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_ADC_MspInit+0xd0>)
 8001368:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 800137e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001382:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 8001386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 800138e:	2220      	movs	r2, #32
 8001390:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 8001394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001398:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 800139c:	f001 fcfc 	bl	8002d98 <HAL_DMA_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80013a6:	f7ff fe19 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 80013ae:	621a      	str	r2, [r3, #32]
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_ADC_MspInit+0xcc>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40012400 	.word	0x40012400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800
 80013cc:	200000a4 	.word	0x200000a4
 80013d0:	40020008 	.word	0x40020008

080013d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a20      	ldr	r2, [pc, #128]	; (8001470 <HAL_CAN_MspInit+0x9c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d139      	bne.n	8001468 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_CAN_MspInit+0xa0>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_CAN_MspInit+0xa0>)
 80013fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <HAL_CAN_MspInit+0xa0>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_CAN_MspInit+0xa0>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_CAN_MspInit+0xa0>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_CAN_MspInit+0xa0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	480f      	ldr	r0, [pc, #60]	; (8001478 <HAL_CAN_MspInit+0xa4>)
 800143a:	f001 fe9b 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_CAN_MspInit+0xa4>)
 8001454:	f001 fe8e 	bl	8003174 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2014      	movs	r0, #20
 800145e:	f001 fc64 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001462:	2014      	movs	r0, #20
 8001464:	f001 fc7d 	bl	8002d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40006400 	.word	0x40006400
 8001474:	40021000 	.word	0x40021000
 8001478:	40010800 	.word	0x40010800

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <HAL_TIM_Base_MspInit+0x8c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10c      	bne.n	80014a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 8001494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014a6:	e02a      	b.n	80014fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b0:	d10c      	bne.n	80014cc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	61d3      	str	r3, [r2, #28]
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
}
 80014ca:	e018      	b.n	80014fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_TIM_Base_MspInit+0x94>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d113      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_TIM_Base_MspInit+0x90>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	201d      	movs	r0, #29
 80014f4:	f001 fc19 	bl	8002d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014f8:	201d      	movs	r0, #29
 80014fa:	f001 fc32 	bl	8002d62 <HAL_NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40012c00 	.word	0x40012c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40000400 	.word	0x40000400

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <HAL_UART_MspInit+0x8c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d131      	bne.n	8001598 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_UART_MspInit+0x90>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <HAL_UART_MspInit+0x90>)
 800153a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0x90>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x90>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_UART_MspInit+0x90>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_MspInit+0x90>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <HAL_UART_MspInit+0x94>)
 800157a:	f001 fdfb 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_UART_MspInit+0x94>)
 8001594:	f001 fdee 	bl	8003174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010800 	.word	0x40010800

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 f893 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA1_Channel1_IRQHandler+0x10>)
 8001602:	f001 fc83 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200000a4 	.word	0x200000a4

08001610 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001616:	f001 f89f 	bl	8002758 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000e8 	.word	0x200000e8

08001624 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM3_IRQHandler+0x10>)
 800162a:	f002 fcf1 	bl	8004010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200001a0 	.word	0x200001a0

08001638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001644:	f7ff fff8 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800164a:	490c      	ldr	r1, [pc, #48]	; (800167c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001660:	4c09      	ldr	r4, [pc, #36]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f003 f911 	bl	8004894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001672:	f7ff f937 	bl	80008e4 <main>
  bx lr
 8001676:	4770      	bx	lr
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001680:	08004928 	.word	0x08004928
  ldr r2, =_sbss
 8001684:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001688:	20000860 	.word	0x20000860

0800168c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC1_2_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_Init+0x28>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_Init+0x28>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f001 fb37 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a6:	200f      	movs	r0, #15
 80016a8:	f000 f808 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ac:	f7ff fdf6 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fb4f 	bl	8002d7e <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f001 fb17 	bl	8002d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000018 	.word	0x20000018
 8001714:	20000020 	.word	0x20000020
 8001718:	2000001c 	.word	0x2000001c

0800171c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_IncTick+0x1c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_IncTick+0x20>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_IncTick+0x20>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000020 	.word	0x20000020
 800173c:	2000085c 	.word	0x2000085c

08001740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b02      	ldr	r3, [pc, #8]	; (8001750 <HAL_GetTick+0x10>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	2000085c 	.word	0x2000085c

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff fff0 	bl	8001740 <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffe0 	bl	8001740 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000020 	.word	0x20000020

0800179c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0be      	b.n	800193c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fd90 	bl	8001300 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 faf5 	bl	8001dd0 <ADC_ConversionStop_Disable>
 80017e6:	4603      	mov	r3, r0
 80017e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8099 	bne.w	800192a <HAL_ADC_Init+0x18e>
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 8095 	bne.w	800192a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001808:	f023 0302 	bic.w	r3, r3, #2
 800180c:	f043 0202 	orr.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800181c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7b1b      	ldrb	r3, [r3, #12]
 8001822:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001824:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	4313      	orrs	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001834:	d003      	beq.n	800183e <HAL_ADC_Init+0xa2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_ADC_Init+0xa8>
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	e000      	b.n	8001846 <HAL_ADC_Init+0xaa>
 8001844:	2300      	movs	r3, #0
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7d1b      	ldrb	r3, [r3, #20]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d119      	bne.n	8001888 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7b1b      	ldrb	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	3b01      	subs	r3, #1
 8001862:	035a      	lsls	r2, r3, #13
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	e00b      	b.n	8001888 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_ADC_Init+0x1a8>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b8:	d003      	beq.n	80018c2 <HAL_ADC_Init+0x126>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d104      	bne.n	80018cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	051b      	lsls	r3, r3, #20
 80018ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	430a      	orrs	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_ADC_Init+0x1ac>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d10b      	bne.n	8001908 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001906:	e018      	b.n	800193a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f023 0312 	bic.w	r3, r3, #18
 8001910:	f043 0210 	orr.w	r2, r3, #16
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f043 0201 	orr.w	r2, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001928:	e007      	b.n	800193a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f043 0210 	orr.w	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800193a:	7dfb      	ldrb	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	ffe1f7fd 	.word	0xffe1f7fd
 8001948:	ff1f0efe 	.word	0xff1f0efe

0800194c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a64      	ldr	r2, [pc, #400]	; (8001af4 <HAL_ADC_Start_DMA+0x1a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d004      	beq.n	8001970 <HAL_ADC_Start_DMA+0x24>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a63      	ldr	r2, [pc, #396]	; (8001af8 <HAL_ADC_Start_DMA+0x1ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d106      	bne.n	800197e <HAL_ADC_Start_DMA+0x32>
 8001970:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <HAL_ADC_Start_DMA+0x1a8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 80b3 	bne.w	8001ae4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_ADC_Start_DMA+0x40>
 8001988:	2302      	movs	r3, #2
 800198a:	e0ae      	b.n	8001aea <HAL_ADC_Start_DMA+0x19e>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f9c1 	bl	8001d1c <ADC_Enable>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 809a 	bne.w	8001ada <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a4e      	ldr	r2, [pc, #312]	; (8001af8 <HAL_ADC_Start_DMA+0x1ac>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_Start_DMA+0x84>
 80019c4:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_ADC_Start_DMA+0x1a8>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d115      	bne.n	80019fc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d026      	beq.n	8001a38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019fa:	e01d      	b.n	8001a38 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <HAL_ADC_Start_DMA+0x1a8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d004      	beq.n	8001a1c <HAL_ADC_Start_DMA+0xd0>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a38      	ldr	r2, [pc, #224]	; (8001af8 <HAL_ADC_Start_DMA+0x1ac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d10d      	bne.n	8001a38 <HAL_ADC_Start_DMA+0xec>
 8001a1c:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_ADC_Start_DMA+0x1a8>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f023 0206 	bic.w	r2, r3, #6
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_ADC_Start_DMA+0x1b0>)
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4a24      	ldr	r2, [pc, #144]	; (8001b00 <HAL_ADC_Start_DMA+0x1b4>)
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <HAL_ADC_Start_DMA+0x1b8>)
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0202 	mvn.w	r2, #2
 8001a80:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a90:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a18      	ldr	r0, [r3, #32]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	334c      	adds	r3, #76	; 0x4c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f001 f9d3 	bl	8002e4c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ab0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ac4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ac6:	e00f      	b.n	8001ae8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ad6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ad8:	e006      	b.n	8001ae8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ae2:	e001      	b.n	8001ae8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40012400 	.word	0x40012400
 8001af8:	40012800 	.word	0x40012800
 8001afc:	08001e53 	.word	0x08001e53
 8001b00:	08001ecf 	.word	0x08001ecf
 8001b04:	08001eeb 	.word	0x08001eeb

08001b08 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x20>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e0dc      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x1da>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d81c      	bhi.n	8001b96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b05      	subs	r3, #5
 8001b6e:	221f      	movs	r2, #31
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	3b05      	subs	r3, #5
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
 8001b94:	e03c      	b.n	8001c10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d81c      	bhi.n	8001bd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b23      	subs	r3, #35	; 0x23
 8001bb0:	221f      	movs	r2, #31
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	4019      	ands	r1, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b23      	subs	r3, #35	; 0x23
 8001bca:	fa00 f203 	lsl.w	r2, r0, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd6:	e01b      	b.n	8001c10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b41      	subs	r3, #65	; 0x41
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4019      	ands	r1, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3b41      	subs	r3, #65	; 0x41
 8001c04:	fa00 f203 	lsl.w	r2, r0, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d91c      	bls.n	8001c52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68d9      	ldr	r1, [r3, #12]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	3b1e      	subs	r3, #30
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4019      	ands	r1, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6898      	ldr	r0, [r3, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	3b1e      	subs	r3, #30
 8001c44:	fa00 f203 	lsl.w	r2, r0, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	e019      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6919      	ldr	r1, [r3, #16]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	2207      	movs	r2, #7
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6898      	ldr	r0, [r3, #8]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d003      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c92:	2b11      	cmp	r3, #17
 8001c94:	d132      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d125      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d126      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d11a      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9a      	lsrs	r2, r3, #18
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x1b2>
 8001cea:	e007      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40012400 	.word	0x40012400
 8001d14:	20000018 	.word	0x20000018
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d040      	beq.n	8001dbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <ADC_Enable+0xac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <ADC_Enable+0xb0>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d58:	e002      	b.n	8001d60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d66:	f7ff fceb 	bl	8001740 <HAL_GetTick>
 8001d6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d6c:	e01f      	b.n	8001dae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d6e:	f7ff fce7 	bl	8001740 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d918      	bls.n	8001dae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d011      	beq.n	8001dae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d1d8      	bne.n	8001d6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000018 	.word	0x20000018
 8001dcc:	431bde83 	.word	0x431bde83

08001dd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12e      	bne.n	8001e48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfa:	f7ff fca1 	bl	8001740 <HAL_GetTick>
 8001dfe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e00:	e01b      	b.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e02:	f7ff fc9d 	bl	8001740 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d914      	bls.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10d      	bne.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e007      	b.n	8001e4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d0dc      	beq.n	8001e02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d127      	bne.n	8001ebc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e86:	d115      	bne.n	8001eb4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d111      	bne.n	8001eb4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fe27 	bl	8001b08 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001eba:	e004      	b.n	8001ec6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7fe fcd1 	bl	8000884 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	f043 0204 	orr.w	r2, r3, #4
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fe02 	bl	8001b1a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0ed      	b.n	800210c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fa49 	bl	80013d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f52:	f7ff fbf5 	bl	8001740 <HAL_GetTick>
 8001f56:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f58:	e012      	b.n	8001f80 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f5a:	f7ff fbf1 	bl	8001740 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b0a      	cmp	r3, #10
 8001f66:	d90b      	bls.n	8001f80 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2205      	movs	r2, #5
 8001f78:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0c5      	b.n	800210c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0e5      	beq.n	8001f5a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0202 	bic.w	r2, r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f9e:	f7ff fbcf 	bl	8001740 <HAL_GetTick>
 8001fa2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fa4:	e012      	b.n	8001fcc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fa6:	f7ff fbcb 	bl	8001740 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b0a      	cmp	r3, #10
 8001fb2:	d90b      	bls.n	8001fcc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e09f      	b.n	800210c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e5      	bne.n	8001fa6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7e1b      	ldrb	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7e5b      	ldrb	r3, [r3, #25]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7e9b      	ldrb	r3, [r3, #26]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0220 	orr.w	r2, r2, #32
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0220 	bic.w	r2, r2, #32
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7edb      	ldrb	r3, [r3, #27]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d108      	bne.n	8002072 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0210 	bic.w	r2, r2, #16
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e007      	b.n	8002082 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0210 	orr.w	r2, r2, #16
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7f1b      	ldrb	r3, [r3, #28]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0208 	orr.w	r2, r2, #8
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e007      	b.n	80020ac <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0208 	bic.w	r2, r2, #8
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7f5b      	ldrb	r3, [r3, #29]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d108      	bne.n	80020c6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0204 	orr.w	r2, r2, #4
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e007      	b.n	80020d6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0204 	bic.w	r2, r2, #4
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	ea42 0103 	orr.w	r1, r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	1e5a      	subs	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d003      	beq.n	800213a <HAL_CAN_ConfigFilter+0x26>
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b02      	cmp	r3, #2
 8002136:	f040 80aa 	bne.w	800228e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2201      	movs	r2, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	401a      	ands	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d123      	bne.n	80021bc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002196:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3248      	adds	r2, #72	; 0x48
 800219c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021b2:	6979      	ldr	r1, [r7, #20]
 80021b4:	3348      	adds	r3, #72	; 0x48
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d122      	bne.n	800220a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3248      	adds	r2, #72	; 0x48
 80021ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002200:	6979      	ldr	r1, [r7, #20]
 8002202:	3348      	adds	r3, #72	; 0x48
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43db      	mvns	r3, r3
 800221c:	401a      	ands	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002224:	e007      	b.n	8002236 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	431a      	orrs	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	401a      	ands	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002250:	e007      	b.n	8002262 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	431a      	orrs	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	431a      	orrs	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002280:	f023 0201 	bic.w	r2, r3, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e006      	b.n	800229c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
  }
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d12e      	bne.n	8002318 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022d2:	f7ff fa35 	bl	8001740 <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022d8:	e012      	b.n	8002300 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022da:	f7ff fa31 	bl	8001740 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b0a      	cmp	r3, #10
 80022e6:	d90b      	bls.n	8002300 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2205      	movs	r2, #5
 80022f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e012      	b.n	8002326 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1e5      	bne.n	80022da <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e006      	b.n	8002326 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800232e:	b480      	push	{r7}
 8002330:	b089      	sub	sp, #36	; 0x24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002342:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <HAL_CAN_AddTxMessage+0x2c>
 8002352:	7ffb      	ldrb	r3, [r7, #31]
 8002354:	2b02      	cmp	r3, #2
 8002356:	f040 80ad 	bne.w	80024b4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8095 	beq.w	80024a4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	0e1b      	lsrs	r3, r3, #24
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002384:	2201      	movs	r2, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	409a      	lsls	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023a0:	68f9      	ldr	r1, [r7, #12]
 80023a2:	6809      	ldr	r1, [r1, #0]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3318      	adds	r3, #24
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	440b      	add	r3, r1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e00f      	b.n	80023d2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3318      	adds	r3, #24
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	440b      	add	r3, r1
 80023d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6819      	ldr	r1, [r3, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3318      	adds	r3, #24
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	440b      	add	r3, r1
 80023e2:	3304      	adds	r3, #4
 80023e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	7d1b      	ldrb	r3, [r3, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d111      	bne.n	8002412 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3318      	adds	r3, #24
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	6811      	ldr	r1, [r2, #0]
 8002402:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3318      	adds	r3, #24
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	440b      	add	r3, r1
 800240e:	3304      	adds	r3, #4
 8002410:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3307      	adds	r3, #7
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	061a      	lsls	r2, r3, #24
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3306      	adds	r3, #6
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3305      	adds	r3, #5
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	4313      	orrs	r3, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	3204      	adds	r2, #4
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	4610      	mov	r0, r2
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	6811      	ldr	r1, [r2, #0]
 800243a:	ea43 0200 	orr.w	r2, r3, r0
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	440b      	add	r3, r1
 8002444:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002448:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3303      	adds	r3, #3
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	061a      	lsls	r2, r3, #24
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3302      	adds	r3, #2
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3301      	adds	r3, #1
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	4313      	orrs	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	4610      	mov	r0, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	ea43 0200 	orr.w	r2, r3, r0
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	440b      	add	r3, r1
 800247a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800247e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3318      	adds	r3, #24
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4413      	add	r3, r2
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	6811      	ldr	r1, [r2, #0]
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3318      	adds	r3, #24
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	440b      	add	r3, r1
 800249e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e00e      	b.n	80024c2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e006      	b.n	80024c2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d003      	beq.n	80024f0 <HAL_CAN_GetRxMessage+0x24>
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f040 8103 	bne.w	80026f6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10e      	bne.n	8002514 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0f7      	b.n	8002704 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e8      	b.n	8002704 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	331b      	adds	r3, #27
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	4413      	add	r3, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0204 	and.w	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10c      	bne.n	800256a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	331b      	adds	r3, #27
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	0d5b      	lsrs	r3, r3, #21
 8002560:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e00b      	b.n	8002582 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	331b      	adds	r3, #27
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	4413      	add	r3, r2
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	331b      	adds	r3, #27
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0202 	and.w	r2, r3, #2
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	331b      	adds	r3, #27
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2208      	movs	r2, #8
 80025b4:	611a      	str	r2, [r3, #16]
 80025b6:	e00b      	b.n	80025d0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	331b      	adds	r3, #27
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 020f 	and.w	r2, r3, #15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	331b      	adds	r3, #27
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	331b      	adds	r3, #27
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	4413      	add	r3, r2
 800260a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0a1a      	lsrs	r2, r3, #8
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	4413      	add	r3, r2
 800263a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0c1a      	lsrs	r2, r3, #16
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3302      	adds	r3, #2
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e1a      	lsrs	r2, r3, #24
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	3303      	adds	r3, #3
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	3304      	adds	r3, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4413      	add	r3, r2
 8002686:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	0a1a      	lsrs	r2, r3, #8
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3305      	adds	r3, #5
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0c1a      	lsrs	r2, r3, #16
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	3306      	adds	r3, #6
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e1a      	lsrs	r2, r3, #24
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	3307      	adds	r3, #7
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d108      	bne.n	80026e2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0220 	orr.w	r2, r2, #32
 80026de:	60da      	str	r2, [r3, #12]
 80026e0:	e007      	b.n	80026f2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0220 	orr.w	r2, r2, #32
 80026f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e006      	b.n	8002704 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d002      	beq.n	800272c <HAL_CAN_ActivateNotification+0x1e>
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d109      	bne.n	8002740 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6959      	ldr	r1, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e006      	b.n	800274e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	; 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d07c      	beq.n	8002898 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d023      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f983 	bl	8002ac6 <HAL_CAN_TxMailbox0CompleteCallback>
 80027c0:	e016      	b.n	80027f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
 80027d4:	e00c      	b.n	80027f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
 80027e8:	e002      	b.n	80027f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f986 	bl	8002afc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002802:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f962 	bl	8002ad8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002814:	e016      	b.n	8002844 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d004      	beq.n	800282a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
 8002828:	e00c      	b.n	8002844 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	e002      	b.n	8002844 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f965 	bl	8002b0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d024      	beq.n	8002898 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002856:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f941 	bl	8002aea <HAL_CAN_TxMailbox2CompleteCallback>
 8002868:	e016      	b.n	8002898 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
 800287c:	e00c      	b.n	8002898 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
 8002890:	e002      	b.n	8002898 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f944 	bl	8002b20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2210      	movs	r2, #16
 80028ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2208      	movs	r2, #8
 80028d6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f92a 	bl	8002b32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fd ff9a 	bl	8000830 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002916:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2210      	movs	r2, #16
 800291e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2208      	movs	r2, #8
 800293a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f901 	bl	8002b44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd ff74 	bl	8000848 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2210      	movs	r2, #16
 800297a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8ea 	bl	8002b56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2208      	movs	r2, #8
 800299c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8e2 	bl	8002b68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d07b      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d072      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d043      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d03e      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a26:	2b60      	cmp	r3, #96	; 0x60
 8002a28:	d02b      	beq.n	8002a82 <HAL_CAN_IRQHandler+0x32a>
 8002a2a:	2b60      	cmp	r3, #96	; 0x60
 8002a2c:	d82e      	bhi.n	8002a8c <HAL_CAN_IRQHandler+0x334>
 8002a2e:	2b50      	cmp	r3, #80	; 0x50
 8002a30:	d022      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x320>
 8002a32:	2b50      	cmp	r3, #80	; 0x50
 8002a34:	d82a      	bhi.n	8002a8c <HAL_CAN_IRQHandler+0x334>
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d019      	beq.n	8002a6e <HAL_CAN_IRQHandler+0x316>
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d826      	bhi.n	8002a8c <HAL_CAN_IRQHandler+0x334>
 8002a3e:	2b30      	cmp	r3, #48	; 0x30
 8002a40:	d010      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x30c>
 8002a42:	2b30      	cmp	r3, #48	; 0x30
 8002a44:	d822      	bhi.n	8002a8c <HAL_CAN_IRQHandler+0x334>
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d002      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x2f8>
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d005      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a4e:	e01d      	b.n	8002a8c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	f043 0308 	orr.w	r3, r3, #8
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a58:	e019      	b.n	8002a8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	f043 0310 	orr.w	r3, r3, #16
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a62:	e014      	b.n	8002a8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a6c:	e00f      	b.n	8002a8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a76:	e00a      	b.n	8002a8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a80:	e005      	b.n	8002a8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a8a:	e000      	b.n	8002a8e <HAL_CAN_IRQHandler+0x336>
            break;
 8002a8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7fd fed1 	bl	8000860 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <__NVIC_SetPriorityGrouping>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <__NVIC_EnableIRQ+0x34>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	; (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff90 	bl	8002c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff2d 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff42 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff90 	bl	8002c6c <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5f 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff35 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffa2 	bl	8002cd0 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e043      	b.n	8002e36 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_DMA_Init+0xa8>)
 8002db6:	4413      	add	r3, r2
 8002db8:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_DMA_Init+0xac>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	009a      	lsls	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_DMA_Init+0xb0>)
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002de2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002de6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	bffdfff8 	.word	0xbffdfff8
 8002e44:	cccccccd 	.word	0xcccccccd
 8002e48:	40020000 	.word	0x40020000

08002e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Start_IT+0x20>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e04b      	b.n	8002f04 <HAL_DMA_Start_IT+0xb8>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d13a      	bne.n	8002ef6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f937 	bl	8003118 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 020e 	orr.w	r2, r2, #14
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e00f      	b.n	8002ee4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 020a 	orr.w	r2, r2, #10
 8002ee2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e005      	b.n	8002f02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	2204      	movs	r2, #4
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d04f      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0xc8>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d04a      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0204 	bic.w	r2, r2, #4
 8002f5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a66      	ldr	r2, [pc, #408]	; (80030fc <HAL_DMA_IRQHandler+0x1f0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d029      	beq.n	8002fba <HAL_DMA_IRQHandler+0xae>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_DMA_IRQHandler+0x1f4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xaa>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a63      	ldr	r2, [pc, #396]	; (8003104 <HAL_DMA_IRQHandler+0x1f8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01a      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0xa4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a62      	ldr	r2, [pc, #392]	; (8003108 <HAL_DMA_IRQHandler+0x1fc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d012      	beq.n	8002faa <HAL_DMA_IRQHandler+0x9e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a60      	ldr	r2, [pc, #384]	; (800310c <HAL_DMA_IRQHandler+0x200>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x98>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5f      	ldr	r2, [pc, #380]	; (8003110 <HAL_DMA_IRQHandler+0x204>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x92>
 8002f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f9c:	e00e      	b.n	8002fbc <HAL_DMA_IRQHandler+0xb0>
 8002f9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fa2:	e00b      	b.n	8002fbc <HAL_DMA_IRQHandler+0xb0>
 8002fa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fa8:	e008      	b.n	8002fbc <HAL_DMA_IRQHandler+0xb0>
 8002faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fae:	e005      	b.n	8002fbc <HAL_DMA_IRQHandler+0xb0>
 8002fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb4:	e002      	b.n	8002fbc <HAL_DMA_IRQHandler+0xb0>
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	e000      	b.n	8002fbc <HAL_DMA_IRQHandler+0xb0>
 8002fba:	2304      	movs	r3, #4
 8002fbc:	4a55      	ldr	r2, [pc, #340]	; (8003114 <HAL_DMA_IRQHandler+0x208>)
 8002fbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8094 	beq.w	80030f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fd2:	e08e      	b.n	80030f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2202      	movs	r2, #2
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d056      	beq.n	8003092 <HAL_DMA_IRQHandler+0x186>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d051      	beq.n	8003092 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 020a 	bic.w	r2, r2, #10
 800300a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a38      	ldr	r2, [pc, #224]	; (80030fc <HAL_DMA_IRQHandler+0x1f0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d029      	beq.n	8003072 <HAL_DMA_IRQHandler+0x166>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a37      	ldr	r2, [pc, #220]	; (8003100 <HAL_DMA_IRQHandler+0x1f4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d022      	beq.n	800306e <HAL_DMA_IRQHandler+0x162>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a35      	ldr	r2, [pc, #212]	; (8003104 <HAL_DMA_IRQHandler+0x1f8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x15c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a34      	ldr	r2, [pc, #208]	; (8003108 <HAL_DMA_IRQHandler+0x1fc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d012      	beq.n	8003062 <HAL_DMA_IRQHandler+0x156>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a32      	ldr	r2, [pc, #200]	; (800310c <HAL_DMA_IRQHandler+0x200>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00a      	beq.n	800305c <HAL_DMA_IRQHandler+0x150>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a31      	ldr	r2, [pc, #196]	; (8003110 <HAL_DMA_IRQHandler+0x204>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d102      	bne.n	8003056 <HAL_DMA_IRQHandler+0x14a>
 8003050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003054:	e00e      	b.n	8003074 <HAL_DMA_IRQHandler+0x168>
 8003056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800305a:	e00b      	b.n	8003074 <HAL_DMA_IRQHandler+0x168>
 800305c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003060:	e008      	b.n	8003074 <HAL_DMA_IRQHandler+0x168>
 8003062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003066:	e005      	b.n	8003074 <HAL_DMA_IRQHandler+0x168>
 8003068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800306c:	e002      	b.n	8003074 <HAL_DMA_IRQHandler+0x168>
 800306e:	2320      	movs	r3, #32
 8003070:	e000      	b.n	8003074 <HAL_DMA_IRQHandler+0x168>
 8003072:	2302      	movs	r3, #2
 8003074:	4a27      	ldr	r2, [pc, #156]	; (8003114 <HAL_DMA_IRQHandler+0x208>)
 8003076:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	d034      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003090:	e02f      	b.n	80030f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2208      	movs	r2, #8
 8003098:	409a      	lsls	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d028      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x1e8>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d023      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 020e 	bic.w	r2, r2, #14
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	2101      	movs	r1, #1
 80030c6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
    }
  }
  return;
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
}
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40020008 	.word	0x40020008
 8003100:	4002001c 	.word	0x4002001c
 8003104:	40020030 	.word	0x40020030
 8003108:	40020044 	.word	0x40020044
 800310c:	40020058 	.word	0x40020058
 8003110:	4002006c 	.word	0x4002006c
 8003114:	40020000 	.word	0x40020000

08003118 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b10      	cmp	r3, #16
 8003144:	d108      	bne.n	8003158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003156:	e007      	b.n	8003168 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
	...

08003174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003174:	b480      	push	{r7}
 8003176:	b08b      	sub	sp, #44	; 0x2c
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003186:	e169      	b.n	800345c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003188:	2201      	movs	r2, #1
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	f040 8158 	bne.w	8003456 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a9a      	ldr	r2, [pc, #616]	; (8003414 <HAL_GPIO_Init+0x2a0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d05e      	beq.n	800326e <HAL_GPIO_Init+0xfa>
 80031b0:	4a98      	ldr	r2, [pc, #608]	; (8003414 <HAL_GPIO_Init+0x2a0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d875      	bhi.n	80032a2 <HAL_GPIO_Init+0x12e>
 80031b6:	4a98      	ldr	r2, [pc, #608]	; (8003418 <HAL_GPIO_Init+0x2a4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d058      	beq.n	800326e <HAL_GPIO_Init+0xfa>
 80031bc:	4a96      	ldr	r2, [pc, #600]	; (8003418 <HAL_GPIO_Init+0x2a4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d86f      	bhi.n	80032a2 <HAL_GPIO_Init+0x12e>
 80031c2:	4a96      	ldr	r2, [pc, #600]	; (800341c <HAL_GPIO_Init+0x2a8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d052      	beq.n	800326e <HAL_GPIO_Init+0xfa>
 80031c8:	4a94      	ldr	r2, [pc, #592]	; (800341c <HAL_GPIO_Init+0x2a8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d869      	bhi.n	80032a2 <HAL_GPIO_Init+0x12e>
 80031ce:	4a94      	ldr	r2, [pc, #592]	; (8003420 <HAL_GPIO_Init+0x2ac>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04c      	beq.n	800326e <HAL_GPIO_Init+0xfa>
 80031d4:	4a92      	ldr	r2, [pc, #584]	; (8003420 <HAL_GPIO_Init+0x2ac>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d863      	bhi.n	80032a2 <HAL_GPIO_Init+0x12e>
 80031da:	4a92      	ldr	r2, [pc, #584]	; (8003424 <HAL_GPIO_Init+0x2b0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d046      	beq.n	800326e <HAL_GPIO_Init+0xfa>
 80031e0:	4a90      	ldr	r2, [pc, #576]	; (8003424 <HAL_GPIO_Init+0x2b0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d85d      	bhi.n	80032a2 <HAL_GPIO_Init+0x12e>
 80031e6:	2b12      	cmp	r3, #18
 80031e8:	d82a      	bhi.n	8003240 <HAL_GPIO_Init+0xcc>
 80031ea:	2b12      	cmp	r3, #18
 80031ec:	d859      	bhi.n	80032a2 <HAL_GPIO_Init+0x12e>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_GPIO_Init+0x80>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	0800326f 	.word	0x0800326f
 80031f8:	08003249 	.word	0x08003249
 80031fc:	0800325b 	.word	0x0800325b
 8003200:	0800329d 	.word	0x0800329d
 8003204:	080032a3 	.word	0x080032a3
 8003208:	080032a3 	.word	0x080032a3
 800320c:	080032a3 	.word	0x080032a3
 8003210:	080032a3 	.word	0x080032a3
 8003214:	080032a3 	.word	0x080032a3
 8003218:	080032a3 	.word	0x080032a3
 800321c:	080032a3 	.word	0x080032a3
 8003220:	080032a3 	.word	0x080032a3
 8003224:	080032a3 	.word	0x080032a3
 8003228:	080032a3 	.word	0x080032a3
 800322c:	080032a3 	.word	0x080032a3
 8003230:	080032a3 	.word	0x080032a3
 8003234:	080032a3 	.word	0x080032a3
 8003238:	08003251 	.word	0x08003251
 800323c:	08003265 	.word	0x08003265
 8003240:	4a79      	ldr	r2, [pc, #484]	; (8003428 <HAL_GPIO_Init+0x2b4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003246:	e02c      	b.n	80032a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	623b      	str	r3, [r7, #32]
          break;
 800324e:	e029      	b.n	80032a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	3304      	adds	r3, #4
 8003256:	623b      	str	r3, [r7, #32]
          break;
 8003258:	e024      	b.n	80032a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	3308      	adds	r3, #8
 8003260:	623b      	str	r3, [r7, #32]
          break;
 8003262:	e01f      	b.n	80032a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	330c      	adds	r3, #12
 800326a:	623b      	str	r3, [r7, #32]
          break;
 800326c:	e01a      	b.n	80032a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003276:	2304      	movs	r3, #4
 8003278:	623b      	str	r3, [r7, #32]
          break;
 800327a:	e013      	b.n	80032a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d105      	bne.n	8003290 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003284:	2308      	movs	r3, #8
 8003286:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	611a      	str	r2, [r3, #16]
          break;
 800328e:	e009      	b.n	80032a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003290:	2308      	movs	r3, #8
 8003292:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	615a      	str	r2, [r3, #20]
          break;
 800329a:	e003      	b.n	80032a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
          break;
 80032a0:	e000      	b.n	80032a4 <HAL_GPIO_Init+0x130>
          break;
 80032a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2bff      	cmp	r3, #255	; 0xff
 80032a8:	d801      	bhi.n	80032ae <HAL_GPIO_Init+0x13a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	e001      	b.n	80032b2 <HAL_GPIO_Init+0x13e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2bff      	cmp	r3, #255	; 0xff
 80032b8:	d802      	bhi.n	80032c0 <HAL_GPIO_Init+0x14c>
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	e002      	b.n	80032c6 <HAL_GPIO_Init+0x152>
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	3b08      	subs	r3, #8
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	210f      	movs	r1, #15
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	401a      	ands	r2, r3
 80032d8:	6a39      	ldr	r1, [r7, #32]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	431a      	orrs	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80b1 	beq.w	8003456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032f4:	4b4d      	ldr	r3, [pc, #308]	; (800342c <HAL_GPIO_Init+0x2b8>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x2b8>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6193      	str	r3, [r2, #24]
 8003300:	4b4a      	ldr	r3, [pc, #296]	; (800342c <HAL_GPIO_Init+0x2b8>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800330c:	4a48      	ldr	r2, [pc, #288]	; (8003430 <HAL_GPIO_Init+0x2bc>)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	220f      	movs	r2, #15
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a40      	ldr	r2, [pc, #256]	; (8003434 <HAL_GPIO_Init+0x2c0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_GPIO_Init+0x1ec>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <HAL_GPIO_Init+0x2c4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00d      	beq.n	800335c <HAL_GPIO_Init+0x1e8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3e      	ldr	r2, [pc, #248]	; (800343c <HAL_GPIO_Init+0x2c8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <HAL_GPIO_Init+0x1e4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a3d      	ldr	r2, [pc, #244]	; (8003440 <HAL_GPIO_Init+0x2cc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d101      	bne.n	8003354 <HAL_GPIO_Init+0x1e0>
 8003350:	2303      	movs	r3, #3
 8003352:	e006      	b.n	8003362 <HAL_GPIO_Init+0x1ee>
 8003354:	2304      	movs	r3, #4
 8003356:	e004      	b.n	8003362 <HAL_GPIO_Init+0x1ee>
 8003358:	2302      	movs	r3, #2
 800335a:	e002      	b.n	8003362 <HAL_GPIO_Init+0x1ee>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_GPIO_Init+0x1ee>
 8003360:	2300      	movs	r3, #0
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	f002 0203 	and.w	r2, r2, #3
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	4093      	lsls	r3, r2
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003372:	492f      	ldr	r1, [pc, #188]	; (8003430 <HAL_GPIO_Init+0x2bc>)
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	492c      	ldr	r1, [pc, #176]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800339a:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4928      	ldr	r1, [pc, #160]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033b4:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	4922      	ldr	r1, [pc, #136]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	491e      	ldr	r1, [pc, #120]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4918      	ldr	r1, [pc, #96]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
 80033e8:	e006      	b.n	80033f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	4914      	ldr	r1, [pc, #80]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d021      	beq.n	8003448 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_GPIO_Init+0x2d0>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
 8003410:	e021      	b.n	8003456 <HAL_GPIO_Init+0x2e2>
 8003412:	bf00      	nop
 8003414:	10320000 	.word	0x10320000
 8003418:	10310000 	.word	0x10310000
 800341c:	10220000 	.word	0x10220000
 8003420:	10210000 	.word	0x10210000
 8003424:	10120000 	.word	0x10120000
 8003428:	10110000 	.word	0x10110000
 800342c:	40021000 	.word	0x40021000
 8003430:	40010000 	.word	0x40010000
 8003434:	40010800 	.word	0x40010800
 8003438:	40010c00 	.word	0x40010c00
 800343c:	40011000 	.word	0x40011000
 8003440:	40011400 	.word	0x40011400
 8003444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_GPIO_Init+0x304>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	43db      	mvns	r3, r3
 8003450:	4909      	ldr	r1, [pc, #36]	; (8003478 <HAL_GPIO_Init+0x304>)
 8003452:	4013      	ands	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	3301      	adds	r3, #1
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	f47f ae8e 	bne.w	8003188 <HAL_GPIO_Init+0x14>
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	372c      	adds	r7, #44	; 0x2c
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40010400 	.word	0x40010400

0800347c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
 8003488:	4613      	mov	r3, r2
 800348a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800348c:	787b      	ldrb	r3, [r7, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003498:	e003      	b.n	80034a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	041a      	lsls	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	611a      	str	r2, [r3, #16]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e272      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8087 	beq.w	80035da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034cc:	4b92      	ldr	r3, [pc, #584]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d00c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034d8:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d112      	bne.n	800350a <HAL_RCC_OscConfig+0x5e>
 80034e4:	4b8c      	ldr	r3, [pc, #560]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d10b      	bne.n	800350a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f2:	4b89      	ldr	r3, [pc, #548]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d06c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x12c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d168      	bne.n	80035d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e24c      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x76>
 8003514:	4b80      	ldr	r3, [pc, #512]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a7f      	ldr	r2, [pc, #508]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	e02e      	b.n	8003580 <HAL_RCC_OscConfig+0xd4>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x98>
 800352a:	4b7b      	ldr	r3, [pc, #492]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7a      	ldr	r2, [pc, #488]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b78      	ldr	r3, [pc, #480]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a77      	ldr	r2, [pc, #476]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800353c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e01d      	b.n	8003580 <HAL_RCC_OscConfig+0xd4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0xbc>
 800354e:	4b72      	ldr	r3, [pc, #456]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a71      	ldr	r2, [pc, #452]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0xd4>
 8003568:	4b6b      	ldr	r3, [pc, #428]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6a      	ldr	r2, [pc, #424]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b68      	ldr	r3, [pc, #416]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a67      	ldr	r2, [pc, #412]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800357a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe f8da 	bl	8001740 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe f8d6 	bl	8001740 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e200      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0xe4>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe f8c6 	bl	8001740 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fe f8c2 	bl	8001740 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1ec      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x10c>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d063      	beq.n	80036ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e6:	4b4c      	ldr	r3, [pc, #304]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035f2:	4b49      	ldr	r3, [pc, #292]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11c      	bne.n	8003638 <HAL_RCC_OscConfig+0x18c>
 80035fe:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d116      	bne.n	8003638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	4b43      	ldr	r3, [pc, #268]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x176>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1c0      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4939      	ldr	r1, [pc, #228]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	e03a      	b.n	80036ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_RCC_OscConfig+0x270>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fe f87b 	bl	8001740 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364e:	f7fe f877 	bl	8001740 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1a1      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4927      	ldr	r1, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
 8003680:	e015      	b.n	80036ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCC_OscConfig+0x270>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe f85a 	bl	8001740 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003690:	f7fe f856 	bl	8001740 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e180      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03a      	beq.n	8003730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d019      	beq.n	80036f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c8:	f7fe f83a 	bl	8001740 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d0:	f7fe f836 	bl	8001740 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e160      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ee:	2001      	movs	r0, #1
 80036f0:	f000 face 	bl	8003c90 <RCC_Delay>
 80036f4:	e01c      	b.n	8003730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fc:	f7fe f820 	bl	8001740 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003702:	e00f      	b.n	8003724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003704:	f7fe f81c 	bl	8001740 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d908      	bls.n	8003724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e146      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	42420000 	.word	0x42420000
 8003720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b92      	ldr	r3, [pc, #584]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e9      	bne.n	8003704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a6 	beq.w	800388a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b8b      	ldr	r3, [pc, #556]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4a87      	ldr	r2, [pc, #540]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	61d3      	str	r3, [r2, #28]
 800375a:	4b85      	ldr	r3, [pc, #532]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b82      	ldr	r3, [pc, #520]	; (8003974 <HAL_RCC_OscConfig+0x4c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003776:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x4c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7e      	ldr	r2, [pc, #504]	; (8003974 <HAL_RCC_OscConfig+0x4c8>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fd ffdd 	bl	8001740 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fd ffd9 	bl	8001740 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b64      	cmp	r3, #100	; 0x64
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e103      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379c:	4b75      	ldr	r3, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x4c8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x312>
 80037b0:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a6e      	ldr	r2, [pc, #440]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	e02d      	b.n	800381a <HAL_RCC_OscConfig+0x36e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x334>
 80037c6:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4a69      	ldr	r2, [pc, #420]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	6213      	str	r3, [r2, #32]
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4a66      	ldr	r2, [pc, #408]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	6213      	str	r3, [r2, #32]
 80037de:	e01c      	b.n	800381a <HAL_RCC_OscConfig+0x36e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	d10c      	bne.n	8003802 <HAL_RCC_OscConfig+0x356>
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a60      	ldr	r2, [pc, #384]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6213      	str	r3, [r2, #32]
 80037f4:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	e00b      	b.n	800381a <HAL_RCC_OscConfig+0x36e>
 8003802:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4a5a      	ldr	r2, [pc, #360]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6213      	str	r3, [r2, #32]
 800380e:	4b58      	ldr	r3, [pc, #352]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d015      	beq.n	800384e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fd ff8d 	bl	8001740 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd ff89 	bl	8001740 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0b1      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ee      	beq.n	800382a <HAL_RCC_OscConfig+0x37e>
 800384c:	e014      	b.n	8003878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384e:	f7fd ff77 	bl	8001740 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fd ff73 	bl	8001740 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	; 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e09b      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	4b40      	ldr	r3, [pc, #256]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ee      	bne.n	8003856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d105      	bne.n	800388a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387e:	4b3c      	ldr	r3, [pc, #240]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4a3b      	ldr	r2, [pc, #236]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8087 	beq.w	80039a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d061      	beq.n	8003964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d146      	bne.n	8003936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fd ff47 	bl	8001740 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fd ff43 	bl	8001740 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e06d      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038dc:	d108      	bne.n	80038f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	4921      	ldr	r1, [pc, #132]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f0:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a19      	ldr	r1, [r3, #32]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	430b      	orrs	r3, r1
 8003902:	491b      	ldr	r1, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x4cc>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fd ff17 	bl	8001740 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003916:	f7fd ff13 	bl	8001740 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e03d      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x46a>
 8003934:	e035      	b.n	80039a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_OscConfig+0x4cc>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fd ff00 	bl	8001740 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd fefc 	bl	8001740 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e026      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x498>
 8003962:	e01e      	b.n	80039a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d107      	bne.n	800397c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e019      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
 8003970:	40021000 	.word	0x40021000
 8003974:	40007000 	.word	0x40007000
 8003978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x500>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	429a      	cmp	r2, r3
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000

080039b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0d0      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d910      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4965      	ldr	r1, [pc, #404]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b8      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	494d      	ldr	r1, [pc, #308]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d040      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d115      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e073      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e06b      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4936      	ldr	r1, [pc, #216]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fe4e 	bl	8001740 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd fe4a 	bl	8001740 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e053      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d210      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0207 	bic.w	r2, r3, #7
 8003ae6:	4922      	ldr	r1, [pc, #136]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4916      	ldr	r1, [pc, #88]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b3e:	f000 f821 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	490a      	ldr	r1, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	5ccb      	ldrb	r3, [r1, r3]
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1cc>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1d0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fdac 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40022000 	.word	0x40022000
 8003b74:	40021000 	.word	0x40021000
 8003b78:	080048f4 	.word	0x080048f4
 8003b7c:	20000018 	.word	0x20000018
 8003b80:	2000001c 	.word	0x2000001c

08003b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d003      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x36>
 8003bb2:	e027      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003bb6:	613b      	str	r3, [r7, #16]
      break;
 8003bb8:	e027      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	0c9b      	lsrs	r3, r3, #18
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	4a17      	ldr	r2, [pc, #92]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc4:	5cd3      	ldrb	r3, [r2, r3]
 8003bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	0c5b      	lsrs	r3, r3, #17
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	4a11      	ldr	r2, [pc, #68]	; (8003c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003be6:	fb03 f202 	mul.w	r2, r3, r2
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e004      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	613b      	str	r3, [r7, #16]
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c06:	613b      	str	r3, [r7, #16]
      break;
 8003c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0a:	693b      	ldr	r3, [r7, #16]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	007a1200 	.word	0x007a1200
 8003c20:	0800490c 	.word	0x0800490c
 8003c24:	0800491c 	.word	0x0800491c
 8003c28:	003d0900 	.word	0x003d0900

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	20000018 	.word	0x20000018

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c44:	f7ff fff2 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	08004904 	.word	0x08004904

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c6c:	f7ff ffde 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	0adb      	lsrs	r3, r3, #11
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	08004904 	.word	0x08004904

08003c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <RCC_Delay+0x34>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <RCC_Delay+0x38>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0a5b      	lsrs	r3, r3, #9
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cac:	bf00      	nop
  }
  while (Delay --);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	60fa      	str	r2, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f9      	bne.n	8003cac <RCC_Delay+0x1c>
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	20000018 	.word	0x20000018
 8003cc8:	10624dd3 	.word	0x10624dd3

08003ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d07d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cec:	4b4f      	ldr	r3, [pc, #316]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4a4b      	ldr	r2, [pc, #300]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	61d3      	str	r3, [r2, #28]
 8003d04:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d118      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d20:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a42      	ldr	r2, [pc, #264]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fd08 	bl	8001740 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	e008      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7fd fd04 	bl	8001740 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e06d      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d52:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02e      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d027      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d70:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d80:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d86:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d014      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fd fcd3 	bl	8001740 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fd fccf 	bl	8001740 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e036      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ee      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4917      	ldr	r1, [pc, #92]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	490b      	ldr	r1, [pc, #44]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4904      	ldr	r1, [pc, #16]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40007000 	.word	0x40007000
 8003e34:	42420440 	.word	0x42420440

08003e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e041      	b.n	8003ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd fb0c 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f000 fabe 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d001      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e032      	b.n	8003f56 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <HAL_TIM_Base_Start+0x88>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <HAL_TIM_Base_Start+0x48>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d009      	beq.n	8003f20 <HAL_TIM_Base_Start+0x48>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <HAL_TIM_Base_Start+0x8c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_TIM_Base_Start+0x48>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <HAL_TIM_Base_Start+0x90>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d111      	bne.n	8003f44 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d010      	beq.n	8003f54 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	e007      	b.n	8003f54 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800

08003f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e03a      	b.n	8003ffa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIM_Base_Start_IT+0x98>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x58>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <HAL_TIM_Base_Start_IT+0xa0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d111      	bne.n	8003fe8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d010      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe6:	e007      	b.n	8003ff8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800

08004010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b02      	cmp	r3, #2
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0202 	mvn.w	r2, #2
 800403c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9b4 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9a7 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f9b6 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0204 	mvn.w	r2, #4
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f98a 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f97d 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f98c 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f960 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f953 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f962 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b10      	cmp	r3, #16
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b10      	cmp	r3, #16
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0210 	mvn.w	r2, #16
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2208      	movs	r2, #8
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f936 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f929 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f938 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b01      	cmp	r3, #1
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0201 	mvn.w	r2, #1
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc ff10 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b80      	cmp	r3, #128	; 0x80
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa7b 	bl	80046b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d10e      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d107      	bne.n	80041ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8fc 	bl	80043e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d107      	bne.n	8004218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0220 	mvn.w	r2, #32
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa46 	bl	80046a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIM_ConfigClockSource+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e0b4      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x186>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004274:	d03e      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	f200 8087 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	f000 8086 	beq.w	8004392 <HAL_TIM_ConfigClockSource+0x172>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d87f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b70      	cmp	r3, #112	; 0x70
 800428e:	d01a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004290:	2b70      	cmp	r3, #112	; 0x70
 8004292:	d87b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b60      	cmp	r3, #96	; 0x60
 8004296:	d050      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x11a>
 8004298:	2b60      	cmp	r3, #96	; 0x60
 800429a:	d877      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b50      	cmp	r3, #80	; 0x50
 800429e:	d03c      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xfa>
 80042a0:	2b50      	cmp	r3, #80	; 0x50
 80042a2:	d873      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d058      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x13a>
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d86f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b30      	cmp	r3, #48	; 0x30
 80042ae:	d064      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d867      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d05a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	e062      	b.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	f000 f968 	bl	80045aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      break;
 80042f2:	e04f      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	f000 f951 	bl	80045aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	461a      	mov	r2, r3
 8004328:	f000 f8c8 	bl	80044bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	; 0x50
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f91f 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8004338:	e02c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	461a      	mov	r2, r3
 8004348:	f000 f8e6 	bl	8004518 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	; 0x60
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f90f 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8004358:	e01c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 f8a8 	bl	80044bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	; 0x40
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f8ff 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 8004378:	e00c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 f8f6 	bl	8004576 <TIM_ITRx_SetConfig>
      break;
 800438a:	e003      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e000      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
	...

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <TIM_Base_SetConfig+0xb8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d007      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <TIM_Base_SetConfig+0xbc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a25      	ldr	r2, [pc, #148]	; (80044b8 <TIM_Base_SetConfig+0xc0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d108      	bne.n	800443a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <TIM_Base_SetConfig+0xb8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <TIM_Base_SetConfig+0xbc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <TIM_Base_SetConfig+0xc0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <TIM_Base_SetConfig+0xb8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d103      	bne.n	80044a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	40012c00 	.word	0x40012c00
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800

080044bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 030a 	bic.w	r3, r3, #10
 80044f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f023 0210 	bic.w	r2, r3, #16
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	031b      	lsls	r3, r3, #12
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004554:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	621a      	str	r2, [r3, #32]
}
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	f043 0307 	orr.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b087      	sub	sp, #28
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	021a      	lsls	r2, r3, #8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	609a      	str	r2, [r3, #8]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e046      	b.n	800468e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a16      	ldr	r2, [pc, #88]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d009      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10c      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800

080046a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e042      	b.n	8004760 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fc ff10 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f82b 	bl	8004768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047a2:	f023 030c 	bic.w	r3, r3, #12
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2c      	ldr	r2, [pc, #176]	; (800487c <UART_SetConfig+0x114>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d103      	bne.n	80047d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7ff fa4a 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	e002      	b.n	80047de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7ff fa32 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 80047dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009a      	lsls	r2, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	4a22      	ldr	r2, [pc, #136]	; (8004880 <UART_SetConfig+0x118>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	0119      	lsls	r1, r3, #4
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009a      	lsls	r2, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	fbb2 f2f3 	udiv	r2, r2, r3
 8004814:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <UART_SetConfig+0x118>)
 8004816:	fba3 0302 	umull	r0, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2064      	movs	r0, #100	; 0x64
 800481e:	fb00 f303 	mul.w	r3, r0, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <UART_SetConfig+0x118>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004834:	4419      	add	r1, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009a      	lsls	r2, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	fbb2 f2f3 	udiv	r2, r2, r3
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <UART_SetConfig+0x118>)
 800484e:	fba3 0302 	umull	r0, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	2064      	movs	r0, #100	; 0x64
 8004856:	fb00 f303 	mul.w	r3, r0, r3
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	3332      	adds	r3, #50	; 0x32
 8004860:	4a07      	ldr	r2, [pc, #28]	; (8004880 <UART_SetConfig+0x118>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	440a      	add	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004874:	bf00      	nop
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40013800 	.word	0x40013800
 8004880:	51eb851f 	.word	0x51eb851f

08004884 <memset>:
 8004884:	4603      	mov	r3, r0
 8004886:	4402      	add	r2, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	f803 1b01 	strb.w	r1, [r3], #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <__libc_init_array>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	2600      	movs	r6, #0
 8004898:	4d0c      	ldr	r5, [pc, #48]	; (80048cc <__libc_init_array+0x38>)
 800489a:	4c0d      	ldr	r4, [pc, #52]	; (80048d0 <__libc_init_array+0x3c>)
 800489c:	1b64      	subs	r4, r4, r5
 800489e:	10a4      	asrs	r4, r4, #2
 80048a0:	42a6      	cmp	r6, r4
 80048a2:	d109      	bne.n	80048b8 <__libc_init_array+0x24>
 80048a4:	f000 f81a 	bl	80048dc <_init>
 80048a8:	2600      	movs	r6, #0
 80048aa:	4d0a      	ldr	r5, [pc, #40]	; (80048d4 <__libc_init_array+0x40>)
 80048ac:	4c0a      	ldr	r4, [pc, #40]	; (80048d8 <__libc_init_array+0x44>)
 80048ae:	1b64      	subs	r4, r4, r5
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	42a6      	cmp	r6, r4
 80048b4:	d105      	bne.n	80048c2 <__libc_init_array+0x2e>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048bc:	4798      	blx	r3
 80048be:	3601      	adds	r6, #1
 80048c0:	e7ee      	b.n	80048a0 <__libc_init_array+0xc>
 80048c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c6:	4798      	blx	r3
 80048c8:	3601      	adds	r6, #1
 80048ca:	e7f2      	b.n	80048b2 <__libc_init_array+0x1e>
 80048cc:	08004920 	.word	0x08004920
 80048d0:	08004920 	.word	0x08004920
 80048d4:	08004920 	.word	0x08004920
 80048d8:	08004924 	.word	0x08004924

080048dc <_init>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr

080048e8 <_fini>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	bf00      	nop
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr
