
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ebc  08006ebc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ebc  08006ebc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ebc  08006ebc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000253c  2000000c  08006ed0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002548  08006ed0  00022548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133c5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dbb  00000000  00000000  0003343d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  000361f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d06  00000000  00000000  000372b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ff9  00000000  00000000  00037fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147f5  00000000  00000000  00051faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094170  00000000  00000000  000667a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047b4  00000000  00000000  000fa914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ff0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006d60 	.word	0x08006d60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08006d60 	.word	0x08006d60

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_d2uiz>:
 8000514:	004a      	lsls	r2, r1, #1
 8000516:	d211      	bcs.n	800053c <__aeabi_d2uiz+0x28>
 8000518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800051c:	d211      	bcs.n	8000542 <__aeabi_d2uiz+0x2e>
 800051e:	d50d      	bpl.n	800053c <__aeabi_d2uiz+0x28>
 8000520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000528:	d40e      	bmi.n	8000548 <__aeabi_d2uiz+0x34>
 800052a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000536:	fa23 f002 	lsr.w	r0, r3, r2
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000546:	d102      	bne.n	800054e <__aeabi_d2uiz+0x3a>
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	4770      	bx	lr
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_frsub>:
 8000554:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__addsf3>
 800055a:	bf00      	nop

0800055c <__aeabi_fsub>:
 800055c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000560 <__addsf3>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	bf1f      	itttt	ne
 8000564:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000568:	ea92 0f03 	teqne	r2, r3
 800056c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000570:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000574:	d06a      	beq.n	800064c <__addsf3+0xec>
 8000576:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800057e:	bfc1      	itttt	gt
 8000580:	18d2      	addgt	r2, r2, r3
 8000582:	4041      	eorgt	r1, r0
 8000584:	4048      	eorgt	r0, r1
 8000586:	4041      	eorgt	r1, r0
 8000588:	bfb8      	it	lt
 800058a:	425b      	neglt	r3, r3
 800058c:	2b19      	cmp	r3, #25
 800058e:	bf88      	it	hi
 8000590:	4770      	bxhi	lr
 8000592:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4249      	negne	r1, r1
 80005b2:	ea92 0f03 	teq	r2, r3
 80005b6:	d03f      	beq.n	8000638 <__addsf3+0xd8>
 80005b8:	f1a2 0201 	sub.w	r2, r2, #1
 80005bc:	fa41 fc03 	asr.w	ip, r1, r3
 80005c0:	eb10 000c 	adds.w	r0, r0, ip
 80005c4:	f1c3 0320 	rsb	r3, r3, #32
 80005c8:	fa01 f103 	lsl.w	r1, r1, r3
 80005cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d0:	d502      	bpl.n	80005d8 <__addsf3+0x78>
 80005d2:	4249      	negs	r1, r1
 80005d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005dc:	d313      	bcc.n	8000606 <__addsf3+0xa6>
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d306      	bcc.n	80005f2 <__addsf3+0x92>
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	f102 0201 	add.w	r2, r2, #1
 80005ee:	2afe      	cmp	r2, #254	; 0xfe
 80005f0:	d251      	bcs.n	8000696 <__addsf3+0x136>
 80005f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005fa:	bf08      	it	eq
 80005fc:	f020 0001 	biceq.w	r0, r0, #1
 8000600:	ea40 0003 	orr.w	r0, r0, r3
 8000604:	4770      	bx	lr
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	eb40 0000 	adc.w	r0, r0, r0
 800060c:	3a01      	subs	r2, #1
 800060e:	bf28      	it	cs
 8000610:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000614:	d2ed      	bcs.n	80005f2 <__addsf3+0x92>
 8000616:	fab0 fc80 	clz	ip, r0
 800061a:	f1ac 0c08 	sub.w	ip, ip, #8
 800061e:	ebb2 020c 	subs.w	r2, r2, ip
 8000622:	fa00 f00c 	lsl.w	r0, r0, ip
 8000626:	bfaa      	itet	ge
 8000628:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800062c:	4252      	neglt	r2, r2
 800062e:	4318      	orrge	r0, r3
 8000630:	bfbc      	itt	lt
 8000632:	40d0      	lsrlt	r0, r2
 8000634:	4318      	orrlt	r0, r3
 8000636:	4770      	bx	lr
 8000638:	f092 0f00 	teq	r2, #0
 800063c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000640:	bf06      	itte	eq
 8000642:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000646:	3201      	addeq	r2, #1
 8000648:	3b01      	subne	r3, #1
 800064a:	e7b5      	b.n	80005b8 <__addsf3+0x58>
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d021      	beq.n	80006a0 <__addsf3+0x140>
 800065c:	ea92 0f03 	teq	r2, r3
 8000660:	d004      	beq.n	800066c <__addsf3+0x10c>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	bf08      	it	eq
 8000668:	4608      	moveq	r0, r1
 800066a:	4770      	bx	lr
 800066c:	ea90 0f01 	teq	r0, r1
 8000670:	bf1c      	itt	ne
 8000672:	2000      	movne	r0, #0
 8000674:	4770      	bxne	lr
 8000676:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800067a:	d104      	bne.n	8000686 <__addsf3+0x126>
 800067c:	0040      	lsls	r0, r0, #1
 800067e:	bf28      	it	cs
 8000680:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000684:	4770      	bx	lr
 8000686:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800068a:	bf3c      	itt	cc
 800068c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000690:	4770      	bxcc	lr
 8000692:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000696:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800069a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800069e:	4770      	bx	lr
 80006a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006a4:	bf16      	itet	ne
 80006a6:	4608      	movne	r0, r1
 80006a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ac:	4601      	movne	r1, r0
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	bf06      	itte	eq
 80006b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006b6:	ea90 0f01 	teqeq	r0, r1
 80006ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006be:	4770      	bx	lr

080006c0 <__aeabi_ui2f>:
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e004      	b.n	80006d0 <__aeabi_i2f+0x8>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2f>:
 80006c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	bf48      	it	mi
 80006ce:	4240      	negmi	r0, r0
 80006d0:	ea5f 0c00 	movs.w	ip, r0
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006dc:	4601      	mov	r1, r0
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	e01c      	b.n	800071e <__aeabi_l2f+0x2a>

080006e4 <__aeabi_ul2f>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e00a      	b.n	8000708 <__aeabi_l2f+0x14>
 80006f2:	bf00      	nop

080006f4 <__aeabi_l2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000700:	d502      	bpl.n	8000708 <__aeabi_l2f+0x14>
 8000702:	4240      	negs	r0, r0
 8000704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000708:	ea5f 0c01 	movs.w	ip, r1
 800070c:	bf02      	ittt	eq
 800070e:	4684      	moveq	ip, r0
 8000710:	4601      	moveq	r1, r0
 8000712:	2000      	moveq	r0, #0
 8000714:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000718:	bf08      	it	eq
 800071a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800071e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000722:	fabc f28c 	clz	r2, ip
 8000726:	3a08      	subs	r2, #8
 8000728:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800072c:	db10      	blt.n	8000750 <__aeabi_l2f+0x5c>
 800072e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000732:	4463      	add	r3, ip
 8000734:	fa00 fc02 	lsl.w	ip, r0, r2
 8000738:	f1c2 0220 	rsb	r2, r2, #32
 800073c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000740:	fa20 f202 	lsr.w	r2, r0, r2
 8000744:	eb43 0002 	adc.w	r0, r3, r2
 8000748:	bf08      	it	eq
 800074a:	f020 0001 	biceq.w	r0, r0, #1
 800074e:	4770      	bx	lr
 8000750:	f102 0220 	add.w	r2, r2, #32
 8000754:	fa01 fc02 	lsl.w	ip, r1, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000760:	fa21 f202 	lsr.w	r2, r1, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800076e:	4770      	bx	lr

08000770 <__aeabi_fmul>:
 8000770:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000774:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000778:	bf1e      	ittt	ne
 800077a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800077e:	ea92 0f0c 	teqne	r2, ip
 8000782:	ea93 0f0c 	teqne	r3, ip
 8000786:	d06f      	beq.n	8000868 <__aeabi_fmul+0xf8>
 8000788:	441a      	add	r2, r3
 800078a:	ea80 0c01 	eor.w	ip, r0, r1
 800078e:	0240      	lsls	r0, r0, #9
 8000790:	bf18      	it	ne
 8000792:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000796:	d01e      	beq.n	80007d6 <__aeabi_fmul+0x66>
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007a4:	fba0 3101 	umull	r3, r1, r0, r1
 80007a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b0:	bf3e      	ittt	cc
 80007b2:	0049      	lslcc	r1, r1, #1
 80007b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007b8:	005b      	lslcc	r3, r3, #1
 80007ba:	ea40 0001 	orr.w	r0, r0, r1
 80007be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007c2:	2afd      	cmp	r2, #253	; 0xfd
 80007c4:	d81d      	bhi.n	8000802 <__aeabi_fmul+0x92>
 80007c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	4770      	bx	lr
 80007d6:	f090 0f00 	teq	r0, #0
 80007da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007de:	bf08      	it	eq
 80007e0:	0249      	lsleq	r1, r1, #9
 80007e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ea:	3a7f      	subs	r2, #127	; 0x7f
 80007ec:	bfc2      	ittt	gt
 80007ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007f6:	4770      	bxgt	lr
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	3a01      	subs	r2, #1
 8000802:	dc5d      	bgt.n	80008c0 <__aeabi_fmul+0x150>
 8000804:	f112 0f19 	cmn.w	r2, #25
 8000808:	bfdc      	itt	le
 800080a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800080e:	4770      	bxle	lr
 8000810:	f1c2 0200 	rsb	r2, r2, #0
 8000814:	0041      	lsls	r1, r0, #1
 8000816:	fa21 f102 	lsr.w	r1, r1, r2
 800081a:	f1c2 0220 	rsb	r2, r2, #32
 800081e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000822:	ea5f 0031 	movs.w	r0, r1, rrx
 8000826:	f140 0000 	adc.w	r0, r0, #0
 800082a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800082e:	bf08      	it	eq
 8000830:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000834:	4770      	bx	lr
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800083e:	bf02      	ittt	eq
 8000840:	0040      	lsleq	r0, r0, #1
 8000842:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000846:	3a01      	subeq	r2, #1
 8000848:	d0f9      	beq.n	800083e <__aeabi_fmul+0xce>
 800084a:	ea40 000c 	orr.w	r0, r0, ip
 800084e:	f093 0f00 	teq	r3, #0
 8000852:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000856:	bf02      	ittt	eq
 8000858:	0049      	lsleq	r1, r1, #1
 800085a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800085e:	3b01      	subeq	r3, #1
 8000860:	d0f9      	beq.n	8000856 <__aeabi_fmul+0xe6>
 8000862:	ea41 010c 	orr.w	r1, r1, ip
 8000866:	e78f      	b.n	8000788 <__aeabi_fmul+0x18>
 8000868:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800086c:	ea92 0f0c 	teq	r2, ip
 8000870:	bf18      	it	ne
 8000872:	ea93 0f0c 	teqne	r3, ip
 8000876:	d00a      	beq.n	800088e <__aeabi_fmul+0x11e>
 8000878:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800087c:	bf18      	it	ne
 800087e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000882:	d1d8      	bne.n	8000836 <__aeabi_fmul+0xc6>
 8000884:	ea80 0001 	eor.w	r0, r0, r1
 8000888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f090 0f00 	teq	r0, #0
 8000892:	bf17      	itett	ne
 8000894:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000898:	4608      	moveq	r0, r1
 800089a:	f091 0f00 	teqne	r1, #0
 800089e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008a2:	d014      	beq.n	80008ce <__aeabi_fmul+0x15e>
 80008a4:	ea92 0f0c 	teq	r2, ip
 80008a8:	d101      	bne.n	80008ae <__aeabi_fmul+0x13e>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d10f      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008ae:	ea93 0f0c 	teq	r3, ip
 80008b2:	d103      	bne.n	80008bc <__aeabi_fmul+0x14c>
 80008b4:	024b      	lsls	r3, r1, #9
 80008b6:	bf18      	it	ne
 80008b8:	4608      	movne	r0, r1
 80008ba:	d108      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008bc:	ea80 0001 	eor.w	r0, r0, r1
 80008c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bx	lr
 80008ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fdiv>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d069      	beq.n	80009c4 <__aeabi_fdiv+0xec>
 80008f0:	eba2 0203 	sub.w	r2, r2, r3
 80008f4:	ea80 0c01 	eor.w	ip, r0, r1
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008fe:	d037      	beq.n	8000970 <__aeabi_fdiv+0x98>
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000908:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800090c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000910:	428b      	cmp	r3, r1
 8000912:	bf38      	it	cc
 8000914:	005b      	lslcc	r3, r3, #1
 8000916:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800091a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800091e:	428b      	cmp	r3, r1
 8000920:	bf24      	itt	cs
 8000922:	1a5b      	subcs	r3, r3, r1
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800092c:	bf24      	itt	cs
 800092e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000932:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000936:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800093a:	bf24      	itt	cs
 800093c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000948:	bf24      	itt	cs
 800094a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800094e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	bf18      	it	ne
 8000956:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800095a:	d1e0      	bne.n	800091e <__aeabi_fdiv+0x46>
 800095c:	2afd      	cmp	r2, #253	; 0xfd
 800095e:	f63f af50 	bhi.w	8000802 <__aeabi_fmul+0x92>
 8000962:	428b      	cmp	r3, r1
 8000964:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000968:	bf08      	it	eq
 800096a:	f020 0001 	biceq.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000974:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000978:	327f      	adds	r2, #127	; 0x7f
 800097a:	bfc2      	ittt	gt
 800097c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000980:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000984:	4770      	bxgt	lr
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	3a01      	subs	r2, #1
 8000990:	e737      	b.n	8000802 <__aeabi_fmul+0x92>
 8000992:	f092 0f00 	teq	r2, #0
 8000996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800099a:	bf02      	ittt	eq
 800099c:	0040      	lsleq	r0, r0, #1
 800099e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009a2:	3a01      	subeq	r2, #1
 80009a4:	d0f9      	beq.n	800099a <__aeabi_fdiv+0xc2>
 80009a6:	ea40 000c 	orr.w	r0, r0, ip
 80009aa:	f093 0f00 	teq	r3, #0
 80009ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0049      	lsleq	r1, r1, #1
 80009b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ba:	3b01      	subeq	r3, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fdiv+0xda>
 80009be:	ea41 010c 	orr.w	r1, r1, ip
 80009c2:	e795      	b.n	80008f0 <__aeabi_fdiv+0x18>
 80009c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d108      	bne.n	80009e0 <__aeabi_fdiv+0x108>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	f47f af7d 	bne.w	80008ce <__aeabi_fmul+0x15e>
 80009d4:	ea93 0f0c 	teq	r3, ip
 80009d8:	f47f af70 	bne.w	80008bc <__aeabi_fmul+0x14c>
 80009dc:	4608      	mov	r0, r1
 80009de:	e776      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009e0:	ea93 0f0c 	teq	r3, ip
 80009e4:	d104      	bne.n	80009f0 <__aeabi_fdiv+0x118>
 80009e6:	024b      	lsls	r3, r1, #9
 80009e8:	f43f af4c 	beq.w	8000884 <__aeabi_fmul+0x114>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e76e      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f4:	bf18      	it	ne
 80009f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	d1ca      	bne.n	8000992 <__aeabi_fdiv+0xba>
 80009fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a00:	f47f af5c 	bne.w	80008bc <__aeabi_fmul+0x14c>
 8000a04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a08:	f47f af3c 	bne.w	8000884 <__aeabi_fmul+0x114>
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0x15e>
 8000a0e:	bf00      	nop

08000a10 <__gesf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295
 8000a14:	e006      	b.n	8000a24 <__cmpsf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__lesf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpsf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpsf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d011      	beq.n	8000a60 <__cmpsf2+0x40>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a42:	bf18      	it	ne
 8000a44:	ea90 0f01 	teqne	r0, r1
 8000a48:	bf58      	it	pl
 8000a4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a4e:	bf88      	it	hi
 8000a50:	17c8      	asrhi	r0, r1, #31
 8000a52:	bf38      	it	cc
 8000a54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a58:	bf18      	it	ne
 8000a5a:	f040 0001 	orrne.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	d102      	bne.n	8000a6c <__cmpsf2+0x4c>
 8000a66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a6a:	d105      	bne.n	8000a78 <__cmpsf2+0x58>
 8000a6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a70:	d1e4      	bne.n	8000a3c <__cmpsf2+0x1c>
 8000a72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a76:	d0e1      	beq.n	8000a3c <__cmpsf2+0x1c>
 8000a78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cfrcmple>:
 8000a80:	4684      	mov	ip, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4661      	mov	r1, ip
 8000a86:	e7ff      	b.n	8000a88 <__aeabi_cfcmpeq>

08000a88 <__aeabi_cfcmpeq>:
 8000a88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a8a:	f7ff ffc9 	bl	8000a20 <__cmpsf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a98 <__aeabi_fcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cfcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_fcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffd2 	bl	8000a80 <__aeabi_cfrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc8 	bl	8000a80 <__aeabi_cfrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_f2uiz>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	d20e      	bcs.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b04:	d30b      	bcc.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b0e:	d409      	bmi.n	8000b24 <__aeabi_f2uiz+0x28>
 8000b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2uiz+0x32>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_f2uiz+0x38>
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <InitController+0x2c>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <InitController+0x30>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6013      	str	r3, [r2, #0]

	MyOutputs->xClutchBitepoint = xCLUTCH_BITE_POINT;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <InitController+0x30>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000b5a:	821a      	strh	r2, [r3, #16]

	IDLE_Entry();
 8000b5c:	f000 f944 	bl	8000de8 <IDLE_Entry>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000028 	.word	0x20000028
 8000b6c:	2000002c 	.word	0x2000002c

08000b70 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 8000b7a:	f002 fb79 	bl	8003270 <HAL_GetTick>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a92      	ldr	r2, [pc, #584]	; (8000dcc <Controller+0x25c>)
 8000b82:	6013      	str	r3, [r2, #0]

	// ANTISTALL
		#ifdef ANTISTALL_ENABLED

			// if the shut down is activated and we are at gear greater than neutral we can enter
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError) {
 8000b84:	4b92      	ldr	r3, [pc, #584]	; (8000dd0 <Controller+0x260>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 8091 	bne.w	8000cb4 <Controller+0x144>
 8000b92:	4b8f      	ldr	r3, [pc, #572]	; (8000dd0 <Controller+0x260>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 808a 	beq.w	8000cb4 <Controller+0x144>
 8000ba0:	4b8b      	ldr	r3, [pc, #556]	; (8000dd0 <Controller+0x260>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f040 8083 	bne.w	8000cb4 <Controller+0x144>
 8000bae:	4b88      	ldr	r3, [pc, #544]	; (8000dd0 <Controller+0x260>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d17c      	bne.n	8000cb4 <Controller+0x144>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8000bba:	4b86      	ldr	r3, [pc, #536]	; (8000dd4 <Controller+0x264>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d03c      	beq.n	8000c40 <Controller+0xd0>
 8000bc6:	4b82      	ldr	r3, [pc, #520]	; (8000dd0 <Controller+0x260>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <Controller+0x260>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4b7f      	ldr	r3, [pc, #508]	; (8000dd8 <Controller+0x268>)
 8000bdc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dc2d      	bgt.n	8000c40 <Controller+0xd0>
 8000be4:	4b7a      	ldr	r3, [pc, #488]	; (8000dd0 <Controller+0x260>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000bec:	2b27      	cmp	r3, #39	; 0x27
 8000bee:	dc27      	bgt.n	8000c40 <Controller+0xd0>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 8000bf0:	4b78      	ldr	r3, [pc, #480]	; (8000dd4 <Controller+0x264>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d109      	bne.n	8000c10 <Controller+0xa0>
						MyOutputs->NAntistallState = Init;
 8000bfc:	4b75      	ldr	r3, [pc, #468]	; (8000dd4 <Controller+0x264>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						tAntistallTimmer = HAL_GetTick();
 8000c06:	f002 fb33 	bl	8003270 <HAL_GetTick>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a73      	ldr	r2, [pc, #460]	; (8000ddc <Controller+0x26c>)
 8000c0e:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8000c10:	4b70      	ldr	r3, [pc, #448]	; (8000dd4 <Controller+0x264>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d111      	bne.n	8000c40 <Controller+0xd0>
 8000c1c:	4b6f      	ldr	r3, [pc, #444]	; (8000ddc <Controller+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000c24:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <Controller+0x25c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d209      	bcs.n	8000c40 <Controller+0xd0>
						MyOutputs->NAntistallState = Active;
 8000c2c:	4b69      	ldr	r3, [pc, #420]	; (8000dd4 <Controller+0x264>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2202      	movs	r2, #2
 8000c32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						MyOutputs->xClutchTargetProtection = xCLUTCH_ABSOLUTE_MAX;
 8000c36:	4b67      	ldr	r3, [pc, #412]	; (8000dd4 <Controller+0x264>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f640 0234 	movw	r2, #2100	; 0x834
 8000c3e:	809a      	strh	r2, [r3, #4]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8000c40:	4b64      	ldr	r3, [pc, #400]	; (8000dd4 <Controller+0x264>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d11d      	bne.n	8000c88 <Controller+0x118>
 8000c4c:	4b60      	ldr	r3, [pc, #384]	; (8000dd0 <Controller+0x260>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b5e      	ldr	r3, [pc, #376]	; (8000dd0 <Controller+0x260>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4b5d      	ldr	r3, [pc, #372]	; (8000dd8 <Controller+0x268>)
 8000c62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	dc05      	bgt.n	8000c76 <Controller+0x106>
 8000c6a:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <Controller+0x260>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c72:	2b5f      	cmp	r3, #95	; 0x5f
 8000c74:	dd08      	ble.n	8000c88 <Controller+0x118>
					MyOutputs->NAntistallState = Off;
 8000c76:	4b57      	ldr	r3, [pc, #348]	; (8000dd4 <Controller+0x264>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = 0;
 8000c80:	4b54      	ldr	r3, [pc, #336]	; (8000dd4 <Controller+0x264>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2200      	movs	r2, #0
 8000c86:	809a      	strh	r2, [r3, #4]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000c88:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <Controller+0x264>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d119      	bne.n	8000cc8 <Controller+0x158>
 8000c94:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <Controller+0x260>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c9c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c9e:	dd13      	ble.n	8000cc8 <Controller+0x158>
					MyOutputs->NAntistallState = Off;
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	; (8000dd4 <Controller+0x264>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = 0;
 8000caa:	4b4a      	ldr	r3, [pc, #296]	; (8000dd4 <Controller+0x264>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	809a      	strh	r2, [r3, #4]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000cb2:	e009      	b.n	8000cc8 <Controller+0x158>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <Controller+0x264>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				MyOutputs->xClutchTargetProtection = 0;
 8000cbe:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <Controller+0x264>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	809a      	strh	r2, [r3, #4]
 8000cc6:	e000      	b.n	8000cca <Controller+0x15a>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000cc8:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8000cca:	4b41      	ldr	r3, [pc, #260]	; (8000dd0 <Controller+0x260>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d114      	bne.n	8000d00 <Controller+0x190>
			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_MAX_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <Controller+0x260>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fcf2 	bl	80006c8 <__aeabi_i2f>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <Controller+0x264>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3308      	adds	r3, #8
 8000cec:	f04f 0100 	mov.w	r1, #0
 8000cf0:	9101      	str	r1, [sp, #4]
 8000cf2:	f04f 0100 	mov.w	r1, #0
 8000cf6:	9100      	str	r1, [sp, #0]
 8000cf8:	4939      	ldr	r1, [pc, #228]	; (8000de0 <Controller+0x270>)
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 fb4e 	bl	800239c <My2DMapInterpolate>
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MAX(MyOutputs->xClutchTargetProtection, MAX((uint16_t)MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift));
 8000d00:	4b34      	ldr	r3, [pc, #208]	; (8000dd4 <Controller+0x264>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	899c      	ldrh	r4, [r3, #12]
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <Controller+0x264>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fef5 	bl	8000afc <__aeabi_f2uiz>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	42a3      	cmp	r3, r4
 8000d18:	bf38      	it	cc
 8000d1a:	4623      	movcc	r3, r4
 8000d1c:	b299      	uxth	r1, r3
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <Controller+0x264>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	889a      	ldrh	r2, [r3, #4]
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <Controller+0x264>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	bf38      	it	cc
 8000d2c:	460a      	movcc	r2, r1
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	81da      	strh	r2, [r3, #14]


	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES & LEDS
		MyOutputs->BSWLEDA = MyInputs->NToggleSwitch01State;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <Controller+0x260>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <Controller+0x264>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		MyOutputs->BSWLEDB = MyInputs->NToggleSwitch02State;
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <Controller+0x260>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <Controller+0x264>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
 8000d4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		MyOutputs->BSWLEDC = MyInputs->NToggleSwitch03State;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <Controller+0x260>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <Controller+0x264>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
 8000d5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <Controller+0x274>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d82c      	bhi.n	8000dc4 <Controller+0x254>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <Controller+0x200>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000d89 	.word	0x08000d89
 8000d74:	08000d93 	.word	0x08000d93
 8000d78:	08000d9d 	.word	0x08000d9d
 8000d7c:	08000da7 	.word	0x08000da7
 8000d80:	08000db1 	.word	0x08000db1
 8000d84:	08000dbb 	.word	0x08000dbb

		case IDLE_STATE:
			IDLE_Run();
 8000d88:	f000 f870 	bl	8000e6c <IDLE_Run>
			IDLE_Event();
 8000d8c:	f000 f844 	bl	8000e18 <IDLE_Event>
			break;
 8000d90:	e018      	b.n	8000dc4 <Controller+0x254>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 8000d92:	f000 f8ed 	bl	8000f70 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 8000d96:	f000 f88b 	bl	8000eb0 <PRE_UPSHIFT_Event>
			break;
 8000d9a:	e013      	b.n	8000dc4 <Controller+0x254>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 8000d9c:	f000 f9ca 	bl	8001134 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 8000da0:	f000 f97a 	bl	8001098 <PRE_DNSHIFT_Event>
			break;
 8000da4:	e00e      	b.n	8000dc4 <Controller+0x254>
		case SHIFTING_STATE:
			SHIFTING_Run();
 8000da6:	f000 fae1 	bl	800136c <SHIFTING_Run>
			SHIFTING_Event();
 8000daa:	f000 fab9 	bl	8001320 <SHIFTING_Event>
			break;
 8000dae:	e009      	b.n	8000dc4 <Controller+0x254>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 8000db0:	f000 fb46 	bl	8001440 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 8000db4:	f000 fb0a 	bl	80013cc <POSTSHIFT_Event>
			break;
 8000db8:	e004      	b.n	8000dc4 <Controller+0x254>
		case ERROR_STATE:
			ERROR_Run();
 8000dba:	f000 fb9d 	bl	80014f8 <ERROR_Run>
			ERROR_Event();
 8000dbe:	f000 fb89 	bl	80014d4 <ERROR_Event>
			break;
 8000dc2:	bf00      	nop
		}

}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	20000034 	.word	0x20000034
 8000dd0:	20000028 	.word	0x20000028
 8000dd4:	2000002c 	.word	0x2000002c
 8000dd8:	08006dd0 	.word	0x08006dd0
 8000ddc:	20000048 	.word	0x20000048
 8000de0:	08006d78 	.word	0x08006d78
 8000de4:	20000030 	.word	0x20000030

08000de8 <IDLE_Entry>:


void IDLE_Entry(void) {
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <IDLE_Entry+0x1c>)
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <IDLE_Entry+0x20>)
 8000df2:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <IDLE_Entry+0x1c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000030 	.word	0x20000030
 8000e08:	20000031 	.word	0x20000031

08000e0c <IDLE_Exit>:
void IDLE_Exit(void) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <IDLE_Event>:
void IDLE_Event(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <IDLE_Event+0x50>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 f921 	bl	8002068 <CheckFaults>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <IDLE_Event+0x1e>
		IDLE_Exit();
 8000e2c:	f7ff ffee 	bl	8000e0c <IDLE_Exit>
		ERROR_Entry();
 8000e30:	f000 fb2a 	bl	8001488 <ERROR_Entry>
		return;
 8000e34:	e017      	b.n	8000e66 <IDLE_Event+0x4e>
	}

	// TODO: do we need to also check controller errors here? I think no...

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <IDLE_Event+0x50>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <IDLE_Event+0x36>
        IDLE_Exit();
 8000e44:	f7ff ffe2 	bl	8000e0c <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8000e48:	f000 f816 	bl	8000e78 <PRE_UPSHIFT_Entry>
        return;
 8000e4c:	e00b      	b.n	8000e66 <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <IDLE_Event+0x50>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <IDLE_Event+0x4e>
        IDLE_Exit();
 8000e5c:	f7ff ffd6 	bl	8000e0c <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8000e60:	f000 f8fe 	bl	8001060 <PRE_DNSHIFT_Entry>
        return;
 8000e64:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000028 	.word	0x20000028

08000e6c <IDLE_Run>:
void IDLE_Run(void) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <PRE_UPSHIFT_Entry+0x20>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <PRE_UPSHIFT_Entry+0x24>)
 8000e82:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <PRE_UPSHIFT_Entry+0x20>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8000e8a:	f002 f9f1 	bl	8003270 <HAL_GetTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <PRE_UPSHIFT_Entry+0x28>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000030 	.word	0x20000030
 8000e9c:	20000031 	.word	0x20000031
 8000ea0:	20000038 	.word	0x20000038

08000ea4 <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 8000eb0:	b598      	push	{r3, r4, r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <PRE_UPSHIFT_Event+0xb0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 f8d5 	bl	8002068 <CheckFaults>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <PRE_UPSHIFT_Event+0x1e>
		PRE_UPSHIFT_Exit();
 8000ec4:	f7ff ffee 	bl	8000ea4 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000ec8:	f000 fade 	bl	8001488 <ERROR_Entry>
		return;
 8000ecc:	e046      	b.n	8000f5c <PRE_UPSHIFT_Event+0xac>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d12e      	bne.n	8000f36 <PRE_UPSHIFT_Event+0x86>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <PRE_UPSHIFT_Event+0xb0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3201      	adds	r2, #1
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_UPSHIFT || MyOutputs->BOverrideActuateClutchOnUpShift) {		// we check for clutch strategy during shift
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d011      	beq.n	8000f1a <PRE_UPSHIFT_Event+0x6a>
			MyOutputs->xClutchTargetShift = xClutchTargetUpShiftMap[MyInputs->NGear];
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <PRE_UPSHIFT_Event+0xb0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <PRE_UPSHIFT_Event+0xb8>)
 8000f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnUpShift = 0; 									// reset the strat for the next gear
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8000f18:	e003      	b.n	8000f22 <PRE_UPSHIFT_Event+0x72>
		}
		else {
			MyOutputs->xClutchTargetShift = 0;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	819a      	strh	r2, [r3, #12]
		}

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		PRE_UPSHIFT_Exit();
 8000f2c:	f7ff ffba 	bl	8000ea4 <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8000f30:	f000 f97e 	bl	8001230 <SHIFTING_Entry>
		return;
 8000f34:	e012      	b.n	8000f5c <PRE_UPSHIFT_Event+0xac>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <PRE_UPSHIFT_Event+0xb4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00d      	beq.n	8000f5c <PRE_UPSHIFT_Event+0xac>
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <PRE_UPSHIFT_Event+0xbc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000f48:	f002 f992 	bl	8003270 <HAL_GetTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	429c      	cmp	r4, r3
 8000f50:	d804      	bhi.n	8000f5c <PRE_UPSHIFT_Event+0xac>
		PRE_UPSHIFT_Exit();
 8000f52:	f7ff ffa7 	bl	8000ea4 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000f56:	f000 fa97 	bl	8001488 <ERROR_Entry>
		return;
 8000f5a:	bf00      	nop
	}


}
 8000f5c:	bd98      	pop	{r3, r4, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000028 	.word	0x20000028
 8000f64:	2000002c 	.word	0x2000002c
 8000f68:	08006df4 	.word	0x08006df4
 8000f6c:	20000038 	.word	0x20000038

08000f70 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d113      	bne.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000f88:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8a:	dc0d      	bgt.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0202 	orr.w	r2, r2, #2
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	705a      	strb	r2, [r3, #1]
 8000fa6:	e008      	b.n	8000fba <PRE_UPSHIFT_Run+0x4a>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0202 	bic.w	r2, r2, #2
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift up with too low rpm
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <PRE_UPSHIFT_Run+0xec>)
 8000fd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	da13      	bge.n	8001000 <PRE_UPSHIFT_Run+0x90>
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10d      	bne.n	8001000 <PRE_UPSHIFT_Run+0x90>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0208 	orr.w	r2, r2, #8
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	705a      	strb	r2, [r3, #1]
 8000ffe:	e008      	b.n	8001012 <PRE_UPSHIFT_Run+0xa2>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0208 	bic.w	r2, r2, #8
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800101a:	2b04      	cmp	r3, #4
 800101c:	d90d      	bls.n	800103a <PRE_UPSHIFT_Run+0xca>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0210 	orr.w	r2, r2, #16
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2204      	movs	r2, #4
 8001036:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
}
 8001038:	e008      	b.n	800104c <PRE_UPSHIFT_Run+0xdc>
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0210 	bic.w	r2, r2, #16
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000028 	.word	0x20000028
 8001058:	2000002c 	.word	0x2000002c
 800105c:	08006ddc 	.word	0x08006ddc

08001060 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <PRE_DNSHIFT_Entry+0x24>)
 800106a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 800106e:	2202      	movs	r2, #2
 8001070:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8001072:	f002 f8fd 	bl	8003270 <HAL_GetTick>
 8001076:	4603      	mov	r3, r0
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <PRE_DNSHIFT_Entry+0x28>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000030 	.word	0x20000030
 8001084:	20000031 	.word	0x20000031
 8001088:	20000038 	.word	0x20000038

0800108c <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 8001098:	b598      	push	{r3, r4, r7, lr}
 800109a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 ffe1 	bl	8002068 <CheckFaults>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <PRE_DNSHIFT_Event+0x1e>
		PRE_DNSHIFT_Exit();
 80010ac:	f7ff ffee 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 80010b0:	f000 f9ea 	bl	8001488 <ERROR_Entry>
		return;
 80010b4:	e035      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11d      	bne.n	80010fc <PRE_DNSHIFT_Event+0x64>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_DNSHIFT || MyOutputs->BOverrideActuateClutchOnDnShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetDnShiftMap[MyInputs->NGear];
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010da:	4619      	mov	r1, r3
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <PRE_DNSHIFT_Event+0x94>)
 80010e2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80010e6:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnDnShift = 0; 									// reset the strat for the next gear
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			MyOutputs->xClutchTargetShift = 0;
		}

		if(ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 80010f2:	f7ff ffcb 	bl	800108c <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 80010f6:	f000 f89b 	bl	8001230 <SHIFTING_Entry>
		return;
 80010fa:	e012      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <PRE_DNSHIFT_Event+0x8a>
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <PRE_DNSHIFT_Event+0x98>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 800110e:	f002 f8af 	bl	8003270 <HAL_GetTick>
 8001112:	4603      	mov	r3, r0
 8001114:	429c      	cmp	r4, r3
 8001116:	d804      	bhi.n	8001122 <PRE_DNSHIFT_Event+0x8a>
		PRE_DNSHIFT_Exit();
 8001118:	f7ff ffb8 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 800111c:	f000 f9b4 	bl	8001488 <ERROR_Entry>
		return;
 8001120:	bf00      	nop
	}

}
 8001122:	bd98      	pop	{r3, r4, r7, pc}
 8001124:	20000028 	.word	0x20000028
 8001128:	2000002c 	.word	0x2000002c
 800112c:	08006e08 	.word	0x08006e08
 8001130:	20000038 	.word	0x20000038

08001134 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH && !(MyInputs->BrClutchPaddleInError && ALLOW_NEUTRAL_WHEN_PADDLE_IN_ERROR)) {	// trying to put neutral gear without clutch
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001140:	2b01      	cmp	r3, #1
 8001142:	d119      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800114c:	2b5a      	cmp	r3, #90	; 0x5a
 800114e:	dc13      	bgt.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10d      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0204 	orr.w	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2202      	movs	r2, #2
 8001174:	705a      	strb	r2, [r3, #1]
 8001176:	e008      	b.n	800118a <PRE_DNSHIFT_Run+0x56>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0204 	bic.w	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift down with too high rpm
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001192:	461a      	mov	r2, r3
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800119c:	4619      	mov	r1, r3
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <PRE_DNSHIFT_Run+0xf8>)
 80011a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dd13      	ble.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10d      	bne.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2205      	movs	r2, #5
 80011cc:	705a      	strb	r2, [r3, #1]
 80011ce:	e008      	b.n	80011e2 <PRE_DNSHIFT_Run+0xae>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0220 	bic.w	r2, r2, #32
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <PRE_DNSHIFT_Run+0xd6>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2206      	movs	r2, #6
 8001206:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }

}
 8001208:	e008      	b.n	800121c <PRE_DNSHIFT_Run+0xe8>
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000028 	.word	0x20000028
 8001228:	2000002c 	.word	0x2000002c
 800122c:	08006de8 	.word	0x08006de8

08001230 <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <SHIFTING_Entry+0xc0>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <SHIFTING_Entry+0xc4>)
 800123a:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <SHIFTING_Entry+0xc0>)
 800123e:	2203      	movs	r2, #3
 8001240:	701a      	strb	r2, [r3, #0]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d11b      	bne.n	8001282 <SHIFTING_Entry+0x52>
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001252:	461a      	mov	r2, r3
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SHIFTING_Entry+0xcc>)
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <SHIFTING_Entry+0xd0>)
 800125c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Up;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <SHIFTING_Entry+0xd4>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d104      	bne.n	8001278 <SHIFTING_Entry+0x48>
			MyOutputs->BDnShiftPortState = 1;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2201      	movs	r2, #1
 8001274:	751a      	strb	r2, [r3, #20]
 8001276:	e034      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other upshifts are normal
			MyOutputs->BUpShiftPortState = 1;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <SHIFTING_Entry+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	74da      	strb	r2, [r3, #19]
 8001280:	e02f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d11b      	bne.n	80012c2 <SHIFTING_Entry+0x92>
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear];
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001292:	461a      	mov	r2, r3
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <SHIFTING_Entry+0xdc>)
 8001296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <SHIFTING_Entry+0xd0>)
 800129c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Down;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <SHIFTING_Entry+0xd4>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <SHIFTING_Entry+0x88>
			MyOutputs->BUpShiftPortState = 1;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	74da      	strb	r2, [r3, #19]
 80012b6:	e014      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other downshifts are normal
			MyOutputs->BDnShiftPortState = 1;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	751a      	strb	r2, [r3, #20]
 80012c0:	e00f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else {
		NCurrentState = Unknown;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <SHIFTING_Entry+0xc0>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2207      	movs	r2, #7
 80012e0:	705a      	strb	r2, [r3, #1]
	}

	tShiftTimer = HAL_GetTick();
 80012e2:	f001 ffc5 	bl	8003270 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <SHIFTING_Entry+0xe0>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000030 	.word	0x20000030
 80012f4:	20000031 	.word	0x20000031
 80012f8:	20000028 	.word	0x20000028
 80012fc:	08006e14 	.word	0x08006e14
 8001300:	20000040 	.word	0x20000040
 8001304:	20000032 	.word	0x20000032
 8001308:	2000002c 	.word	0x2000002c
 800130c:	08006e28 	.word	0x08006e28
 8001310:	2000003c 	.word	0x2000003c

08001314 <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SHIFTING_Event+0x3c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fe9d 	bl	8002068 <CheckFaults>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <SHIFTING_Event+0x1e>
		SHIFTING_Exit();
 8001334:	f7ff ffee 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 8001338:	f000 f8a6 	bl	8001488 <ERROR_Entry>
		return;
 800133c:	e00d      	b.n	800135a <SHIFTING_Event+0x3a>
	}

	// TODO: keep checking for control errors ??


	if((tShiftTimer + tShifterMaxTransitTime) < tControllerTimmer) {	// the max time for the gear has expired
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <SHIFTING_Event+0x40>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SHIFTING_Event+0x44>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	441a      	add	r2, r3
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <SHIFTING_Event+0x48>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d204      	bcs.n	800135a <SHIFTING_Event+0x3a>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 8001350:	f7ff ffe0 	bl	8001314 <SHIFTING_Exit>
		POSTSHIFT_Entry();
 8001354:	f000 f810 	bl	8001378 <POSTSHIFT_Entry>
		return;
 8001358:	bf00      	nop
	}

}
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000028 	.word	0x20000028
 8001360:	2000003c 	.word	0x2000003c
 8001364:	20000040 	.word	0x20000040
 8001368:	20000034 	.word	0x20000034

0800136c <SHIFTING_Run>:
void SHIFTING_Run(void) {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	// PID


	// FEED FORWARD

}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <POSTSHIFT_Entry+0x3c>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <POSTSHIFT_Entry+0x40>)
 8001382:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <POSTSHIFT_Entry+0x3c>)
 8001386:	2204      	movs	r2, #4
 8001388:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <POSTSHIFT_Entry+0x44>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <POSTSHIFT_Entry+0x44>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShift = 0;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <POSTSHIFT_Entry+0x44>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	819a      	strh	r2, [r3, #12]
	MyOutputs->BSparkCut = 0;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <POSTSHIFT_Entry+0x44>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000030 	.word	0x20000030
 80013b8:	20000031 	.word	0x20000031
 80013bc:	2000002c 	.word	0x2000002c

080013c0 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

	// TODO: probably here we need to set the MyOutputs->NGear = MyInputs->NGear

}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 80013cc:	b598      	push	{r3, r4, r7, lr}
 80013ce:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <POSTSHIFT_Event+0x68>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fe47 	bl	8002068 <CheckFaults>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <POSTSHIFT_Event+0x1e>
		SHIFTING_Exit();
 80013e0:	f7ff ff98 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 80013e4:	f000 f850 	bl	8001488 <ERROR_Entry>
		return;
 80013e8:	e023      	b.n	8001432 <POSTSHIFT_Event+0x66>
	}


	if(!MyOutputs->NControlErrorStatus) {
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <POSTSHIFT_Event+0x6c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10b      	bne.n	800140c <POSTSHIFT_Event+0x40>
		// we update the Gear variable for the outputs
		MyOutputs->NGear = MyInputs->NGear;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <POSTSHIFT_Event+0x68>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <POSTSHIFT_Event+0x6c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8001400:	709a      	strb	r2, [r3, #2]
		POSTSHIFT_Exit();
 8001402:	f7ff ffdd 	bl	80013c0 <POSTSHIFT_Exit>
		IDLE_Entry();
 8001406:	f7ff fcef 	bl	8000de8 <IDLE_Entry>
		return;
 800140a:	e012      	b.n	8001432 <POSTSHIFT_Event+0x66>
	}


	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPostShiftTimer + POSTSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <POSTSHIFT_Event+0x6c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00d      	beq.n	8001432 <POSTSHIFT_Event+0x66>
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <POSTSHIFT_Event+0x70>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 800141e:	f001 ff27 	bl	8003270 <HAL_GetTick>
 8001422:	4603      	mov	r3, r0
 8001424:	429c      	cmp	r4, r3
 8001426:	d804      	bhi.n	8001432 <POSTSHIFT_Event+0x66>
		POSTSHIFT_Exit();
 8001428:	f7ff ffca 	bl	80013c0 <POSTSHIFT_Exit>
		ERROR_Entry();
 800142c:	f000 f82c 	bl	8001488 <ERROR_Entry>
		return;
 8001430:	bf00      	nop
	}
}
 8001432:	bd98      	pop	{r3, r4, r7, pc}
 8001434:	20000028 	.word	0x20000028
 8001438:	2000002c 	.word	0x2000002c
 800143c:	20000044 	.word	0x20000044

08001440 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

	if(CHECK_POST_SHIFT_GEAR && MyInputs->NGear != MyOutputs->NGearTarget) {
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <POSTSHIFT_Run+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <POSTSHIFT_Run+0x44>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	78db      	ldrb	r3, [r3, #3]
 8001452:	429a      	cmp	r2, r3
 8001454:	d00a      	beq.n	800146c <POSTSHIFT_Run+0x2c>
		RaiseControlError(GEAR_TARGET_MISMATCH);
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <POSTSHIFT_Run+0x44>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <POSTSHIFT_Run+0x44>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <POSTSHIFT_Run+0x44>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2208      	movs	r2, #8
 8001468:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(GEAR_TARGET_MISMATCH); }

}
 800146a:	e005      	b.n	8001478 <POSTSHIFT_Run+0x38>
	else { ClearControlError(GEAR_TARGET_MISMATCH); }
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <POSTSHIFT_Run+0x44>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <POSTSHIFT_Run+0x44>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	701a      	strb	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000028 	.word	0x20000028
 8001484:	2000002c 	.word	0x2000002c

08001488 <ERROR_Entry>:


void ERROR_Entry(void) {
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <ERROR_Entry+0x34>)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <ERROR_Entry+0x38>)
 8001492:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <ERROR_Entry+0x34>)
 8001496:	2205      	movs	r2, #5
 8001498:	701a      	strb	r2, [r3, #0]

	// TODO: we need to open a led to indicate the Error State !!!

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <ERROR_Entry+0x3c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <ERROR_Entry+0x3c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	//MyOutputs->xClutchTarget = xCLUTCH_FULLY_ENGAGED;
	// clutch should always work... if we enter here during an actuation, not sure if it is correct to interrupt it
	MyOutputs->BSparkCut = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <ERROR_Entry+0x3c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000030 	.word	0x20000030
 80014c0:	20000031 	.word	0x20000031
 80014c4:	2000002c 	.word	0x2000002c

080014c8 <ERROR_Exit>:

void ERROR_Exit(void) {
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <ERROR_Event>:
void ERROR_Event(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

	// check that all faults are cleared
	if(!CheckFaults(MyInputs)) {
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <ERROR_Event+0x20>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fdc3 	bl	8002068 <CheckFaults>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d104      	bne.n	80014f2 <ERROR_Event+0x1e>
		ERROR_Exit();
 80014e8:	f7ff ffee 	bl	80014c8 <ERROR_Exit>
		IDLE_Entry();
 80014ec:	f7ff fc7c 	bl	8000de8 <IDLE_Entry>
		return;
 80014f0:	bf00      	nop
	// check that all control errors are cleared
	// and do not zero the logged error status
	// remember return in all functions

	// Remember to create the Strategy (and a way to exit the error) to be able to function without NGear (complete open loop)
}
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000028 	.word	0x20000028

080014f8 <ERROR_Run>:
void ERROR_Run(void) {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <ERROR_Run+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]


	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle

}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	2000002c 	.word	0x2000002c

08001510 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af02      	add	r7, sp, #8
 8001516:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 800151e:	f001 fea7 	bl	8003270 <HAL_GetTick>
 8001522:	4603      	mov	r3, r0
 8001524:	4aa9      	ldr	r2, [pc, #676]	; (80017cc <ReadInputs+0x2bc>)
 8001526:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);	// PA0
 8001528:	4ba9      	ldr	r3, [pc, #676]	; (80017d0 <ReadInputs+0x2c0>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	2300      	movs	r3, #0
 8001530:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001534:	48a7      	ldr	r0, [pc, #668]	; (80017d4 <ReadInputs+0x2c4>)
 8001536:	f000 fe57 	bl	80021e8 <MyHalfBufferAverage>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);	// PA1
 8001542:	4ba3      	ldr	r3, [pc, #652]	; (80017d0 <ReadInputs+0x2c0>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	2301      	movs	r3, #1
 800154a:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800154e:	48a1      	ldr	r0, [pc, #644]	; (80017d4 <ReadInputs+0x2c4>)
 8001550:	f000 fe4a 	bl	80021e8 <MyHalfBufferAverage>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);	// PA2
 800155c:	4b9c      	ldr	r3, [pc, #624]	; (80017d0 <ReadInputs+0x2c0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	2302      	movs	r3, #2
 8001564:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001568:	489a      	ldr	r0, [pc, #616]	; (80017d4 <ReadInputs+0x2c4>)
 800156a:	f000 fe3d 	bl	80021e8 <MyHalfBufferAverage>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);	// PA3
 8001576:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <ReadInputs+0x2c0>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	2303      	movs	r3, #3
 800157e:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001582:	4894      	ldr	r0, [pc, #592]	; (80017d4 <ReadInputs+0x2c4>)
 8001584:	f000 fe30 	bl	80021e8 <MyHalfBufferAverage>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);	// PA5
 8001590:	4b8f      	ldr	r3, [pc, #572]	; (80017d0 <ReadInputs+0x2c0>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	2305      	movs	r3, #5
 8001598:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800159c:	488d      	ldr	r0, [pc, #564]	; (80017d4 <ReadInputs+0x2c4>)
 800159e:	f000 fe23 	bl	80021e8 <MyHalfBufferAverage>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);	// PA4
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <ReadInputs+0x2c0>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	2304      	movs	r3, #4
 80015b2:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015b6:	4887      	ldr	r0, [pc, #540]	; (80017d4 <ReadInputs+0x2c4>)
 80015b8:	f000 fe16 	bl	80021e8 <MyHalfBufferAverage>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	865a      	strh	r2, [r3, #50]	; 0x32
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);	// PA7
 80015c4:	4b82      	ldr	r3, [pc, #520]	; (80017d0 <ReadInputs+0x2c0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	2307      	movs	r3, #7
 80015cc:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015d0:	4880      	ldr	r0, [pc, #512]	; (80017d4 <ReadInputs+0x2c4>)
 80015d2:	f000 fe09 	bl	80021e8 <MyHalfBufferAverage>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	869a      	strh	r2, [r3, #52]	; 0x34
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);	// PA7
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <ReadInputs+0x2c0>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	2306      	movs	r3, #6
 80015e6:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015ea:	487a      	ldr	r0, [pc, #488]	; (80017d4 <ReadInputs+0x2c4>)
 80015ec:	f000 fdfc 	bl	80021e8 <MyHalfBufferAverage>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	86da      	strh	r2, [r3, #54]	; 0x36

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f863 	bl	80006c8 <__aeabi_i2f>
 8001602:	4603      	mov	r3, r0
 8001604:	4974      	ldr	r1, [pc, #464]	; (80017d8 <ReadInputs+0x2c8>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f8b2 	bl	8000770 <__aeabi_fmul>
 800160c:	4603      	mov	r3, r0
 800160e:	4973      	ldr	r1, [pc, #460]	; (80017dc <ReadInputs+0x2cc>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f961 	bl	80008d8 <__aeabi_fdiv>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f850 	bl	80006c8 <__aeabi_i2f>
 8001628:	4603      	mov	r3, r0
 800162a:	496b      	ldr	r1, [pc, #428]	; (80017d8 <ReadInputs+0x2c8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f89f 	bl	8000770 <__aeabi_fmul>
 8001632:	4603      	mov	r3, r0
 8001634:	4969      	ldr	r1, [pc, #420]	; (80017dc <ReadInputs+0x2cc>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f94e 	bl	80008d8 <__aeabi_fdiv>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f83d 	bl	80006c8 <__aeabi_i2f>
 800164e:	4603      	mov	r3, r0
 8001650:	4961      	ldr	r1, [pc, #388]	; (80017d8 <ReadInputs+0x2c8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f88c 	bl	8000770 <__aeabi_fmul>
 8001658:	4603      	mov	r3, r0
 800165a:	4960      	ldr	r1, [pc, #384]	; (80017dc <ReadInputs+0x2cc>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f93b 	bl	80008d8 <__aeabi_fdiv>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f82a 	bl	80006c8 <__aeabi_i2f>
 8001674:	4603      	mov	r3, r0
 8001676:	4958      	ldr	r1, [pc, #352]	; (80017d8 <ReadInputs+0x2c8>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f879 	bl	8000770 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	4956      	ldr	r1, [pc, #344]	; (80017dc <ReadInputs+0x2cc>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f928 	bl	80008d8 <__aeabi_fdiv>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff f817 	bl	80006c8 <__aeabi_i2f>
 800169a:	4603      	mov	r3, r0
 800169c:	494e      	ldr	r1, [pc, #312]	; (80017d8 <ReadInputs+0x2c8>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f866 	bl	8000770 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	494d      	ldr	r1, [pc, #308]	; (80017dc <ReadInputs+0x2cc>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f915 	bl	80008d8 <__aeabi_fdiv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f804 	bl	80006c8 <__aeabi_i2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4945      	ldr	r1, [pc, #276]	; (80017d8 <ReadInputs+0x2c8>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f853 	bl	8000770 <__aeabi_fmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4943      	ldr	r1, [pc, #268]	; (80017dc <ReadInputs+0x2cc>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff f902 	bl	80008d8 <__aeabi_fdiv>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fff1 	bl	80006c8 <__aeabi_i2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	493b      	ldr	r1, [pc, #236]	; (80017d8 <ReadInputs+0x2c8>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f840 	bl	8000770 <__aeabi_fmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	493a      	ldr	r1, [pc, #232]	; (80017dc <ReadInputs+0x2cc>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f8ef 	bl	80008d8 <__aeabi_fdiv>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	621a      	str	r2, [r3, #32]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ffde 	bl	80006c8 <__aeabi_i2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4932      	ldr	r1, [pc, #200]	; (80017d8 <ReadInputs+0x2c8>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff f82d 	bl	8000770 <__aeabi_fmul>
 8001716:	4603      	mov	r3, r0
 8001718:	4930      	ldr	r1, [pc, #192]	; (80017dc <ReadInputs+0x2cc>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f8dc 	bl	80008d8 <__aeabi_fdiv>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	625a      	str	r2, [r3, #36]	; 0x24

	//Digital Inputs
	inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8001728:	2101      	movs	r1, #1
 800172a:	482d      	ldr	r0, [pc, #180]	; (80017e0 <ReadInputs+0x2d0>)
 800172c:	f003 fc1e 	bl	8004f6c <HAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 800173a:	2102      	movs	r1, #2
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <ReadInputs+0x2d0>)
 800173e:	f003 fc15 	bl	8004f6c <HAL_GPIO_ReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 800174c:	2120      	movs	r1, #32
 800174e:	4824      	ldr	r0, [pc, #144]	; (80017e0 <ReadInputs+0x2d0>)
 8001750:	f003 fc0c 	bl	8004f6c <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	481f      	ldr	r0, [pc, #124]	; (80017e0 <ReadInputs+0x2d0>)
 8001762:	f003 fc03 	bl	8004f6c <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <ReadInputs+0x2d4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	inputs->BSWButtonB = BButtonBCAN;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <ReadInputs+0x2d8>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	inputs->BSWButtonC = BButtonCCAN;
 8001788:	4b18      	ldr	r3, [pc, #96]	; (80017ec <ReadInputs+0x2dc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	inputs->BSWButtonD = BButtonDCAN;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <ReadInputs+0x2e0>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	inputs->BSWButtonE = BButtonECAN;
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <ReadInputs+0x2e4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	inputs->BSWButtonF = BButtonFCAN;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <ReadInputs+0x2e8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

		// Inverted logic!! DriverKill=1 means ShutDown is Open, DriverKill=0 means ShutDown is closed
	if(inputs->NSHIFTERDIN04 & (tBDriverKillTimer < tInputsTimmer) && inputs->BDriverKill) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017be:	4619      	mov	r1, r3
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <ReadInputs+0x2ec>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b01      	ldr	r3, [pc, #4]	; (80017cc <ReadInputs+0x2bc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	e019      	b.n	8001800 <ReadInputs+0x2f0>
 80017cc:	2000004c 	.word	0x2000004c
 80017d0:	20000084 	.word	0x20000084
 80017d4:	20000248 	.word	0x20000248
 80017d8:	4055c28f 	.word	0x4055c28f
 80017dc:	457ff000 	.word	0x457ff000
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	2000006d 	.word	0x2000006d
 80017e8:	2000006e 	.word	0x2000006e
 80017ec:	2000006f 	.word	0x2000006f
 80017f0:	20000070 	.word	0x20000070
 80017f4:	20000071 	.word	0x20000071
 80017f8:	20000072 	.word	0x20000072
 80017fc:	20000060 	.word	0x20000060
 8001800:	bf34      	ite	cc
 8001802:	2301      	movcc	r3, #1
 8001804:	2300      	movcs	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	400b      	ands	r3, r1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00e      	beq.n	800182c <ReadInputs+0x31c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001814:	2b00      	cmp	r3, #0
 8001816:	d009      	beq.n	800182c <ReadInputs+0x31c>
		inputs->BDriverKill = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		tBDriverKillTimer = tInputsTimmer + DRIVER_KILL_DEBOUNCE;
 8001820:	4ba3      	ldr	r3, [pc, #652]	; (8001ab0 <ReadInputs+0x5a0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	33c8      	adds	r3, #200	; 0xc8
 8001826:	4aa3      	ldr	r2, [pc, #652]	; (8001ab4 <ReadInputs+0x5a4>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00d      	b.n	8001848 <ReadInputs+0x338>
	}
	else if(!inputs->NSHIFTERDIN04 & !inputs->BDriverKill) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001838:	4313      	orrs	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <ReadInputs+0x338>
		inputs->BDriverKill = 1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	// ---------------------------------------------------------------------------------------------------
	// NGear Conditioning

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3344      	adds	r3, #68	; 0x44
 8001858:	4997      	ldr	r1, [pc, #604]	; (8001ab8 <ReadInputs+0x5a8>)
 800185a:	9101      	str	r1, [sp, #4]
 800185c:	4996      	ldr	r1, [pc, #600]	; (8001ab8 <ReadInputs+0x5a8>)
 800185e:	9100      	str	r1, [sp, #0]
 8001860:	4996      	ldr	r1, [pc, #600]	; (8001abc <ReadInputs+0x5ac>)
 8001862:	2006      	movs	r0, #6
 8001864:	f000 fd9a 	bl	800239c <My2DMapInterpolate>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	// TODO: think about checking the float NGear for +-0.2 to define false neutral

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fdcc 	bl	8000414 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f005 fa26 	bl	8006cd4 <round>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7fe fe40 	bl	8000514 <__aeabi_d2uiz>
 8001894:	4603      	mov	r3, r0
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	bf28      	it	cs
 80018a8:	2305      	movcs	r3, #5
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// check for errors
	if(inputs->BNGearInError) {
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <ReadInputs+0x3ba>
		RaiseFault(inputs, NGEAR_FAULT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	e005      	b.n	80018d6 <ReadInputs+0x3c6>
		// inputs->NGear = 1; // TODO: is it correct??? not sure. I would put 1 to be able trigger antistall and to be generic for all functions
	}
	else ClearFault(inputs, NGEAR_FAULT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 0201 	bic.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 80018d6:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <ReadInputs+0x5b0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80018de:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <ReadInputs+0x5a0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d204      	bcs.n	80018f0 <ReadInputs+0x3e0>
		inputs->BSteeringWheelFitted = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018ee:	e003      	b.n	80018f8 <ReadInputs+0x3e8>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <ReadInputs+0x408>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inputs->BDeclutchRequestInError = 0;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8001916:	e007      	b.n	8001928 <ReadInputs+0x418>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Conditioning

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 8001928:	4b66      	ldr	r3, [pc, #408]	; (8001ac4 <ReadInputs+0x5b4>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b25b      	sxtb	r3, r3
 800192e:	b2da      	uxtb	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8001936:	4b64      	ldr	r3, [pc, #400]	; (8001ac8 <ReadInputs+0x5b8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b25a      	sxtb	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	661a      	str	r2, [r3, #96]	; 0x60
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_PADDLE_MARGIN_MIN, VrCLUTCH_PADDLE_MARGIN_MAX);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3364      	adds	r3, #100	; 0x64
 8001952:	495e      	ldr	r1, [pc, #376]	; (8001acc <ReadInputs+0x5bc>)
 8001954:	9101      	str	r1, [sp, #4]
 8001956:	495d      	ldr	r1, [pc, #372]	; (8001acc <ReadInputs+0x5bc>)
 8001958:	9100      	str	r1, [sp, #0]
 800195a:	495d      	ldr	r1, [pc, #372]	; (8001ad0 <ReadInputs+0x5c0>)
 800195c:	2002      	movs	r0, #2
 800195e:	f000 fd1d 	bl	800239c <My2DMapInterpolate>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <ReadInputs+0x48c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <ReadInputs+0x48c>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f993 205c 	ldrsb.w	r2, [r3, #92]	; 0x5c
 8001986:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <ReadInputs+0x5c4>)
 8001988:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800199a:	e029      	b.n	80019f0 <ReadInputs+0x4e0>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11d      	bne.n	80019e2 <ReadInputs+0x4d2>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd32 	bl	8000414 <__aeabi_f2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f005 f98c 	bl	8006cd4 <round>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7fe fd7e 	bl	80004c4 <__aeabi_d2iz>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b25a      	sxtb	r2, r3
 80019cc:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <ReadInputs+0x5c4>)
 80019ce:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80019e0:	e006      	b.n	80019f0 <ReadInputs+0x4e0>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <ReadInputs+0x5c4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <ReadInputs+0x4fe>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <ReadInputs+0x4f8>
 8001a04:	2264      	movs	r2, #100	; 0x64
 8001a06:	e000      	b.n	8001a0a <ReadInputs+0x4fa>
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <ReadInputs+0x5c8>)
 8001a0c:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <ReadInputs+0x5c8>)
 8001a10:	f993 2000 	ldrsb.w	r2, [r3]
 8001a14:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <ReadInputs+0x5c4>)
 8001a16:	f993 3000 	ldrsb.w	r3, [r3]
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	bfb8      	it	lt
 8001a1e:	4613      	movlt	r3, r2
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	2b63      	cmp	r3, #99	; 0x63
 8001a24:	dc0d      	bgt.n	8001a42 <ReadInputs+0x532>
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <ReadInputs+0x5c8>)
 8001a28:	f993 2000 	ldrsb.w	r2, [r3]
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <ReadInputs+0x5c4>)
 8001a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	bfb8      	it	lt
 8001a36:	4613      	movlt	r3, r2
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a3e:	b25a      	sxtb	r2, r3
 8001a40:	e000      	b.n	8001a44 <ReadInputs+0x534>
 8001a42:	2264      	movs	r2, #100	; 0x64
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Conditioning

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <ReadInputs+0x5cc>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <ReadInputs+0x5d0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <ReadInputs+0x5d4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <ReadInputs+0x5d8>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Analog Input
	// TODO: Debouncing and STUCK detection ???
	inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	651a      	str	r2, [r3, #80]	; 0x50

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fe1d 	bl	80006c8 <__aeabi_i2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <ReadInputs+0x5dc>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f81e 	bl	8000ad4 <__aeabi_fcmpge>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d028      	beq.n	8001af0 <ReadInputs+0x5e0>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001aae:	e07a      	b.n	8001ba6 <ReadInputs+0x696>
 8001ab0:	2000004c 	.word	0x2000004c
 8001ab4:	20000060 	.word	0x20000060
 8001ab8:	3e4ccccd 	.word	0x3e4ccccd
 8001abc:	08006e3c 	.word	0x08006e3c
 8001ac0:	20000078 	.word	0x20000078
 8001ac4:	20000074 	.word	0x20000074
 8001ac8:	20000073 	.word	0x20000073
 8001acc:	3dcccccd 	.word	0x3dcccccd
 8001ad0:	08006e6c 	.word	0x08006e6c
 8001ad4:	20000085 	.word	0x20000085
 8001ad8:	20000086 	.word	0x20000086
 8001adc:	2000006a 	.word	0x2000006a
 8001ae0:	2000006c 	.word	0x2000006c
 8001ae4:	20000069 	.word	0x20000069
 8001ae8:	2000006b 	.word	0x2000006b
 8001aec:	404ccccd 	.word	0x404ccccd
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af4:	496f      	ldr	r1, [pc, #444]	; (8001cb4 <ReadInputs+0x7a4>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe ffe2 	bl	8000ac0 <__aeabi_fcmple>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <ReadInputs+0x618>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ffe2 	bl	8000ad4 <__aeabi_fcmpge>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <ReadInputs+0x618>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b26:	e03e      	b.n	8001ba6 <ReadInputs+0x696>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2c:	4962      	ldr	r1, [pc, #392]	; (8001cb8 <ReadInputs+0x7a8>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe ffc6 	bl	8000ac0 <__aeabi_fcmple>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d012      	beq.n	8001b60 <ReadInputs+0x650>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe ffc6 	bl	8000ad4 <__aeabi_fcmpge>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <ReadInputs+0x650>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2202      	movs	r2, #2
 8001b52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b5e:	e022      	b.n	8001ba6 <ReadInputs+0x696>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b64:	4955      	ldr	r1, [pc, #340]	; (8001cbc <ReadInputs+0x7ac>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe ffaa 	bl	8000ac0 <__aeabi_fcmple>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d011      	beq.n	8001b96 <ReadInputs+0x686>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	4952      	ldr	r1, [pc, #328]	; (8001cc0 <ReadInputs+0x7b0>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe ffab 	bl	8000ad4 <__aeabi_fcmpge>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <ReadInputs+0x686>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b94:	e007      	b.n	8001ba6 <ReadInputs+0x696>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <ReadInputs+0x6c8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <ReadInputs+0x6c8>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = CAN;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001bd6:	e021      	b.n	8001c1c <ReadInputs+0x70c>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d114      	bne.n	8001c0c <ReadInputs+0x6fc>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = Analog;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001c0a:	e007      	b.n	8001c1c <ReadInputs+0x70c>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d013      	beq.n	8001c4e <ReadInputs+0x73e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <ReadInputs+0x73e>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = CAN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001c4c:	e021      	b.n	8001c92 <ReadInputs+0x782>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d114      	bne.n	8001c82 <ReadInputs+0x772>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = Analog;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001c80:	e007      	b.n	8001c92 <ReadInputs+0x782>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	// ---------------------------------------------------------------------------------------------------
	// Launch

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <ReadInputs+0x7b4>
		inputs->BLaunchRequest = inputs->BSWButtonD;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		inputs->BLaunchRequestInError = 0;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001cb0:	e010      	b.n	8001cd4 <ReadInputs+0x7c4>
 8001cb2:	bf00      	nop
 8001cb4:	3f99999a 	.word	0x3f99999a
 8001cb8:	400ccccd 	.word	0x400ccccd
 8001cbc:	3f733333 	.word	0x3f733333
 8001cc0:	3f6e147b 	.word	0x3f6e147b
	}
	else {
		inputs->BLaunchRequestInError = 1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	// ---------------------------------------------------------------------------------------------------
	// Toggle Switches

	// Toggle 1
	if(inputs->BSWButtonA && tToggleSwitch01 < tInputsTimmer) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d014      	beq.n	8001d08 <ReadInputs+0x7f8>
 8001cde:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <ReadInputs+0xa0c>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b8f      	ldr	r3, [pc, #572]	; (8001f20 <ReadInputs+0xa10>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d20e      	bcs.n	8001d08 <ReadInputs+0x7f8>
		inputs->NToggleSwitch01State ^= 1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		tToggleSwitch01 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001cfc:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <ReadInputs+0xa10>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d04:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <ReadInputs+0xa0c>)
 8001d06:	6013      	str	r3, [r2, #0]
	}

	// Toggle 2
	if(inputs->BSWButtonB && tToggleSwitch02 < tInputsTimmer) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d014      	beq.n	8001d3c <ReadInputs+0x82c>
 8001d12:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <ReadInputs+0xa14>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <ReadInputs+0xa10>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d20e      	bcs.n	8001d3c <ReadInputs+0x82c>
		inputs->NToggleSwitch02State ^= 1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001d24:	f083 0301 	eor.w	r3, r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		tToggleSwitch02 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d30:	4b7b      	ldr	r3, [pc, #492]	; (8001f20 <ReadInputs+0xa10>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d38:	4a7a      	ldr	r2, [pc, #488]	; (8001f24 <ReadInputs+0xa14>)
 8001d3a:	6013      	str	r3, [r2, #0]
	}

	// Toggle 3
	if(inputs->BSWButtonC && tToggleSwitch03 < tInputsTimmer) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d014      	beq.n	8001d70 <ReadInputs+0x860>
 8001d46:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <ReadInputs+0xa18>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b75      	ldr	r3, [pc, #468]	; (8001f20 <ReadInputs+0xa10>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d20e      	bcs.n	8001d70 <ReadInputs+0x860>
		inputs->NToggleSwitch03State ^= 1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		tToggleSwitch03 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d64:	4b6e      	ldr	r3, [pc, #440]	; (8001f20 <ReadInputs+0xa10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <ReadInputs+0xa18>)
 8001d6e:	6013      	str	r3, [r2, #0]
	}

	// Toggle 4
	if(inputs->BSWButtonE && tToggleSwitch04 < tInputsTimmer) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d014      	beq.n	8001da4 <ReadInputs+0x894>
 8001d7a:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <ReadInputs+0xa1c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <ReadInputs+0xa10>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d20e      	bcs.n	8001da4 <ReadInputs+0x894>
		inputs->NToggleSwitch04State ^= 1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001d8c:	f083 0301 	eor.w	r3, r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		tToggleSwitch04 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <ReadInputs+0xa10>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001da0:	4a62      	ldr	r2, [pc, #392]	; (8001f2c <ReadInputs+0xa1c>)
 8001da2:	6013      	str	r3, [r2, #0]


	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSHIFTERAnalog01 / VSUPPLY_DIVIDER_GAIN;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4961      	ldr	r1, [pc, #388]	; (8001f30 <ReadInputs+0xa20>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fd94 	bl	80008d8 <__aeabi_fdiv>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// ---------------------------------------------------------------------------------------------------
	// nEngine Conditioning

	// CAN Input

	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 8001dba:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <ReadInputs+0xa24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001dc2:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <ReadInputs+0xa10>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d20c      	bcs.n	8001de4 <ReadInputs+0x8d4>
		inputs->BnEngineInError = 1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		inputs->nEngine = 0; 		// we force to zero if in error
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001de2:	e007      	b.n	8001df4 <ReadInputs+0x8e4>
	}
	else {
		inputs->BnEngineInError = 0;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <ReadInputs+0xa28>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21a      	sxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <ReadInputs+0x904>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <ReadInputs+0xa2c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <ReadInputs+0xa30>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d112      	bne.n	8001e5e <ReadInputs+0x94e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <ReadInputs+0x94e>
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <ReadInputs+0xa34>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <ReadInputs+0x94e>
		BUpShiftRequested = 1;
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <ReadInputs+0xa34>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e016      	b.n	8001e8c <ReadInputs+0x97c>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <ReadInputs+0x97c>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <ReadInputs+0x97c>
 8001e72:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <ReadInputs+0xa34>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <ReadInputs+0x97c>
		BUpShiftRequested = 0;
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <ReadInputs+0xa34>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f043 0202 	orr.w	r2, r3, #2
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d112      	bne.n	8001ebc <ReadInputs+0x9ac>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00d      	beq.n	8001ebc <ReadInputs+0x9ac>
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <ReadInputs+0xa38>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <ReadInputs+0x9ac>
		BDnShiftRequested = 1;
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <ReadInputs+0xa38>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f043 0204 	orr.w	r2, r3, #4
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e016      	b.n	8001eea <ReadInputs+0x9da>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d111      	bne.n	8001eea <ReadInputs+0x9da>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10c      	bne.n	8001eea <ReadInputs+0x9da>
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <ReadInputs+0xa38>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <ReadInputs+0x9da>
		BDnShiftRequested = 0;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <ReadInputs+0xa38>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f043 0208 	orr.w	r2, r3, #8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d12d      	bne.n	8001f50 <ReadInputs+0xa40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d028      	beq.n	8001f50 <ReadInputs+0xa40>
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <ReadInputs+0xa3c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d124      	bne.n	8001f50 <ReadInputs+0xa40>
		BLaunchRequested = 1;
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <ReadInputs+0xa3c>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e031      	b.n	8001f7e <ReadInputs+0xa6e>
 8001f1a:	bf00      	nop
 8001f1c:	20000050 	.word	0x20000050
 8001f20:	2000004c 	.word	0x2000004c
 8001f24:	20000054 	.word	0x20000054
 8001f28:	20000058 	.word	0x20000058
 8001f2c:	2000005c 	.word	0x2000005c
 8001f30:	3e6c17ec 	.word	0x3e6c17ec
 8001f34:	2000007c 	.word	0x2000007c
 8001f38:	20000076 	.word	0x20000076
 8001f3c:	20000080 	.word	0x20000080
 8001f40:	20000082 	.word	0x20000082
 8001f44:	20000064 	.word	0x20000064
 8001f48:	20000065 	.word	0x20000065
 8001f4c:	20000066 	.word	0x20000066
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d111      	bne.n	8001f7e <ReadInputs+0xa6e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10c      	bne.n	8001f7e <ReadInputs+0xa6e>
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <ReadInputs+0xb28>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <ReadInputs+0xa6e>
		BLaunchRequested = 0;
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <ReadInputs+0xb28>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d112      	bne.n	8001fae <ReadInputs+0xa9e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00d      	beq.n	8001fae <ReadInputs+0xa9e>
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <ReadInputs+0xb2c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <ReadInputs+0xa9e>
		BDeclutchRequested = 1;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <ReadInputs+0xb2c>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e016      	b.n	8001fdc <ReadInputs+0xacc>
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d111      	bne.n	8001fdc <ReadInputs+0xacc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10c      	bne.n	8001fdc <ReadInputs+0xacc>
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <ReadInputs+0xb2c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <ReadInputs+0xacc>
		BDeclutchRequested = 0;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <ReadInputs+0xb2c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d124      	bne.n	8002030 <ReadInputs+0xb20>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8001fec:	2b4f      	cmp	r3, #79	; 0x4f
 8001fee:	dd0d      	ble.n	800200c <ReadInputs+0xafc>
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <ReadInputs+0xb30>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <ReadInputs+0xafc>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <ReadInputs+0xb30>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]



	// ---------------------------------------------------------------------------------------------------

}
 800200a:	e011      	b.n	8002030 <ReadInputs+0xb20>
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8002012:	2b00      	cmp	r3, #0
 8002014:	dc0c      	bgt.n	8002030 <ReadInputs+0xb20>
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <ReadInputs+0xb30>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <ReadInputs+0xb20>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <ReadInputs+0xb30>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000066 	.word	0x20000066
 800203c:	20000067 	.word	0x20000067
 8002040:	20000068 	.word	0x20000068

08002044 <InitInputs>:

void InitInputs(void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <InitInputs+0x1c>)
 800204a:	f001 fd01 	bl	8003a50 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 800204e:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 8002052:	4904      	ldr	r1, [pc, #16]	; (8002064 <InitInputs+0x20>)
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <InitInputs+0x1c>)
 8002056:	f001 fa11 	bl	800347c <HAL_ADC_Start_DMA>
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000008c 	.word	0x2000008c
 8002064:	20000248 	.word	0x20000248

08002068 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <CheckFaults+0x14>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <CheckFaults+0x16>
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	f107 0214 	add.w	r2, r7, #20
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f001 ff8d 	bl	8003fbc <HAL_CAN_GetRxMessage>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80020a8:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <CAN_RX+0x120>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <CAN_RX+0x120>)
 80020b4:	801a      	strh	r2, [r3, #0]
 80020b6:	e074      	b.n	80021a2 <CAN_RX+0x11a>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80020be:	d004      	beq.n	80020ca <CAN_RX+0x42>
 80020c0:	f240 3211 	movw	r2, #785	; 0x311
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d05c      	beq.n	8002182 <CAN_RX+0xfa>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
		 break;

	 default:
		 break;
 80020c8:	e06b      	b.n	80021a2 <CAN_RX+0x11a>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 80020ca:	f001 f8d1 	bl	8003270 <HAL_GetTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a36      	ldr	r2, [pc, #216]	; (80021ac <CAN_RX+0x124>)
 80020d2:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 80020d4:	7b3b      	ldrb	r3, [r7, #12]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <CAN_RX+0x128>)
 80020de:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 80020e0:	7b3b      	ldrb	r3, [r7, #12]
 80020e2:	085b      	lsrs	r3, r3, #1
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <CAN_RX+0x12c>)
 80020ee:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 80020f0:	7b3b      	ldrb	r3, [r7, #12]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	b25a      	sxtb	r2, r3
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <CAN_RX+0x130>)
 8002100:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 8002102:	7b7b      	ldrb	r3, [r7, #13]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <CAN_RX+0x134>)
 800210c:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <CAN_RX+0x138>)
 800211c:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 800211e:	7b7b      	ldrb	r3, [r7, #13]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <CAN_RX+0x13c>)
 800212c:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 800212e:	7b7b      	ldrb	r3, [r7, #13]
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <CAN_RX+0x140>)
 800213c:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 800213e:	7b7b      	ldrb	r3, [r7, #13]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <CAN_RX+0x144>)
 800214c:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 800214e:	7b7b      	ldrb	r3, [r7, #13]
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <CAN_RX+0x148>)
 800215c:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 800215e:	7b7b      	ldrb	r3, [r7, #13]
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <CAN_RX+0x14c>)
 800216c:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 800216e:	7b7b      	ldrb	r3, [r7, #13]
 8002170:	09db      	lsrs	r3, r3, #7
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <CAN_RX+0x150>)
 8002176:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 8002178:	7bbb      	ldrb	r3, [r7, #14]
 800217a:	b25a      	sxtb	r2, r3
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <CAN_RX+0x154>)
 800217e:	701a      	strb	r2, [r3, #0]
		 break;
 8002180:	e00f      	b.n	80021a2 <CAN_RX+0x11a>
		 tCANECULastSeen = HAL_GetTick();
 8002182:	f001 f875 	bl	8003270 <HAL_GetTick>
 8002186:	4603      	mov	r3, r0
 8002188:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <CAN_RX+0x158>)
 800218a:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21a      	sxth	r2, r3
 8002192:	7b7b      	ldrb	r3, [r7, #13]
 8002194:	b21b      	sxth	r3, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	b21b      	sxth	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <CAN_RX+0x15c>)
 800219e:	801a      	strh	r2, [r3, #0]
		 break;
 80021a0:	bf00      	nop
	 }
}
 80021a2:	3730      	adds	r7, #48	; 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000082 	.word	0x20000082
 80021ac:	20000078 	.word	0x20000078
 80021b0:	2000006a 	.word	0x2000006a
 80021b4:	2000006c 	.word	0x2000006c
 80021b8:	20000074 	.word	0x20000074
 80021bc:	20000069 	.word	0x20000069
 80021c0:	2000006b 	.word	0x2000006b
 80021c4:	2000006d 	.word	0x2000006d
 80021c8:	2000006e 	.word	0x2000006e
 80021cc:	2000006f 	.word	0x2000006f
 80021d0:	20000070 	.word	0x20000070
 80021d4:	20000071 	.word	0x20000071
 80021d8:	20000072 	.word	0x20000072
 80021dc:	20000073 	.word	0x20000073
 80021e0:	2000007c 	.word	0x2000007c
 80021e4:	20000076 	.word	0x20000076

080021e8 <MyHalfBufferAverage>:
    }
    return 1; // If no match found, return error!
}


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	807b      	strh	r3, [r7, #2]
 80021fa:	460b      	mov	r3, r1
 80021fc:	707b      	strb	r3, [r7, #1]
 80021fe:	4613      	mov	r3, r2
 8002200:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 8002206:	787b      	ldrb	r3, [r7, #1]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <MyHalfBufferAverage+0x28>
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	e000      	b.n	8002212 <MyHalfBufferAverage+0x2a>
 8002210:	2300      	movs	r3, #0
 8002212:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 800221a:	2300      	movs	r3, #0
 800221c:	827b      	strh	r3, [r7, #18]
 800221e:	e010      	b.n	8002242 <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 8002220:	8a7b      	ldrh	r3, [r7, #18]
 8002222:	00da      	lsls	r2, r3, #3
 8002224:	783b      	ldrb	r3, [r7, #0]
 8002226:	441a      	add	r2, r3
 8002228:	8a3b      	ldrh	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 800223c:	8a7b      	ldrh	r3, [r7, #18]
 800223e:	3301      	adds	r3, #1
 8002240:	827b      	strh	r3, [r7, #18]
 8002242:	8a7a      	ldrh	r2, [r7, #18]
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3ea      	bcc.n	8002220 <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 800224a:	89fb      	ldrh	r3, [r7, #14]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	b29b      	uxth	r3, r3

}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 800226a:	2100      	movs	r1, #0
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff0b 	bl	8002088 <CAN_RX>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 8002282:	2101      	movs	r1, #1
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff feff 	bl	8002088 <CAN_RX>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
	...

08002294 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_CAN_ErrorCallback+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_CAN_ErrorCallback+0x20>)
 80022a8:	701a      	strb	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	20000080 	.word	0x20000080

080022b8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a08      	ldr	r2, [pc, #32]	; (80022e4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f083 0301 	eor.w	r3, r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80022d6:	701a      	strb	r2, [r3, #0]
	}
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2000008c 	.word	0x2000008c
 80022e8:	20000084 	.word	0x20000084

080022ec <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0

	// TODO: start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <InitOutputs+0x18>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80022f8:	2104      	movs	r1, #4
 80022fa:	4802      	ldr	r0, [pc, #8]	; (8002304 <InitOutputs+0x18>)
 80022fc:	f004 fa5c 	bl	80067b8 <HAL_TIMEx_PWMN_Start>
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000128 	.word	0x20000128

08002308 <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

	// CLUTCH

	// Clamping to avoid out of bounds values
	xClutchTargetOut = CLAMP(output->xClutchTarget, xCLUTCH_ABSOLUTE_MIN, xCLUTCH_ABSOLUTE_MAX);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	89db      	ldrh	r3, [r3, #14]
 8002314:	f640 0233 	movw	r2, #2099	; 0x833
 8002318:	4293      	cmp	r3, r2
 800231a:	d808      	bhi.n	800232e <WriteOutputs+0x26>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	89db      	ldrh	r3, [r3, #14]
 8002320:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002324:	bf38      	it	cc
 8002326:	f44f 7361 	movcc.w	r3, #900	; 0x384
 800232a:	b29b      	uxth	r3, r3
 800232c:	e001      	b.n	8002332 <WriteOutputs+0x2a>
 800232e:	f640 0334 	movw	r3, #2100	; 0x834
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <WriteOutputs+0x88>)
 8002334:	8013      	strh	r3, [r2, #0]
	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to

	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	xClutchTargetOut *= 2;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <WriteOutputs+0x88>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <WriteOutputs+0x88>)
 8002340:	801a      	strh	r2, [r3, #0]

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
//	__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, xClutchTargetOut -1 );
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <WriteOutputs+0x88>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <WriteOutputs+0x8c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <WriteOutputs+0x88>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	3b01      	subs	r3, #1
 8002354:	461a      	mov	r2, r3
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <WriteOutputs+0x8c>)
 8002358:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, xClutchTargetOut/2);
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <WriteOutputs+0x88>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <WriteOutputs+0x8c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting Ports
	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, output->BUpShiftPortState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7cdb      	ldrb	r3, [r3, #19]
 800236c:	461a      	mov	r2, r3
 800236e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002372:	4809      	ldr	r0, [pc, #36]	; (8002398 <WriteOutputs+0x90>)
 8002374:	f002 fe11 	bl	8004f9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, output->BDnShiftPortState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7d1b      	ldrb	r3, [r3, #20]
 800237c:	461a      	mov	r2, r3
 800237e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <WriteOutputs+0x90>)
 8002384:	f002 fe09 	bl	8004f9a <HAL_GPIO_WritePin>


	// CAN
	// add the info of the shutDown (DriverKill) in the CAN for others to see
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000088 	.word	0x20000088
 8002394:	20000128 	.word	0x20000128
 8002398:	40010c00 	.word	0x40010c00

0800239c <My2DMapInterpolate>:
#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	68fe      	ldr	r6, [r7, #12]
 80023ac:	1e73      	subs	r3, r6, #1
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	4632      	mov	r2, r6
 80023b2:	2300      	movs	r3, #0
 80023b4:	4614      	mov	r4, r2
 80023b6:	461d      	mov	r5, r3
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	016b      	lsls	r3, r5, #5
 80023c2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80023c6:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f8c4 	bl	800055c <__aeabi_fsub>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7fe fb67 	bl	8000aac <__aeabi_fcmplt>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 80023e4:	4633      	mov	r3, r6
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4413      	add	r3, r2
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	601a      	str	r2, [r3, #0]
		return 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07a      	b.n	80024ec <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f8ac 	bl	8000560 <__addsf3>
 8002408:	4603      	mov	r3, r0
 800240a:	4619      	mov	r1, r3
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe fb6b 	bl	8000ae8 <__aeabi_fcmpgt>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 8002418:	4633      	mov	r3, r6
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	4413      	add	r3, r2
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	3a01      	subs	r2, #1
 8002424:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	601a      	str	r2, [r3, #0]
		return 1;
 800242c:	2301      	movs	r3, #1
 800242e:	e05d      	b.n	80024ec <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e00e      	b.n	8002454 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fb32 	bl	8000aac <__aeabi_fcmplt>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d108      	bne.n	8002460 <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3b01      	subs	r3, #1
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	429a      	cmp	r2, r3
 800245c:	dbeb      	blt.n	8002436 <My2DMapInterpolate+0x9a>
 800245e:	e000      	b.n	8002462 <My2DMapInterpolate+0xc6>
			break;
 8002460:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe f871 	bl	800055c <__aeabi_fsub>
 800247a:	4603      	mov	r3, r0
 800247c:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 800247e:	4633      	mov	r3, r6
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4413      	add	r3, r2
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	3201      	adds	r2, #1
 800248a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800248e:	4633      	mov	r3, r6
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	4413      	add	r3, r2
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe f85d 	bl	800055c <__aeabi_fsub>
 80024a2:	4603      	mov	r3, r0
 80024a4:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 80024a6:	4633      	mov	r3, r6
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe f84c 	bl	800055c <__aeabi_fsub>
 80024c4:	4603      	mov	r3, r0
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f951 	bl	8000770 <__aeabi_fmul>
 80024ce:	4603      	mov	r3, r0
 80024d0:	6979      	ldr	r1, [r7, #20]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fa00 	bl	80008d8 <__aeabi_fdiv>
 80024d8:	4603      	mov	r3, r0
 80024da:	4619      	mov	r1, r3
 80024dc:	4620      	mov	r0, r4
 80024de:	f7fe f83f 	bl	8000560 <__addsf3>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	601a      	str	r2, [r3, #0]
	return 0;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3724      	adds	r7, #36	; 0x24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024f8:	f3bf 8f4f 	dsb	sy
}
 80024fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <__NVIC_SystemReset+0x24>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002506:	4904      	ldr	r1, [pc, #16]	; (8002518 <__NVIC_SystemReset+0x24>)
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <__NVIC_SystemReset+0x28>)
 800250a:	4313      	orrs	r3, r2
 800250c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800250e:	f3bf 8f4f 	dsb	sy
}
 8002512:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <__NVIC_SystemReset+0x20>
 8002518:	e000ed00 	.word	0xe000ed00
 800251c:	05fa0004 	.word	0x05fa0004

08002520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002524:	f000 fe4c 	bl	80031c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002528:	f000 f83e 	bl	80025a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800252c:	f000 fba4 	bl	8002c78 <MX_GPIO_Init>
  MX_DMA_Init();
 8002530:	f000 fb84 	bl	8002c3c <MX_DMA_Init>
  MX_TIM3_Init();
 8002534:	f000 fb0a 	bl	8002b4c <MX_TIM3_Init>
  MX_ADC1_Init();
 8002538:	f000 f892 	bl	8002660 <MX_ADC1_Init>
  MX_CAN_Init();
 800253c:	f000 f932 	bl	80027a4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002540:	f000 fb52 	bl	8002be8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002544:	f000 fab6 	bl	8002ab4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002548:	f000 fa14 	bl	8002974 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 800254c:	4811      	ldr	r0, [pc, #68]	; (8002594 <main+0x74>)
 800254e:	f003 fb53 	bl	8005bf8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 8002552:	4811      	ldr	r0, [pc, #68]	; (8002598 <main+0x78>)
 8002554:	f003 fb06 	bl	8005b64 <HAL_TIM_Base_Start>

  InitInputs();
 8002558:	f7ff fd74 	bl	8002044 <InitInputs>
  InitController(&Inputs,&Outputs);
 800255c:	490f      	ldr	r1, [pc, #60]	; (800259c <main+0x7c>)
 800255e:	4810      	ldr	r0, [pc, #64]	; (80025a0 <main+0x80>)
 8002560:	f7fe faec 	bl	8000b3c <InitController>
  InitOutputs();
 8002564:	f7ff fec2 	bl	80022ec <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 8002568:	2032      	movs	r0, #50	; 0x32
 800256a:	f000 fe8b 	bl	8003284 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <main+0x84>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0fa      	beq.n	800256e <main+0x4e>
		  BCycleTimerFlag = 0;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <main+0x84>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 800257e:	4808      	ldr	r0, [pc, #32]	; (80025a0 <main+0x80>)
 8002580:	f7fe ffc6 	bl	8001510 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 8002584:	4905      	ldr	r1, [pc, #20]	; (800259c <main+0x7c>)
 8002586:	4806      	ldr	r0, [pc, #24]	; (80025a0 <main+0x80>)
 8002588:	f7fe faf2 	bl	8000b70 <Controller>
		  WriteOutputs(&Outputs);
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <main+0x7c>)
 800258e:	f7ff febb 	bl	8002308 <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002592:	e7ec      	b.n	800256e <main+0x4e>
 8002594:	200001b8 	.word	0x200001b8
 8002598:	20000170 	.word	0x20000170
 800259c:	20002514 	.word	0x20002514
 80025a0:	2000248c 	.word	0x2000248c
 80025a4:	20002488 	.word	0x20002488

080025a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b094      	sub	sp, #80	; 0x50
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	2228      	movs	r2, #40	; 0x28
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fb60 	bl	8006c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025d8:	2301      	movs	r3, #1
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e6:	2301      	movs	r3, #1
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ea:	2302      	movs	r3, #2
 80025ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fce4 	bl	8004fcc <HAL_RCC_OscConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800260a:	f000 fba1 	bl	8002d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260e:	230f      	movs	r3, #15
 8002610:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800261a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f002 ff50 	bl	80054d0 <HAL_RCC_ClockConfig>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002636:	f000 fb8b 	bl	8002d50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800263a:	2302      	movs	r3, #2
 800263c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800263e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002642:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f003 f8d0 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002652:	f000 fb7d 	bl	8002d50 <Error_Handler>
  }
}
 8002656:	bf00      	nop
 8002658:	3750      	adds	r7, #80	; 0x50
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002670:	4b4a      	ldr	r3, [pc, #296]	; (800279c <MX_ADC1_Init+0x13c>)
 8002672:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <MX_ADC1_Init+0x140>)
 8002674:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002676:	4b49      	ldr	r3, [pc, #292]	; (800279c <MX_ADC1_Init+0x13c>)
 8002678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800267e:	4b47      	ldr	r3, [pc, #284]	; (800279c <MX_ADC1_Init+0x13c>)
 8002680:	2201      	movs	r2, #1
 8002682:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002684:	4b45      	ldr	r3, [pc, #276]	; (800279c <MX_ADC1_Init+0x13c>)
 8002686:	2200      	movs	r2, #0
 8002688:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <MX_ADC1_Init+0x13c>)
 800268c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002692:	4b42      	ldr	r3, [pc, #264]	; (800279c <MX_ADC1_Init+0x13c>)
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <MX_ADC1_Init+0x13c>)
 800269a:	2208      	movs	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800269e:	483f      	ldr	r0, [pc, #252]	; (800279c <MX_ADC1_Init+0x13c>)
 80026a0:	f000 fe14 	bl	80032cc <HAL_ADC_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80026aa:	f000 fb51 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80026b6:	2303      	movs	r3, #3
 80026b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4837      	ldr	r0, [pc, #220]	; (800279c <MX_ADC1_Init+0x13c>)
 80026c0:	f000 ffcc 	bl	800365c <HAL_ADC_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80026ca:	f000 fb41 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026d2:	2302      	movs	r3, #2
 80026d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4830      	ldr	r0, [pc, #192]	; (800279c <MX_ADC1_Init+0x13c>)
 80026dc:	f000 ffbe 	bl	800365c <HAL_ADC_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80026e6:	f000 fb33 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80026ea:	2302      	movs	r3, #2
 80026ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80026ee:	2303      	movs	r3, #3
 80026f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4829      	ldr	r0, [pc, #164]	; (800279c <MX_ADC1_Init+0x13c>)
 80026f8:	f000 ffb0 	bl	800365c <HAL_ADC_ConfigChannel>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002702:	f000 fb25 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002706:	2303      	movs	r3, #3
 8002708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800270a:	2304      	movs	r3, #4
 800270c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	4619      	mov	r1, r3
 8002712:	4822      	ldr	r0, [pc, #136]	; (800279c <MX_ADC1_Init+0x13c>)
 8002714:	f000 ffa2 	bl	800365c <HAL_ADC_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800271e:	f000 fb17 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002722:	2304      	movs	r3, #4
 8002724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002726:	2305      	movs	r3, #5
 8002728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	4619      	mov	r1, r3
 800272e:	481b      	ldr	r0, [pc, #108]	; (800279c <MX_ADC1_Init+0x13c>)
 8002730:	f000 ff94 	bl	800365c <HAL_ADC_ConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800273a:	f000 fb09 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800273e:	2305      	movs	r3, #5
 8002740:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002742:	2306      	movs	r3, #6
 8002744:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4814      	ldr	r0, [pc, #80]	; (800279c <MX_ADC1_Init+0x13c>)
 800274c:	f000 ff86 	bl	800365c <HAL_ADC_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002756:	f000 fafb 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800275a:	2306      	movs	r3, #6
 800275c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800275e:	2307      	movs	r3, #7
 8002760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	4619      	mov	r1, r3
 8002766:	480d      	ldr	r0, [pc, #52]	; (800279c <MX_ADC1_Init+0x13c>)
 8002768:	f000 ff78 	bl	800365c <HAL_ADC_ConfigChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002772:	f000 faed 	bl	8002d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002776:	2307      	movs	r3, #7
 8002778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800277a:	2308      	movs	r3, #8
 800277c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	4619      	mov	r1, r3
 8002782:	4806      	ldr	r0, [pc, #24]	; (800279c <MX_ADC1_Init+0x13c>)
 8002784:	f000 ff6a 	bl	800365c <HAL_ADC_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800278e:	f000 fadf 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000008c 	.word	0x2000008c
 80027a0:	40012400 	.word	0x40012400

080027a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0a8      	sub	sp, #160	; 0xa0
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80027aa:	4b70      	ldr	r3, [pc, #448]	; (800296c <MX_CAN_Init+0x1c8>)
 80027ac:	4a70      	ldr	r2, [pc, #448]	; (8002970 <MX_CAN_Init+0x1cc>)
 80027ae:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80027b0:	4b6e      	ldr	r3, [pc, #440]	; (800296c <MX_CAN_Init+0x1c8>)
 80027b2:	2204      	movs	r2, #4
 80027b4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80027b6:	4b6d      	ldr	r3, [pc, #436]	; (800296c <MX_CAN_Init+0x1c8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80027bc:	4b6b      	ldr	r3, [pc, #428]	; (800296c <MX_CAN_Init+0x1c8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80027c2:	4b6a      	ldr	r3, [pc, #424]	; (800296c <MX_CAN_Init+0x1c8>)
 80027c4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80027c8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80027ca:	4b68      	ldr	r3, [pc, #416]	; (800296c <MX_CAN_Init+0x1c8>)
 80027cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027d0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80027d2:	4b66      	ldr	r3, [pc, #408]	; (800296c <MX_CAN_Init+0x1c8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80027d8:	4b64      	ldr	r3, [pc, #400]	; (800296c <MX_CAN_Init+0x1c8>)
 80027da:	2201      	movs	r2, #1
 80027dc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <MX_CAN_Init+0x1c8>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80027e4:	4b61      	ldr	r3, [pc, #388]	; (800296c <MX_CAN_Init+0x1c8>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80027ea:	4b60      	ldr	r3, [pc, #384]	; (800296c <MX_CAN_Init+0x1c8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80027f0:	4b5e      	ldr	r3, [pc, #376]	; (800296c <MX_CAN_Init+0x1c8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80027f6:	485d      	ldr	r0, [pc, #372]	; (800296c <MX_CAN_Init+0x1c8>)
 80027f8:	f001 f9d8 	bl	8003bac <HAL_CAN_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002802:	f000 faa5 	bl	8002d50 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_RX_ID << 5 ;
 8002806:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800280a:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8002810:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8002836:	2301      	movs	r3, #1
 8002838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 800283c:	2301      	movs	r3, #1
 800283e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8002842:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002846:	4619      	mov	r1, r3
 8002848:	4848      	ldr	r0, [pc, #288]	; (800296c <MX_CAN_Init+0x1c8>)
 800284a:	f001 faaa 	bl	8003da2 <HAL_CAN_ConfigFilter>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8002854:	f000 fa7c 	bl	8002d50 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_RX_ID << 5 ;
 8002858:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800285c:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8002862:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002866:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800286c:	2301      	movs	r3, #1
 800286e:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8002870:	2301      	movs	r3, #1
 8002872:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 8002878:	2300      	movs	r3, #0
 800287a:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 800287c:	2301      	movs	r3, #1
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8002880:	2301      	movs	r3, #1
 8002882:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8002884:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002888:	4619      	mov	r1, r3
 800288a:	4838      	ldr	r0, [pc, #224]	; (800296c <MX_CAN_Init+0x1c8>)
 800288c:	f001 fa89 	bl	8003da2 <HAL_CAN_ConfigFilter>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_CAN_Init+0xf6>
 	  Error_Handler();
 8002896:	f000 fa5b 	bl	8002d50 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 800289a:	f246 2320 	movw	r3, #25120	; 0x6220
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 80028a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 80028b2:	2302      	movs	r3, #2
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80028be:	2301      	movs	r3, #1
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 80028c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ca:	4619      	mov	r1, r3
 80028cc:	4827      	ldr	r0, [pc, #156]	; (800296c <MX_CAN_Init+0x1c8>)
 80028ce:	f001 fa68 	bl	8003da2 <HAL_CAN_ConfigFilter>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_CAN_Init+0x138>
 	  Error_Handler();
 80028d8:	f000 fa3a 	bl	8002d50 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 80028dc:	f246 2320 	movw	r3, #25120	; 0x6220
 80028e0:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 80028e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028ea:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 80028f4:	2303      	movs	r3, #3
 80028f6:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8002904:	2301      	movs	r3, #1
 8002906:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4817      	ldr	r0, [pc, #92]	; (800296c <MX_CAN_Init+0x1c8>)
 800290e:	f001 fa48 	bl	8003da2 <HAL_CAN_ConfigFilter>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_CAN_Init+0x178>
 	  Error_Handler();
 8002918:	f000 fa1a 	bl	8002d50 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800291c:	2102      	movs	r1, #2
 800291e:	4813      	ldr	r0, [pc, #76]	; (800296c <MX_CAN_Init+0x1c8>)
 8002920:	f001 fc6d 	bl	80041fe <HAL_CAN_ActivateNotification>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_CAN_Init+0x18a>
	   Error_Handler();
 800292a:	f000 fa11 	bl	8002d50 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800292e:	2110      	movs	r1, #16
 8002930:	480e      	ldr	r0, [pc, #56]	; (800296c <MX_CAN_Init+0x1c8>)
 8002932:	f001 fc64 	bl	80041fe <HAL_CAN_ActivateNotification>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_CAN_Init+0x19c>
	   Error_Handler();
 800293c:	f000 fa08 	bl	8002d50 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8002940:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <MX_CAN_Init+0x1c8>)
 8002946:	f001 fc5a 	bl	80041fe <HAL_CAN_ActivateNotification>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8002950:	f000 f9fe 	bl	8002d50 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_CAN_Init+0x1c8>)
 8002956:	f001 faed 	bl	8003f34 <HAL_CAN_Start>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8002960:	f000 f9f6 	bl	8002d50 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	37a0      	adds	r7, #160	; 0xa0
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000100 	.word	0x20000100
 8002970:	40006400 	.word	0x40006400

08002974 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b096      	sub	sp, #88	; 0x58
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800297a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	615a      	str	r2, [r3, #20]
 80029a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2220      	movs	r2, #32
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f004 f965 	bl	8006c7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <MX_TIM1_Init+0x138>)
 80029b4:	4a3e      	ldr	r2, [pc, #248]	; (8002ab0 <MX_TIM1_Init+0x13c>)
 80029b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80029b8:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <MX_TIM1_Init+0x138>)
 80029ba:	2247      	movs	r2, #71	; 0x47
 80029bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <MX_TIM1_Init+0x138>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <MX_TIM1_Init+0x138>)
 80029c6:	f240 52db 	movw	r2, #1499	; 0x5db
 80029ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029cc:	4b37      	ldr	r3, [pc, #220]	; (8002aac <MX_TIM1_Init+0x138>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <MX_TIM1_Init+0x138>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029d8:	4b34      	ldr	r3, [pc, #208]	; (8002aac <MX_TIM1_Init+0x138>)
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029de:	4833      	ldr	r0, [pc, #204]	; (8002aac <MX_TIM1_Init+0x138>)
 80029e0:	f003 f870 	bl	8005ac4 <HAL_TIM_Base_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80029ea:	f000 f9b1 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029f8:	4619      	mov	r1, r3
 80029fa:	482c      	ldr	r0, [pc, #176]	; (8002aac <MX_TIM1_Init+0x138>)
 80029fc:	f003 fb70 	bl	80060e0 <HAL_TIM_ConfigClockSource>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a06:	f000 f9a3 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a0a:	4828      	ldr	r0, [pc, #160]	; (8002aac <MX_TIM1_Init+0x138>)
 8002a0c:	f003 f946 	bl	8005c9c <HAL_TIM_PWM_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a16:	f000 f99b 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a26:	4619      	mov	r1, r3
 8002a28:	4820      	ldr	r0, [pc, #128]	; (8002aac <MX_TIM1_Init+0x138>)
 8002a2a:	f003 ff63 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a34:	f000 f98c 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a38:	2360      	movs	r3, #96	; 0x60
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a44:	2300      	movs	r3, #0
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002a48:	2304      	movs	r3, #4
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4813      	ldr	r0, [pc, #76]	; (8002aac <MX_TIM1_Init+0x138>)
 8002a5e:	f003 fa7d 	bl	8005f5c <HAL_TIM_PWM_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002a68:	f000 f972 	bl	8002d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4807      	ldr	r0, [pc, #28]	; (8002aac <MX_TIM1_Init+0x138>)
 8002a90:	f003 ff8e 	bl	80069b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002a9a:	f000 f959 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a9e:	4803      	ldr	r0, [pc, #12]	; (8002aac <MX_TIM1_Init+0x138>)
 8002aa0:	f000 fa9c 	bl	8002fdc <HAL_TIM_MspPostInit>

}
 8002aa4:	bf00      	nop
 8002aa6:	3758      	adds	r7, #88	; 0x58
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000128 	.word	0x20000128
 8002ab0:	40012c00 	.word	0x40012c00

08002ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aba:	f107 0308 	add.w	r3, r7, #8
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac8:	463b      	mov	r3, r7
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002ad2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ad6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002ada:	2247      	movs	r2, #71	; 0x47
 8002adc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002af8:	4813      	ldr	r0, [pc, #76]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002afa:	f002 ffe3 	bl	8005ac4 <HAL_TIM_Base_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b04:	f000 f924 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b0e:	f107 0308 	add.w	r3, r7, #8
 8002b12:	4619      	mov	r1, r3
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002b16:	f003 fae3 	bl	80060e0 <HAL_TIM_ConfigClockSource>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b20:	f000 f916 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_TIM2_Init+0x94>)
 8002b32:	f003 fedf 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b3c:	f000 f908 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000170 	.word	0x20000170

08002b4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	463b      	mov	r3, r7
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <MX_TIM3_Init+0x98>)
 8002b6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002b70:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002b74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002b7e:	2263      	movs	r2, #99	; 0x63
 8002b80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b8e:	4814      	ldr	r0, [pc, #80]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002b90:	f002 ff98 	bl	8005ac4 <HAL_TIM_Base_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b9a:	f000 f8d9 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480d      	ldr	r0, [pc, #52]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002bac:	f003 fa98 	bl	80060e0 <HAL_TIM_ConfigClockSource>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bb6:	f000 f8cb 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4806      	ldr	r0, [pc, #24]	; (8002be0 <MX_TIM3_Init+0x94>)
 8002bc8:	f003 fe94 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002bd2:	f000 f8bd 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200001b8 	.word	0x200001b8
 8002be4:	40000400 	.word	0x40000400

08002be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <MX_USART1_UART_Init+0x50>)
 8002bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_USART1_UART_Init+0x4c>)
 8002c20:	f003 ff4d 	bl	8006abe <HAL_UART_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c2a:	f000 f891 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000200 	.word	0x20000200
 8002c38:	40013800 	.word	0x40013800

08002c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <MX_DMA_Init+0x38>)
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <MX_DMA_Init+0x38>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6153      	str	r3, [r2, #20]
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <MX_DMA_Init+0x38>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	200b      	movs	r0, #11
 8002c60:	f001 fddb 	bl	800481a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c64:	200b      	movs	r0, #11
 8002c66:	f001 fdf4 	bl	8004852 <HAL_NVIC_EnableIRQ>

}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000

08002c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4a23      	ldr	r2, [pc, #140]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002c92:	f043 0320 	orr.w	r3, r3, #32
 8002c96:	6193      	str	r3, [r2, #24]
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6193      	str	r3, [r2, #24]
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <MX_GPIO_Init+0xa8>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8002cda:	4812      	ldr	r0, [pc, #72]	; (8002d24 <MX_GPIO_Init+0xac>)
 8002cdc:	f002 f95d 	bl	8004f9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8002ce0:	237b      	movs	r3, #123	; 0x7b
 8002ce2:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480c      	ldr	r0, [pc, #48]	; (8002d24 <MX_GPIO_Init+0xac>)
 8002cf4:	f001 ffb6 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 8002cf8:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8002cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2302      	movs	r3, #2
 8002d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 0310 	add.w	r3, r7, #16
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4804      	ldr	r0, [pc, #16]	; (8002d24 <MX_GPIO_Init+0xac>)
 8002d12:	f001 ffa7 	bl	8004c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d16:	bf00      	nop
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40010c00 	.word	0x40010c00

08002d28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d102      	bne.n	8002d3e <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
	}
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	200001b8 	.word	0x200001b8
 8002d4c:	20002488 	.word	0x20002488

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002d58:	20c8      	movs	r0, #200	; 0xc8
 8002d5a:	f000 fa93 	bl	8003284 <HAL_Delay>
	  NVIC_SystemReset();
 8002d5e:	f7ff fbc9 	bl	80024f4 <__NVIC_SystemReset>
	...

08002d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_MspInit+0x5c>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <HAL_MspInit+0x5c>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6193      	str	r3, [r2, #24]
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_MspInit+0x5c>)
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_MspInit+0x5c>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_MspInit+0x5c>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	61d3      	str	r3, [r2, #28]
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_MspInit+0x5c>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_MspInit+0x60>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_MspInit+0x60>)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40010000 	.word	0x40010000

08002dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_ADC_MspInit+0xc0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d14a      	bne.n	8002e7e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <HAL_ADC_MspInit+0xc4>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <HAL_ADC_MspInit+0xc4>)
 8002dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_ADC_MspInit+0xc4>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_ADC_MspInit+0xc4>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_ADC_MspInit+0xc4>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6193      	str	r3, [r2, #24]
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_ADC_MspInit+0xc4>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e18:	23ff      	movs	r3, #255	; 0xff
 8002e1a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	f107 0310 	add.w	r3, r7, #16
 8002e24:	4619      	mov	r1, r3
 8002e26:	481a      	ldr	r0, [pc, #104]	; (8002e90 <HAL_ADC_MspInit+0xc8>)
 8002e28:	f001 ff1c 	bl	8004c64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	; (8002e98 <HAL_ADC_MspInit+0xd0>)
 8002e30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e40:	2280      	movs	r2, #128	; 0x80
 8002e42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e56:	2220      	movs	r2, #32
 8002e58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e5a:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e62:	480c      	ldr	r0, [pc, #48]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e64:	f001 fd10 	bl	8004888 <HAL_DMA_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002e6e:	f7ff ff6f 	bl	8002d50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e76:	621a      	str	r2, [r3, #32]
 8002e78:	4a06      	ldr	r2, [pc, #24]	; (8002e94 <HAL_ADC_MspInit+0xcc>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40012400 	.word	0x40012400
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40010800 	.word	0x40010800
 8002e94:	200000bc 	.word	0x200000bc
 8002e98:	40020008 	.word	0x40020008

08002e9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_CAN_MspInit+0x9c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d139      	bne.n	8002f30 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <HAL_CAN_MspInit+0xa0>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <HAL_CAN_MspInit+0xa0>)
 8002ec2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	61d3      	str	r3, [r2, #28]
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_CAN_MspInit+0xa0>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_CAN_MspInit+0xa0>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_CAN_MspInit+0xa0>)
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_CAN_MspInit+0xa0>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002eec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	f107 0310 	add.w	r3, r7, #16
 8002efe:	4619      	mov	r1, r3
 8002f00:	480f      	ldr	r0, [pc, #60]	; (8002f40 <HAL_CAN_MspInit+0xa4>)
 8002f02:	f001 feaf 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4809      	ldr	r0, [pc, #36]	; (8002f40 <HAL_CAN_MspInit+0xa4>)
 8002f1c:	f001 fea2 	bl	8004c64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	2014      	movs	r0, #20
 8002f26:	f001 fc78 	bl	800481a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f2a:	2014      	movs	r0, #20
 8002f2c:	f001 fc91 	bl	8004852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002f30:	bf00      	nop
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40006400 	.word	0x40006400
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40010800 	.word	0x40010800

08002f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <HAL_TIM_Base_MspInit+0x8c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10c      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f56:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f60:	6193      	str	r3, [r2, #24]
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f6e:	e02a      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	61d3      	str	r3, [r2, #28]
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
}
 8002f92:	e018      	b.n	8002fc6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_TIM_Base_MspInit+0x94>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d113      	bne.n	8002fc6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	61d3      	str	r3, [r2, #28]
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_TIM_Base_MspInit+0x90>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	201d      	movs	r0, #29
 8002fbc:	f001 fc2d 	bl	800481a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fc0:	201d      	movs	r0, #29
 8002fc2:	f001 fc46 	bl	8004852 <HAL_NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40000400 	.word	0x40000400

08002fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <HAL_TIM_MspPostInit+0x5c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d118      	bne.n	800302e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_TIM_MspPostInit+0x60>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_TIM_MspPostInit+0x60>)
 8003002:	f043 0308 	orr.w	r3, r3, #8
 8003006:	6193      	str	r3, [r2, #24]
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_TIM_MspPostInit+0x60>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 8003014:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003018:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2302      	movs	r3, #2
 8003020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	4619      	mov	r1, r3
 8003028:	4805      	ldr	r0, [pc, #20]	; (8003040 <HAL_TIM_MspPostInit+0x64>)
 800302a:	f001 fe1b 	bl	8004c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40021000 	.word	0x40021000
 8003040:	40010c00 	.word	0x40010c00

08003044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0310 	add.w	r3, r7, #16
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_UART_MspInit+0x8c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d131      	bne.n	80030c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_UART_MspInit+0x90>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <HAL_UART_MspInit+0x90>)
 800306a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800306e:	6193      	str	r3, [r2, #24]
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_UART_MspInit+0x90>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307c:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_UART_MspInit+0x90>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <HAL_UART_MspInit+0x90>)
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	6193      	str	r3, [r2, #24]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_UART_MspInit+0x90>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800309e:	2303      	movs	r3, #3
 80030a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	4619      	mov	r1, r3
 80030a8:	480b      	ldr	r0, [pc, #44]	; (80030d8 <HAL_UART_MspInit+0x94>)
 80030aa:	f001 fddb 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	4619      	mov	r1, r3
 80030c2:	4805      	ldr	r0, [pc, #20]	; (80030d8 <HAL_UART_MspInit+0x94>)
 80030c4:	f001 fdce 	bl	8004c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030c8:	bf00      	nop
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40013800 	.word	0x40013800
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40010800 	.word	0x40010800

080030dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030e0:	e7fe      	b.n	80030e0 <NMI_Handler+0x4>

080030e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030e6:	e7fe      	b.n	80030e6 <HardFault_Handler+0x4>

080030e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ec:	e7fe      	b.n	80030ec <MemManage_Handler+0x4>

080030ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030f2:	e7fe      	b.n	80030f2 <BusFault_Handler+0x4>

080030f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030f8:	e7fe      	b.n	80030f8 <UsageFault_Handler+0x4>

080030fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003122:	f000 f893 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <DMA1_Channel1_IRQHandler+0x10>)
 8003132:	f001 fc63 	bl	80049fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200000bc 	.word	0x200000bc

08003140 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003146:	f001 f87f 	bl	8004248 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000100 	.word	0x20000100

08003154 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <TIM3_IRQHandler+0x10>)
 800315a:	f002 fdf7 	bl	8005d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200001b8 	.word	0x200001b8

08003168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003174:	f7ff fff8 	bl	8003168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003178:	480b      	ldr	r0, [pc, #44]	; (80031a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800317a:	490c      	ldr	r1, [pc, #48]	; (80031ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003180:	e002      	b.n	8003188 <LoopCopyDataInit>

08003182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003186:	3304      	adds	r3, #4

08003188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800318a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800318c:	d3f9      	bcc.n	8003182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003190:	4c09      	ldr	r4, [pc, #36]	; (80031b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003194:	e001      	b.n	800319a <LoopFillZerobss>

08003196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003198:	3204      	adds	r2, #4

0800319a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800319a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800319c:	d3fb      	bcc.n	8003196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800319e:	f003 fd75 	bl	8006c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031a2:	f7ff f9bd 	bl	8002520 <main>
  bx lr
 80031a6:	4770      	bx	lr
  ldr r0, =_sdata
 80031a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80031b0:	08006ec4 	.word	0x08006ec4
  ldr r2, =_sbss
 80031b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80031b8:	20002548 	.word	0x20002548

080031bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <ADC1_2_IRQHandler>
	...

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_Init+0x28>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_Init+0x28>)
 80031ca:	f043 0310 	orr.w	r3, r3, #16
 80031ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d0:	2003      	movs	r0, #3
 80031d2:	f001 fb17 	bl	8004804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d6:	200f      	movs	r0, #15
 80031d8:	f000 f808 	bl	80031ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031dc:	f7ff fdc2 	bl	8002d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x54>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_InitTick+0x58>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f001 fb2f 	bl	800486e <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00e      	b.n	8003238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d80a      	bhi.n	8003236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f001 faf7 	bl	800481a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_InitTick+0x5c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000000 	.word	0x20000000
 8003244:	20000008 	.word	0x20000008
 8003248:	20000004 	.word	0x20000004

0800324c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x1c>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_IncTick+0x20>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a03      	ldr	r2, [pc, #12]	; (800326c <HAL_IncTick+0x20>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	20000008 	.word	0x20000008
 800326c:	20002544 	.word	0x20002544

08003270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <HAL_GetTick+0x10>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	20002544 	.word	0x20002544

08003284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff fff0 	bl	8003270 <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d005      	beq.n	80032aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_Delay+0x44>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032aa:	bf00      	nop
 80032ac:	f7ff ffe0 	bl	8003270 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d8f7      	bhi.n	80032ac <HAL_Delay+0x28>
  {
  }
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000008 	.word	0x20000008

080032cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0be      	b.n	800346c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fd5c 	bl	8002dc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 faf5 	bl	8003900 <ADC_ConversionStop_Disable>
 8003316:	4603      	mov	r3, r0
 8003318:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 8099 	bne.w	800345a <HAL_ADC_Init+0x18e>
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 8095 	bne.w	800345a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003338:	f023 0302 	bic.w	r3, r3, #2
 800333c:	f043 0202 	orr.w	r2, r3, #2
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800334c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7b1b      	ldrb	r3, [r3, #12]
 8003352:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003354:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d003      	beq.n	800336e <HAL_ADC_Init+0xa2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_ADC_Init+0xa8>
 800336e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003372:	e000      	b.n	8003376 <HAL_ADC_Init+0xaa>
 8003374:	2300      	movs	r3, #0
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7d1b      	ldrb	r3, [r3, #20]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d119      	bne.n	80033b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7b1b      	ldrb	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	3b01      	subs	r3, #1
 8003392:	035a      	lsls	r2, r3, #13
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	e00b      	b.n	80033b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_ADC_Init+0x1a8>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	430b      	orrs	r3, r1
 80033de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e8:	d003      	beq.n	80033f2 <HAL_ADC_Init+0x126>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d104      	bne.n	80033fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	051b      	lsls	r3, r3, #20
 80033fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	430a      	orrs	r2, r1
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	4b18      	ldr	r3, [pc, #96]	; (8003478 <HAL_ADC_Init+0x1ac>)
 8003418:	4013      	ands	r3, r2
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	d10b      	bne.n	8003438 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	f043 0201 	orr.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003436:	e018      	b.n	800346a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f023 0312 	bic.w	r3, r3, #18
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003458:	e007      	b.n	800346a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	f043 0210 	orr.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	ffe1f7fd 	.word	0xffe1f7fd
 8003478:	ff1f0efe 	.word	0xff1f0efe

0800347c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a64      	ldr	r2, [pc, #400]	; (8003624 <HAL_ADC_Start_DMA+0x1a8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_ADC_Start_DMA+0x24>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a63      	ldr	r2, [pc, #396]	; (8003628 <HAL_ADC_Start_DMA+0x1ac>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d106      	bne.n	80034ae <HAL_ADC_Start_DMA+0x32>
 80034a0:	4b60      	ldr	r3, [pc, #384]	; (8003624 <HAL_ADC_Start_DMA+0x1a8>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 80b3 	bne.w	8003614 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_Start_DMA+0x40>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0ae      	b.n	800361a <HAL_ADC_Start_DMA+0x19e>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f9c1 	bl	800384c <ADC_Enable>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 809a 	bne.w	800360a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4e      	ldr	r2, [pc, #312]	; (8003628 <HAL_ADC_Start_DMA+0x1ac>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d105      	bne.n	8003500 <HAL_ADC_Start_DMA+0x84>
 80034f4:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_ADC_Start_DMA+0x1a8>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d115      	bne.n	800352c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d026      	beq.n	8003568 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800352a:	e01d      	b.n	8003568 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a39      	ldr	r2, [pc, #228]	; (8003624 <HAL_ADC_Start_DMA+0x1a8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_ADC_Start_DMA+0xd0>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <HAL_ADC_Start_DMA+0x1ac>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d10d      	bne.n	8003568 <HAL_ADC_Start_DMA+0xec>
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_ADC_Start_DMA+0x1a8>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003560:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f023 0206 	bic.w	r2, r3, #6
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003580:	e002      	b.n	8003588 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	4a25      	ldr	r2, [pc, #148]	; (800362c <HAL_ADC_Start_DMA+0x1b0>)
 8003596:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a24      	ldr	r2, [pc, #144]	; (8003630 <HAL_ADC_Start_DMA+0x1b4>)
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_ADC_Start_DMA+0x1b8>)
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0202 	mvn.w	r2, #2
 80035b0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a18      	ldr	r0, [r3, #32]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	334c      	adds	r3, #76	; 0x4c
 80035cc:	4619      	mov	r1, r3
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f001 f9b3 	bl	800493c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80035e4:	d108      	bne.n	80035f8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80035f4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80035f6:	e00f      	b.n	8003618 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003606:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003608:	e006      	b.n	8003618 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003612:	e001      	b.n	8003618 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003618:	7dfb      	ldrb	r3, [r7, #23]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40012400 	.word	0x40012400
 8003628:	40012800 	.word	0x40012800
 800362c:	08003983 	.word	0x08003983
 8003630:	080039ff 	.word	0x080039ff
 8003634:	08003a1b 	.word	0x08003a1b

08003638 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x20>
 8003678:	2302      	movs	r3, #2
 800367a:	e0dc      	b.n	8003836 <HAL_ADC_ConfigChannel+0x1da>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b06      	cmp	r3, #6
 800368a:	d81c      	bhi.n	80036c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	3b05      	subs	r3, #5
 800369e:	221f      	movs	r2, #31
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	4019      	ands	r1, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	3b05      	subs	r3, #5
 80036b8:	fa00 f203 	lsl.w	r2, r0, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34
 80036c4:	e03c      	b.n	8003740 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d81c      	bhi.n	8003708 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	3b23      	subs	r3, #35	; 0x23
 80036e0:	221f      	movs	r2, #31
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	4019      	ands	r1, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	3b23      	subs	r3, #35	; 0x23
 80036fa:	fa00 f203 	lsl.w	r2, r0, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
 8003706:	e01b      	b.n	8003740 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	3b41      	subs	r3, #65	; 0x41
 800371a:	221f      	movs	r2, #31
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	4019      	ands	r1, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	3b41      	subs	r3, #65	; 0x41
 8003734:	fa00 f203 	lsl.w	r2, r0, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b09      	cmp	r3, #9
 8003746:	d91c      	bls.n	8003782 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68d9      	ldr	r1, [r3, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	3b1e      	subs	r3, #30
 800375a:	2207      	movs	r2, #7
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	4019      	ands	r1, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6898      	ldr	r0, [r3, #8]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	3b1e      	subs	r3, #30
 8003774:	fa00 f203 	lsl.w	r2, r0, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]
 8003780:	e019      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6919      	ldr	r1, [r3, #16]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	2207      	movs	r2, #7
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	4019      	ands	r1, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6898      	ldr	r0, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	fa00 f203 	lsl.w	r2, r0, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d003      	beq.n	80037c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037c2:	2b11      	cmp	r3, #17
 80037c4:	d132      	bne.n	800382c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <HAL_ADC_ConfigChannel+0x1e4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d125      	bne.n	800381c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d126      	bne.n	800382c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d11a      	bne.n	800382c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_ADC_ConfigChannel+0x1e8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a13      	ldr	r2, [pc, #76]	; (8003848 <HAL_ADC_ConfigChannel+0x1ec>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	0c9a      	lsrs	r2, r3, #18
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800380c:	e002      	b.n	8003814 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3b01      	subs	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f9      	bne.n	800380e <HAL_ADC_ConfigChannel+0x1b2>
 800381a:	e007      	b.n	800382c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012400 	.word	0x40012400
 8003844:	20000000 	.word	0x20000000
 8003848:	431bde83 	.word	0x431bde83

0800384c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d040      	beq.n	80038ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0201 	orr.w	r2, r2, #1
 8003878:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <ADC_Enable+0xac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <ADC_Enable+0xb0>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	0c9b      	lsrs	r3, r3, #18
 8003886:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003888:	e002      	b.n	8003890 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3b01      	subs	r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f9      	bne.n	800388a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003896:	f7ff fceb 	bl	8003270 <HAL_GetTick>
 800389a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800389c:	e01f      	b.n	80038de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800389e:	f7ff fce7 	bl	8003270 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d918      	bls.n	80038de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d011      	beq.n	80038de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	f043 0210 	orr.w	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e007      	b.n	80038ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d1d8      	bne.n	800389e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000000 	.word	0x20000000
 80038fc:	431bde83 	.word	0x431bde83

08003900 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d12e      	bne.n	8003978 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800392a:	f7ff fca1 	bl	8003270 <HAL_GetTick>
 800392e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003930:	e01b      	b.n	800396a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003932:	f7ff fc9d 	bl	8003270 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d914      	bls.n	800396a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10d      	bne.n	800396a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f043 0201 	orr.w	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d0dc      	beq.n	8003932 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003998:	2b00      	cmp	r3, #0
 800399a:	d127      	bne.n	80039ec <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80039b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80039b6:	d115      	bne.n	80039e4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7ff fe27 	bl	8003638 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80039ea:	e004      	b.n	80039f6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7fe fc53 	bl	80022b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	f043 0204 	orr.w	r2, r3, #4
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff fe02 	bl	800364a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_ADCEx_Calibration_Start+0x1e>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e097      	b.n	8003b9e <HAL_ADCEx_Calibration_Start+0x14e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ff42 	bl	8003900 <ADC_ConversionStop_Disable>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fee3 	bl	800384c <ADC_Enable>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f040 8081 	bne.w	8003b94 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a9a:	f023 0302 	bic.w	r3, r3, #2
 8003a9e:	f043 0202 	orr.w	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003aa6:	4b40      	ldr	r3, [pc, #256]	; (8003ba8 <HAL_ADCEx_Calibration_Start+0x158>)
 8003aa8:	681c      	ldr	r4, [r3, #0]
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f001 ff54 	bl	8005958 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003ab6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003ab8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003aba:	e002      	b.n	8003ac2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f9      	bne.n	8003abc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0208 	orr.w	r2, r2, #8
 8003ad6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003ad8:	f7ff fbca 	bl	8003270 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003ade:	e01b      	b.n	8003b18 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ae0:	f7ff fbc6 	bl	8003270 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b0a      	cmp	r3, #10
 8003aec:	d914      	bls.n	8003b18 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f023 0312 	bic.w	r3, r3, #18
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e042      	b.n	8003b9e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1dc      	bne.n	8003ae0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0204 	orr.w	r2, r2, #4
 8003b34:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003b36:	f7ff fb9b 	bl	8003270 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b3c:	e01b      	b.n	8003b76 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003b3e:	f7ff fb97 	bl	8003270 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b0a      	cmp	r3, #10
 8003b4a:	d914      	bls.n	8003b76 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00d      	beq.n	8003b76 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f023 0312 	bic.w	r3, r3, #18
 8003b62:	f043 0210 	orr.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e013      	b.n	8003b9e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1dc      	bne.n	8003b3e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f023 0303 	bic.w	r3, r3, #3
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000000 	.word	0x20000000

08003bac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0ed      	b.n	8003d9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff f966 	bl	8002e9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be0:	f7ff fb46 	bl	8003270 <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003be6:	e012      	b.n	8003c0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003be8:	f7ff fb42 	bl	8003270 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b0a      	cmp	r3, #10
 8003bf4:	d90b      	bls.n	8003c0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2205      	movs	r2, #5
 8003c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e0c5      	b.n	8003d9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0e5      	beq.n	8003be8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0202 	bic.w	r2, r2, #2
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c2c:	f7ff fb20 	bl	8003270 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c32:	e012      	b.n	8003c5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c34:	f7ff fb1c 	bl	8003270 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b0a      	cmp	r3, #10
 8003c40:	d90b      	bls.n	8003c5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2205      	movs	r2, #5
 8003c52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e09f      	b.n	8003d9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e5      	bne.n	8003c34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7e1b      	ldrb	r3, [r3, #24]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d108      	bne.n	8003c82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e007      	b.n	8003c92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7e5b      	ldrb	r3, [r3, #25]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e007      	b.n	8003cbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7e9b      	ldrb	r3, [r3, #26]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0220 	orr.w	r2, r2, #32
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e007      	b.n	8003ce6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0220 	bic.w	r2, r2, #32
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7edb      	ldrb	r3, [r3, #27]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0210 	bic.w	r2, r2, #16
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e007      	b.n	8003d10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0210 	orr.w	r2, r2, #16
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7f1b      	ldrb	r3, [r3, #28]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d108      	bne.n	8003d2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0208 	orr.w	r2, r2, #8
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e007      	b.n	8003d3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0208 	bic.w	r2, r2, #8
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7f5b      	ldrb	r3, [r3, #29]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d108      	bne.n	8003d54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0204 	orr.w	r2, r2, #4
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e007      	b.n	8003d64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0204 	bic.w	r2, r2, #4
 8003d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	ea42 0103 	orr.w	r1, r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b087      	sub	sp, #28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d003      	beq.n	8003dc8 <HAL_CAN_ConfigFilter+0x26>
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	f040 80aa 	bne.w	8003f1c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2201      	movs	r2, #1
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d123      	bne.n	8003e4a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	401a      	ands	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	3248      	adds	r2, #72	; 0x48
 8003e2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e40:	6979      	ldr	r1, [r7, #20]
 8003e42:	3348      	adds	r3, #72	; 0x48
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d122      	bne.n	8003e98 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3248      	adds	r2, #72	; 0x48
 8003e78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e8e:	6979      	ldr	r1, [r7, #20]
 8003e90:	3348      	adds	r3, #72	; 0x48
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	440b      	add	r3, r1
 8003e96:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	401a      	ands	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003eb2:	e007      	b.n	8003ec4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003ede:	e007      	b.n	8003ef0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f0e:	f023 0201 	bic.w	r2, r3, #1
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e006      	b.n	8003f2a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d12e      	bne.n	8003fa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f60:	f7ff f986 	bl	8003270 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f66:	e012      	b.n	8003f8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f68:	f7ff f982 	bl	8003270 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b0a      	cmp	r3, #10
 8003f74:	d90b      	bls.n	8003f8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2205      	movs	r2, #5
 8003f86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e012      	b.n	8003fb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e006      	b.n	8003fb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d003      	beq.n	8003fe0 <HAL_CAN_GetRxMessage+0x24>
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	f040 8103 	bne.w	80041e6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10e      	bne.n	8004004 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0f7      	b.n	80041f4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e0e8      	b.n	80041f4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	331b      	adds	r3, #27
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	4413      	add	r3, r2
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0204 	and.w	r2, r3, #4
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10c      	bne.n	800405a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	331b      	adds	r3, #27
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	4413      	add	r3, r2
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	0d5b      	lsrs	r3, r3, #21
 8004050:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e00b      	b.n	8004072 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	331b      	adds	r3, #27
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	4413      	add	r3, r2
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	08db      	lsrs	r3, r3, #3
 800406a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	331b      	adds	r3, #27
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	4413      	add	r3, r2
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0202 	and.w	r2, r3, #2
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	331b      	adds	r3, #27
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2208      	movs	r2, #8
 80040a4:	611a      	str	r2, [r3, #16]
 80040a6:	e00b      	b.n	80040c0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	331b      	adds	r3, #27
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4413      	add	r3, r2
 80040b4:	3304      	adds	r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	331b      	adds	r3, #27
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	331b      	adds	r3, #27
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	4413      	add	r3, r2
 80040e4:	3304      	adds	r3, #4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4413      	add	r3, r2
 8004110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0a1a      	lsrs	r2, r3, #8
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	4413      	add	r3, r2
 800412a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0c1a      	lsrs	r2, r3, #16
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	3302      	adds	r3, #2
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	4413      	add	r3, r2
 8004144:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	0e1a      	lsrs	r2, r3, #24
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	3303      	adds	r3, #3
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	4413      	add	r3, r2
 800415e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	3304      	adds	r3, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0a1a      	lsrs	r2, r3, #8
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3305      	adds	r3, #5
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4413      	add	r3, r2
 8004190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	0c1a      	lsrs	r2, r3, #16
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	3306      	adds	r3, #6
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e1a      	lsrs	r2, r3, #24
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	3307      	adds	r3, #7
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d108      	bne.n	80041d2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	e007      	b.n	80041e2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0220 	orr.w	r2, r2, #32
 80041e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e006      	b.n	80041f4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800420e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <HAL_CAN_ActivateNotification+0x1e>
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d109      	bne.n	8004230 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6959      	ldr	r1, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e006      	b.n	800423e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004250:	2300      	movs	r3, #0
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d07c      	beq.n	8004388 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d023      	beq.n	80042e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2201      	movs	r2, #1
 800429e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f983 	bl	80045b6 <HAL_CAN_TxMailbox0CompleteCallback>
 80042b0:	e016      	b.n	80042e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	e00c      	b.n	80042e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
 80042d8:	e002      	b.n	80042e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f986 	bl	80045ec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d024      	beq.n	8004334 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f962 	bl	80045c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8004304:	e016      	b.n	8004334 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004312:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	e00c      	b.n	8004334 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	e002      	b.n	8004334 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f965 	bl	80045fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d024      	beq.n	8004388 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004346:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f941 	bl	80045da <HAL_CAN_TxMailbox2CompleteCallback>
 8004358:	e016      	b.n	8004388 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	e00c      	b.n	8004388 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	e002      	b.n	8004388 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f944 	bl	8004610 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2210      	movs	r2, #16
 80043aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d006      	beq.n	80043ce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2208      	movs	r2, #8
 80043c6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f92a 	bl	8004622 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd ff3b 	bl	8002262 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004406:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2210      	movs	r2, #16
 800440e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00b      	beq.n	8004432 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d006      	beq.n	8004432 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2208      	movs	r2, #8
 800442a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f901 	bl	8004634 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd ff15 	bl	800227a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b00      	cmp	r3, #0
 8004462:	d006      	beq.n	8004472 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2210      	movs	r2, #16
 800446a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8ea 	bl	8004646 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2208      	movs	r2, #8
 800448c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8e2 	bl	8004658 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d07b      	beq.n	8004596 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d072      	beq.n	800458e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f043 0302 	orr.w	r3, r3, #2
 80044de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f043 0304 	orr.w	r3, r3, #4
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004502:	2b00      	cmp	r3, #0
 8004504:	d043      	beq.n	800458e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03e      	beq.n	800458e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004516:	2b60      	cmp	r3, #96	; 0x60
 8004518:	d02b      	beq.n	8004572 <HAL_CAN_IRQHandler+0x32a>
 800451a:	2b60      	cmp	r3, #96	; 0x60
 800451c:	d82e      	bhi.n	800457c <HAL_CAN_IRQHandler+0x334>
 800451e:	2b50      	cmp	r3, #80	; 0x50
 8004520:	d022      	beq.n	8004568 <HAL_CAN_IRQHandler+0x320>
 8004522:	2b50      	cmp	r3, #80	; 0x50
 8004524:	d82a      	bhi.n	800457c <HAL_CAN_IRQHandler+0x334>
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d019      	beq.n	800455e <HAL_CAN_IRQHandler+0x316>
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d826      	bhi.n	800457c <HAL_CAN_IRQHandler+0x334>
 800452e:	2b30      	cmp	r3, #48	; 0x30
 8004530:	d010      	beq.n	8004554 <HAL_CAN_IRQHandler+0x30c>
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d822      	bhi.n	800457c <HAL_CAN_IRQHandler+0x334>
 8004536:	2b10      	cmp	r3, #16
 8004538:	d002      	beq.n	8004540 <HAL_CAN_IRQHandler+0x2f8>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d005      	beq.n	800454a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800453e:	e01d      	b.n	800457c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f043 0308 	orr.w	r3, r3, #8
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004548:	e019      	b.n	800457e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	f043 0310 	orr.w	r3, r3, #16
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004552:	e014      	b.n	800457e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	f043 0320 	orr.w	r3, r3, #32
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800455c:	e00f      	b.n	800457e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004566:	e00a      	b.n	800457e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004570:	e005      	b.n	800457e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800457a:	e000      	b.n	800457e <HAL_CAN_IRQHandler+0x336>
            break;
 800457c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699a      	ldr	r2, [r3, #24]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800458c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2204      	movs	r2, #4
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fd fe73 	bl	8002294 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80045ae:	bf00      	nop
 80045b0:	3728      	adds	r7, #40	; 0x28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr

080045da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr

08004646 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
	...

0800466c <__NVIC_SetPriorityGrouping>:
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004688:	4013      	ands	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	60d3      	str	r3, [r2, #12]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_GetPriorityGrouping>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <__NVIC_GetPriorityGrouping+0x18>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 0307 	and.w	r3, r3, #7
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <__NVIC_EnableIRQ>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db0b      	blt.n	80046fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	f003 021f 	and.w	r2, r3, #31
 80046e8:	4906      	ldr	r1, [pc, #24]	; (8004704 <__NVIC_EnableIRQ+0x34>)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2001      	movs	r0, #1
 80046f2:	fa00 f202 	lsl.w	r2, r0, r2
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	e000e100 	.word	0xe000e100

08004708 <__NVIC_SetPriority>:
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <__NVIC_SetPriority+0x4c>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	440b      	add	r3, r1
 800472c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004730:	e00a      	b.n	8004748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4908      	ldr	r1, [pc, #32]	; (8004758 <__NVIC_SetPriority+0x50>)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	3b04      	subs	r3, #4
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	440b      	add	r3, r1
 8004746:	761a      	strb	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	bc80      	pop	{r7}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <NVIC_EncodePriority>:
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf28      	it	cs
 800477a:	2304      	movcs	r3, #4
 800477c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3304      	adds	r3, #4
 8004782:	2b06      	cmp	r3, #6
 8004784:	d902      	bls.n	800478c <NVIC_EncodePriority+0x30>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3b03      	subs	r3, #3
 800478a:	e000      	b.n	800478e <NVIC_EncodePriority+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	4313      	orrs	r3, r2
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d0:	d301      	bcc.n	80047d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047d2:	2301      	movs	r3, #1
 80047d4:	e00f      	b.n	80047f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047d6:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <SysTick_Config+0x40>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047de:	210f      	movs	r1, #15
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295
 80047e4:	f7ff ff90 	bl	8004708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <SysTick_Config+0x40>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <SysTick_Config+0x40>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	e000e010 	.word	0xe000e010

08004804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff2d 	bl	800466c <__NVIC_SetPriorityGrouping>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	4603      	mov	r3, r0
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800482c:	f7ff ff42 	bl	80046b4 <__NVIC_GetPriorityGrouping>
 8004830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f7ff ff90 	bl	800475c <NVIC_EncodePriority>
 800483c:	4602      	mov	r2, r0
 800483e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ff5f 	bl	8004708 <__NVIC_SetPriority>
}
 800484a:	bf00      	nop
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	4603      	mov	r3, r0
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800485c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff ff35 	bl	80046d0 <__NVIC_EnableIRQ>
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff ffa2 	bl	80047c0 <SysTick_Config>
 800487c:	4603      	mov	r3, r0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e043      	b.n	8004926 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_DMA_Init+0xa8>)
 80048a6:	4413      	add	r3, r2
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <HAL_DMA_Init+0xac>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	009a      	lsls	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <HAL_DMA_Init+0xb0>)
 80048ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80048d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80048d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80048e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	bffdfff8 	.word	0xbffdfff8
 8004934:	cccccccd 	.word	0xcccccccd
 8004938:	40020000 	.word	0x40020000

0800493c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_DMA_Start_IT+0x20>
 8004958:	2302      	movs	r3, #2
 800495a:	e04b      	b.n	80049f4 <HAL_DMA_Start_IT+0xb8>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d13a      	bne.n	80049e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f937 	bl	8004c08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 020e 	orr.w	r2, r2, #14
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e00f      	b.n	80049d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0204 	bic.w	r2, r2, #4
 80049c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 020a 	orr.w	r2, r2, #10
 80049d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	e005      	b.n	80049f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
 80049f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	2204      	movs	r2, #4
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d04f      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0xc8>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04a      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0204 	bic.w	r2, r2, #4
 8004a4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a66      	ldr	r2, [pc, #408]	; (8004bec <HAL_DMA_IRQHandler+0x1f0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d029      	beq.n	8004aaa <HAL_DMA_IRQHandler+0xae>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a65      	ldr	r2, [pc, #404]	; (8004bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0xaa>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a63      	ldr	r2, [pc, #396]	; (8004bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01a      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0xa4>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a62      	ldr	r2, [pc, #392]	; (8004bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d012      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x9e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a60      	ldr	r2, [pc, #384]	; (8004bfc <HAL_DMA_IRQHandler+0x200>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00a      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x98>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5f      	ldr	r2, [pc, #380]	; (8004c00 <HAL_DMA_IRQHandler+0x204>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d102      	bne.n	8004a8e <HAL_DMA_IRQHandler+0x92>
 8004a88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a8c:	e00e      	b.n	8004aac <HAL_DMA_IRQHandler+0xb0>
 8004a8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a92:	e00b      	b.n	8004aac <HAL_DMA_IRQHandler+0xb0>
 8004a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004a98:	e008      	b.n	8004aac <HAL_DMA_IRQHandler+0xb0>
 8004a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a9e:	e005      	b.n	8004aac <HAL_DMA_IRQHandler+0xb0>
 8004aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa4:	e002      	b.n	8004aac <HAL_DMA_IRQHandler+0xb0>
 8004aa6:	2340      	movs	r3, #64	; 0x40
 8004aa8:	e000      	b.n	8004aac <HAL_DMA_IRQHandler+0xb0>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	4a55      	ldr	r2, [pc, #340]	; (8004c04 <HAL_DMA_IRQHandler+0x208>)
 8004aae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8094 	beq.w	8004be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004ac2:	e08e      	b.n	8004be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	2202      	movs	r2, #2
 8004aca:	409a      	lsls	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d056      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x186>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d051      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 020a 	bic.w	r2, r2, #10
 8004afa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a38      	ldr	r2, [pc, #224]	; (8004bec <HAL_DMA_IRQHandler+0x1f0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d029      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x166>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a37      	ldr	r2, [pc, #220]	; (8004bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d022      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x162>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a35      	ldr	r2, [pc, #212]	; (8004bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01a      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x15c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a34      	ldr	r2, [pc, #208]	; (8004bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d012      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x156>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a32      	ldr	r2, [pc, #200]	; (8004bfc <HAL_DMA_IRQHandler+0x200>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00a      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x150>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a31      	ldr	r2, [pc, #196]	; (8004c00 <HAL_DMA_IRQHandler+0x204>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d102      	bne.n	8004b46 <HAL_DMA_IRQHandler+0x14a>
 8004b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b44:	e00e      	b.n	8004b64 <HAL_DMA_IRQHandler+0x168>
 8004b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4a:	e00b      	b.n	8004b64 <HAL_DMA_IRQHandler+0x168>
 8004b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b50:	e008      	b.n	8004b64 <HAL_DMA_IRQHandler+0x168>
 8004b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b56:	e005      	b.n	8004b64 <HAL_DMA_IRQHandler+0x168>
 8004b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5c:	e002      	b.n	8004b64 <HAL_DMA_IRQHandler+0x168>
 8004b5e:	2320      	movs	r3, #32
 8004b60:	e000      	b.n	8004b64 <HAL_DMA_IRQHandler+0x168>
 8004b62:	2302      	movs	r3, #2
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <HAL_DMA_IRQHandler+0x208>)
 8004b66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d034      	beq.n	8004be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b80:	e02f      	b.n	8004be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2208      	movs	r2, #8
 8004b88:	409a      	lsls	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d028      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x1e8>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d023      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 020e 	bic.w	r2, r2, #14
 8004baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
    }
  }
  return;
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
}
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40020008 	.word	0x40020008
 8004bf0:	4002001c 	.word	0x4002001c
 8004bf4:	40020030 	.word	0x40020030
 8004bf8:	40020044 	.word	0x40020044
 8004bfc:	40020058 	.word	0x40020058
 8004c00:	4002006c 	.word	0x4002006c
 8004c04:	40020000 	.word	0x40020000

08004c08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	2101      	movs	r1, #1
 8004c20:	fa01 f202 	lsl.w	r2, r1, r2
 8004c24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d108      	bne.n	8004c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c46:	e007      	b.n	8004c58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]
}
 8004c58:	bf00      	nop
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr
	...

08004c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b08b      	sub	sp, #44	; 0x2c
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c76:	e169      	b.n	8004f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c78:	2201      	movs	r2, #1
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	f040 8158 	bne.w	8004f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4a9a      	ldr	r2, [pc, #616]	; (8004f04 <HAL_GPIO_Init+0x2a0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d05e      	beq.n	8004d5e <HAL_GPIO_Init+0xfa>
 8004ca0:	4a98      	ldr	r2, [pc, #608]	; (8004f04 <HAL_GPIO_Init+0x2a0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d875      	bhi.n	8004d92 <HAL_GPIO_Init+0x12e>
 8004ca6:	4a98      	ldr	r2, [pc, #608]	; (8004f08 <HAL_GPIO_Init+0x2a4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d058      	beq.n	8004d5e <HAL_GPIO_Init+0xfa>
 8004cac:	4a96      	ldr	r2, [pc, #600]	; (8004f08 <HAL_GPIO_Init+0x2a4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d86f      	bhi.n	8004d92 <HAL_GPIO_Init+0x12e>
 8004cb2:	4a96      	ldr	r2, [pc, #600]	; (8004f0c <HAL_GPIO_Init+0x2a8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d052      	beq.n	8004d5e <HAL_GPIO_Init+0xfa>
 8004cb8:	4a94      	ldr	r2, [pc, #592]	; (8004f0c <HAL_GPIO_Init+0x2a8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d869      	bhi.n	8004d92 <HAL_GPIO_Init+0x12e>
 8004cbe:	4a94      	ldr	r2, [pc, #592]	; (8004f10 <HAL_GPIO_Init+0x2ac>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d04c      	beq.n	8004d5e <HAL_GPIO_Init+0xfa>
 8004cc4:	4a92      	ldr	r2, [pc, #584]	; (8004f10 <HAL_GPIO_Init+0x2ac>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d863      	bhi.n	8004d92 <HAL_GPIO_Init+0x12e>
 8004cca:	4a92      	ldr	r2, [pc, #584]	; (8004f14 <HAL_GPIO_Init+0x2b0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d046      	beq.n	8004d5e <HAL_GPIO_Init+0xfa>
 8004cd0:	4a90      	ldr	r2, [pc, #576]	; (8004f14 <HAL_GPIO_Init+0x2b0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d85d      	bhi.n	8004d92 <HAL_GPIO_Init+0x12e>
 8004cd6:	2b12      	cmp	r3, #18
 8004cd8:	d82a      	bhi.n	8004d30 <HAL_GPIO_Init+0xcc>
 8004cda:	2b12      	cmp	r3, #18
 8004cdc:	d859      	bhi.n	8004d92 <HAL_GPIO_Init+0x12e>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <HAL_GPIO_Init+0x80>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d5f 	.word	0x08004d5f
 8004ce8:	08004d39 	.word	0x08004d39
 8004cec:	08004d4b 	.word	0x08004d4b
 8004cf0:	08004d8d 	.word	0x08004d8d
 8004cf4:	08004d93 	.word	0x08004d93
 8004cf8:	08004d93 	.word	0x08004d93
 8004cfc:	08004d93 	.word	0x08004d93
 8004d00:	08004d93 	.word	0x08004d93
 8004d04:	08004d93 	.word	0x08004d93
 8004d08:	08004d93 	.word	0x08004d93
 8004d0c:	08004d93 	.word	0x08004d93
 8004d10:	08004d93 	.word	0x08004d93
 8004d14:	08004d93 	.word	0x08004d93
 8004d18:	08004d93 	.word	0x08004d93
 8004d1c:	08004d93 	.word	0x08004d93
 8004d20:	08004d93 	.word	0x08004d93
 8004d24:	08004d93 	.word	0x08004d93
 8004d28:	08004d41 	.word	0x08004d41
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	4a79      	ldr	r2, [pc, #484]	; (8004f18 <HAL_GPIO_Init+0x2b4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d36:	e02c      	b.n	8004d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	623b      	str	r3, [r7, #32]
          break;
 8004d3e:	e029      	b.n	8004d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	623b      	str	r3, [r7, #32]
          break;
 8004d48:	e024      	b.n	8004d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	623b      	str	r3, [r7, #32]
          break;
 8004d52:	e01f      	b.n	8004d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	623b      	str	r3, [r7, #32]
          break;
 8004d5c:	e01a      	b.n	8004d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d66:	2304      	movs	r3, #4
 8004d68:	623b      	str	r3, [r7, #32]
          break;
 8004d6a:	e013      	b.n	8004d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d74:	2308      	movs	r3, #8
 8004d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	611a      	str	r2, [r3, #16]
          break;
 8004d7e:	e009      	b.n	8004d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d80:	2308      	movs	r3, #8
 8004d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	615a      	str	r2, [r3, #20]
          break;
 8004d8a:	e003      	b.n	8004d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	623b      	str	r3, [r7, #32]
          break;
 8004d90:	e000      	b.n	8004d94 <HAL_GPIO_Init+0x130>
          break;
 8004d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2bff      	cmp	r3, #255	; 0xff
 8004d98:	d801      	bhi.n	8004d9e <HAL_GPIO_Init+0x13a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	e001      	b.n	8004da2 <HAL_GPIO_Init+0x13e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2bff      	cmp	r3, #255	; 0xff
 8004da8:	d802      	bhi.n	8004db0 <HAL_GPIO_Init+0x14c>
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	e002      	b.n	8004db6 <HAL_GPIO_Init+0x152>
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	3b08      	subs	r3, #8
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	210f      	movs	r1, #15
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	6a39      	ldr	r1, [r7, #32]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80b1 	beq.w	8004f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004de4:	4b4d      	ldr	r3, [pc, #308]	; (8004f1c <HAL_GPIO_Init+0x2b8>)
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	4a4c      	ldr	r2, [pc, #304]	; (8004f1c <HAL_GPIO_Init+0x2b8>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6193      	str	r3, [r2, #24]
 8004df0:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <HAL_GPIO_Init+0x2b8>)
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004dfc:	4a48      	ldr	r2, [pc, #288]	; (8004f20 <HAL_GPIO_Init+0x2bc>)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	3302      	adds	r3, #2
 8004e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <HAL_GPIO_Init+0x2c0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_GPIO_Init+0x1ec>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <HAL_GPIO_Init+0x2c4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00d      	beq.n	8004e4c <HAL_GPIO_Init+0x1e8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3e      	ldr	r2, [pc, #248]	; (8004f2c <HAL_GPIO_Init+0x2c8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d007      	beq.n	8004e48 <HAL_GPIO_Init+0x1e4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3d      	ldr	r2, [pc, #244]	; (8004f30 <HAL_GPIO_Init+0x2cc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <HAL_GPIO_Init+0x1e0>
 8004e40:	2303      	movs	r3, #3
 8004e42:	e006      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e44:	2304      	movs	r3, #4
 8004e46:	e004      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e002      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_GPIO_Init+0x1ee>
 8004e50:	2300      	movs	r3, #0
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	f002 0203 	and.w	r2, r2, #3
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	4093      	lsls	r3, r2
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e62:	492f      	ldr	r1, [pc, #188]	; (8004f20 <HAL_GPIO_Init+0x2bc>)
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3302      	adds	r3, #2
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d006      	beq.n	8004e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e7c:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	492c      	ldr	r1, [pc, #176]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]
 8004e88:	e006      	b.n	8004e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e8a:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	4928      	ldr	r1, [pc, #160]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ea4:	4b23      	ldr	r3, [pc, #140]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	4922      	ldr	r1, [pc, #136]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60cb      	str	r3, [r1, #12]
 8004eb0:	e006      	b.n	8004ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004eb2:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	491e      	ldr	r1, [pc, #120]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d006      	beq.n	8004eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4918      	ldr	r1, [pc, #96]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	e006      	b.n	8004ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004eda:	4b16      	ldr	r3, [pc, #88]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	4914      	ldr	r1, [pc, #80]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d021      	beq.n	8004f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	490e      	ldr	r1, [pc, #56]	; (8004f34 <HAL_GPIO_Init+0x2d0>)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
 8004f00:	e021      	b.n	8004f46 <HAL_GPIO_Init+0x2e2>
 8004f02:	bf00      	nop
 8004f04:	10320000 	.word	0x10320000
 8004f08:	10310000 	.word	0x10310000
 8004f0c:	10220000 	.word	0x10220000
 8004f10:	10210000 	.word	0x10210000
 8004f14:	10120000 	.word	0x10120000
 8004f18:	10110000 	.word	0x10110000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40010800 	.word	0x40010800
 8004f28:	40010c00 	.word	0x40010c00
 8004f2c:	40011000 	.word	0x40011000
 8004f30:	40011400 	.word	0x40011400
 8004f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_GPIO_Init+0x304>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	4909      	ldr	r1, [pc, #36]	; (8004f68 <HAL_GPIO_Init+0x304>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	3301      	adds	r3, #1
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f47f ae8e 	bne.w	8004c78 <HAL_GPIO_Init+0x14>
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	372c      	adds	r7, #44	; 0x2c
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr
 8004f68:	40010400 	.word	0x40010400

08004f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e001      	b.n	8004f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	807b      	strh	r3, [r7, #2]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004faa:	787b      	ldrb	r3, [r7, #1]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fb0:	887a      	ldrh	r2, [r7, #2]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004fb6:	e003      	b.n	8004fc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	041a      	lsls	r2, r3, #16
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	611a      	str	r2, [r3, #16]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e272      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8087 	beq.w	80050fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fec:	4b92      	ldr	r3, [pc, #584]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d00c      	beq.n	8005012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ff8:	4b8f      	ldr	r3, [pc, #572]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	2b08      	cmp	r3, #8
 8005002:	d112      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
 8005004:	4b8c      	ldr	r3, [pc, #560]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d10b      	bne.n	800502a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005012:	4b89      	ldr	r3, [pc, #548]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d06c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x12c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d168      	bne.n	80050f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e24c      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005032:	d106      	bne.n	8005042 <HAL_RCC_OscConfig+0x76>
 8005034:	4b80      	ldr	r3, [pc, #512]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a7f      	ldr	r2, [pc, #508]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e02e      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10c      	bne.n	8005064 <HAL_RCC_OscConfig+0x98>
 800504a:	4b7b      	ldr	r3, [pc, #492]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7a      	ldr	r2, [pc, #488]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	4b78      	ldr	r3, [pc, #480]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a77      	ldr	r2, [pc, #476]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800505c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e01d      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0xbc>
 800506e:	4b72      	ldr	r3, [pc, #456]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a71      	ldr	r2, [pc, #452]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6e      	ldr	r2, [pc, #440]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0xd4>
 8005088:	4b6b      	ldr	r3, [pc, #428]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a6a      	ldr	r2, [pc, #424]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b68      	ldr	r3, [pc, #416]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a67      	ldr	r2, [pc, #412]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fe f8e2 	bl	8003270 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fe f8de 	bl	8003270 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e200      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0xe4>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7fe f8ce 	bl	8003270 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d8:	f7fe f8ca 	bl	8003270 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e1ec      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	4b53      	ldr	r3, [pc, #332]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0x10c>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d063      	beq.n	80051ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005106:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005112:	4b49      	ldr	r3, [pc, #292]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b08      	cmp	r3, #8
 800511c:	d11c      	bne.n	8005158 <HAL_RCC_OscConfig+0x18c>
 800511e:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d116      	bne.n	8005158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_RCC_OscConfig+0x176>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e1c0      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005142:	4b3d      	ldr	r3, [pc, #244]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4939      	ldr	r1, [pc, #228]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	e03a      	b.n	80051ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005160:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCC_OscConfig+0x270>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005166:	f7fe f883 	bl	8003270 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516e:	f7fe f87f 	bl	8003270 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e1a1      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4927      	ldr	r1, [pc, #156]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	e015      	b.n	80051ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <HAL_RCC_OscConfig+0x270>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fe f862 	bl	8003270 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b0:	f7fe f85e 	bl	8003270 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e180      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d03a      	beq.n	8005250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d019      	beq.n	8005216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fe f842 	bl	8003270 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f0:	f7fe f83e 	bl	8003270 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e160      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <HAL_RCC_OscConfig+0x26c>)
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800520e:	2001      	movs	r0, #1
 8005210:	f000 face 	bl	80057b0 <RCC_Delay>
 8005214:	e01c      	b.n	8005250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005216:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <HAL_RCC_OscConfig+0x274>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521c:	f7fe f828 	bl	8003270 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005222:	e00f      	b.n	8005244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005224:	f7fe f824 	bl	8003270 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d908      	bls.n	8005244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e146      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	42420000 	.word	0x42420000
 8005240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	4b92      	ldr	r3, [pc, #584]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e9      	bne.n	8005224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a6 	beq.w	80053aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005262:	4b8b      	ldr	r3, [pc, #556]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b88      	ldr	r3, [pc, #544]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4a87      	ldr	r2, [pc, #540]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	61d3      	str	r3, [r2, #28]
 800527a:	4b85      	ldr	r3, [pc, #532]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b82      	ldr	r3, [pc, #520]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d118      	bne.n	80052c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b7f      	ldr	r3, [pc, #508]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7e      	ldr	r2, [pc, #504]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fd ffe5 	bl	8003270 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fd ffe1 	bl	8003270 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b64      	cmp	r3, #100	; 0x64
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e103      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052bc:	4b75      	ldr	r3, [pc, #468]	; (8005494 <HAL_RCC_OscConfig+0x4c8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x312>
 80052d0:	4b6f      	ldr	r3, [pc, #444]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	4a6e      	ldr	r2, [pc, #440]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6213      	str	r3, [r2, #32]
 80052dc:	e02d      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x334>
 80052e6:	4b6a      	ldr	r3, [pc, #424]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4a69      	ldr	r2, [pc, #420]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	6213      	str	r3, [r2, #32]
 80052f2:	4b67      	ldr	r3, [pc, #412]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	4a66      	ldr	r2, [pc, #408]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	6213      	str	r3, [r2, #32]
 80052fe:	e01c      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b05      	cmp	r3, #5
 8005306:	d10c      	bne.n	8005322 <HAL_RCC_OscConfig+0x356>
 8005308:	4b61      	ldr	r3, [pc, #388]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	4a60      	ldr	r2, [pc, #384]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800530e:	f043 0304 	orr.w	r3, r3, #4
 8005312:	6213      	str	r3, [r2, #32]
 8005314:	4b5e      	ldr	r3, [pc, #376]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4a5d      	ldr	r2, [pc, #372]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6213      	str	r3, [r2, #32]
 8005320:	e00b      	b.n	800533a <HAL_RCC_OscConfig+0x36e>
 8005322:	4b5b      	ldr	r3, [pc, #364]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	4a5a      	ldr	r2, [pc, #360]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	6213      	str	r3, [r2, #32]
 800532e:	4b58      	ldr	r3, [pc, #352]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	4a57      	ldr	r2, [pc, #348]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	f023 0304 	bic.w	r3, r3, #4
 8005338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d015      	beq.n	800536e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005342:	f7fd ff95 	bl	8003270 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	e00a      	b.n	8005360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534a:	f7fd ff91 	bl	8003270 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e0b1      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ee      	beq.n	800534a <HAL_RCC_OscConfig+0x37e>
 800536c:	e014      	b.n	8005398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536e:	f7fd ff7f 	bl	8003270 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005374:	e00a      	b.n	800538c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fd ff7b 	bl	8003270 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e09b      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538c:	4b40      	ldr	r3, [pc, #256]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ee      	bne.n	8005376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539e:	4b3c      	ldr	r3, [pc, #240]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8087 	beq.w	80054c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b4:	4b36      	ldr	r3, [pc, #216]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d061      	beq.n	8005484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d146      	bne.n	8005456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_RCC_OscConfig+0x4cc>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fd ff4f 	bl	8003270 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fd ff4b 	bl	8003270 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e06d      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e8:	4b29      	ldr	r3, [pc, #164]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d108      	bne.n	8005410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053fe:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4921      	ldr	r1, [pc, #132]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005410:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a19      	ldr	r1, [r3, #32]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	430b      	orrs	r3, r1
 8005422:	491b      	ldr	r1, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	4313      	orrs	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <HAL_RCC_OscConfig+0x4cc>)
 800542a:	2201      	movs	r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542e:	f7fd ff1f 	bl	8003270 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005436:	f7fd ff1b 	bl	8003270 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e03d      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005448:	4b11      	ldr	r3, [pc, #68]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCC_OscConfig+0x46a>
 8005454:	e035      	b.n	80054c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_RCC_OscConfig+0x4cc>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545c:	f7fd ff08 	bl	8003270 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005464:	f7fd ff04 	bl	8003270 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e026      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_RCC_OscConfig+0x4c4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0x498>
 8005482:	e01e      	b.n	80054c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d107      	bne.n	800549c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e019      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
 8005490:	40021000 	.word	0x40021000
 8005494:	40007000 	.word	0x40007000
 8005498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_OscConfig+0x500>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d106      	bne.n	80054be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000

080054d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0d0      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e4:	4b6a      	ldr	r3, [pc, #424]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d910      	bls.n	8005514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f2:	4b67      	ldr	r3, [pc, #412]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 0207 	bic.w	r2, r3, #7
 80054fa:	4965      	ldr	r1, [pc, #404]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4313      	orrs	r3, r2
 8005500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005502:	4b63      	ldr	r3, [pc, #396]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0b8      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d020      	beq.n	8005562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800552c:	4b59      	ldr	r3, [pc, #356]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a58      	ldr	r2, [pc, #352]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005544:	4b53      	ldr	r3, [pc, #332]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a52      	ldr	r2, [pc, #328]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800554e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005550:	4b50      	ldr	r3, [pc, #320]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	494d      	ldr	r1, [pc, #308]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800555e:	4313      	orrs	r3, r2
 8005560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d040      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005576:	4b47      	ldr	r3, [pc, #284]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d115      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e07f      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800558e:	4b41      	ldr	r3, [pc, #260]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e073      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559e:	4b3d      	ldr	r3, [pc, #244]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e06b      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ae:	4b39      	ldr	r3, [pc, #228]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f023 0203 	bic.w	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4936      	ldr	r1, [pc, #216]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c0:	f7fd fe56 	bl	8003270 <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	e00a      	b.n	80055de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fd fe52 	bl	8003270 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e053      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	4b2d      	ldr	r3, [pc, #180]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 020c 	and.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1eb      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d210      	bcs.n	8005620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 0207 	bic.w	r2, r3, #7
 8005606:	4922      	ldr	r1, [pc, #136]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	4313      	orrs	r3, r2
 800560c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e032      	b.n	8005686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d008      	beq.n	800563e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4916      	ldr	r1, [pc, #88]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	490e      	ldr	r1, [pc, #56]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800565e:	f000 f821 	bl	80056a4 <HAL_RCC_GetSysClockFreq>
 8005662:	4602      	mov	r2, r0
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	490a      	ldr	r1, [pc, #40]	; (8005698 <HAL_RCC_ClockConfig+0x1c8>)
 8005670:	5ccb      	ldrb	r3, [r1, r3]
 8005672:	fa22 f303 	lsr.w	r3, r2, r3
 8005676:	4a09      	ldr	r2, [pc, #36]	; (800569c <HAL_RCC_ClockConfig+0x1cc>)
 8005678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_ClockConfig+0x1d0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f7fd fdb4 	bl	80031ec <HAL_InitTick>

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40022000 	.word	0x40022000
 8005694:	40021000 	.word	0x40021000
 8005698:	08006e7c 	.word	0x08006e7c
 800569c:	20000000 	.word	0x20000000
 80056a0:	20000004 	.word	0x20000004

080056a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056be:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <HAL_RCC_GetSysClockFreq+0x94>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d002      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x30>
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d003      	beq.n	80056da <HAL_RCC_GetSysClockFreq+0x36>
 80056d2:	e027      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056d4:	4b19      	ldr	r3, [pc, #100]	; (800573c <HAL_RCC_GetSysClockFreq+0x98>)
 80056d6:	613b      	str	r3, [r7, #16]
      break;
 80056d8:	e027      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	0c9b      	lsrs	r3, r3, #18
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	4a17      	ldr	r2, [pc, #92]	; (8005740 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056e4:	5cd3      	ldrb	r3, [r2, r3]
 80056e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <HAL_RCC_GetSysClockFreq+0x94>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	0c5b      	lsrs	r3, r3, #17
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	4a11      	ldr	r2, [pc, #68]	; (8005744 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056fe:	5cd3      	ldrb	r3, [r2, r3]
 8005700:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a0d      	ldr	r2, [pc, #52]	; (800573c <HAL_RCC_GetSysClockFreq+0x98>)
 8005706:	fb03 f202 	mul.w	r2, r3, r2
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e004      	b.n	800571e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0c      	ldr	r2, [pc, #48]	; (8005748 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005718:	fb02 f303 	mul.w	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	613b      	str	r3, [r7, #16]
      break;
 8005722:	e002      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCC_GetSysClockFreq+0x98>)
 8005726:	613b      	str	r3, [r7, #16]
      break;
 8005728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572a:	693b      	ldr	r3, [r7, #16]
}
 800572c:	4618      	mov	r0, r3
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40021000 	.word	0x40021000
 800573c:	007a1200 	.word	0x007a1200
 8005740:	08006e94 	.word	0x08006e94
 8005744:	08006ea4 	.word	0x08006ea4
 8005748:	003d0900 	.word	0x003d0900

0800574c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005750:	4b02      	ldr	r3, [pc, #8]	; (800575c <HAL_RCC_GetHCLKFreq+0x10>)
 8005752:	681b      	ldr	r3, [r3, #0]
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr
 800575c:	20000000 	.word	0x20000000

08005760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005764:	f7ff fff2 	bl	800574c <HAL_RCC_GetHCLKFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40021000 	.word	0x40021000
 8005784:	08006e8c 	.word	0x08006e8c

08005788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800578c:	f7ff ffde 	bl	800574c <HAL_RCC_GetHCLKFreq>
 8005790:	4602      	mov	r2, r0
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	0adb      	lsrs	r3, r3, #11
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	4903      	ldr	r1, [pc, #12]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800579e:	5ccb      	ldrb	r3, [r1, r3]
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40021000 	.word	0x40021000
 80057ac:	08006e8c 	.word	0x08006e8c

080057b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <RCC_Delay+0x34>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <RCC_Delay+0x38>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	0a5b      	lsrs	r3, r3, #9
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057cc:	bf00      	nop
  }
  while (Delay --);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	60fa      	str	r2, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1f9      	bne.n	80057cc <RCC_Delay+0x1c>
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	20000000 	.word	0x20000000
 80057e8:	10624dd3 	.word	0x10624dd3

080057ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d07d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800580c:	4b4f      	ldr	r3, [pc, #316]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	4b4c      	ldr	r3, [pc, #304]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	4a4b      	ldr	r2, [pc, #300]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	61d3      	str	r3, [r2, #28]
 8005824:	4b49      	ldr	r3, [pc, #292]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005834:	4b46      	ldr	r3, [pc, #280]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d118      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005840:	4b43      	ldr	r3, [pc, #268]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a42      	ldr	r2, [pc, #264]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584c:	f7fd fd10 	bl	8003270 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005852:	e008      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005854:	f7fd fd0c 	bl	8003270 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	; 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e06d      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005866:	4b3a      	ldr	r3, [pc, #232]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005872:	4b36      	ldr	r3, [pc, #216]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02e      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	429a      	cmp	r2, r3
 800588e:	d027      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005890:	4b2e      	ldr	r3, [pc, #184]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005898:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589a:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058a0:	4b2c      	ldr	r3, [pc, #176]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058a6:	4a29      	ldr	r2, [pc, #164]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d014      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b6:	f7fd fcdb 	bl	8003270 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058bc:	e00a      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058be:	f7fd fcd7 	bl	8003270 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e036      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d4:	4b1d      	ldr	r3, [pc, #116]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0ee      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e0:	4b1a      	ldr	r3, [pc, #104]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	4917      	ldr	r1, [pc, #92]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d105      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	4a13      	ldr	r2, [pc, #76]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005902:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d008      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005910:	4b0e      	ldr	r3, [pc, #56]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	490b      	ldr	r1, [pc, #44]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	4904      	ldr	r1, [pc, #16]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593c:	4313      	orrs	r3, r2
 800593e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000
 8005950:	40007000 	.word	0x40007000
 8005954:	42420440 	.word	0x42420440

08005958 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	2300      	movs	r3, #0
 8005972:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b10      	cmp	r3, #16
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b10      	cmp	r3, #16
 800597e:	f200 808a 	bhi.w	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d045      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d075      	beq.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800598e:	e082      	b.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005990:	4b46      	ldr	r3, [pc, #280]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005996:	4b45      	ldr	r3, [pc, #276]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d07b      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	0c9b      	lsrs	r3, r3, #18
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	4a41      	ldr	r2, [pc, #260]	; (8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80059ac:	5cd3      	ldrb	r3, [r2, r3]
 80059ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d015      	beq.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059ba:	4b3c      	ldr	r3, [pc, #240]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	0c5b      	lsrs	r3, r3, #17
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	4a3b      	ldr	r2, [pc, #236]	; (8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80059c6:	5cd3      	ldrb	r3, [r2, r3]
 80059c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80059d4:	4a38      	ldr	r2, [pc, #224]	; (8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	e004      	b.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4a34      	ldr	r2, [pc, #208]	; (8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80059f0:	4b2e      	ldr	r3, [pc, #184]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fc:	d102      	bne.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	61bb      	str	r3, [r7, #24]
      break;
 8005a02:	e04a      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	4a2d      	ldr	r2, [pc, #180]	; (8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	61bb      	str	r3, [r7, #24]
      break;
 8005a12:	e042      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a24:	d108      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e01f      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a42:	d109      	bne.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005a50:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e00f      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a62:	d11c      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a64:	4b11      	ldr	r3, [pc, #68]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d016      	beq.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005a70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005a74:	61bb      	str	r3, [r7, #24]
      break;
 8005a76:	e012      	b.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005a78:	e011      	b.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005a7a:	f7ff fe85 	bl	8005788 <HAL_RCC_GetPCLK2Freq>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	0b9b      	lsrs	r3, r3, #14
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	61bb      	str	r3, [r7, #24]
      break;
 8005a94:	e004      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a96:	bf00      	nop
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005a9e:	bf00      	nop
    }
  }
  return (frequency);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	08006ea8 	.word	0x08006ea8
 8005ab4:	08006eb8 	.word	0x08006eb8
 8005ab8:	007a1200 	.word	0x007a1200
 8005abc:	003d0900 	.word	0x003d0900
 8005ac0:	aaaaaaab 	.word	0xaaaaaaab

08005ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e041      	b.n	8005b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fd fa2a 	bl	8002f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f000 fbd8 	bl	80062b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d001      	beq.n	8005b7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e032      	b.n	8005be2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a18      	ldr	r2, [pc, #96]	; (8005bec <HAL_TIM_Base_Start+0x88>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <HAL_TIM_Base_Start+0x48>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b96:	d009      	beq.n	8005bac <HAL_TIM_Base_Start+0x48>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <HAL_TIM_Base_Start+0x8c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_Base_Start+0x48>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <HAL_TIM_Base_Start+0x90>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d111      	bne.n	8005bd0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d010      	beq.n	8005be0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	e007      	b.n	8005be0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800

08005bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d001      	beq.n	8005c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e03a      	b.n	8005c86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0201 	orr.w	r2, r2, #1
 8005c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <HAL_TIM_Base_Start_IT+0x98>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x58>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x58>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x58>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d111      	bne.n	8005c74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d010      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c72:	e007      	b.n	8005c84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40000800 	.word	0x40000800

08005c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e041      	b.n	8005d32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f839 	bl	8005d3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f000 faec 	bl	80062b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bc80      	pop	{r7}
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0202 	mvn.w	r2, #2
 8005d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa76 	bl	8006280 <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa69 	bl	800626e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fa78 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0204 	mvn.w	r2, #4
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa4c 	bl	8006280 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa3f 	bl	800626e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fa4e 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0208 	mvn.w	r2, #8
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2204      	movs	r2, #4
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa22 	bl	8006280 <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa15 	bl	800626e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fa24 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0310 	and.w	r3, r3, #16
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d122      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d11b      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0210 	mvn.w	r2, #16
 8005e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9f8 	bl	8006280 <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9eb 	bl	800626e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f9fa 	bl	8006292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0201 	mvn.w	r2, #1
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fc ff2c 	bl	8002d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee8:	2b80      	cmp	r3, #128	; 0x80
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fdb4 	bl	8006a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d10e      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d107      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9be 	bl	80062a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d10e      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d107      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0220 	mvn.w	r2, #32
 8005f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fd7f 	bl	8006a52 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f54:	bf00      	nop
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e0ae      	b.n	80060d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b0c      	cmp	r3, #12
 8005f86:	f200 809f 	bhi.w	80060c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	080060c9 	.word	0x080060c9
 8005f98:	080060c9 	.word	0x080060c9
 8005f9c:	080060c9 	.word	0x080060c9
 8005fa0:	08006005 	.word	0x08006005
 8005fa4:	080060c9 	.word	0x080060c9
 8005fa8:	080060c9 	.word	0x080060c9
 8005fac:	080060c9 	.word	0x080060c9
 8005fb0:	08006047 	.word	0x08006047
 8005fb4:	080060c9 	.word	0x080060c9
 8005fb8:	080060c9 	.word	0x080060c9
 8005fbc:	080060c9 	.word	0x080060c9
 8005fc0:	08006087 	.word	0x08006087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f9d6 	bl	800637c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0208 	orr.w	r2, r2, #8
 8005fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0204 	bic.w	r2, r2, #4
 8005fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6999      	ldr	r1, [r3, #24]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	619a      	str	r2, [r3, #24]
      break;
 8006002:	e064      	b.n	80060ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa1c 	bl	8006448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800601e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6999      	ldr	r1, [r3, #24]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	619a      	str	r2, [r3, #24]
      break;
 8006044:	e043      	b.n	80060ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fa65 	bl	800651c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0208 	orr.w	r2, r2, #8
 8006060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0204 	bic.w	r2, r2, #4
 8006070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69d9      	ldr	r1, [r3, #28]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	61da      	str	r2, [r3, #28]
      break;
 8006084:	e023      	b.n	80060ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 faaf 	bl	80065f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69d9      	ldr	r1, [r3, #28]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	021a      	lsls	r2, r3, #8
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	61da      	str	r2, [r3, #28]
      break;
 80060c6:	e002      	b.n	80060ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_TIM_ConfigClockSource+0x1c>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0b4      	b.n	8006266 <HAL_TIM_ConfigClockSource+0x186>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800611a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006134:	d03e      	beq.n	80061b4 <HAL_TIM_ConfigClockSource+0xd4>
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613a:	f200 8087 	bhi.w	800624c <HAL_TIM_ConfigClockSource+0x16c>
 800613e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006142:	f000 8086 	beq.w	8006252 <HAL_TIM_ConfigClockSource+0x172>
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d87f      	bhi.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
 800614c:	2b70      	cmp	r3, #112	; 0x70
 800614e:	d01a      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0xa6>
 8006150:	2b70      	cmp	r3, #112	; 0x70
 8006152:	d87b      	bhi.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
 8006154:	2b60      	cmp	r3, #96	; 0x60
 8006156:	d050      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x11a>
 8006158:	2b60      	cmp	r3, #96	; 0x60
 800615a:	d877      	bhi.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
 800615c:	2b50      	cmp	r3, #80	; 0x50
 800615e:	d03c      	beq.n	80061da <HAL_TIM_ConfigClockSource+0xfa>
 8006160:	2b50      	cmp	r3, #80	; 0x50
 8006162:	d873      	bhi.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d058      	beq.n	800621a <HAL_TIM_ConfigClockSource+0x13a>
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d86f      	bhi.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
 800616c:	2b30      	cmp	r3, #48	; 0x30
 800616e:	d064      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x15a>
 8006170:	2b30      	cmp	r3, #48	; 0x30
 8006172:	d86b      	bhi.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
 8006174:	2b20      	cmp	r3, #32
 8006176:	d060      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x15a>
 8006178:	2b20      	cmp	r3, #32
 800617a:	d867      	bhi.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d05c      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x15a>
 8006180:	2b10      	cmp	r3, #16
 8006182:	d05a      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x15a>
 8006184:	e062      	b.n	800624c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006196:	f000 faf0 	bl	800677a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	609a      	str	r2, [r3, #8]
      break;
 80061b2:	e04f      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061c4:	f000 fad9 	bl	800677a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689a      	ldr	r2, [r3, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061d6:	609a      	str	r2, [r3, #8]
      break;
 80061d8:	e03c      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e6:	461a      	mov	r2, r3
 80061e8:	f000 fa50 	bl	800668c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2150      	movs	r1, #80	; 0x50
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 faa7 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 80061f8:	e02c      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006206:	461a      	mov	r2, r3
 8006208:	f000 fa6e 	bl	80066e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2160      	movs	r1, #96	; 0x60
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fa97 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 8006218:	e01c      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006226:	461a      	mov	r2, r3
 8006228:	f000 fa30 	bl	800668c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2140      	movs	r1, #64	; 0x40
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fa87 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 8006238:	e00c      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f000 fa7e 	bl	8006746 <TIM_ITRx_SetConfig>
      break;
 800624a:	e003      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
      break;
 8006250:	e000      	b.n	8006254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006264:	7bfb      	ldrb	r3, [r7, #15]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr

08006292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr
	...

080062b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a29      	ldr	r2, [pc, #164]	; (8006370 <TIM_Base_SetConfig+0xb8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00b      	beq.n	80062e8 <TIM_Base_SetConfig+0x30>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d6:	d007      	beq.n	80062e8 <TIM_Base_SetConfig+0x30>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a26      	ldr	r2, [pc, #152]	; (8006374 <TIM_Base_SetConfig+0xbc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_Base_SetConfig+0x30>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a25      	ldr	r2, [pc, #148]	; (8006378 <TIM_Base_SetConfig+0xc0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d108      	bne.n	80062fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a1c      	ldr	r2, [pc, #112]	; (8006370 <TIM_Base_SetConfig+0xb8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00b      	beq.n	800631a <TIM_Base_SetConfig+0x62>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006308:	d007      	beq.n	800631a <TIM_Base_SetConfig+0x62>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <TIM_Base_SetConfig+0xbc>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_Base_SetConfig+0x62>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a18      	ldr	r2, [pc, #96]	; (8006378 <TIM_Base_SetConfig+0xc0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d108      	bne.n	800632c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a07      	ldr	r2, [pc, #28]	; (8006370 <TIM_Base_SetConfig+0xb8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d103      	bne.n	8006360 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	615a      	str	r2, [r3, #20]
}
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800

0800637c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f023 0201 	bic.w	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 0302 	bic.w	r3, r3, #2
 80063c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <TIM_OC1_SetConfig+0xc8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d10c      	bne.n	80063f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0308 	bic.w	r3, r3, #8
 80063de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0304 	bic.w	r3, r3, #4
 80063f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a13      	ldr	r2, [pc, #76]	; (8006444 <TIM_OC1_SetConfig+0xc8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d111      	bne.n	800641e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	621a      	str	r2, [r3, #32]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40012c00 	.word	0x40012c00

08006448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f023 0210 	bic.w	r2, r3, #16
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	021b      	lsls	r3, r3, #8
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0320 	bic.w	r3, r3, #32
 8006492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <TIM_OC2_SetConfig+0xd0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d10d      	bne.n	80064c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a14      	ldr	r2, [pc, #80]	; (8006518 <TIM_OC2_SetConfig+0xd0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d113      	bne.n	80064f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr
 8006518:	40012c00 	.word	0x40012c00

0800651c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <TIM_OC3_SetConfig+0xd0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d10d      	bne.n	8006596 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <TIM_OC3_SetConfig+0xd0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d113      	bne.n	80065c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40012c00 	.word	0x40012c00

080065f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800663a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	031b      	lsls	r3, r3, #12
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	4313      	orrs	r3, r2
 8006646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <TIM_OC4_SetConfig+0x98>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d109      	bne.n	8006664 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	019b      	lsls	r3, r3, #6
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr
 8006688:	40012c00 	.word	0x40012c00

0800668c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f023 0201 	bic.w	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 030a 	bic.w	r3, r3, #10
 80066c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	031b      	lsls	r3, r3, #12
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006724:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	621a      	str	r2, [r3, #32]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	f043 0307 	orr.w	r3, r3, #7
 8006768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	609a      	str	r2, [r3, #8]
}
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr

0800677a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800677a:	b480      	push	{r7}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006794:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	021a      	lsls	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	431a      	orrs	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	609a      	str	r2, [r3, #8]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <HAL_TIMEx_PWMN_Start+0x24>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e022      	b.n	8006822 <HAL_TIMEx_PWMN_Start+0x6a>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d109      	bne.n	80067f6 <HAL_TIMEx_PWMN_Start+0x3e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	e015      	b.n	8006822 <HAL_TIMEx_PWMN_Start+0x6a>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d109      	bne.n	8006810 <HAL_TIMEx_PWMN_Start+0x58>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e008      	b.n	8006822 <HAL_TIMEx_PWMN_Start+0x6a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	bf14      	ite	ne
 800681c:	2301      	movne	r3, #1
 800681e:	2300      	moveq	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e059      	b.n	80068de <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_TIMEx_PWMN_Start+0x82>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006838:	e013      	b.n	8006862 <HAL_TIMEx_PWMN_Start+0xaa>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d104      	bne.n	800684a <HAL_TIMEx_PWMN_Start+0x92>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006848:	e00b      	b.n	8006862 <HAL_TIMEx_PWMN_Start+0xaa>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d104      	bne.n	800685a <HAL_TIMEx_PWMN_Start+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006858:	e003      	b.n	8006862 <HAL_TIMEx_PWMN_Start+0xaa>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2204      	movs	r2, #4
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f903 	bl	8006a76 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800687e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <HAL_TIMEx_PWMN_Start+0x130>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00e      	beq.n	80068a8 <HAL_TIMEx_PWMN_Start+0xf0>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d009      	beq.n	80068a8 <HAL_TIMEx_PWMN_Start+0xf0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <HAL_TIMEx_PWMN_Start+0x134>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <HAL_TIMEx_PWMN_Start+0xf0>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <HAL_TIMEx_PWMN_Start+0x138>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d111      	bne.n	80068cc <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b06      	cmp	r3, #6
 80068b8:	d010      	beq.n	80068dc <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ca:	e007      	b.n	80068dc <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800

080068f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006908:	2302      	movs	r3, #2
 800690a:	e046      	b.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d009      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a12      	ldr	r2, [pc, #72]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a10      	ldr	r2, [pc, #64]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d10c      	bne.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4313      	orrs	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr
 80069a4:	40012c00 	.word	0x40012c00
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800

080069b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e03d      	b.n	8006a48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc80      	pop	{r7}
 8006a62:	4770      	bx	lr

08006a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2204      	movs	r2, #4
 8006a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1a      	ldr	r2, [r3, #32]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	43db      	mvns	r3, r3
 8006a98:	401a      	ands	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f003 031f 	and.w	r3, r3, #31
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e042      	b.n	8006b56 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7fc faad 	bl	8003044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2224      	movs	r2, #36	; 0x24
 8006aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f82c 	bl	8006b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b9a:	f023 030c 	bic.w	r3, r3, #12
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2c      	ldr	r2, [pc, #176]	; (8006c74 <UART_SetConfig+0x114>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d103      	bne.n	8006bd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bc8:	f7fe fdde 	bl	8005788 <HAL_RCC_GetPCLK2Freq>
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	e002      	b.n	8006bd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7fe fdc6 	bl	8005760 <HAL_RCC_GetPCLK1Freq>
 8006bd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	009a      	lsls	r2, r3, #2
 8006be0:	441a      	add	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bec:	4a22      	ldr	r2, [pc, #136]	; (8006c78 <UART_SetConfig+0x118>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	0119      	lsls	r1, r3, #4
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009a      	lsls	r2, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <UART_SetConfig+0x118>)
 8006c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	2064      	movs	r0, #100	; 0x64
 8006c16:	fb00 f303 	mul.w	r3, r0, r3
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	3332      	adds	r3, #50	; 0x32
 8006c20:	4a15      	ldr	r2, [pc, #84]	; (8006c78 <UART_SetConfig+0x118>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c2c:	4419      	add	r1, r3
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009a      	lsls	r2, r3, #2
 8006c38:	441a      	add	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c44:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <UART_SetConfig+0x118>)
 8006c46:	fba3 0302 	umull	r0, r3, r3, r2
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	2064      	movs	r0, #100	; 0x64
 8006c4e:	fb00 f303 	mul.w	r3, r0, r3
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	3332      	adds	r3, #50	; 0x32
 8006c58:	4a07      	ldr	r2, [pc, #28]	; (8006c78 <UART_SetConfig+0x118>)
 8006c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	f003 020f 	and.w	r2, r3, #15
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	440a      	add	r2, r1
 8006c6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40013800 	.word	0x40013800
 8006c78:	51eb851f 	.word	0x51eb851f

08006c7c <memset>:
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4402      	add	r2, r0
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d100      	bne.n	8006c86 <memset+0xa>
 8006c84:	4770      	bx	lr
 8006c86:	f803 1b01 	strb.w	r1, [r3], #1
 8006c8a:	e7f9      	b.n	8006c80 <memset+0x4>

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	2600      	movs	r6, #0
 8006c90:	4d0c      	ldr	r5, [pc, #48]	; (8006cc4 <__libc_init_array+0x38>)
 8006c92:	4c0d      	ldr	r4, [pc, #52]	; (8006cc8 <__libc_init_array+0x3c>)
 8006c94:	1b64      	subs	r4, r4, r5
 8006c96:	10a4      	asrs	r4, r4, #2
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	f000 f860 	bl	8006d60 <_init>
 8006ca0:	2600      	movs	r6, #0
 8006ca2:	4d0a      	ldr	r5, [pc, #40]	; (8006ccc <__libc_init_array+0x40>)
 8006ca4:	4c0a      	ldr	r4, [pc, #40]	; (8006cd0 <__libc_init_array+0x44>)
 8006ca6:	1b64      	subs	r4, r4, r5
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	42a6      	cmp	r6, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb4:	4798      	blx	r3
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbe:	4798      	blx	r3
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	08006ebc 	.word	0x08006ebc
 8006cc8:	08006ebc 	.word	0x08006ebc
 8006ccc:	08006ebc 	.word	0x08006ebc
 8006cd0:	08006ec0 	.word	0x08006ec0

08006cd4 <round>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006cda:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8006cde:	2a13      	cmp	r2, #19
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	dc18      	bgt.n	8006d1a <round+0x46>
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	da09      	bge.n	8006d00 <round+0x2c>
 8006cec:	3201      	adds	r2, #1
 8006cee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006cf2:	d103      	bne.n	8006cfc <round+0x28>
 8006cf4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006cf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	e029      	b.n	8006d54 <round+0x80>
 8006d00:	4816      	ldr	r0, [pc, #88]	; (8006d5c <round+0x88>)
 8006d02:	4110      	asrs	r0, r2
 8006d04:	4001      	ands	r1, r0
 8006d06:	4329      	orrs	r1, r5
 8006d08:	d011      	beq.n	8006d2e <round+0x5a>
 8006d0a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006d0e:	fa41 f202 	asr.w	r2, r1, r2
 8006d12:	4413      	add	r3, r2
 8006d14:	ea23 0300 	bic.w	r3, r3, r0
 8006d18:	e7f0      	b.n	8006cfc <round+0x28>
 8006d1a:	2a33      	cmp	r2, #51	; 0x33
 8006d1c:	dd0a      	ble.n	8006d34 <round+0x60>
 8006d1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006d22:	d104      	bne.n	8006d2e <round+0x5a>
 8006d24:	4602      	mov	r2, r0
 8006d26:	f7f9 fa17 	bl	8000158 <__adddf3>
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	4628      	mov	r0, r5
 8006d30:	4621      	mov	r1, r4
 8006d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006d3c:	40f8      	lsrs	r0, r7
 8006d3e:	4228      	tst	r0, r5
 8006d40:	d0f5      	beq.n	8006d2e <round+0x5a>
 8006d42:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8006d46:	2201      	movs	r2, #1
 8006d48:	408a      	lsls	r2, r1
 8006d4a:	1952      	adds	r2, r2, r5
 8006d4c:	bf28      	it	cs
 8006d4e:	3301      	addcs	r3, #1
 8006d50:	ea22 0200 	bic.w	r2, r2, r0
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	e7e7      	b.n	8006d2a <round+0x56>
 8006d5a:	bf00      	nop
 8006d5c:	000fffff 	.word	0x000fffff

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
