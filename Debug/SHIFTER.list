
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009388  08009388  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009388  08009388  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08009390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002628  200000d4  08009464  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026fc  08009464  000226fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad5b  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003158  00000000  00000000  0003ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0003dfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad42  00000000  00000000  00040018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152f4  00000000  00000000  0005ad5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e1f  00000000  00000000  0007004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105e6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b90  00000000  00000000  00105ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e74 	.word	0x08008e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08008e74 	.word	0x08008e74

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_d2uiz>:
 8000514:	004a      	lsls	r2, r1, #1
 8000516:	d211      	bcs.n	800053c <__aeabi_d2uiz+0x28>
 8000518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800051c:	d211      	bcs.n	8000542 <__aeabi_d2uiz+0x2e>
 800051e:	d50d      	bpl.n	800053c <__aeabi_d2uiz+0x28>
 8000520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000528:	d40e      	bmi.n	8000548 <__aeabi_d2uiz+0x34>
 800052a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000536:	fa23 f002 	lsr.w	r0, r3, r2
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000546:	d102      	bne.n	800054e <__aeabi_d2uiz+0x3a>
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	4770      	bx	lr
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_frsub>:
 8000554:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__addsf3>
 800055a:	bf00      	nop

0800055c <__aeabi_fsub>:
 800055c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000560 <__addsf3>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	bf1f      	itttt	ne
 8000564:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000568:	ea92 0f03 	teqne	r2, r3
 800056c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000570:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000574:	d06a      	beq.n	800064c <__addsf3+0xec>
 8000576:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800057e:	bfc1      	itttt	gt
 8000580:	18d2      	addgt	r2, r2, r3
 8000582:	4041      	eorgt	r1, r0
 8000584:	4048      	eorgt	r0, r1
 8000586:	4041      	eorgt	r1, r0
 8000588:	bfb8      	it	lt
 800058a:	425b      	neglt	r3, r3
 800058c:	2b19      	cmp	r3, #25
 800058e:	bf88      	it	hi
 8000590:	4770      	bxhi	lr
 8000592:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4249      	negne	r1, r1
 80005b2:	ea92 0f03 	teq	r2, r3
 80005b6:	d03f      	beq.n	8000638 <__addsf3+0xd8>
 80005b8:	f1a2 0201 	sub.w	r2, r2, #1
 80005bc:	fa41 fc03 	asr.w	ip, r1, r3
 80005c0:	eb10 000c 	adds.w	r0, r0, ip
 80005c4:	f1c3 0320 	rsb	r3, r3, #32
 80005c8:	fa01 f103 	lsl.w	r1, r1, r3
 80005cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d0:	d502      	bpl.n	80005d8 <__addsf3+0x78>
 80005d2:	4249      	negs	r1, r1
 80005d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005dc:	d313      	bcc.n	8000606 <__addsf3+0xa6>
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d306      	bcc.n	80005f2 <__addsf3+0x92>
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	f102 0201 	add.w	r2, r2, #1
 80005ee:	2afe      	cmp	r2, #254	; 0xfe
 80005f0:	d251      	bcs.n	8000696 <__addsf3+0x136>
 80005f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005fa:	bf08      	it	eq
 80005fc:	f020 0001 	biceq.w	r0, r0, #1
 8000600:	ea40 0003 	orr.w	r0, r0, r3
 8000604:	4770      	bx	lr
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	eb40 0000 	adc.w	r0, r0, r0
 800060c:	3a01      	subs	r2, #1
 800060e:	bf28      	it	cs
 8000610:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000614:	d2ed      	bcs.n	80005f2 <__addsf3+0x92>
 8000616:	fab0 fc80 	clz	ip, r0
 800061a:	f1ac 0c08 	sub.w	ip, ip, #8
 800061e:	ebb2 020c 	subs.w	r2, r2, ip
 8000622:	fa00 f00c 	lsl.w	r0, r0, ip
 8000626:	bfaa      	itet	ge
 8000628:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800062c:	4252      	neglt	r2, r2
 800062e:	4318      	orrge	r0, r3
 8000630:	bfbc      	itt	lt
 8000632:	40d0      	lsrlt	r0, r2
 8000634:	4318      	orrlt	r0, r3
 8000636:	4770      	bx	lr
 8000638:	f092 0f00 	teq	r2, #0
 800063c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000640:	bf06      	itte	eq
 8000642:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000646:	3201      	addeq	r2, #1
 8000648:	3b01      	subne	r3, #1
 800064a:	e7b5      	b.n	80005b8 <__addsf3+0x58>
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d021      	beq.n	80006a0 <__addsf3+0x140>
 800065c:	ea92 0f03 	teq	r2, r3
 8000660:	d004      	beq.n	800066c <__addsf3+0x10c>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	bf08      	it	eq
 8000668:	4608      	moveq	r0, r1
 800066a:	4770      	bx	lr
 800066c:	ea90 0f01 	teq	r0, r1
 8000670:	bf1c      	itt	ne
 8000672:	2000      	movne	r0, #0
 8000674:	4770      	bxne	lr
 8000676:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800067a:	d104      	bne.n	8000686 <__addsf3+0x126>
 800067c:	0040      	lsls	r0, r0, #1
 800067e:	bf28      	it	cs
 8000680:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000684:	4770      	bx	lr
 8000686:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800068a:	bf3c      	itt	cc
 800068c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000690:	4770      	bxcc	lr
 8000692:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000696:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800069a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800069e:	4770      	bx	lr
 80006a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006a4:	bf16      	itet	ne
 80006a6:	4608      	movne	r0, r1
 80006a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ac:	4601      	movne	r1, r0
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	bf06      	itte	eq
 80006b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006b6:	ea90 0f01 	teqeq	r0, r1
 80006ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006be:	4770      	bx	lr

080006c0 <__aeabi_ui2f>:
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e004      	b.n	80006d0 <__aeabi_i2f+0x8>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2f>:
 80006c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	bf48      	it	mi
 80006ce:	4240      	negmi	r0, r0
 80006d0:	ea5f 0c00 	movs.w	ip, r0
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006dc:	4601      	mov	r1, r0
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	e01c      	b.n	800071e <__aeabi_l2f+0x2a>

080006e4 <__aeabi_ul2f>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e00a      	b.n	8000708 <__aeabi_l2f+0x14>
 80006f2:	bf00      	nop

080006f4 <__aeabi_l2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000700:	d502      	bpl.n	8000708 <__aeabi_l2f+0x14>
 8000702:	4240      	negs	r0, r0
 8000704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000708:	ea5f 0c01 	movs.w	ip, r1
 800070c:	bf02      	ittt	eq
 800070e:	4684      	moveq	ip, r0
 8000710:	4601      	moveq	r1, r0
 8000712:	2000      	moveq	r0, #0
 8000714:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000718:	bf08      	it	eq
 800071a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800071e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000722:	fabc f28c 	clz	r2, ip
 8000726:	3a08      	subs	r2, #8
 8000728:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800072c:	db10      	blt.n	8000750 <__aeabi_l2f+0x5c>
 800072e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000732:	4463      	add	r3, ip
 8000734:	fa00 fc02 	lsl.w	ip, r0, r2
 8000738:	f1c2 0220 	rsb	r2, r2, #32
 800073c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000740:	fa20 f202 	lsr.w	r2, r0, r2
 8000744:	eb43 0002 	adc.w	r0, r3, r2
 8000748:	bf08      	it	eq
 800074a:	f020 0001 	biceq.w	r0, r0, #1
 800074e:	4770      	bx	lr
 8000750:	f102 0220 	add.w	r2, r2, #32
 8000754:	fa01 fc02 	lsl.w	ip, r1, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000760:	fa21 f202 	lsr.w	r2, r1, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800076e:	4770      	bx	lr

08000770 <__aeabi_fmul>:
 8000770:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000774:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000778:	bf1e      	ittt	ne
 800077a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800077e:	ea92 0f0c 	teqne	r2, ip
 8000782:	ea93 0f0c 	teqne	r3, ip
 8000786:	d06f      	beq.n	8000868 <__aeabi_fmul+0xf8>
 8000788:	441a      	add	r2, r3
 800078a:	ea80 0c01 	eor.w	ip, r0, r1
 800078e:	0240      	lsls	r0, r0, #9
 8000790:	bf18      	it	ne
 8000792:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000796:	d01e      	beq.n	80007d6 <__aeabi_fmul+0x66>
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007a4:	fba0 3101 	umull	r3, r1, r0, r1
 80007a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b0:	bf3e      	ittt	cc
 80007b2:	0049      	lslcc	r1, r1, #1
 80007b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007b8:	005b      	lslcc	r3, r3, #1
 80007ba:	ea40 0001 	orr.w	r0, r0, r1
 80007be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007c2:	2afd      	cmp	r2, #253	; 0xfd
 80007c4:	d81d      	bhi.n	8000802 <__aeabi_fmul+0x92>
 80007c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	4770      	bx	lr
 80007d6:	f090 0f00 	teq	r0, #0
 80007da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007de:	bf08      	it	eq
 80007e0:	0249      	lsleq	r1, r1, #9
 80007e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ea:	3a7f      	subs	r2, #127	; 0x7f
 80007ec:	bfc2      	ittt	gt
 80007ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007f6:	4770      	bxgt	lr
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	3a01      	subs	r2, #1
 8000802:	dc5d      	bgt.n	80008c0 <__aeabi_fmul+0x150>
 8000804:	f112 0f19 	cmn.w	r2, #25
 8000808:	bfdc      	itt	le
 800080a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800080e:	4770      	bxle	lr
 8000810:	f1c2 0200 	rsb	r2, r2, #0
 8000814:	0041      	lsls	r1, r0, #1
 8000816:	fa21 f102 	lsr.w	r1, r1, r2
 800081a:	f1c2 0220 	rsb	r2, r2, #32
 800081e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000822:	ea5f 0031 	movs.w	r0, r1, rrx
 8000826:	f140 0000 	adc.w	r0, r0, #0
 800082a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800082e:	bf08      	it	eq
 8000830:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000834:	4770      	bx	lr
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800083e:	bf02      	ittt	eq
 8000840:	0040      	lsleq	r0, r0, #1
 8000842:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000846:	3a01      	subeq	r2, #1
 8000848:	d0f9      	beq.n	800083e <__aeabi_fmul+0xce>
 800084a:	ea40 000c 	orr.w	r0, r0, ip
 800084e:	f093 0f00 	teq	r3, #0
 8000852:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000856:	bf02      	ittt	eq
 8000858:	0049      	lsleq	r1, r1, #1
 800085a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800085e:	3b01      	subeq	r3, #1
 8000860:	d0f9      	beq.n	8000856 <__aeabi_fmul+0xe6>
 8000862:	ea41 010c 	orr.w	r1, r1, ip
 8000866:	e78f      	b.n	8000788 <__aeabi_fmul+0x18>
 8000868:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800086c:	ea92 0f0c 	teq	r2, ip
 8000870:	bf18      	it	ne
 8000872:	ea93 0f0c 	teqne	r3, ip
 8000876:	d00a      	beq.n	800088e <__aeabi_fmul+0x11e>
 8000878:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800087c:	bf18      	it	ne
 800087e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000882:	d1d8      	bne.n	8000836 <__aeabi_fmul+0xc6>
 8000884:	ea80 0001 	eor.w	r0, r0, r1
 8000888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f090 0f00 	teq	r0, #0
 8000892:	bf17      	itett	ne
 8000894:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000898:	4608      	moveq	r0, r1
 800089a:	f091 0f00 	teqne	r1, #0
 800089e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008a2:	d014      	beq.n	80008ce <__aeabi_fmul+0x15e>
 80008a4:	ea92 0f0c 	teq	r2, ip
 80008a8:	d101      	bne.n	80008ae <__aeabi_fmul+0x13e>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d10f      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008ae:	ea93 0f0c 	teq	r3, ip
 80008b2:	d103      	bne.n	80008bc <__aeabi_fmul+0x14c>
 80008b4:	024b      	lsls	r3, r1, #9
 80008b6:	bf18      	it	ne
 80008b8:	4608      	movne	r0, r1
 80008ba:	d108      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008bc:	ea80 0001 	eor.w	r0, r0, r1
 80008c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bx	lr
 80008ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fdiv>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d069      	beq.n	80009c4 <__aeabi_fdiv+0xec>
 80008f0:	eba2 0203 	sub.w	r2, r2, r3
 80008f4:	ea80 0c01 	eor.w	ip, r0, r1
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008fe:	d037      	beq.n	8000970 <__aeabi_fdiv+0x98>
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000908:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800090c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000910:	428b      	cmp	r3, r1
 8000912:	bf38      	it	cc
 8000914:	005b      	lslcc	r3, r3, #1
 8000916:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800091a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800091e:	428b      	cmp	r3, r1
 8000920:	bf24      	itt	cs
 8000922:	1a5b      	subcs	r3, r3, r1
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800092c:	bf24      	itt	cs
 800092e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000932:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000936:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800093a:	bf24      	itt	cs
 800093c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000948:	bf24      	itt	cs
 800094a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800094e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	bf18      	it	ne
 8000956:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800095a:	d1e0      	bne.n	800091e <__aeabi_fdiv+0x46>
 800095c:	2afd      	cmp	r2, #253	; 0xfd
 800095e:	f63f af50 	bhi.w	8000802 <__aeabi_fmul+0x92>
 8000962:	428b      	cmp	r3, r1
 8000964:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000968:	bf08      	it	eq
 800096a:	f020 0001 	biceq.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000974:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000978:	327f      	adds	r2, #127	; 0x7f
 800097a:	bfc2      	ittt	gt
 800097c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000980:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000984:	4770      	bxgt	lr
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	3a01      	subs	r2, #1
 8000990:	e737      	b.n	8000802 <__aeabi_fmul+0x92>
 8000992:	f092 0f00 	teq	r2, #0
 8000996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800099a:	bf02      	ittt	eq
 800099c:	0040      	lsleq	r0, r0, #1
 800099e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009a2:	3a01      	subeq	r2, #1
 80009a4:	d0f9      	beq.n	800099a <__aeabi_fdiv+0xc2>
 80009a6:	ea40 000c 	orr.w	r0, r0, ip
 80009aa:	f093 0f00 	teq	r3, #0
 80009ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0049      	lsleq	r1, r1, #1
 80009b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ba:	3b01      	subeq	r3, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fdiv+0xda>
 80009be:	ea41 010c 	orr.w	r1, r1, ip
 80009c2:	e795      	b.n	80008f0 <__aeabi_fdiv+0x18>
 80009c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d108      	bne.n	80009e0 <__aeabi_fdiv+0x108>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	f47f af7d 	bne.w	80008ce <__aeabi_fmul+0x15e>
 80009d4:	ea93 0f0c 	teq	r3, ip
 80009d8:	f47f af70 	bne.w	80008bc <__aeabi_fmul+0x14c>
 80009dc:	4608      	mov	r0, r1
 80009de:	e776      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009e0:	ea93 0f0c 	teq	r3, ip
 80009e4:	d104      	bne.n	80009f0 <__aeabi_fdiv+0x118>
 80009e6:	024b      	lsls	r3, r1, #9
 80009e8:	f43f af4c 	beq.w	8000884 <__aeabi_fmul+0x114>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e76e      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f4:	bf18      	it	ne
 80009f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	d1ca      	bne.n	8000992 <__aeabi_fdiv+0xba>
 80009fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a00:	f47f af5c 	bne.w	80008bc <__aeabi_fmul+0x14c>
 8000a04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a08:	f47f af3c 	bne.w	8000884 <__aeabi_fmul+0x114>
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0x15e>
 8000a0e:	bf00      	nop

08000a10 <__gesf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295
 8000a14:	e006      	b.n	8000a24 <__cmpsf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__lesf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpsf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpsf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d011      	beq.n	8000a60 <__cmpsf2+0x40>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a42:	bf18      	it	ne
 8000a44:	ea90 0f01 	teqne	r0, r1
 8000a48:	bf58      	it	pl
 8000a4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a4e:	bf88      	it	hi
 8000a50:	17c8      	asrhi	r0, r1, #31
 8000a52:	bf38      	it	cc
 8000a54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a58:	bf18      	it	ne
 8000a5a:	f040 0001 	orrne.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	d102      	bne.n	8000a6c <__cmpsf2+0x4c>
 8000a66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a6a:	d105      	bne.n	8000a78 <__cmpsf2+0x58>
 8000a6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a70:	d1e4      	bne.n	8000a3c <__cmpsf2+0x1c>
 8000a72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a76:	d0e1      	beq.n	8000a3c <__cmpsf2+0x1c>
 8000a78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cfrcmple>:
 8000a80:	4684      	mov	ip, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4661      	mov	r1, ip
 8000a86:	e7ff      	b.n	8000a88 <__aeabi_cfcmpeq>

08000a88 <__aeabi_cfcmpeq>:
 8000a88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a8a:	f7ff ffc9 	bl	8000a20 <__cmpsf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a98 <__aeabi_fcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cfcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_fcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffd2 	bl	8000a80 <__aeabi_cfrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc8 	bl	8000a80 <__aeabi_cfrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_f2uiz>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	d20e      	bcs.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b04:	d30b      	bcc.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b0e:	d409      	bmi.n	8000b24 <__aeabi_f2uiz+0x28>
 8000b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2uiz+0x32>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_f2uiz+0x38>
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <InitController>:
#define RaiseControlError(fault_) { do { MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; MyOutputs->NControlErrorStatusShadow |= MyOutputs->NControlErrorStatus; } while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000b46:	4a60      	ldr	r2, [pc, #384]	; (8000cc8 <InitController+0x18c>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000b4c:	4a5f      	ldr	r2, [pc, #380]	; (8000ccc <InitController+0x190>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6013      	str	r3, [r2, #0]

	// Multifunction

	// map map size
	outputs->NMultifunctionMaxPos[0] = MULTIFUNCTION01_MAX_POS;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	220e      	movs	r2, #14
 8000b56:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	outputs->NMultifunctionMaxPos[1] = MULTIFUNCTION02_MAX_POS;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	220e      	movs	r2, #14
 8000b5e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	outputs->NMultifunctionMaxPos[2] = MULTIFUNCTION03_MAX_POS;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	220d      	movs	r2, #13
 8000b66:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	outputs->NMultifunctionMaxPos[3] = MULTIFUNCTION04_MAX_POS;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	220e      	movs	r2, #14
 8000b6e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	outputs->NMultifunctionMaxPos[4] = MULTIFUNCTION05_MAX_POS;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	220d      	movs	r2, #13
 8000b76:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	outputs->NMultifunctionMaxPos[5] = MULTIFUNCTION06_MAX_POS;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	outputs->NMultifunctionMaxPos[6] = MULTIFUNCTION07_MAX_POS;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2204      	movs	r2, #4
 8000b86:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	outputs->NMultifunctionMaxPos[7] = MULTIFUNCTION08_MAX_POS;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	outputs->NMultifunctionMaxPos[8] = MULTIFUNCTION09_MAX_POS;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	220e      	movs	r2, #14
 8000b96:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	outputs->NMultifunctionMaxPos[9] = MULTIFUNCTION10_MAX_POS;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	220e      	movs	r2, #14
 8000b9e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	outputs->NMultifunctionMaxPos[10] = MULTIFUNCTION11_MAX_POS;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	220e      	movs	r2, #14
 8000ba6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	outputs->NMultifunctionMaxPos[11] = MULTIFUNCTION12_MAX_POS;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	220e      	movs	r2, #14
 8000bae:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	// default values
	outputs->NMultifunctionDefMask[0] = (MULTIFUNCTION01_DEF_POS <= MULTIFUNCTION01_MAX_POS ? MULTIFUNCTION01_DEF_POS : MULTIFUNCTION01_MAX_POS);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	outputs->NMultifunctionDefMask[1] = (MULTIFUNCTION02_DEF_POS <= MULTIFUNCTION02_MAX_POS ? MULTIFUNCTION02_DEF_POS : MULTIFUNCTION02_MAX_POS);;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	outputs->NMultifunctionDefMask[2] = (MULTIFUNCTION03_DEF_POS <= MULTIFUNCTION03_MAX_POS ? MULTIFUNCTION03_DEF_POS : MULTIFUNCTION03_MAX_POS);;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	outputs->NMultifunctionDefMask[3] = (MULTIFUNCTION04_DEF_POS <= MULTIFUNCTION04_MAX_POS ? MULTIFUNCTION04_DEF_POS : MULTIFUNCTION04_MAX_POS);;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	outputs->NMultifunctionDefMask[4] = (MULTIFUNCTION05_DEF_POS <= MULTIFUNCTION05_MAX_POS ? MULTIFUNCTION05_DEF_POS : MULTIFUNCTION05_MAX_POS);;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	outputs->NMultifunctionDefMask[5] = (MULTIFUNCTION06_DEF_POS <= MULTIFUNCTION06_MAX_POS ? MULTIFUNCTION06_DEF_POS : MULTIFUNCTION06_MAX_POS);;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	outputs->NMultifunctionDefMask[6] = (MULTIFUNCTION07_DEF_POS <= MULTIFUNCTION07_MAX_POS ? MULTIFUNCTION07_DEF_POS : MULTIFUNCTION07_MAX_POS);;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	outputs->NMultifunctionDefMask[7] = (MULTIFUNCTION08_DEF_POS <= MULTIFUNCTION08_MAX_POS ? MULTIFUNCTION08_DEF_POS : MULTIFUNCTION08_MAX_POS);;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	outputs->NMultifunctionDefMask[8] = (MULTIFUNCTION09_DEF_POS <= MULTIFUNCTION09_MAX_POS ? MULTIFUNCTION09_DEF_POS : MULTIFUNCTION09_MAX_POS);;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	outputs->NMultifunctionDefMask[9] = (MULTIFUNCTION10_DEF_POS <= MULTIFUNCTION10_MAX_POS ? MULTIFUNCTION10_DEF_POS : MULTIFUNCTION10_MAX_POS);;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	outputs->NMultifunctionDefMask[10] = (MULTIFUNCTION11_DEF_POS <= MULTIFUNCTION11_MAX_POS ? MULTIFUNCTION11_DEF_POS : MULTIFUNCTION11_MAX_POS);;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	outputs->NMultifunctionDefMask[11] = (MULTIFUNCTION12_DEF_POS <= MULTIFUNCTION12_MAX_POS ? MULTIFUNCTION12_DEF_POS : MULTIFUNCTION12_MAX_POS);;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// wrapping
	outputs->BMultifunctionWrap[0] = MULTIFUNCTION01_WRAP;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	outputs->BMultifunctionWrap[1] = MULTIFUNCTION02_WRAP;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	outputs->BMultifunctionWrap[2] = MULTIFUNCTION03_WRAP;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	outputs->BMultifunctionWrap[3] = MULTIFUNCTION04_WRAP;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	outputs->BMultifunctionWrap[4] = MULTIFUNCTION05_WRAP;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	outputs->BMultifunctionWrap[5] = MULTIFUNCTION06_WRAP;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	outputs->BMultifunctionWrap[6] = MULTIFUNCTION07_WRAP;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	outputs->BMultifunctionWrap[7] = MULTIFUNCTION08_WRAP;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	outputs->BMultifunctionWrap[8] = MULTIFUNCTION09_WRAP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	outputs->BMultifunctionWrap[9] = MULTIFUNCTION10_WRAP;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	outputs->BMultifunctionWrap[10] = MULTIFUNCTION11_WRAP;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	outputs->BMultifunctionWrap[11] = MULTIFUNCTION12_WRAP;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84


	NMultifunctionActiveSwitchPrev = MyInputs->NSwitchA;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <InitController+0x18c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <InitController+0x194>)
 8000c7c:	701a      	strb	r2, [r3, #0]

	// set the current positions to default
	for(uint8_t i=0; i<NMF; i++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e00e      	b.n	8000ca2 <InitController+0x166>
		outputs->NMultifunction[i] = outputs->NMultifunctionDefMask[i];
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	b251      	sxtb	r1, r2
 8000c92:	683a      	ldr	r2, [r7, #0]
 8000c94:	4413      	add	r3, r2
 8000c96:	460a      	mov	r2, r1
 8000c98:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	for(uint8_t i=0; i<NMF; i++) {
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b0b      	cmp	r3, #11
 8000ca6:	d9ed      	bls.n	8000c84 <InitController+0x148>
	}

	// we initialize the min & max clutch targets, later they can be modified with the multifunction
	MyOutputs->xClutchTargetMin = CLUTCH_TARGET_MIN_DEF;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <InitController+0x190>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
	MyOutputs->xClutchTargetMax = CLUTCH_TARGET_MAX_DEF;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <InitController+0x190>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <InitController+0x198>)
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28

	IDLE_Entry();
 8000cba:	f000 fe45 	bl	8001948 <IDLE_Entry>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000014c 	.word	0x2000014c
 8000ccc:	20000134 	.word	0x20000134
 8000cd0:	2000011c 	.word	0x2000011c
 8000cd4:	40a00000 	.word	0x40a00000

08000cd8 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 8000ce2:	f003 fdc9 	bl	8004878 <HAL_GetTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a8e      	ldr	r2, [pc, #568]	; (8000f24 <Controller+0x24c>)
 8000cea:	6013      	str	r3, [r2, #0]
	// ANTISTALL

		#ifdef ANTISTALL_ENABLED

			// if the shut down is activated and we are at gear greater than neutral we can enter
			if(!MyInputs->BDriverKill && MyInputs->NGear >= ANTISTALL_MIN_ACTIVATION_GEAR && !MyInputs->BNGearInError && !MyInputs->BnEngineInError && !MyOutputs->BShiftInProgress && !MyInputs->BFalseNeutral) {
 8000cec:	4b8e      	ldr	r3, [pc, #568]	; (8000f28 <Controller+0x250>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 80a5 	bne.w	8000e44 <Controller+0x16c>
 8000cfa:	4b8b      	ldr	r3, [pc, #556]	; (8000f28 <Controller+0x250>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 809e 	beq.w	8000e44 <Controller+0x16c>
 8000d08:	4b87      	ldr	r3, [pc, #540]	; (8000f28 <Controller+0x250>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 8097 	bne.w	8000e44 <Controller+0x16c>
 8000d16:	4b84      	ldr	r3, [pc, #528]	; (8000f28 <Controller+0x250>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 8090 	bne.w	8000e44 <Controller+0x16c>
 8000d24:	4b81      	ldr	r3, [pc, #516]	; (8000f2c <Controller+0x254>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f040 8089 	bne.w	8000e44 <Controller+0x16c>
 8000d32:	4b7d      	ldr	r3, [pc, #500]	; (8000f28 <Controller+0x250>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8082 	bne.w	8000e44 <Controller+0x16c>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8000d40:	4b7a      	ldr	r3, [pc, #488]	; (8000f2c <Controller+0x254>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d03d      	beq.n	8000dc8 <Controller+0xf0>
 8000d4c:	4b76      	ldr	r3, [pc, #472]	; (8000f28 <Controller+0x250>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b74      	ldr	r3, [pc, #464]	; (8000f28 <Controller+0x250>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4b73      	ldr	r3, [pc, #460]	; (8000f30 <Controller+0x258>)
 8000d62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	dc2e      	bgt.n	8000dc8 <Controller+0xf0>
 8000d6a:	4b6f      	ldr	r3, [pc, #444]	; (8000f28 <Controller+0x250>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000d72:	2b27      	cmp	r3, #39	; 0x27
 8000d74:	dc28      	bgt.n	8000dc8 <Controller+0xf0>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 8000d76:	4b6d      	ldr	r3, [pc, #436]	; (8000f2c <Controller+0x254>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <Controller+0xbe>
						MyOutputs->NAntistallState = Init;
 8000d82:	4b6a      	ldr	r3, [pc, #424]	; (8000f2c <Controller+0x254>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
						tAntistallTimmer = HAL_GetTick();
 8000d8c:	f003 fd74 	bl	8004878 <HAL_GetTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a68      	ldr	r2, [pc, #416]	; (8000f34 <Controller+0x25c>)
 8000d94:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8000d96:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <Controller+0x254>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d112      	bne.n	8000dc8 <Controller+0xf0>
 8000da2:	4b64      	ldr	r3, [pc, #400]	; (8000f34 <Controller+0x25c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000daa:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <Controller+0x24c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d20a      	bcs.n	8000dc8 <Controller+0xf0>
						MyOutputs->NAntistallState = Active;
 8000db2:	4b5e      	ldr	r3, [pc, #376]	; (8000f2c <Controller+0x254>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
						MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMax;
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <Controller+0x254>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <Controller+0x254>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000dc6:	60da      	str	r2, [r3, #12]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8000dc8:	4b58      	ldr	r3, [pc, #352]	; (8000f2c <Controller+0x254>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d11f      	bne.n	8000e14 <Controller+0x13c>
 8000dd4:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <Controller+0x250>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <Controller+0x250>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000de6:	4619      	mov	r1, r3
 8000de8:	4b51      	ldr	r3, [pc, #324]	; (8000f30 <Controller+0x258>)
 8000dea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	dc05      	bgt.n	8000dfe <Controller+0x126>
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <Controller+0x250>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000dfa:	2b5f      	cmp	r3, #95	; 0x5f
 8000dfc:	dd0a      	ble.n	8000e14 <Controller+0x13c>
					MyOutputs->NAntistallState = Off;
 8000dfe:	4b4b      	ldr	r3, [pc, #300]	; (8000f2c <Controller+0x254>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
					MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMin;
 8000e08:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <Controller+0x254>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b47      	ldr	r3, [pc, #284]	; (8000f2c <Controller+0x254>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e12:	60da      	str	r2, [r3, #12]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e14:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <Controller+0x254>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d11d      	bne.n	8000e5c <Controller+0x184>
 8000e20:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <Controller+0x250>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000e28:	2b5f      	cmp	r3, #95	; 0x5f
 8000e2a:	dd17      	ble.n	8000e5c <Controller+0x184>
					MyOutputs->NAntistallState = Off;
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <Controller+0x254>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
					MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMin;
 8000e36:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <Controller+0x254>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <Controller+0x254>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e40:	60da      	str	r2, [r3, #12]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e42:	e00b      	b.n	8000e5c <Controller+0x184>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8000e44:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <Controller+0x254>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
				MyOutputs->xClutchTargetProtection = MyOutputs->xClutchTargetMin;
 8000e4e:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <Controller+0x254>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <Controller+0x254>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	e000      	b.n	8000e5e <Controller+0x186>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e5c:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <Controller+0x250>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 80b8 	bne.w	8000fdc <Controller+0x304>

			// we select the clutch paddle map based on the map index of the multifunction and copy it to the local array
//			memcpy((float*)rClutchPaddle_xClutchTargetMap[1], (float*)rClutchPaddle_xClutchTargetMaps[MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_MAP_IDX-1]-1], CLUTCH_PADDLE_TARGET_MAP_SIZE);
			for(uint8_t i=0; i<CLUTCH_PADDLE_TARGET_MAP_SIZE; i++) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e017      	b.n	8000ea2 <Controller+0x1ca>
				rClutchPaddle_xClutchTargetMap[1][i] = rClutchPaddle_xClutchTargetMaps[MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_MAP_IDX-1]-1][i];
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <Controller+0x254>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	7bf8      	ldrb	r0, [r7, #15]
 8000e7e:	7bf9      	ldrb	r1, [r7, #15]
 8000e80:	4c2d      	ldr	r4, [pc, #180]	; (8000f38 <Controller+0x260>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8000e92:	482a      	ldr	r0, [pc, #168]	; (8000f3c <Controller+0x264>)
 8000e94:	f101 030b 	add.w	r3, r1, #11
 8000e98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			for(uint8_t i=0; i<CLUTCH_PADDLE_TARGET_MAP_SIZE; i++) {
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b0a      	cmp	r3, #10
 8000ea6:	d9e4      	bls.n	8000e72 <Controller+0x19a>
			}
			// we dynamically refine the clutch map
			for(uint8_t i=0; i<CLUTCH_PADDLE_TARGET_MAP_SIZE; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73bb      	strb	r3, [r7, #14]
 8000eac:	e05e      	b.n	8000f6c <Controller+0x294>

				// we clamp the xClutchTargetMap, to keep it inside the the min & max limits (dynamic) and
				rClutchPaddle_xClutchTargetMap[1][i] = CLAMP(rClutchPaddle_xClutchTargetMap[1][i], MyOutputs->xClutchTargetMin, MyOutputs->xClutchTargetMax);
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <Controller+0x264>)
 8000eb2:	330b      	adds	r3, #11
 8000eb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <Controller+0x254>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	f7ff fe11 	bl	8000ae8 <__aeabi_fcmpgt>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <Controller+0x200>
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <Controller+0x264>)
 8000ed0:	330b      	adds	r3, #11
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	e002      	b.n	8000ede <Controller+0x206>
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <Controller+0x254>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <Controller+0x254>)
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fde0 	bl	8000aac <__aeabi_fcmplt>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d026      	beq.n	8000f40 <Controller+0x268>
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <Controller+0x264>)
 8000ef6:	330b      	adds	r3, #11
 8000ef8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <Controller+0x254>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f7ff fdef 	bl	8000ae8 <__aeabi_fcmpgt>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <Controller+0x244>
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <Controller+0x264>)
 8000f14:	330b      	adds	r3, #11
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	e014      	b.n	8000f46 <Controller+0x26e>
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <Controller+0x254>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	e010      	b.n	8000f46 <Controller+0x26e>
 8000f24:	20000138 	.word	0x20000138
 8000f28:	2000014c 	.word	0x2000014c
 8000f2c:	20000134 	.word	0x20000134
 8000f30:	08009210 	.word	0x08009210
 8000f34:	2000013c 	.word	0x2000013c
 8000f38:	08008eac 	.word	0x08008eac
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	4b4c      	ldr	r3, [pc, #304]	; (8001074 <Controller+0x39c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	7bba      	ldrb	r2, [r7, #14]
 8000f48:	494b      	ldr	r1, [pc, #300]	; (8001078 <Controller+0x3a0>)
 8000f4a:	320b      	adds	r2, #11
 8000f4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

				// we force the last element to the max clutch aperture
				if(i == CLUTCH_PADDLE_TARGET_MAP_SIZE-1) rClutchPaddle_xClutchTargetMap[1][i] = MyOutputs->xClutchTargetMax;
 8000f50:	7bbb      	ldrb	r3, [r7, #14]
 8000f52:	2b0a      	cmp	r3, #10
 8000f54:	d107      	bne.n	8000f66 <Controller+0x28e>
 8000f56:	4b47      	ldr	r3, [pc, #284]	; (8001074 <Controller+0x39c>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000f5e:	4946      	ldr	r1, [pc, #280]	; (8001078 <Controller+0x3a0>)
 8000f60:	330b      	adds	r3, #11
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(uint8_t i=0; i<CLUTCH_PADDLE_TARGET_MAP_SIZE; i++) {
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	73bb      	strb	r3, [r7, #14]
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	d99d      	bls.n	8000eae <Controller+0x1d6>
			}

			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <Controller+0x3a4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fba4 	bl	80006c8 <__aeabi_i2f>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <Controller+0x39c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3310      	adds	r3, #16
 8000f88:	f04f 0100 	mov.w	r1, #0
 8000f8c:	9101      	str	r1, [sp, #4]
 8000f8e:	f04f 0100 	mov.w	r1, #0
 8000f92:	9100      	str	r1, [sp, #0]
 8000f94:	4938      	ldr	r1, [pc, #224]	; (8001078 <Controller+0x3a0>)
 8000f96:	200b      	movs	r0, #11
 8000f98:	f003 fb44 	bl	8004624 <My2DMapInterpolate>

			// we apply the  clutch paddle offset from the multifunction (inside the desired rClutchPaddle window)
			if(MyInputs->rClutchPaddle >= CLUTCH_PADDLE_ALLOW_OFFSET_MIN && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_ALLOW_OFFSET_MAX) {
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <Controller+0x3a4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	dd1f      	ble.n	8000fe8 <Controller+0x310>
 8000fa8:	4b34      	ldr	r3, [pc, #208]	; (800107c <Controller+0x3a4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8000fb0:	2b5f      	cmp	r3, #95	; 0x5f
 8000fb2:	dc19      	bgt.n	8000fe8 <Controller+0x310>
				MyOutputs->xClutchTargetManual *= rClutchPaddle_xClutchTargetOffsetMaps[MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_OFFSET_IDX-1]];
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <Controller+0x39c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <Controller+0x39c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f993 306f 	ldrsb.w	r3, [r3, #111]	; 0x6f
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <Controller+0x3a8>)
 8000fc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fca:	492a      	ldr	r1, [pc, #168]	; (8001074 <Controller+0x39c>)
 8000fcc:	680c      	ldr	r4, [r1, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	f7ff fbcd 	bl	8000770 <__aeabi_fmul>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6123      	str	r3, [r4, #16]
 8000fda:	e005      	b.n	8000fe8 <Controller+0x310>

			// TODO: terminate potential array timed control that runs below

		}
		else {
			MyOutputs->xClutchTargetManual = MyOutputs->xClutchTargetMin;
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <Controller+0x39c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <Controller+0x39c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fe6:	611a      	str	r2, [r3, #16]
		// TODO: here consider to do min(max(protection,manual), shift (when !=0)).
		// we do this, because we want to slightly move the layshaft so that the teeth are not stopped one on top of the other
		// for this reason we need to also select a shift clutch target that is the bite point which is almost dragging the clutch to create some movement.
		// all this is mainly useful when the car is stationary (i.e. to put neutral !!)

		MyOutputs->xClutchTarget = MAX(MyOutputs->xClutchTargetProtection, MyOutputs->xClutchTargetManual);
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <Controller+0x39c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	4b21      	ldr	r3, [pc, #132]	; (8001074 <Controller+0x39c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	f7ff fd76 	bl	8000ae8 <__aeabi_fcmpgt>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <Controller+0x332>
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <Controller+0x39c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	e002      	b.n	8001010 <Controller+0x338>
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <Controller+0x39c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <Controller+0x39c>)
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	61d3      	str	r3, [r2, #28]
		MyOutputs->xClutchTarget = (MyOutputs->xClutchTargetShift != MyOutputs->xClutchTargetMin ? MyOutputs->xClutchTargetShift : MyOutputs->xClutchTarget);
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <Controller+0x39c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <Controller+0x39c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f7ff fd37 	bl	8000a98 <__aeabi_fcmpeq>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d103      	bne.n	8001038 <Controller+0x360>
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <Controller+0x39c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	e002      	b.n	800103e <Controller+0x366>
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <Controller+0x39c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <Controller+0x39c>)
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	61d3      	str	r3, [r2, #28]
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES

		// Toggle 1
		if(TOGGLE_SWITCH01_BUTTON && tToggleSwitch01 < tControllerTimmer) {
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800104a:	2b00      	cmp	r3, #0
 800104c:	d034      	beq.n	80010b8 <Controller+0x3e0>
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <Controller+0x3ac>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <Controller+0x3b0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d22e      	bcs.n	80010b8 <Controller+0x3e0>
			if(!MyOutputs->NToggleSwitch01State) {
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <Controller+0x39c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001062:	2b00      	cmp	r3, #0
 8001064:	d112      	bne.n	800108c <Controller+0x3b4>
				MyOutputs->NToggleSwitch01State = 1;
 8001066:	4b03      	ldr	r3, [pc, #12]	; (8001074 <Controller+0x39c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001070:	e011      	b.n	8001096 <Controller+0x3be>
 8001072:	bf00      	nop
 8001074:	20000134 	.word	0x20000134
 8001078:	20000000 	.word	0x20000000
 800107c:	2000014c 	.word	0x2000014c
 8001080:	08009114 	.word	0x08009114
 8001084:	20000114 	.word	0x20000114
 8001088:	20000138 	.word	0x20000138

				// Actions for toggle ON
				// remember the multifunction override
			}
			else {
				MyOutputs->NToggleSwitch01State = 0;
 800108c:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <Controller+0x5d8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
				// Actions for toggle OFF
				// remember the multifunction override

			}

			MyOutputs->NToggleSwitch01State ^= 1;
 8001096:	4b86      	ldr	r3, [pc, #536]	; (80012b0 <Controller+0x5d8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800109e:	4b84      	ldr	r3, [pc, #528]	; (80012b0 <Controller+0x5d8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f082 0201 	eor.w	r2, r2, #1
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
			tToggleSwitch01 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <Controller+0x5dc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80010b4:	4a80      	ldr	r2, [pc, #512]	; (80012b8 <Controller+0x5e0>)
 80010b6:	6013      	str	r3, [r2, #0]
		}

		// Toggle 2
		if(TOGGLE_SWITCH02_BUTTON && tToggleSwitch02 < tControllerTimmer) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d016      	beq.n	80010f0 <Controller+0x418>
 80010c2:	4b7e      	ldr	r3, [pc, #504]	; (80012bc <Controller+0x5e4>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4b7b      	ldr	r3, [pc, #492]	; (80012b4 <Controller+0x5dc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d210      	bcs.n	80010f0 <Controller+0x418>
			MyOutputs->NToggleSwitch02State ^= 1;
 80010ce:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <Controller+0x5d8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <Controller+0x5d8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f082 0201 	eor.w	r2, r2, #1
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			tToggleSwitch02 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
 80010e4:	4b73      	ldr	r3, [pc, #460]	; (80012b4 <Controller+0x5dc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80010ec:	4a73      	ldr	r2, [pc, #460]	; (80012bc <Controller+0x5e4>)
 80010ee:	6013      	str	r3, [r2, #0]
		}

		// Toggle 3
		if(TOGGLE_SWITCH03_BUTTON && tToggleSwitch03 < tControllerTimmer) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d016      	beq.n	8001128 <Controller+0x450>
 80010fa:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <Controller+0x5e8>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <Controller+0x5dc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d210      	bcs.n	8001128 <Controller+0x450>
			MyOutputs->NToggleSwitch03State ^= 1;
 8001106:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <Controller+0x5d8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800110e:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <Controller+0x5d8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f082 0201 	eor.w	r2, r2, #1
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			tToggleSwitch03 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
 800111c:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <Controller+0x5dc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001124:	4a66      	ldr	r2, [pc, #408]	; (80012c0 <Controller+0x5e8>)
 8001126:	6013      	str	r3, [r2, #0]
	//		inputs->NToggleSwitch04State ^= 1;
	//		tToggleSwitch04 = tControllerTimmer + TOGGLE_SWITCH_DEBOUNCE;
	//	}


		MyOutputs->BSWLEDA = MyOutputs->NToggleSwitch01State;
 8001128:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <Controller+0x5d8>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b60      	ldr	r3, [pc, #384]	; (80012b0 <Controller+0x5d8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f892 204b 	ldrb.w	r2, [r2, #75]	; 0x4b
 8001134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		MyOutputs->BSWLEDB = MyOutputs->NToggleSwitch02State;
 8001138:	4b5d      	ldr	r3, [pc, #372]	; (80012b0 <Controller+0x5d8>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <Controller+0x5d8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		MyOutputs->BSWLEDC = MyOutputs->NToggleSwitch03State;
 8001148:	4b59      	ldr	r3, [pc, #356]	; (80012b0 <Controller+0x5d8>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b58      	ldr	r3, [pc, #352]	; (80012b0 <Controller+0x5d8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f892 204d 	ldrb.w	r2, [r2, #77]	; 0x4d
 8001154:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// MULTIFUNCTION

		// inputs
		MyOutputs->NMultifunctionActiveSwitch = MyInputs->NSwitchA;
 8001158:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <Controller+0x5ec>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <Controller+0x5d8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 8001164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		MyOutputs->BMultifunctionNextPos = MULTIFUNCTION_NEXT_BUTTON;
 8001168:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <Controller+0x5d8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 8001172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		MyOutputs->BMultifunctionPrevPos = MULTIFUNCTION_PREV_BUTTON;
 8001176:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <Controller+0x5d8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	f892 2069 	ldrb.w	r2, [r2, #105]	; 0x69
 8001180:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

		if(MyOutputs->NMultifunctionActiveSwitch != NMultifunctionActiveSwitchPrev) {
 8001184:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <Controller+0x5d8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800118c:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <Controller+0x5f0>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d02d      	beq.n	80011f0 <Controller+0x518>
			NMultifunctionActiveSwitchPrev = MyOutputs->NMultifunctionActiveSwitch;
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <Controller+0x5d8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800119c:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <Controller+0x5f0>)
 800119e:	701a      	strb	r2, [r3, #0]
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 80011a0:	4b44      	ldr	r3, [pc, #272]	; (80012b4 <Controller+0x5dc>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <Controller+0x5d8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80011ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			MyOutputs->BUseButtonsForMultifunction = 1;
 80011b0:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <Controller+0x5d8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			NMFIdx = MyOutputs->NMultifunctionActiveSwitch - 1;	// to go from 1-14 to 0-13 indexing for the arrays
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <Controller+0x5d8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <Controller+0x5f4>)
 80011c8:	701a      	strb	r2, [r3, #0]

			if(MyOutputs->NDispalyPage != DISPLAY_MULTIFUNCTION_PAGE) MyOutputs->NDispalyPagePrev = MyOutputs->NDispalyPage;	// we save and change the page number here
 80011ca:	4b39      	ldr	r3, [pc, #228]	; (80012b0 <Controller+0x5d8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d007      	beq.n	80011e6 <Controller+0x50e>
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <Controller+0x5d8>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <Controller+0x5d8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f992 204f 	ldrsb.w	r2, [r2, #79]	; 0x4f
 80011e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			MyOutputs->NDispalyPage = DISPLAY_MULTIFUNCTION_PAGE;
 80011e6:	4b32      	ldr	r3, [pc, #200]	; (80012b0 <Controller+0x5d8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2206      	movs	r2, #6
 80011ec:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		}

		// + Button (next position)
		if(MyOutputs->BMultifunctionNextPos && (MyOutputs->tMultifunctionActiveOnRot >= tControllerTimmer || ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) && !MyOutputs->BMultifunctionNextPosState) {
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <Controller+0x5d8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d04d      	beq.n	8001298 <Controller+0x5c0>
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <Controller+0x5d8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <Controller+0x5dc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d345      	bcc.n	8001298 <Controller+0x5c0>
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <Controller+0x5d8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001214:	2b00      	cmp	r3, #0
 8001216:	d13f      	bne.n	8001298 <Controller+0x5c0>
			MyOutputs->BMultifunctionNextPosState = 1;
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <Controller+0x5d8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <Controller+0x5dc>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <Controller+0x5d8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800122e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

			if(MyOutputs->NMultifunction[NMFIdx] + 1 > MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <Controller+0x5d8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <Controller+0x5f4>)
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4413      	add	r3, r2
 800123c:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8001240:	4619      	mov	r1, r3
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <Controller+0x5d8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <Controller+0x5f4>)
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	4413      	add	r3, r2
 800124c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001250:	4299      	cmp	r1, r3
 8001252:	db11      	blt.n	8001278 <Controller+0x5a0>
				if(MyOutputs->BMultifunctionWrap[NMFIdx]) MyOutputs->NMultifunction[NMFIdx] = 1;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <Controller+0x5d8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <Controller+0x5f4>)
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	4413      	add	r3, r2
 800125e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001262:	2b00      	cmp	r3, #0
 8001264:	d034      	beq.n	80012d0 <Controller+0x5f8>
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <Controller+0x5d8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <Controller+0x5f4>)
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	4413      	add	r3, r2
 8001270:	2201      	movs	r2, #1
 8001272:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			if(MyOutputs->NMultifunction[NMFIdx] + 1 > MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 8001276:	e02b      	b.n	80012d0 <Controller+0x5f8>
			}
			else {
				MyOutputs->NMultifunction[NMFIdx] ++;
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <Controller+0x5d8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <Controller+0x5f4>)
 800127e:	7812      	ldrb	r2, [r2, #0]
 8001280:	1899      	adds	r1, r3, r2
 8001282:	f991 106d 	ldrsb.w	r1, [r1, #109]	; 0x6d
 8001286:	b2c9      	uxtb	r1, r1
 8001288:	3101      	adds	r1, #1
 800128a:	b2c9      	uxtb	r1, r1
 800128c:	b249      	sxtb	r1, r1
 800128e:	4413      	add	r3, r2
 8001290:	460a      	mov	r2, r1
 8001292:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			if(MyOutputs->NMultifunction[NMFIdx] + 1 > MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 8001296:	e01b      	b.n	80012d0 <Controller+0x5f8>
			}
		}
		else if(!MyOutputs->BMultifunctionNextPos) {
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <Controller+0x5d8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d116      	bne.n	80012d2 <Controller+0x5fa>
			MyOutputs->BMultifunctionNextPosState = 0;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <Controller+0x5d8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80012ae:	e010      	b.n	80012d2 <Controller+0x5fa>
 80012b0:	20000134 	.word	0x20000134
 80012b4:	20000138 	.word	0x20000138
 80012b8:	20000114 	.word	0x20000114
 80012bc:	20000140 	.word	0x20000140
 80012c0:	20000108 	.word	0x20000108
 80012c4:	2000014c 	.word	0x2000014c
 80012c8:	2000011c 	.word	0x2000011c
 80012cc:	20000148 	.word	0x20000148
			if(MyOutputs->NMultifunction[NMFIdx] + 1 > MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 80012d0:	bf00      	nop
		}
		// - Button (previous position)
		if(MyOutputs->BMultifunctionPrevPos && (MyOutputs->tMultifunctionActiveOnRot >= tControllerTimmer || ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) && !MyOutputs->BMultifunctionPrevPosState) {
 80012d2:	4ba3      	ldr	r3, [pc, #652]	; (8001560 <Controller+0x888>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d04f      	beq.n	800137e <Controller+0x6a6>
 80012de:	4ba0      	ldr	r3, [pc, #640]	; (8001560 <Controller+0x888>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80012e6:	4b9f      	ldr	r3, [pc, #636]	; (8001564 <Controller+0x88c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d347      	bcc.n	800137e <Controller+0x6a6>
 80012ee:	4b9c      	ldr	r3, [pc, #624]	; (8001560 <Controller+0x888>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d141      	bne.n	800137e <Controller+0x6a6>
			MyOutputs->BMultifunctionPrevPosState = 1;
 80012fa:	4b99      	ldr	r3, [pc, #612]	; (8001560 <Controller+0x888>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 8001304:	4b97      	ldr	r3, [pc, #604]	; (8001564 <Controller+0x88c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b95      	ldr	r3, [pc, #596]	; (8001560 <Controller+0x888>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8001310:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

			if(MyOutputs->NMultifunction[NMFIdx] - 1 <= 0 ) {
 8001314:	4b92      	ldr	r3, [pc, #584]	; (8001560 <Controller+0x888>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a93      	ldr	r2, [pc, #588]	; (8001568 <Controller+0x890>)
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	4413      	add	r3, r2
 800131e:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8001322:	2b01      	cmp	r3, #1
 8001324:	dc1b      	bgt.n	800135e <Controller+0x686>
				if(MyOutputs->BMultifunctionWrap[NMFIdx]) MyOutputs->NMultifunction[NMFIdx] = MyOutputs->NMultifunctionMaxPos[NMFIdx] - 1;
 8001326:	4b8e      	ldr	r3, [pc, #568]	; (8001560 <Controller+0x888>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a8f      	ldr	r2, [pc, #572]	; (8001568 <Controller+0x890>)
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	4413      	add	r3, r2
 8001330:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001334:	2b00      	cmp	r3, #0
 8001336:	d02e      	beq.n	8001396 <Controller+0x6be>
 8001338:	4b89      	ldr	r3, [pc, #548]	; (8001560 <Controller+0x888>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a8a      	ldr	r2, [pc, #552]	; (8001568 <Controller+0x890>)
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	4413      	add	r3, r2
 8001342:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001346:	3b01      	subs	r3, #1
 8001348:	b2d8      	uxtb	r0, r3
 800134a:	4b85      	ldr	r3, [pc, #532]	; (8001560 <Controller+0x888>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a86      	ldr	r2, [pc, #536]	; (8001568 <Controller+0x890>)
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	4611      	mov	r1, r2
 8001354:	b242      	sxtb	r2, r0
 8001356:	440b      	add	r3, r1
 8001358:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			if(MyOutputs->NMultifunction[NMFIdx] - 1 <= 0 ) {
 800135c:	e01b      	b.n	8001396 <Controller+0x6be>
			}
			else {
				MyOutputs->NMultifunction[NMFIdx] --;
 800135e:	4b80      	ldr	r3, [pc, #512]	; (8001560 <Controller+0x888>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a81      	ldr	r2, [pc, #516]	; (8001568 <Controller+0x890>)
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	1899      	adds	r1, r3, r2
 8001368:	f991 106d 	ldrsb.w	r1, [r1, #109]	; 0x6d
 800136c:	b2c9      	uxtb	r1, r1
 800136e:	3901      	subs	r1, #1
 8001370:	b2c9      	uxtb	r1, r1
 8001372:	b249      	sxtb	r1, r1
 8001374:	4413      	add	r3, r2
 8001376:	460a      	mov	r2, r1
 8001378:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			if(MyOutputs->NMultifunction[NMFIdx] - 1 <= 0 ) {
 800137c:	e00b      	b.n	8001396 <Controller+0x6be>
			}
		}
		else if(!MyOutputs->BMultifunctionPrevPos) {
 800137e:	4b78      	ldr	r3, [pc, #480]	; (8001560 <Controller+0x888>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <Controller+0x6c0>
			MyOutputs->BMultifunctionPrevPosState = 0;
 800138a:	4b75      	ldr	r3, [pc, #468]	; (8001560 <Controller+0x888>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001394:	e000      	b.n	8001398 <Controller+0x6c0>
			if(MyOutputs->NMultifunction[NMFIdx] - 1 <= 0 ) {
 8001396:	bf00      	nop
		}

		if(MyOutputs->tMultifunctionActiveOnRot < tControllerTimmer && MyOutputs->BUseButtonsForMultifunction) {
 8001398:	4b71      	ldr	r3, [pc, #452]	; (8001560 <Controller+0x888>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80013a0:	4b70      	ldr	r3, [pc, #448]	; (8001564 <Controller+0x88c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d212      	bcs.n	80013ce <Controller+0x6f6>
 80013a8:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <Controller+0x888>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00c      	beq.n	80013ce <Controller+0x6f6>
			MyOutputs->BUseButtonsForMultifunction = 0;
 80013b4:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <Controller+0x888>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			// here we return to the actual page
			MyOutputs->NDispalyPage = MyOutputs->NDispalyPagePrev;
 80013be:	4b68      	ldr	r3, [pc, #416]	; (8001560 <Controller+0x888>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <Controller+0x888>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f992 2050 	ldrsb.w	r2, [r2, #80]	; 0x50
 80013ca:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		}


		// Here we assign the various multifunction maps to the various indexes
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_TARGET_MAX_IDX-1]) MyOutputs->xClutchTargetMax = xClutchTargetMaxMap[MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_TARGET_MAX_IDX-1]-1];
 80013ce:	4b64      	ldr	r3, [pc, #400]	; (8001560 <Controller+0x888>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <Controller+0x718>
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <Controller+0x888>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 80013e2:	1e5a      	subs	r2, r3, #1
 80013e4:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <Controller+0x888>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4960      	ldr	r1, [pc, #384]	; (800156c <Controller+0x894>)
 80013ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_PADDLE_MAP_IDX-1]) MyOutputs->NxClutchPaddleMapIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_MAP_IDX-1] - 1;
 80013f0:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <Controller+0x888>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10a      	bne.n	8001412 <Controller+0x73a>
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <Controller+0x888>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <Controller+0x888>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3a01      	subs	r2, #1
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_PADDLE_OFFSET_IDX-1]) MyOutputs->NxClutchPaddleOffsetIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_PADDLE_OFFSET_IDX-1] - 1;
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <Controller+0x888>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10a      	bne.n	8001434 <Controller+0x75c>
 800141e:	4b50      	ldr	r3, [pc, #320]	; (8001560 <Controller+0x888>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f993 306f 	ldrsb.w	r3, [r3, #111]	; 0x6f
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <Controller+0x888>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3a01      	subs	r2, #1
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_RELEASE_MAP_IDX-1]) MyOutputs->NxClutchReleaseMapIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_RELEASE_MAP_IDX-1] - 1;
 8001434:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <Controller+0x888>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10a      	bne.n	8001456 <Controller+0x77e>
 8001440:	4b47      	ldr	r3, [pc, #284]	; (8001560 <Controller+0x888>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b45      	ldr	r3, [pc, #276]	; (8001560 <Controller+0x888>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3a01      	subs	r2, #1
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_CLUTCH_RELEASE_OFFSET_IDX-1]) MyOutputs->NxClutchReleaseOffsetIdx = MyOutputs->NMultifunction[MULTIFUNCTION_CLUTCH_RELEASE_OFFSET_IDX-1] - 1;
 8001456:	4b42      	ldr	r3, [pc, #264]	; (8001560 <Controller+0x888>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10a      	bne.n	8001478 <Controller+0x7a0>
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <Controller+0x888>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f993 3071 	ldrsb.w	r3, [r3, #113]	; 0x71
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <Controller+0x888>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3a01      	subs	r2, #1
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_UPSHIFT_TYPE_IDX-1]) MyOutputs->NUpShiftType = MyOutputs->NMultifunction[MULTIFUNCTION_UPSHIFT_TYPE_IDX-1] - 1;
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <Controller+0x888>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10a      	bne.n	800149a <Controller+0x7c2>
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <Controller+0x888>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <Controller+0x888>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3a01      	subs	r2, #1
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if(!MyOutputs->BMultifunctionOverride[MULTIFUNCTION_DNSHIFT_TYPE_IDX-1]) MyOutputs->NDnShiftType = MyOutputs->NMultifunction[MULTIFUNCTION_DNSHIFT_TYPE_IDX-1] - 1;
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <Controller+0x888>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10a      	bne.n	80014bc <Controller+0x7e4>
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <Controller+0x888>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f993 3073 	ldrsb.w	r3, [r3, #115]	; 0x73
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <Controller+0x888>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3a01      	subs	r2, #1
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// DISPLAY

		// inputs
		MyOutputs->BDisplayPageNext = DISPLAY_NEXT_BUTTON;
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <Controller+0x888>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 80014c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		MyOutputs->BDisplayPagePrev = DISPLAY_PREV_BUTTON;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <Controller+0x888>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	f892 2069 	ldrb.w	r2, [r2, #105]	; 0x69
 80014d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

		if(!ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) {	// we use the page buttons function only if we have the multifunction timing feature enabled

			if(!MyOutputs->BUseButtonsForMultifunction) {	// we only use them as page buttons when they are not used for the multifunction
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <Controller+0x888>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f040 8091 	bne.w	8001608 <Controller+0x930>
				if(MyOutputs->BDisplayPageNext && (MyOutputs->tDisplayPageDebounce < tControllerTimmer) && !MyOutputs->BDisplayPageNextState) {
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <Controller+0x888>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d040      	beq.n	8001574 <Controller+0x89c>
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <Controller+0x888>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <Controller+0x88c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d239      	bcs.n	8001574 <Controller+0x89c>
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <Controller+0x888>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001508:	2b00      	cmp	r3, #0
 800150a:	d133      	bne.n	8001574 <Controller+0x89c>
					MyOutputs->BDisplayPageNextState = 1;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <Controller+0x888>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					MyOutputs->tDisplayPageDebounce = tControllerTimmer + DISPLAY_PAGE_BUTTON_DEBOUNCE;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <Controller+0x88c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <Controller+0x888>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	32c8      	adds	r2, #200	; 0xc8
 8001520:	659a      	str	r2, [r3, #88]	; 0x58

					MyOutputs->NDispalyPage ++;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <Controller+0x888>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f993 204f 	ldrsb.w	r2, [r3, #79]	; 0x4f
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	3201      	adds	r2, #1
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	b252      	sxtb	r2, r2
 8001532:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
					MyOutputs->NDispalyPage %= DISPLAY_MAX_PAGE;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <Controller+0x888>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f993 204f 	ldrsb.w	r2, [r3, #79]	; 0x4f
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <Controller+0x888>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <Controller+0x898>)
 8001544:	fb83 1302 	smull	r1, r3, r3, r2
 8001548:	1059      	asrs	r1, r3, #1
 800154a:	17d3      	asrs	r3, r2, #31
 800154c:	1ac9      	subs	r1, r1, r3
 800154e:	460b      	mov	r3, r1
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b25b      	sxtb	r3, r3
 8001558:	f880 304f 	strb.w	r3, [r0, #79]	; 0x4f
 800155c:	e015      	b.n	800158a <Controller+0x8b2>
 800155e:	bf00      	nop
 8001560:	20000134 	.word	0x20000134
 8001564:	20000138 	.word	0x20000138
 8001568:	20000148 	.word	0x20000148
 800156c:	080091d8 	.word	0x080091d8
 8001570:	66666667 	.word	0x66666667

				}
				else if(!MyOutputs->BDisplayPageNext) {
 8001574:	4bad      	ldr	r3, [pc, #692]	; (800182c <Controller+0xb54>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800157c:	2b00      	cmp	r3, #0
 800157e:	d104      	bne.n	800158a <Controller+0x8b2>
					MyOutputs->BDisplayPageNextState = 0;
 8001580:	4baa      	ldr	r3, [pc, #680]	; (800182c <Controller+0xb54>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}

				if(MyOutputs->BDisplayPagePrev && (MyOutputs->tDisplayPageDebounce < tControllerTimmer) && !MyOutputs->BDisplayPagePrevState) {
 800158a:	4ba8      	ldr	r3, [pc, #672]	; (800182c <Controller+0xb54>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001592:	2b00      	cmp	r3, #0
 8001594:	d02d      	beq.n	80015f2 <Controller+0x91a>
 8001596:	4ba5      	ldr	r3, [pc, #660]	; (800182c <Controller+0xb54>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800159c:	4ba4      	ldr	r3, [pc, #656]	; (8001830 <Controller+0xb58>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d226      	bcs.n	80015f2 <Controller+0x91a>
 80015a4:	4ba1      	ldr	r3, [pc, #644]	; (800182c <Controller+0xb54>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d120      	bne.n	80015f2 <Controller+0x91a>
					MyOutputs->BDisplayPagePrevState = 1;
 80015b0:	4b9e      	ldr	r3, [pc, #632]	; (800182c <Controller+0xb54>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
					MyOutputs->tDisplayPageDebounce = tControllerTimmer + DISPLAY_PAGE_BUTTON_DEBOUNCE;
 80015ba:	4b9d      	ldr	r3, [pc, #628]	; (8001830 <Controller+0xb58>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b9b      	ldr	r3, [pc, #620]	; (800182c <Controller+0xb54>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	32c8      	adds	r2, #200	; 0xc8
 80015c4:	659a      	str	r2, [r3, #88]	; 0x58

					MyOutputs->NDispalyPage --;
 80015c6:	4b99      	ldr	r3, [pc, #612]	; (800182c <Controller+0xb54>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f993 204f 	ldrsb.w	r2, [r3, #79]	; 0x4f
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	3a01      	subs	r2, #1
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	b252      	sxtb	r2, r2
 80015d6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
					if(MyOutputs->NDispalyPage < 0) MyOutputs->NDispalyPage = DISPLAY_MAX_PAGE - 1;
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <Controller+0xb54>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da10      	bge.n	8001608 <Controller+0x930>
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <Controller+0xb54>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80015f0:	e00a      	b.n	8001608 <Controller+0x930>

				}
				else if(!MyOutputs->BDisplayPagePrev) {
 80015f2:	4b8e      	ldr	r3, [pc, #568]	; (800182c <Controller+0xb54>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d104      	bne.n	8001608 <Controller+0x930>
					MyOutputs->BDisplayPagePrevState = 0;
 80015fe:	4b8b      	ldr	r3, [pc, #556]	; (800182c <Controller+0xb54>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8001608:	4b8a      	ldr	r3, [pc, #552]	; (8001834 <Controller+0xb5c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d82d      	bhi.n	800166c <Controller+0x994>
 8001610:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <Controller+0x940>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	08001631 	.word	0x08001631
 800161c:	0800163b 	.word	0x0800163b
 8001620:	08001645 	.word	0x08001645
 8001624:	0800164f 	.word	0x0800164f
 8001628:	08001659 	.word	0x08001659
 800162c:	08001663 	.word	0x08001663

		case IDLE_STATE:
			IDLE_Run();
 8001630:	f000 f9c0 	bl	80019b4 <IDLE_Run>
			IDLE_Event();
 8001634:	f000 f9a0 	bl	8001978 <IDLE_Event>
			break;
 8001638:	e018      	b.n	800166c <Controller+0x994>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 800163a:	f000 fa51 	bl	8001ae0 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 800163e:	f000 f9e3 	bl	8001a08 <PRE_UPSHIFT_Event>
			break;
 8001642:	e013      	b.n	800166c <Controller+0x994>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 8001644:	f000 fba4 	bl	8001d90 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 8001648:	f000 fb36 	bl	8001cb8 <PRE_DNSHIFT_Event>
			break;
 800164c:	e00e      	b.n	800166c <Controller+0x994>
		case SHIFTING_STATE:
			SHIFTING_Run();
 800164e:	f000 fd57 	bl	8002100 <SHIFTING_Run>
			SHIFTING_Event();
 8001652:	f000 fd2d 	bl	80020b0 <SHIFTING_Event>
			break;
 8001656:	e009      	b.n	800166c <Controller+0x994>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 8001658:	f000 fdea 	bl	8002230 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 800165c:	f000 fdc4 	bl	80021e8 <POSTSHIFT_Event>
			break;
 8001660:	e004      	b.n	800166c <Controller+0x994>
		case ERROR_STATE:
			ERROR_Run();
 8001662:	f000 fe61 	bl	8002328 <ERROR_Run>
			ERROR_Event();
 8001666:	f000 fe57 	bl	8002318 <ERROR_Event>
			break;
 800166a:	bf00      	nop

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CONTROLLER STATUS

		MyOutputs->NControllerStatusWord = 0;
 800166c:	4b6f      	ldr	r3, [pc, #444]	; (800182c <Controller+0xb54>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->BUpShiftPortState				<<0;
 8001676:	4b6d      	ldr	r3, [pc, #436]	; (800182c <Controller+0xb54>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <Controller+0xb54>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001686:	4619      	mov	r1, r3
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <Controller+0xb54>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->BDnShiftPortState				<<1;
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <Controller+0xb54>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <Controller+0xb54>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4619      	mov	r1, r3
 80016a6:	4b61      	ldr	r3, [pc, #388]	; (800182c <Controller+0xb54>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->BClutchActuated					<<2;
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <Controller+0xb54>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80016b8:	4b5c      	ldr	r3, [pc, #368]	; (800182c <Controller+0xb54>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <Controller+0xb54>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->BSparkCut						<<3;
 80016ce:	4b57      	ldr	r3, [pc, #348]	; (800182c <Controller+0xb54>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80016d6:	4b55      	ldr	r3, [pc, #340]	; (800182c <Controller+0xb54>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4619      	mov	r1, r3
 80016e2:	4b52      	ldr	r3, [pc, #328]	; (800182c <Controller+0xb54>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->BLaunchControl					<<4;
 80016ec:	4b4f      	ldr	r3, [pc, #316]	; (800182c <Controller+0xb54>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80016f4:	4b4d      	ldr	r3, [pc, #308]	; (800182c <Controller+0xb54>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4b4a      	ldr	r3, [pc, #296]	; (800182c <Controller+0xb54>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= (MyOutputs->NAntistallState == 2 ? 1 : 0)	<<5;
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <Controller+0xb54>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <Controller+0xb54>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800171a:	2b02      	cmp	r3, #2
 800171c:	d101      	bne.n	8001722 <Controller+0xa4a>
 800171e:	2120      	movs	r1, #32
 8001720:	e000      	b.n	8001724 <Controller+0xa4c>
 8001722:	2100      	movs	r1, #0
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <Controller+0xb54>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->BShiftInProgress					<<6;
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <Controller+0xb54>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <Controller+0xb54>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800173e:	019b      	lsls	r3, r3, #6
 8001740:	4619      	mov	r1, r3
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <Controller+0xb54>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch01State				<<7;
 800174c:	4b37      	ldr	r3, [pc, #220]	; (800182c <Controller+0xb54>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <Controller+0xb54>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800175c:	01db      	lsls	r3, r3, #7
 800175e:	4619      	mov	r1, r3
 8001760:	4b32      	ldr	r3, [pc, #200]	; (800182c <Controller+0xb54>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch02State				<<8;
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <Controller+0xb54>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <Controller+0xb54>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	4619      	mov	r1, r3
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <Controller+0xb54>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch03State				<<9;
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <Controller+0xb54>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <Controller+0xb54>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	4619      	mov	r1, r3
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <Controller+0xb54>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= MyOutputs->NToggleSwitch04State				<<10;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <Controller+0xb54>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <Controller+0xb54>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4619      	mov	r1, r3
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <Controller+0xb54>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= 0											<<11;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <Controller+0xb54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <Controller+0xb54>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 80017d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= 0											<<12;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <Controller+0xb54>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <Controller+0xb54>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 80017e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= 0											<<13;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <Controller+0xb54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <Controller+0xb54>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 80017f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= 0											<<14;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <Controller+0xb54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <Controller+0xb54>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8001800:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		MyOutputs->NControllerStatusWord |= 0											<<15;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <Controller+0xb54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <Controller+0xb54>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8001810:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

		MyOutputs->NControllerStatusWord |= (MyOutputs->NControlErrorStatusShadow  && 0xffff) <<16;	// the controller errors (without the first which is "No error"), taken only the 16 first bits out of the 32
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <Controller+0xb54>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <Controller+0xb54>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <Controller+0xb60>
 8001826:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800182a:	e006      	b.n	800183a <Controller+0xb62>
 800182c:	20000134 	.word	0x20000134
 8001830:	20000138 	.word	0x20000138
 8001834:	2000010c 	.word	0x2000010c
 8001838:	2100      	movs	r1, #0
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <Controller+0xc64>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

		if(tControllerErrorStatusShadow < tControllerTimmer) {
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <Controller+0xc68>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <Controller+0xc6c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d209      	bcs.n	8001864 <Controller+0xb8c>
			tControllerErrorStatusShadow = tControllerTimmer + CONTROLLER_STATUS_SHADOW_REFRESH;
 8001850:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <Controller+0xc6c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001858:	4a39      	ldr	r2, [pc, #228]	; (8001940 <Controller+0xc68>)
 800185a:	6013      	str	r3, [r2, #0]
			MyOutputs->NControlErrorStatusShadow = 0;
 800185c:	4b37      	ldr	r3, [pc, #220]	; (800193c <Controller+0xc64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// DISPLAY DIAGNOSTICS

		MyOutputs->NDisplayFlags = 0;
 8001864:	4b35      	ldr	r3, [pc, #212]	; (800193c <Controller+0xc64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> RPM_ILLEGAL_FOR_UPSHIFT) <<0;
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <Controller+0xc64>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <Controller+0xc64>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	08db      	lsrs	r3, r3, #3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <Controller+0xc64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> RPM_ILLEGAL_FOR_DNSHIFT) <<1;
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <Controller+0xc64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <Controller+0xc64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b2db      	uxtb	r3, r3
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <Controller+0xc64>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> GEAR_TARGET_MISMATCH) <<2;
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <Controller+0xc64>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <Controller+0xc64>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <Controller+0xc64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |=	(MyOutputs->NControlErrorStatusShadow >> FALSE_NEUTRAL_WITH_NO_CLUTCH) <<3;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <Controller+0xc64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f893 1051 	ldrb.w	r1, [r3, #81]	; 0x51
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <Controller+0xc64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	0a5b      	lsrs	r3, r3, #9
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <Controller+0xc64>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |= 0 <<4;
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <Controller+0xc64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <Controller+0xc64>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 80018fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |= 0 <<5;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <Controller+0xc64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <Controller+0xc64>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 800190e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |= 0 <<6;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <Controller+0xc64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <Controller+0xc64>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 800191e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		MyOutputs->NDisplayFlags |= 0 <<7;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <Controller+0xc64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <Controller+0xc64>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 800192e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000134 	.word	0x20000134
 8001940:	20000130 	.word	0x20000130
 8001944:	20000138 	.word	0x20000138

08001948 <IDLE_Entry>:

void IDLE_Entry(void) {
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <IDLE_Entry+0x1c>)
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <IDLE_Entry+0x20>)
 8001952:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <IDLE_Entry+0x1c>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000010c 	.word	0x2000010c
 8001968:	20000105 	.word	0x20000105

0800196c <IDLE_Exit>:
void IDLE_Exit(void) {
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <IDLE_Event>:
void IDLE_Event(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <IDLE_Event+0x38>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <IDLE_Event+0x1c>
        IDLE_Exit();
 800198a:	f7ff ffef 	bl	800196c <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 800198e:	f000 f817 	bl	80019c0 <PRE_UPSHIFT_Entry>
        return;
 8001992:	e00c      	b.n	80019ae <IDLE_Event+0x36>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <IDLE_Event+0x38>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <IDLE_Event+0x36>
        IDLE_Exit();
 80019a4:	f7ff ffe2 	bl	800196c <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 80019a8:	f000 f962 	bl	8001c70 <PRE_DNSHIFT_Entry>
        return;
 80019ac:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000014c 	.word	0x2000014c

080019b4 <IDLE_Run>:
void IDLE_Run(void) {
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <PRE_UPSHIFT_Entry+0x2c>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <PRE_UPSHIFT_Entry+0x30>)
 80019ca:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <PRE_UPSHIFT_Entry+0x2c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftInProgress = 1;
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <PRE_UPSHIFT_Entry+0x34>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	tPreShiftTimer = HAL_GetTick();
 80019dc:	f002 ff4c 	bl	8004878 <HAL_GetTick>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <PRE_UPSHIFT_Entry+0x38>)
 80019e4:	6013      	str	r3, [r2, #0]
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000010c 	.word	0x2000010c
 80019f0:	20000105 	.word	0x20000105
 80019f4:	20000134 	.word	0x20000134
 80019f8:	20000118 	.word	0x20000118

080019fc <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 8001a08:	b598      	push	{r3, r4, r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d147      	bne.n	8001aa6 <PRE_UPSHIFT_Event+0x9e>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <PRE_UPSHIFT_Event+0xcc>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3201      	adds	r2, #1
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	725a      	strb	r2, [r3, #9]

		if(((MyOutputs->NUpShiftType == WithClutch || MyOutputs->NUpShiftType == WithClutchAndSparkCut) && ALLOW_CLUTCH_ACT_DURING_UPSHIFT) || MyOutputs->BOverrideActuateClutchOnNextUpShift) {		// we check for clutch strategy during shift
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d00b      	beq.n	8001a4c <PRE_UPSHIFT_Event+0x44>
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <PRE_UPSHIFT_Event+0x44>
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <PRE_UPSHIFT_Event+0x66>
			MyOutputs->xClutchTargetShiftShadow = xClutchTargetUpShiftMap[MyInputs->NGear];
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <PRE_UPSHIFT_Event+0xcc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a54:	4619      	mov	r1, r3
 8001a56:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <PRE_UPSHIFT_Event+0xd0>)
 8001a5c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001a60:	619a      	str	r2, [r3, #24]
			MyOutputs->BOverrideActuateClutchOnNextUpShift = 0; 									// reset the strat for the next gear
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001a6c:	e005      	b.n	8001a7a <PRE_UPSHIFT_Event+0x72>
		}
		else {
			MyOutputs->xClutchTargetShiftShadow = MyOutputs->xClutchTargetMin;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a78:	619a      	str	r2, [r3, #24]
		}

		if((MyOutputs->NUpShiftType == SparkCut || MyOutputs->NUpShiftType == WithClutchAndSparkCut) && ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d005      	beq.n	8001a92 <PRE_UPSHIFT_Event+0x8a>
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <PRE_UPSHIFT_Event+0x94>
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

		PRE_UPSHIFT_Exit();
 8001a9c:	f7ff ffae 	bl	80019fc <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8001aa0:	f000 fa44 	bl	8001f2c <SHIFTING_Entry>
		return;
 8001aa4:	e012      	b.n	8001acc <PRE_UPSHIFT_Event+0xc4>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <PRE_UPSHIFT_Event+0xc8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00d      	beq.n	8001acc <PRE_UPSHIFT_Event+0xc4>
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <PRE_UPSHIFT_Event+0xd4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001ab8:	f002 fede 	bl	8004878 <HAL_GetTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	d804      	bhi.n	8001acc <PRE_UPSHIFT_Event+0xc4>
		PRE_UPSHIFT_Exit();
 8001ac2:	f7ff ff9b 	bl	80019fc <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8001ac6:	f000 fbed 	bl	80022a4 <ERROR_Entry>
		return;
 8001aca:	bf00      	nop
	}


}
 8001acc:	bd98      	pop	{r3, r4, r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000134 	.word	0x20000134
 8001ad4:	2000014c 	.word	0x2000014c
 8001ad8:	080091a8 	.word	0x080091a8
 8001adc:	20000118 	.word	0x20000118

08001ae0 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d11c      	bne.n	8001b2a <PRE_UPSHIFT_Run+0x4a>
 8001af0:	4b5c      	ldr	r3, [pc, #368]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001af8:	2b59      	cmp	r3, #89	; 0x59
 8001afa:	dc16      	bgt.n	8001b2a <PRE_UPSHIFT_Run+0x4a>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 8001afc:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0202 	orr.w	r2, r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	721a      	strb	r2, [r3, #8]
 8001b14:	4b54      	ldr	r3, [pc, #336]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6859      	ldr	r1, [r3, #4]
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	e007      	b.n	8001b3a <PRE_UPSHIFT_Run+0x5a>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0202 	bic.w	r2, r2, #2
 8001b38:	601a      	str	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError && !(ALLOW_GEARS_WITH_CAR_STOPPED && MyInputs->nEngine == 0)) {	// trying to shift up with too low rpm
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <PRE_UPSHIFT_Run+0x18c>)
 8001b50:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	da22      	bge.n	8001b9e <PRE_UPSHIFT_Run+0xbe>
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d11c      	bne.n	8001b9e <PRE_UPSHIFT_Run+0xbe>
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d016      	beq.n	8001b9e <PRE_UPSHIFT_Run+0xbe>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8001b70:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b3c      	ldr	r3, [pc, #240]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0208 	orr.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2203      	movs	r2, #3
 8001b86:	721a      	strb	r2, [r3, #8]
 8001b88:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6859      	ldr	r1, [r3, #4]
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	e007      	b.n	8001bae <PRE_UPSHIFT_Run+0xce>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 8001b9e:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0208 	bic.w	r2, r2, #8
 8001bac:	601a      	str	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d916      	bls.n	8001be8 <PRE_UPSHIFT_Run+0x108>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0210 	orr.w	r2, r2, #16
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	721a      	strb	r2, [r3, #8]
 8001bd2:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	e007      	b.n	8001bf8 <PRE_UPSHIFT_Run+0x118>
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0210 	bic.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]

	if(MyInputs->BFalseNeutral && !MyInputs->BNGearInError && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST) {	// trying to shift during False Neutral without clutch pressed
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d022      	beq.n	8001c4a <PRE_UPSHIFT_Run+0x16a>
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d11c      	bne.n	8001c4a <PRE_UPSHIFT_Run+0x16a>
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <PRE_UPSHIFT_Run+0x184>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001c18:	2b59      	cmp	r3, #89	; 0x59
 8001c1a:	dc16      	bgt.n	8001c4a <PRE_UPSHIFT_Run+0x16a>
		RaiseControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2209      	movs	r2, #9
 8001c32:	721a      	strb	r2, [r3, #8]
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	e008      	b.n	8001c5c <PRE_UPSHIFT_Run+0x17c>
	}
	else { ClearControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH); }
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <PRE_UPSHIFT_Run+0x188>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	2000014c 	.word	0x2000014c
 8001c68:	20000134 	.word	0x20000134
 8001c6c:	0800921c 	.word	0x0800921c

08001c70 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <PRE_DNSHIFT_Entry+0x2c>)
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <PRE_DNSHIFT_Entry+0x30>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <PRE_DNSHIFT_Entry+0x2c>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftInProgress = 1;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <PRE_DNSHIFT_Entry+0x34>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	tPreShiftTimer = HAL_GetTick();
 8001c8c:	f002 fdf4 	bl	8004878 <HAL_GetTick>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <PRE_DNSHIFT_Entry+0x38>)
 8001c94:	6013      	str	r3, [r2, #0]
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000010c 	.word	0x2000010c
 8001ca0:	20000105 	.word	0x20000105
 8001ca4:	20000134 	.word	0x20000134
 8001ca8:	20000118 	.word	0x20000118

08001cac <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 8001cb8:	b598      	push	{r3, r4, r7, lr}
 8001cba:	af00      	add	r7, sp, #0

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d147      	bne.n	8001d56 <PRE_DNSHIFT_Event+0x9e>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <PRE_DNSHIFT_Event+0xcc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	725a      	strb	r2, [r3, #9]

		if(((MyOutputs->NDnShiftType == WithClutch || MyOutputs->NDnShiftType == WithClutchAndSparkCut) && ALLOW_CLUTCH_ACT_DURING_DNSHIFT) || MyOutputs->BOverrideActuateClutchOnNextDnShift) {		// we check for clutch strategy during shift
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d00b      	beq.n	8001cfc <PRE_DNSHIFT_Event+0x44>
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <PRE_DNSHIFT_Event+0x44>
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <PRE_DNSHIFT_Event+0x66>
			MyOutputs->xClutchTargetShiftShadow = xClutchTargetDnShiftMap[MyInputs->NGear];
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <PRE_DNSHIFT_Event+0xcc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d04:	4619      	mov	r1, r3
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <PRE_DNSHIFT_Event+0xd0>)
 8001d0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001d10:	619a      	str	r2, [r3, #24]
			MyOutputs->BOverrideActuateClutchOnNextDnShift = 0; 									// reset the strat for the next gear
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001d1c:	e005      	b.n	8001d2a <PRE_DNSHIFT_Event+0x72>
		}
		else {
			MyOutputs->xClutchTargetShiftShadow = MyOutputs->xClutchTargetMin;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d28:	619a      	str	r2, [r3, #24]
		}

		if((MyOutputs->NDnShiftType == SparkCut || MyOutputs->NDnShiftType == WithClutchAndSparkCut) && ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d005      	beq.n	8001d42 <PRE_DNSHIFT_Event+0x8a>
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d104      	bne.n	8001d4c <PRE_DNSHIFT_Event+0x94>
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

		PRE_DNSHIFT_Exit();
 8001d4c:	f7ff ffae 	bl	8001cac <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 8001d50:	f000 f8ec 	bl	8001f2c <SHIFTING_Entry>
		return;
 8001d54:	e012      	b.n	8001d7c <PRE_DNSHIFT_Event+0xc4>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <PRE_DNSHIFT_Event+0xc8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <PRE_DNSHIFT_Event+0xc4>
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <PRE_DNSHIFT_Event+0xd4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 8001d68:	f002 fd86 	bl	8004878 <HAL_GetTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	429c      	cmp	r4, r3
 8001d70:	d804      	bhi.n	8001d7c <PRE_DNSHIFT_Event+0xc4>
		PRE_DNSHIFT_Exit();
 8001d72:	f7ff ff9b 	bl	8001cac <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 8001d76:	f000 fa95 	bl	80022a4 <ERROR_Entry>
		return;
 8001d7a:	bf00      	nop
	}

}
 8001d7c:	bd98      	pop	{r3, r4, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000134 	.word	0x20000134
 8001d84:	2000014c 	.word	0x2000014c
 8001d88:	080091c0 	.word	0x080091c0
 8001d8c:	20000118 	.word	0x20000118

08001d90 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH && !(MyInputs->BrClutchPaddleInError && ALLOW_NEUTRAL_WHEN_PADDLE_IN_ERROR)) {	// trying to put neutral gear without clutch
 8001d94:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d122      	bne.n	8001de6 <PRE_DNSHIFT_Run+0x56>
 8001da0:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001da8:	2b59      	cmp	r3, #89	; 0x59
 8001daa:	dc1c      	bgt.n	8001de6 <PRE_DNSHIFT_Run+0x56>
 8001dac:	4b5c      	ldr	r3, [pc, #368]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d116      	bne.n	8001de6 <PRE_DNSHIFT_Run+0x56>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 8001db8:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0204 	orr.w	r2, r2, #4
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	721a      	strb	r2, [r3, #8]
 8001dd0:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6859      	ldr	r1, [r3, #4]
 8001dd6:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	e007      	b.n	8001df6 <PRE_DNSHIFT_Run+0x66>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 8001de6:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0204 	bic.w	r2, r2, #4
 8001df4:	601a      	str	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError && !(ALLOW_GEARS_WITH_CAR_STOPPED && MyInputs->nEngine == 0)) {	// trying to shift down with too high rpm
 8001df6:	4b4a      	ldr	r3, [pc, #296]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <PRE_DNSHIFT_Run+0x198>)
 8001e0c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dd22      	ble.n	8001e5a <PRE_DNSHIFT_Run+0xca>
 8001e14:	4b42      	ldr	r3, [pc, #264]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11c      	bne.n	8001e5a <PRE_DNSHIFT_Run+0xca>
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d016      	beq.n	8001e5a <PRE_DNSHIFT_Run+0xca>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2205      	movs	r2, #5
 8001e42:	721a      	strb	r2, [r3, #8]
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	e007      	b.n	8001e6a <PRE_DNSHIFT_Run+0xda>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0220 	bic.w	r2, r2, #32
 8001e68:	601a      	str	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <PRE_DNSHIFT_Run+0x114>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2206      	movs	r2, #6
 8001e8c:	721a      	strb	r2, [r3, #8]
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	e007      	b.n	8001eb4 <PRE_DNSHIFT_Run+0x124>
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb2:	601a      	str	r2, [r3, #0]

	if(MyInputs->BFalseNeutral && !MyInputs->BNGearInError && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST) {	// trying to shift during False Neutral without clutch pressed
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d022      	beq.n	8001f06 <PRE_DNSHIFT_Run+0x176>
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d11c      	bne.n	8001f06 <PRE_DNSHIFT_Run+0x176>
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <PRE_DNSHIFT_Run+0x190>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8001ed4:	2b59      	cmp	r3, #89	; 0x59
 8001ed6:	dc16      	bgt.n	8001f06 <PRE_DNSHIFT_Run+0x176>
		RaiseControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH);
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2209      	movs	r2, #9
 8001eee:	721a      	strb	r2, [r3, #8]
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	e008      	b.n	8001f18 <PRE_DNSHIFT_Run+0x188>
	}
	else { ClearControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH); }
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <PRE_DNSHIFT_Run+0x194>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f14:	601a      	str	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	2000014c 	.word	0x2000014c
 8001f24:	20000134 	.word	0x20000134
 8001f28:	08009228 	.word	0x08009228

08001f2c <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <SHIFTING_Entry+0x13c>)
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <SHIFTING_Entry+0x140>)
 8001f36:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <SHIFTING_Entry+0x13c>)
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	701a      	strb	r2, [r3, #0]

	tShiftTimer = HAL_GetTick();
 8001f3e:	f002 fc9b 	bl	8004878 <HAL_GetTick>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <SHIFTING_Entry+0x144>)
 8001f46:	6013      	str	r3, [r2, #0]

	MyOutputs->xClutchTargetShift = MyOutputs->xClutchTargetShiftShadow;
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <SHIFTING_Entry+0x148>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b49      	ldr	r3, [pc, #292]	; (8002074 <SHIFTING_Entry+0x148>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6992      	ldr	r2, [r2, #24]
 8001f52:	615a      	str	r2, [r3, #20]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 8001f54:	4b45      	ldr	r3, [pc, #276]	; (800206c <SHIFTING_Entry+0x140>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d131      	bne.n	8001fc0 <SHIFTING_Entry+0x94>
		NShiftRequest = Up;
 8001f5c:	4b46      	ldr	r3, [pc, #280]	; (8002078 <SHIFTING_Entry+0x14c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <SHIFTING_Entry+0x150>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b44      	ldr	r3, [pc, #272]	; (8002080 <SHIFTING_Entry+0x154>)
 8001f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f72:	4a44      	ldr	r2, [pc, #272]	; (8002084 <SHIFTING_Entry+0x158>)
 8001f74:	6013      	str	r3, [r2, #0]

		if(MyOutputs->NUpShiftType == WithClutch) tShifterDelayForClutch = tUpShiftDelayForClutch[MyInputs->NGear];
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <SHIFTING_Entry+0x148>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d10a      	bne.n	8001f98 <SHIFTING_Entry+0x6c>
 8001f82:	4b3e      	ldr	r3, [pc, #248]	; (800207c <SHIFTING_Entry+0x150>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <SHIFTING_Entry+0x15c>)
 8001f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f92:	4a3e      	ldr	r2, [pc, #248]	; (800208c <SHIFTING_Entry+0x160>)
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e002      	b.n	8001f9e <SHIFTING_Entry+0x72>
		else tShifterDelayForClutch = 0;
 8001f98:	4b3c      	ldr	r3, [pc, #240]	; (800208c <SHIFTING_Entry+0x160>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 8001f9e:	4b35      	ldr	r3, [pc, #212]	; (8002074 <SHIFTING_Entry+0x148>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	7a5b      	ldrb	r3, [r3, #9]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <SHIFTING_Entry+0x88>
			MyOutputs->BDnShiftPortStateShadow = 1;
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <SHIFTING_Entry+0x148>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		NCurrentState = Unknown;
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
		tShifterDelayForClutch = 0;
	}

}
 8001fb2:	e057      	b.n	8002064 <SHIFTING_Entry+0x138>
			MyOutputs->BUpShiftPortStateShadow = 1;
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <SHIFTING_Entry+0x148>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001fbe:	e051      	b.n	8002064 <SHIFTING_Entry+0x138>
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <SHIFTING_Entry+0x140>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d131      	bne.n	800202c <SHIFTING_Entry+0x100>
		NShiftRequest = Down;
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <SHIFTING_Entry+0x14c>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear];
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <SHIFTING_Entry+0x150>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <SHIFTING_Entry+0x164>)
 8001fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fde:	4a29      	ldr	r2, [pc, #164]	; (8002084 <SHIFTING_Entry+0x158>)
 8001fe0:	6013      	str	r3, [r2, #0]
		if(MyOutputs->NDnShiftType == WithClutch) tShifterDelayForClutch = tDnShiftDelayForClutch[MyInputs->NGear];
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <SHIFTING_Entry+0x148>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d10a      	bne.n	8002004 <SHIFTING_Entry+0xd8>
 8001fee:	4b23      	ldr	r3, [pc, #140]	; (800207c <SHIFTING_Entry+0x150>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <SHIFTING_Entry+0x168>)
 8001ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <SHIFTING_Entry+0x160>)
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e002      	b.n	800200a <SHIFTING_Entry+0xde>
		else tShifterDelayForClutch = 0;
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <SHIFTING_Entry+0x160>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <SHIFTING_Entry+0x148>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	7a5b      	ldrb	r3, [r3, #9]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <SHIFTING_Entry+0xf4>
			MyOutputs->BUpShiftPortStateShadow = 1;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <SHIFTING_Entry+0x148>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800201e:	e021      	b.n	8002064 <SHIFTING_Entry+0x138>
			MyOutputs->BDnShiftPortStateShadow = 1;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <SHIFTING_Entry+0x148>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800202a:	e01b      	b.n	8002064 <SHIFTING_Entry+0x138>
		NCurrentState = Unknown;
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <SHIFTING_Entry+0x13c>)
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <SHIFTING_Entry+0x148>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <SHIFTING_Entry+0x148>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <SHIFTING_Entry+0x148>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2207      	movs	r2, #7
 8002048:	721a      	strb	r2, [r3, #8]
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <SHIFTING_Entry+0x148>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <SHIFTING_Entry+0x148>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <SHIFTING_Entry+0x148>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
		tShifterDelayForClutch = 0;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <SHIFTING_Entry+0x160>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000010c 	.word	0x2000010c
 800206c:	20000105 	.word	0x20000105
 8002070:	20000120 	.word	0x20000120
 8002074:	20000134 	.word	0x20000134
 8002078:	20000104 	.word	0x20000104
 800207c:	2000014c 	.word	0x2000014c
 8002080:	08009148 	.word	0x08009148
 8002084:	2000012c 	.word	0x2000012c
 8002088:	08009178 	.word	0x08009178
 800208c:	20000144 	.word	0x20000144
 8002090:	08009160 	.word	0x08009160
 8002094:	08009190 	.word	0x08009190

08002098 <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	MyOutputs->BNGearMatch = 0;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <SHIFTING_Exit+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	729a      	strb	r2, [r3, #10]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000134 	.word	0x20000134

080020b0 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0

	// we check for control errors and if present we abort
	if(MyOutputs->NControlErrorStatus) {
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <SHIFTING_Event+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d004      	beq.n	80020c8 <SHIFTING_Event+0x18>
		SHIFTING_Exit();
 80020be:	f7ff ffeb 	bl	8002098 <SHIFTING_Exit>
		ERROR_Entry();
 80020c2:	f000 f8ef 	bl	80022a4 <ERROR_Entry>
		return;
 80020c6:	e011      	b.n	80020ec <SHIFTING_Event+0x3c>
	}

	if((tShiftTimer + tShifterMaxTransitTime) <= tControllerTimmer) {	// the max time for the gear has expired
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <SHIFTING_Event+0x44>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <SHIFTING_Event+0x48>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	441a      	add	r2, r3
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <SHIFTING_Event+0x4c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d804      	bhi.n	80020e4 <SHIFTING_Event+0x34>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 80020da:	f7ff ffdd 	bl	8002098 <SHIFTING_Exit>
		POSTSHIFT_Entry();
 80020de:	f000 f837 	bl	8002150 <POSTSHIFT_Entry>
		return;
 80020e2:	e003      	b.n	80020ec <SHIFTING_Event+0x3c>
			POSTSHIFT_Entry();
			return;
		}
	}
	else {
		MyOutputs->BNGearMatch = 0;
 80020e4:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <SHIFTING_Event+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	729a      	strb	r2, [r3, #10]
	}

	// TODO: implement the shifting timing (include pre and post shift phases and create the metrics

	// TODO: think about the double action shift (pushing and then pulling the piston back)
}
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000134 	.word	0x20000134
 80020f4:	20000120 	.word	0x20000120
 80020f8:	2000012c 	.word	0x2000012c
 80020fc:	20000138 	.word	0x20000138

08002100 <SHIFTING_Run>:
void SHIFTING_Run(void) {
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

	if((tShiftTimer + tShifterDelayForClutch) <= tControllerTimmer) {	// when the actuator delay has passed
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <SHIFTING_Run+0x40>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <SHIFTING_Run+0x44>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	441a      	add	r2, r3
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <SHIFTING_Run+0x48>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d80f      	bhi.n	8002136 <SHIFTING_Run+0x36>
		MyOutputs->BUpShiftPortState = MyOutputs->BUpShiftPortStateShadow;
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <SHIFTING_Run+0x4c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <SHIFTING_Run+0x4c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002122:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		MyOutputs->BDnShiftPortState = MyOutputs->BDnShiftPortStateShadow;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <SHIFTING_Run+0x4c>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <SHIFTING_Run+0x4c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002132:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}

}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000120 	.word	0x20000120
 8002144:	20000144 	.word	0x20000144
 8002148:	20000138 	.word	0x20000138
 800214c:	20000134 	.word	0x20000134

08002150 <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <POSTSHIFT_Entry+0x64>)
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <POSTSHIFT_Entry+0x68>)
 800215a:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <POSTSHIFT_Entry+0x64>)
 800215e:	2204      	movs	r2, #4
 8002160:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	MyOutputs->BDnShiftPortState = 0;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	MyOutputs->BUpShiftPortStateShadow = 0;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	MyOutputs->BDnShiftPortStateShadow = 0;
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShiftShadow = MyOutputs->xClutchTargetMin;
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002194:	619a      	str	r2, [r3, #24]
	MyOutputs->xClutchTargetShift = MyOutputs->xClutchTargetMin;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a0:	615a      	str	r2, [r3, #20]
	MyOutputs->BSparkCut = 0;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <POSTSHIFT_Entry+0x6c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	2000010c 	.word	0x2000010c
 80021b8:	20000105 	.word	0x20000105
 80021bc:	20000134 	.word	0x20000134

080021c0 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
	MyOutputs->BShiftInProgress = 0;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <POSTSHIFT_Exit+0x20>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	// we rest the False Neutral flag TODO: not sure if correct here
	MyInputs->BFalseNeutral = 0;
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <POSTSHIFT_Exit+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	20000134 	.word	0x20000134
 80021e4:	2000014c 	.word	0x2000014c

080021e8 <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 80021e8:	b598      	push	{r3, r4, r7, lr}
 80021ea:	af00      	add	r7, sp, #0


	if(!MyOutputs->NControlErrorStatus) {
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <POSTSHIFT_Event+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d104      	bne.n	8002200 <POSTSHIFT_Event+0x18>

		POSTSHIFT_Exit();
 80021f6:	f7ff ffe3 	bl	80021c0 <POSTSHIFT_Exit>
		IDLE_Entry();
 80021fa:	f7ff fba5 	bl	8001948 <IDLE_Entry>
		return;
 80021fe:	e012      	b.n	8002226 <POSTSHIFT_Event+0x3e>
	}


	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPostShiftTimer + POSTSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <POSTSHIFT_Event+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00d      	beq.n	8002226 <POSTSHIFT_Event+0x3e>
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <POSTSHIFT_Event+0x44>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8002212:	f002 fb31 	bl	8004878 <HAL_GetTick>
 8002216:	4603      	mov	r3, r0
 8002218:	429c      	cmp	r4, r3
 800221a:	d804      	bhi.n	8002226 <POSTSHIFT_Event+0x3e>
		POSTSHIFT_Exit();
 800221c:	f7ff ffd0 	bl	80021c0 <POSTSHIFT_Exit>
		ERROR_Entry();
 8002220:	f000 f840 	bl	80022a4 <ERROR_Entry>
		return;
 8002224:	bf00      	nop
	}
}
 8002226:	bd98      	pop	{r3, r4, r7, pc}
 8002228:	20000134 	.word	0x20000134
 800222c:	20000124 	.word	0x20000124

08002230 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

	if(CHECK_POST_SHIFT_GEAR && MyInputs->NGear != MyOutputs->NGearTarget && !MyInputs->BFalseNeutral) {
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <POSTSHIFT_Run+0x6c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <POSTSHIFT_Run+0x70>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	7a5b      	ldrb	r3, [r3, #9]
 8002242:	429a      	cmp	r2, r3
 8002244:	d01c      	beq.n	8002280 <POSTSHIFT_Run+0x50>
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <POSTSHIFT_Run+0x6c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <POSTSHIFT_Run+0x50>
		RaiseControlError(GEAR_TARGET_MISMATCH);
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <POSTSHIFT_Run+0x70>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <POSTSHIFT_Run+0x70>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <POSTSHIFT_Run+0x70>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2208      	movs	r2, #8
 8002268:	721a      	strb	r2, [r3, #8]
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <POSTSHIFT_Run+0x70>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <POSTSHIFT_Run+0x70>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <POSTSHIFT_Run+0x70>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	e008      	b.n	8002292 <POSTSHIFT_Run+0x62>
	}
	else { ClearControlError(GEAR_TARGET_MISMATCH); }
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <POSTSHIFT_Run+0x70>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <POSTSHIFT_Run+0x70>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800228e:	601a      	str	r2, [r3, #0]

}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2000014c 	.word	0x2000014c
 80022a0:	20000134 	.word	0x20000134

080022a4 <ERROR_Entry>:


void ERROR_Entry(void) {
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <ERROR_Entry+0x5c>)
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <ERROR_Entry+0x60>)
 80022ae:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <ERROR_Entry+0x5c>)
 80022b2:	2205      	movs	r2, #5
 80022b4:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftInProgress = 0;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <ERROR_Entry+0x64>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	// or send it to the display via CAN

	// TODO: we set the page number to ERROR page and then we need to create a timeout in order to return to normal page operation

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <ERROR_Entry+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	MyOutputs->BDnShiftPortState = 0;
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <ERROR_Entry+0x64>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	MyOutputs->xClutchTargetShiftShadow = MyOutputs->xClutchTargetMin;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <ERROR_Entry+0x64>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <ERROR_Entry+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022de:	619a      	str	r2, [r3, #24]
	MyOutputs->xClutchTargetShift = MyOutputs->xClutchTargetMin;
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <ERROR_Entry+0x64>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <ERROR_Entry+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ea:	615a      	str	r2, [r3, #20]
	MyOutputs->BSparkCut = 0;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <ERROR_Entry+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000010c 	.word	0x2000010c
 8002304:	20000105 	.word	0x20000105
 8002308:	20000134 	.word	0x20000134

0800230c <ERROR_Exit>:

void ERROR_Exit(void) {
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <ERROR_Event>:
void ERROR_Event(void) {
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	// and do not zero the logged error status
	// remember return in all functions

	// Remember to create the Strategy (and a way to exit the error) to be able to function without NGear (complete open loop)
	// for now we exit with no condition
	ERROR_Exit();
 800231c:	f7ff fff6 	bl	800230c <ERROR_Exit>
	IDLE_Entry();
 8002320:	f7ff fb12 	bl	8001948 <IDLE_Entry>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}

08002328 <ERROR_Run>:
void ERROR_Run(void) {
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <ERROR_Run+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000134 	.word	0x20000134

08002340 <ReadInputs>:


// private functions declaration
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af02      	add	r7, sp, #8
 8002346:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 800234e:	f002 fa93 	bl	8004878 <HAL_GetTick>
 8002352:	4603      	mov	r3, r0
 8002354:	4aa8      	ldr	r2, [pc, #672]	; (80025f8 <ReadInputs+0x2b8>)
 8002356:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);	// PA0
 8002358:	4ba8      	ldr	r3, [pc, #672]	; (80025fc <ReadInputs+0x2bc>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	2300      	movs	r3, #0
 8002360:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8002364:	48a6      	ldr	r0, [pc, #664]	; (8002600 <ReadInputs+0x2c0>)
 8002366:	f000 ffa3 	bl	80032b0 <MyHalfBufferAverage>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	849a      	strh	r2, [r3, #36]	; 0x24
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);	// PA1
 8002372:	4ba2      	ldr	r3, [pc, #648]	; (80025fc <ReadInputs+0x2bc>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	2301      	movs	r3, #1
 800237a:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800237e:	48a0      	ldr	r0, [pc, #640]	; (8002600 <ReadInputs+0x2c0>)
 8002380:	f000 ff96 	bl	80032b0 <MyHalfBufferAverage>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	84da      	strh	r2, [r3, #38]	; 0x26
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);	// PA2
 800238c:	4b9b      	ldr	r3, [pc, #620]	; (80025fc <ReadInputs+0x2bc>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	2302      	movs	r3, #2
 8002394:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8002398:	4899      	ldr	r0, [pc, #612]	; (8002600 <ReadInputs+0x2c0>)
 800239a:	f000 ff89 	bl	80032b0 <MyHalfBufferAverage>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);	// PA3
 80023a6:	4b95      	ldr	r3, [pc, #596]	; (80025fc <ReadInputs+0x2bc>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	2303      	movs	r3, #3
 80023ae:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80023b2:	4893      	ldr	r0, [pc, #588]	; (8002600 <ReadInputs+0x2c0>)
 80023b4:	f000 ff7c 	bl	80032b0 <MyHalfBufferAverage>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);	// PA5
 80023c0:	4b8e      	ldr	r3, [pc, #568]	; (80025fc <ReadInputs+0x2bc>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	2305      	movs	r3, #5
 80023c8:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80023cc:	488c      	ldr	r0, [pc, #560]	; (8002600 <ReadInputs+0x2c0>)
 80023ce:	f000 ff6f 	bl	80032b0 <MyHalfBufferAverage>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);	// PA4
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <ReadInputs+0x2bc>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	2304      	movs	r3, #4
 80023e2:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80023e6:	4886      	ldr	r0, [pc, #536]	; (8002600 <ReadInputs+0x2c0>)
 80023e8:	f000 ff62 	bl	80032b0 <MyHalfBufferAverage>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);	// PA7
 80023f4:	4b81      	ldr	r3, [pc, #516]	; (80025fc <ReadInputs+0x2bc>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	2307      	movs	r3, #7
 80023fc:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8002400:	487f      	ldr	r0, [pc, #508]	; (8002600 <ReadInputs+0x2c0>)
 8002402:	f000 ff55 	bl	80032b0 <MyHalfBufferAverage>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);	// PA7
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <ReadInputs+0x2bc>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	2306      	movs	r3, #6
 8002416:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800241a:	4879      	ldr	r0, [pc, #484]	; (8002600 <ReadInputs+0x2c0>)
 800241c:	f000 ff48 	bl	80032b0 <MyHalfBufferAverage>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	865a      	strh	r2, [r3, #50]	; 0x32

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe f94b 	bl	80006c8 <__aeabi_i2f>
 8002432:	4603      	mov	r3, r0
 8002434:	4973      	ldr	r1, [pc, #460]	; (8002604 <ReadInputs+0x2c4>)
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f99a 	bl	8000770 <__aeabi_fmul>
 800243c:	4603      	mov	r3, r0
 800243e:	4972      	ldr	r1, [pc, #456]	; (8002608 <ReadInputs+0x2c8>)
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fa49 	bl	80008d8 <__aeabi_fdiv>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f938 	bl	80006c8 <__aeabi_i2f>
 8002458:	4603      	mov	r3, r0
 800245a:	496a      	ldr	r1, [pc, #424]	; (8002604 <ReadInputs+0x2c4>)
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f987 	bl	8000770 <__aeabi_fmul>
 8002462:	4603      	mov	r3, r0
 8002464:	4968      	ldr	r1, [pc, #416]	; (8002608 <ReadInputs+0x2c8>)
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fa36 	bl	80008d8 <__aeabi_fdiv>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f925 	bl	80006c8 <__aeabi_i2f>
 800247e:	4603      	mov	r3, r0
 8002480:	4960      	ldr	r1, [pc, #384]	; (8002604 <ReadInputs+0x2c4>)
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f974 	bl	8000770 <__aeabi_fmul>
 8002488:	4603      	mov	r3, r0
 800248a:	495f      	ldr	r1, [pc, #380]	; (8002608 <ReadInputs+0x2c8>)
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fa23 	bl	80008d8 <__aeabi_fdiv>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f912 	bl	80006c8 <__aeabi_i2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4957      	ldr	r1, [pc, #348]	; (8002604 <ReadInputs+0x2c4>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f961 	bl	8000770 <__aeabi_fmul>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4955      	ldr	r1, [pc, #340]	; (8002608 <ReadInputs+0x2c8>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fa10 	bl	80008d8 <__aeabi_fdiv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f8ff 	bl	80006c8 <__aeabi_i2f>
 80024ca:	4603      	mov	r3, r0
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <ReadInputs+0x2c4>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f94e 	bl	8000770 <__aeabi_fmul>
 80024d4:	4603      	mov	r3, r0
 80024d6:	494c      	ldr	r1, [pc, #304]	; (8002608 <ReadInputs+0x2c8>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f9fd 	bl	80008d8 <__aeabi_fdiv>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f8ec 	bl	80006c8 <__aeabi_i2f>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4944      	ldr	r1, [pc, #272]	; (8002604 <ReadInputs+0x2c4>)
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f93b 	bl	8000770 <__aeabi_fmul>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4942      	ldr	r1, [pc, #264]	; (8002608 <ReadInputs+0x2c8>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f9ea 	bl	80008d8 <__aeabi_fdiv>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe f8d9 	bl	80006c8 <__aeabi_i2f>
 8002516:	4603      	mov	r3, r0
 8002518:	493a      	ldr	r1, [pc, #232]	; (8002604 <ReadInputs+0x2c4>)
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f928 	bl	8000770 <__aeabi_fmul>
 8002520:	4603      	mov	r3, r0
 8002522:	4939      	ldr	r1, [pc, #228]	; (8002608 <ReadInputs+0x2c8>)
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f9d7 	bl	80008d8 <__aeabi_fdiv>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe f8c6 	bl	80006c8 <__aeabi_i2f>
 800253c:	4603      	mov	r3, r0
 800253e:	4931      	ldr	r1, [pc, #196]	; (8002604 <ReadInputs+0x2c4>)
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f915 	bl	8000770 <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	492f      	ldr	r1, [pc, #188]	; (8002608 <ReadInputs+0x2c8>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f9c4 	bl	80008d8 <__aeabi_fdiv>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	621a      	str	r2, [r3, #32]

	//Digital Inputs
	inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8002558:	2101      	movs	r1, #1
 800255a:	482c      	ldr	r0, [pc, #176]	; (800260c <ReadInputs+0x2cc>)
 800255c:	f004 f950 	bl	8006800 <HAL_GPIO_ReadPin>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 800256a:	2102      	movs	r1, #2
 800256c:	4827      	ldr	r0, [pc, #156]	; (800260c <ReadInputs+0x2cc>)
 800256e:	f004 f947 	bl	8006800 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 800257c:	2120      	movs	r1, #32
 800257e:	4823      	ldr	r0, [pc, #140]	; (800260c <ReadInputs+0x2cc>)
 8002580:	f004 f93e 	bl	8006800 <HAL_GPIO_ReadPin>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 800258e:	2140      	movs	r1, #64	; 0x40
 8002590:	481e      	ldr	r0, [pc, #120]	; (800260c <ReadInputs+0x2cc>)
 8002592:	f004 f935 	bl	8006800 <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <ReadInputs+0x2d0>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	inputs->BSWButtonB = BButtonBCAN;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <ReadInputs+0x2d4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	inputs->BSWButtonC = BButtonCCAN;
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <ReadInputs+0x2d8>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	inputs->BSWButtonD = BButtonDCAN;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <ReadInputs+0x2dc>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	inputs->BSWButtonE = BButtonECAN;
 80025d0:	4b13      	ldr	r3, [pc, #76]	; (8002620 <ReadInputs+0x2e0>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	inputs->BSWButtonF = BButtonFCAN;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <ReadInputs+0x2e4>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

		// Inverted logic!! DriverKill=1 means ShutDown is Open, DriverKill=0 means ShutDown is closed
	if(inputs->NSHIFTERDIN04 && (tBDriverKillTimer < tInputsTimmer) && inputs->BDriverKill) {
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d02f      	beq.n	8002652 <ReadInputs+0x312>
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <ReadInputs+0x2e8>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	e019      	b.n	800262c <ReadInputs+0x2ec>
 80025f8:	20000170 	.word	0x20000170
 80025fc:	20000161 	.word	0x20000161
 8002600:	20000390 	.word	0x20000390
 8002604:	4055c28f 	.word	0x4055c28f
 8002608:	457ff000 	.word	0x457ff000
 800260c:	40010c00 	.word	0x40010c00
 8002610:	20000158 	.word	0x20000158
 8002614:	20000168 	.word	0x20000168
 8002618:	20000182 	.word	0x20000182
 800261c:	20000160 	.word	0x20000160
 8002620:	20000174 	.word	0x20000174
 8002624:	20000178 	.word	0x20000178
 8002628:	20000188 	.word	0x20000188
 800262c:	4bab      	ldr	r3, [pc, #684]	; (80028dc <ReadInputs+0x59c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d20e      	bcs.n	8002652 <ReadInputs+0x312>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <ReadInputs+0x312>
		inputs->BDriverKill = 0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		tBDriverKillTimer = tInputsTimmer + DRIVER_KILL_DEBOUNCE;
 8002646:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <ReadInputs+0x59c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	33c8      	adds	r3, #200	; 0xc8
 800264c:	4aa4      	ldr	r2, [pc, #656]	; (80028e0 <ReadInputs+0x5a0>)
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e00d      	b.n	800266e <ReadInputs+0x32e>
	}
	else if(!inputs->NSHIFTERDIN04 & !inputs->BDriverKill) {
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800265e:	4313      	orrs	r3, r2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d103      	bne.n	800266e <ReadInputs+0x32e>
		inputs->BDriverKill = 1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	// ---------------------------------------------------------------------------------------------------
	// NGear Input

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3340      	adds	r3, #64	; 0x40
 800267e:	4999      	ldr	r1, [pc, #612]	; (80028e4 <ReadInputs+0x5a4>)
 8002680:	9101      	str	r1, [sp, #4]
 8002682:	4998      	ldr	r1, [pc, #608]	; (80028e4 <ReadInputs+0x5a4>)
 8002684:	9100      	str	r1, [sp, #0]
 8002686:	4998      	ldr	r1, [pc, #608]	; (80028e8 <ReadInputs+0x5a8>)
 8002688:	2006      	movs	r0, #6
 800268a:	f001 ffcb 	bl	8004624 <My2DMapInterpolate>
 800268e:	4603      	mov	r3, r0
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd feb9 	bl	8000414 <__aeabi_f2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f006 fb9b 	bl	8008de4 <round>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fd ff2d 	bl	8000514 <__aeabi_d2uiz>
 80026ba:	4603      	mov	r3, r0
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	bf28      	it	cs
 80026ce:	2305      	movcs	r3, #5
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	// False Neutral detection
	if(inputs->NGearRaw >= NGearRawLimsMaxMap[inputs->NGear] || inputs->NGearRaw <= NGearRawLimsMinMap[inputs->NGear]) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e2:	4619      	mov	r1, r3
 80026e4:	4b81      	ldr	r3, [pc, #516]	; (80028ec <ReadInputs+0x5ac>)
 80026e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4610      	mov	r0, r2
 80026ee:	f7fe f9f1 	bl	8000ad4 <__aeabi_fcmpge>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10f      	bne.n	8002718 <ReadInputs+0x3d8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002702:	4619      	mov	r1, r3
 8002704:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <ReadInputs+0x5b0>)
 8002706:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f7fe f9d7 	bl	8000ac0 <__aeabi_fcmple>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00c      	beq.n	8002732 <ReadInputs+0x3f2>
		if(!BFalseNeutralState) {
 8002718:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <ReadInputs+0x5b4>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <ReadInputs+0x3f8>
			BFalseNeutralState = 1;
 8002720:	4b74      	ldr	r3, [pc, #464]	; (80028f4 <ReadInputs+0x5b4>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
			tBFalseNeutral = tInputsTimmer + FALSE_NEUTRAL_DEBOUNCE;
 8002726:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <ReadInputs+0x59c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3328      	adds	r3, #40	; 0x28
 800272c:	4a72      	ldr	r2, [pc, #456]	; (80028f8 <ReadInputs+0x5b8>)
 800272e:	6013      	str	r3, [r2, #0]
		if(!BFalseNeutralState) {
 8002730:	e002      	b.n	8002738 <ReadInputs+0x3f8>
		}
	}
	else {
		BFalseNeutralState = 0;
 8002732:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <ReadInputs+0x5b4>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
	}

	if((tBFalseNeutral < tInputsTimmer) && BFalseNeutralState) { //leave some time for the NGear to settle before deciding if it is in false neutral and to avoid flickering
 8002738:	4b6f      	ldr	r3, [pc, #444]	; (80028f8 <ReadInputs+0x5b8>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b67      	ldr	r3, [pc, #412]	; (80028dc <ReadInputs+0x59c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <ReadInputs+0x414>
 8002744:	4b6b      	ldr	r3, [pc, #428]	; (80028f4 <ReadInputs+0x5b4>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <ReadInputs+0x414>
		inputs->BFalseNeutral = 1; // it gets reset inside the controller code at the post shift phase after a successful gear change
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}

	// check for errors
	if(inputs->BNGearInError) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <ReadInputs+0x426>
		inputs->NGear = NGEAR_INERROR_DEFAULT;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 8002766:	4b65      	ldr	r3, [pc, #404]	; (80028fc <ReadInputs+0x5bc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800276e:	4b5b      	ldr	r3, [pc, #364]	; (80028dc <ReadInputs+0x59c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d204      	bcs.n	8002780 <ReadInputs+0x440>
		inputs->BSteeringWheelFitted = 0;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800277e:	e003      	b.n	8002788 <ReadInputs+0x448>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <ReadInputs+0x468>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		inputs->BDeclutchRequestInError = 0;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 80027a6:	e007      	b.n	80027b8 <ReadInputs+0x478>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Inputs

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 80027b8:	4b51      	ldr	r3, [pc, #324]	; (8002900 <ReadInputs+0x5c0>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b25b      	sxtb	r3, r3
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 80027c6:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <ReadInputs+0x5c4>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	b25a      	sxtb	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	65da      	str	r2, [r3, #92]	; 0x5c
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchPaddleMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_PADDLE_MARGIN_MIN, VrCLUTCH_PADDLE_MARGIN_MAX);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3360      	adds	r3, #96	; 0x60
 80027e2:	4940      	ldr	r1, [pc, #256]	; (80028e4 <ReadInputs+0x5a4>)
 80027e4:	9101      	str	r1, [sp, #4]
 80027e6:	493f      	ldr	r1, [pc, #252]	; (80028e4 <ReadInputs+0x5a4>)
 80027e8:	9100      	str	r1, [sp, #0]
 80027ea:	4947      	ldr	r1, [pc, #284]	; (8002908 <ReadInputs+0x5c8>)
 80027ec:	2002      	movs	r0, #2
 80027ee:	f001 ff19 	bl	8004624 <My2DMapInterpolate>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002802:	2b00      	cmp	r3, #0
 8002804:	d012      	beq.n	800282c <ReadInputs+0x4ec>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <ReadInputs+0x4ec>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f993 2058 	ldrsb.w	r2, [r3, #88]	; 0x58
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <ReadInputs+0x5cc>)
 8002818:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		inputs->BrClutchPaddleInError = 0;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800282a:	e02d      	b.n	8002888 <ReadInputs+0x548>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002832:	2b00      	cmp	r3, #0
 8002834:	d11d      	bne.n	8002872 <ReadInputs+0x532>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fdea 	bl	8000414 <__aeabi_f2d>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f006 facc 	bl	8008de4 <round>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fd fe36 	bl	80004c4 <__aeabi_d2iz>
 8002858:	4603      	mov	r3, r0
 800285a:	b25a      	sxtb	r2, r3
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <ReadInputs+0x5cc>)
 800285e:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		inputs->BrClutchPaddleInError = 0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002870:	e00a      	b.n	8002888 <ReadInputs+0x548>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		inputs->NrClutchPaddleSource = NoSource;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <ReadInputs+0x5cc>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <ReadInputs+0x566>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <ReadInputs+0x560>
 800289c:	2264      	movs	r2, #100	; 0x64
 800289e:	e000      	b.n	80028a2 <ReadInputs+0x562>
 80028a0:	2200      	movs	r2, #0
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <ReadInputs+0x5d0>)
 80028a4:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <ReadInputs+0x5d0>)
 80028a8:	f993 2000 	ldrsb.w	r2, [r3]
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <ReadInputs+0x5cc>)
 80028ae:	f993 3000 	ldrsb.w	r3, [r3]
 80028b2:	4293      	cmp	r3, r2
 80028b4:	bfb8      	it	lt
 80028b6:	4613      	movlt	r3, r2
 80028b8:	b25b      	sxtb	r3, r3
 80028ba:	2b63      	cmp	r3, #99	; 0x63
 80028bc:	dc2a      	bgt.n	8002914 <ReadInputs+0x5d4>
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <ReadInputs+0x5d0>)
 80028c0:	f993 2000 	ldrsb.w	r2, [r3]
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <ReadInputs+0x5cc>)
 80028c6:	f993 3000 	ldrsb.w	r3, [r3]
 80028ca:	4293      	cmp	r3, r2
 80028cc:	bfb8      	it	lt
 80028ce:	4613      	movlt	r3, r2
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80028d6:	b25a      	sxtb	r2, r3
 80028d8:	e01d      	b.n	8002916 <ReadInputs+0x5d6>
 80028da:	bf00      	nop
 80028dc:	20000170 	.word	0x20000170
 80028e0:	20000188 	.word	0x20000188
 80028e4:	3dcccccd 	.word	0x3dcccccd
 80028e8:	08009234 	.word	0x08009234
 80028ec:	0800927c 	.word	0x0800927c
 80028f0:	08009264 	.word	0x08009264
 80028f4:	2000016b 	.word	0x2000016b
 80028f8:	2000017c 	.word	0x2000017c
 80028fc:	2000015c 	.word	0x2000015c
 8002900:	20000150 	.word	0x20000150
 8002904:	20000179 	.word	0x20000179
 8002908:	08009294 	.word	0x08009294
 800290c:	20000169 	.word	0x20000169
 8002910:	2000016c 	.word	0x2000016c
 8002914:	2264      	movs	r2, #100	; 0x64
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Inputs

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 800291c:	4b92      	ldr	r3, [pc, #584]	; (8002b68 <ReadInputs+0x828>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8002928:	4b90      	ldr	r3, [pc, #576]	; (8002b6c <ReadInputs+0x82c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8002934:	4b8e      	ldr	r3, [pc, #568]	; (8002b70 <ReadInputs+0x830>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8002940:	4b8c      	ldr	r3, [pc, #560]	; (8002b74 <ReadInputs+0x834>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	// Analog Input & Debouncing
	if(tVUpDn < tInputsTimmer) {
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <ReadInputs+0x838>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <ReadInputs+0x83c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d208      	bcs.n	800296a <ReadInputs+0x62a>
		inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	64da      	str	r2, [r3, #76]	; 0x4c
		tVUpDn = tInputsTimmer + VUPDN_DEBOUNCE;
 8002960:	4b86      	ldr	r3, [pc, #536]	; (8002b7c <ReadInputs+0x83c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3332      	adds	r3, #50	; 0x32
 8002966:	4a84      	ldr	r2, [pc, #528]	; (8002b78 <ReadInputs+0x838>)
 8002968:	6013      	str	r3, [r2, #0]
	}

	// STUCK detection ???

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fea9 	bl	80006c8 <__aeabi_i2f>
 8002976:	4603      	mov	r3, r0
 8002978:	4981      	ldr	r1, [pc, #516]	; (8002b80 <ReadInputs+0x840>)
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f8aa 	bl	8000ad4 <__aeabi_fcmpge>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <ReadInputs+0x658>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002996:	e058      	b.n	8002a4a <ReadInputs+0x70a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299c:	4979      	ldr	r1, [pc, #484]	; (8002b84 <ReadInputs+0x844>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe f88e 	bl	8000ac0 <__aeabi_fcmple>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <ReadInputs+0x68e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	4976      	ldr	r1, [pc, #472]	; (8002b88 <ReadInputs+0x848>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe f88f 	bl	8000ad4 <__aeabi_fcmpge>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <ReadInputs+0x68e>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80029cc:	e03d      	b.n	8002a4a <ReadInputs+0x70a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	496e      	ldr	r1, [pc, #440]	; (8002b8c <ReadInputs+0x84c>)
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f873 	bl	8000ac0 <__aeabi_fcmple>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <ReadInputs+0x6c4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	496a      	ldr	r1, [pc, #424]	; (8002b90 <ReadInputs+0x850>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe f874 	bl	8000ad4 <__aeabi_fcmpge>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <ReadInputs+0x6c4>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002a02:	e022      	b.n	8002a4a <ReadInputs+0x70a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	4962      	ldr	r1, [pc, #392]	; (8002b94 <ReadInputs+0x854>)
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe f858 	bl	8000ac0 <__aeabi_fcmple>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <ReadInputs+0x6fa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	495f      	ldr	r1, [pc, #380]	; (8002b98 <ReadInputs+0x858>)
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f859 	bl	8000ad4 <__aeabi_fcmpge>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <ReadInputs+0x6fa>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002a38:	e007      	b.n	8002a4a <ReadInputs+0x70a>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <ReadInputs+0x73c>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <ReadInputs+0x73c>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		inputs->NBUpshiftRequestSource = CAN;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequestInError = 0;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002a7a:	e025      	b.n	8002ac8 <ReadInputs+0x788>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <ReadInputs+0x770>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		inputs->NBUpshiftRequestSource = Analog;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequestInError = 0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002aae:	e00b      	b.n	8002ac8 <ReadInputs+0x788>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		inputs->NBUpshiftRequestSource = NoSource;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d013      	beq.n	8002afa <ReadInputs+0x7ba>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10e      	bne.n	8002afa <ReadInputs+0x7ba>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->NBDnshiftRequestSource = CAN;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->BDnShiftRequestInError = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8002af8:	e025      	b.n	8002b46 <ReadInputs+0x806>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d114      	bne.n	8002b2e <ReadInputs+0x7ee>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->NBDnshiftRequestSource = Analog;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->BDnShiftRequestInError = 0;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8002b2c:	e00b      	b.n	8002b46 <ReadInputs+0x806>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->NBDnshiftRequestSource = NoSource;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	// ---------------------------------------------------------------------------------------------------
	// Launch Button

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d025      	beq.n	8002b9c <ReadInputs+0x85c>
		inputs->BLaunchRequest = inputs->BSWButtonB;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		inputs->BLaunchRequestInError = 0;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8002b64:	e022      	b.n	8002bac <ReadInputs+0x86c>
 8002b66:	bf00      	nop
 8002b68:	20000162 	.word	0x20000162
 8002b6c:	2000016d 	.word	0x2000016d
 8002b70:	20000184 	.word	0x20000184
 8002b74:	20000177 	.word	0x20000177
 8002b78:	20000154 	.word	0x20000154
 8002b7c:	20000170 	.word	0x20000170
 8002b80:	401ccccd 	.word	0x401ccccd
 8002b84:	3f8ccccd 	.word	0x3f8ccccd
 8002b88:	3f733333 	.word	0x3f733333
 8002b8c:	3ff33333 	.word	0x3ff33333
 8002b90:	3fd9999a 	.word	0x3fd9999a
 8002b94:	3f666666 	.word	0x3f666666
 8002b98:	3f4ccccd 	.word	0x3f4ccccd
	}
	else {
		inputs->BLaunchRequestInError = 1;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e


	// ---------------------------------------------------------------------------------------------------
	// Rotary Switch

	inputs->VSwhitchA = inputs->VSHIFTERAnalog05;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	675a      	str	r2, [r3, #116]	; 0x74
	inputs->BNSwitchAInError = My2DMapInterpolate(SWITCHA_MAP_SIZE, NSWitchAmap, inputs->VSwhitchA, &(inputs->NSwitchARaw), VNSWITCH_MARGIN, VNSWITCH_MARGIN);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3378      	adds	r3, #120	; 0x78
 8002bbc:	4993      	ldr	r1, [pc, #588]	; (8002e0c <ReadInputs+0xacc>)
 8002bbe:	9101      	str	r1, [sp, #4]
 8002bc0:	4992      	ldr	r1, [pc, #584]	; (8002e0c <ReadInputs+0xacc>)
 8002bc2:	9100      	str	r1, [sp, #0]
 8002bc4:	4992      	ldr	r1, [pc, #584]	; (8002e10 <ReadInputs+0xad0>)
 8002bc6:	200c      	movs	r0, #12
 8002bc8:	f001 fd2c 	bl	8004624 <My2DMapInterpolate>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

	inputs->NSwitchA = CLAMP((uint8_t)round(inputs->NSwitchARaw), 1, SWITCHA_MAP_SIZE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc1a 	bl	8000414 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f006 f8fc 	bl	8008de4 <round>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fd fc8e 	bl	8000514 <__aeabi_d2uiz>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b0b      	cmp	r3, #11
 8002bfe:	d817      	bhi.n	8002c30 <ReadInputs+0x8f0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc05 	bl	8000414 <__aeabi_f2d>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f006 f8e7 	bl	8008de4 <round>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd fc79 	bl	8000514 <__aeabi_d2uiz>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	bf38      	it	cc
 8002c2a:	2301      	movcc	r3, #1
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	e000      	b.n	8002c32 <ReadInputs+0x8f2>
 8002c30:	220c      	movs	r2, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage

	inputs->VSupply = inputs->VSHIFTERAnalog01 / VSUPPLY_DIVIDER_GAIN;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4975      	ldr	r1, [pc, #468]	; (8002e14 <ReadInputs+0xad4>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fe4a 	bl	80008d8 <__aeabi_fdiv>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	// ---------------------------------------------------------------------------------------------------
	// nEngine

	// CAN Input
	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <ReadInputs+0xad8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8002c56:	4b71      	ldr	r3, [pc, #452]	; (8002e1c <ReadInputs+0xadc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d20c      	bcs.n	8002c78 <ReadInputs+0x938>
		inputs->BnEngineInError = 1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		inputs->BnEngineReliable = 0;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		inputs->nEngine = 0; 		// we force to zero if in error
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8002c76:	e007      	b.n	8002c88 <ReadInputs+0x948>
	}
	else {
		inputs->BnEngineInError = 0;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		inputs->BnEngineReliable = 1;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8002c88:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <ReadInputs+0xae0>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b21a      	sxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <ReadInputs+0x968>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <ReadInputs+0xae4>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 8002cb4:	4b5c      	ldr	r3, [pc, #368]	; (8002e28 <ReadInputs+0xae8>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d112      	bne.n	8002cf2 <ReadInputs+0x9b2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ReadInputs+0x9b2>
 8002cd6:	4b55      	ldr	r3, [pc, #340]	; (8002e2c <ReadInputs+0xaec>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <ReadInputs+0x9b2>
		BUpShiftRequested = 1;
 8002cde:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <ReadInputs+0xaec>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e016      	b.n	8002d20 <ReadInputs+0x9e0>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d111      	bne.n	8002d20 <ReadInputs+0x9e0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <ReadInputs+0x9e0>
 8002d06:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <ReadInputs+0xaec>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <ReadInputs+0x9e0>
		BUpShiftRequested = 0;
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <ReadInputs+0xaec>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f043 0202 	orr.w	r2, r3, #2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d112      	bne.n	8002d50 <ReadInputs+0xa10>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <ReadInputs+0xa10>
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <ReadInputs+0xaf0>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <ReadInputs+0xa10>
		BDnShiftRequested = 1;
 8002d3c:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <ReadInputs+0xaf0>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e016      	b.n	8002d7e <ReadInputs+0xa3e>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d111      	bne.n	8002d7e <ReadInputs+0xa3e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10c      	bne.n	8002d7e <ReadInputs+0xa3e>
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <ReadInputs+0xaf0>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <ReadInputs+0xa3e>
		BDnShiftRequested = 0;
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <ReadInputs+0xaf0>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f043 0208 	orr.w	r2, r3, #8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d112      	bne.n	8002dae <ReadInputs+0xa6e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <ReadInputs+0xa6e>
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <ReadInputs+0xaf4>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <ReadInputs+0xa6e>
		BLaunchRequested = 1;
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <ReadInputs+0xaf4>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f043 0210 	orr.w	r2, r3, #16
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e016      	b.n	8002ddc <ReadInputs+0xa9c>
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d111      	bne.n	8002ddc <ReadInputs+0xa9c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <ReadInputs+0xa9c>
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <ReadInputs+0xaf4>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d008      	beq.n	8002ddc <ReadInputs+0xa9c>
		BLaunchRequested = 0;
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <ReadInputs+0xaf4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d12a      	bne.n	8002e3c <ReadInputs+0xafc>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d025      	beq.n	8002e3c <ReadInputs+0xafc>
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <ReadInputs+0xaf8>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <ReadInputs+0xafc>
		BDeclutchRequested = 1;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <ReadInputs+0xaf8>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e02e      	b.n	8002e6a <ReadInputs+0xb2a>
 8002e0c:	3dcccccd 	.word	0x3dcccccd
 8002e10:	080092a4 	.word	0x080092a4
 8002e14:	3e617c1c 	.word	0x3e617c1c
 8002e18:	20000164 	.word	0x20000164
 8002e1c:	20000170 	.word	0x20000170
 8002e20:	20000180 	.word	0x20000180
 8002e24:	2000016e 	.word	0x2000016e
 8002e28:	200000f0 	.word	0x200000f0
 8002e2c:	20000185 	.word	0x20000185
 8002e30:	20000175 	.word	0x20000175
 8002e34:	2000016a 	.word	0x2000016a
 8002e38:	20000183 	.word	0x20000183
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d111      	bne.n	8002e6a <ReadInputs+0xb2a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10c      	bne.n	8002e6a <ReadInputs+0xb2a>
 8002e50:	4bb4      	ldr	r3, [pc, #720]	; (8003124 <ReadInputs+0xde4>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <ReadInputs+0xb2a>
		BDeclutchRequested = 0;
 8002e58:	4bb2      	ldr	r3, [pc, #712]	; (8003124 <ReadInputs+0xde4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d124      	bne.n	8002ebe <ReadInputs+0xb7e>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8002e7a:	2b4f      	cmp	r3, #79	; 0x4f
 8002e7c:	dd0d      	ble.n	8002e9a <ReadInputs+0xb5a>
 8002e7e:	4baa      	ldr	r3, [pc, #680]	; (8003128 <ReadInputs+0xde8>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <ReadInputs+0xb5a>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 8002e92:	4ba5      	ldr	r3, [pc, #660]	; (8003128 <ReadInputs+0xde8>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e011      	b.n	8002ebe <ReadInputs+0xb7e>
		}
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	dc0c      	bgt.n	8002ebe <ReadInputs+0xb7e>
 8002ea4:	4ba0      	ldr	r3, [pc, #640]	; (8003128 <ReadInputs+0xde8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <ReadInputs+0xb7e>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 8002eb8:	4b9b      	ldr	r3, [pc, #620]	; (8003128 <ReadInputs+0xde8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
	}

	// ---------------------------------------------------------------------------------------------------
	// INPUTS  STATUS

	inputs->NInputsStatusWord = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BNGearInError 					<< 0;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpShiftButtonCANInError 		<< 1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 8002ee6:	0052      	lsls	r2, r2, #1
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDnShiftButtonCANInError 		<< 2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpDnShiftButtonAnalogInError 	<< 3;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8002f12:	00d2      	lsls	r2, r2, #3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpShiftRequestInError 		<< 4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDnShiftRequestInError 		<< 5;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	f892 2053 	ldrb.w	r2, [r2, #83]	; 0x53
 8002f3e:	0152      	lsls	r2, r2, #5
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BrClutchPaddleRawCANInError 	<< 6;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	f892 2057 	ldrb.w	r2, [r2, #87]	; 0x57
 8002f54:	0192      	lsls	r2, r2, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BrClutchPaddleRawAnalogInError << 7;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8002f6a:	01d2      	lsls	r2, r2, #7
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BrClutchPaddleInError 			<< 8;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 8002f80:	0212      	lsls	r2, r2, #8
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BLaunchRequestInError 			<< 9;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8002f96:	0252      	lsls	r2, r2, #9
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDeclutchRequestInError 		<< 10;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	f892 206f 	ldrb.w	r2, [r2, #111]	; 0x6f
 8002fac:	0292      	lsls	r2, r2, #10
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BNSwitchAInError 				<< 11;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	f892 207d 	ldrb.w	r2, [r2, #125]	; 0x7d
 8002fc2:	02d2      	lsls	r2, r2, #11
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BnEngineInError 				<< 12;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8002fd8:	0312      	lsls	r2, r2, #12
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= !inputs->BSteeringWheelFitted 			<< 13;	// inverted in order to simulate the error state
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d102      	bne.n	8002ff8 <ReadInputs+0xcb8>
 8002ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ff6:	e000      	b.n	8002ffa <ReadInputs+0xcba>
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0							 			<< 14;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0						 				<< 15;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	inputs->NInputsStatusWord |= inputs->BDriverKill	 				<< 16;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8003026:	0412      	lsls	r2, r2, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BUpShiftRequest 				<< 17;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800303c:	0452      	lsls	r2, r2, #17
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDnShiftRequest 				<< 18;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003052:	0492      	lsls	r2, r2, #18
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BFalseNeutral	 				<< 19;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
 8003068:	04d2      	lsls	r2, r2, #19
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 20;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 21;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 22;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= 0										<< 23;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BLaunchRequest	 				<< 24;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f892 206e 	ldrb.w	r2, [r2, #110]	; 0x6e
 80030ae:	0612      	lsls	r2, r2, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= inputs->BDeclutchRequest 				<< 25;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80030c4:	0652      	lsls	r2, r2, #25
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= (inputs->NrClutchPaddleSource & 0x02)	<< 26;	// 2 bits (26,27)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80030da:	069b      	lsls	r3, r3, #26
 80030dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= (inputs->NBUpshiftRequestSource & 0x02)<< 28;	// 2 bits (28,29)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030f4:	071b      	lsls	r3, r3, #28
 80030f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inputs->NInputsStatusWord |= (inputs->NBDnshiftRequestSource & 0x02)<< 30;	// 2 bits (30,31)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800310e:	079b      	lsls	r3, r3, #30
 8003110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	// ---------------------------------------------------------------------------------------------------

}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000183 	.word	0x20000183
 8003128:	20000176 	.word	0x20000176

0800312c <InitInputs>:

void InitInputs(void) {
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <InitInputs+0x1c>)
 8003132:	f001 ff91 	bl	8005058 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 8003136:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 800313a:	4904      	ldr	r1, [pc, #16]	; (800314c <InitInputs+0x20>)
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <InitInputs+0x1c>)
 800313e:	f001 fca1 	bl	8004a84 <HAL_ADC_Start_DMA>
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200001fc 	.word	0x200001fc
 800314c:	20000390 	.word	0x20000390

08003150 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	; 0x30
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 800315a:	f107 030c 	add.w	r3, r7, #12
 800315e:	f107 0214 	add.w	r2, r7, #20
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f002 fb74 	bl	8005852 <HAL_CAN_GetRxMessage>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 8003170:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <CAN_RX+0x120>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29b      	uxth	r3, r3
 8003176:	3301      	adds	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <CAN_RX+0x120>)
 800317c:	801a      	strh	r2, [r3, #0]
 800317e:	e073      	b.n	8003268 <CAN_RX+0x118>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003186:	d003      	beq.n	8003190 <CAN_RX+0x40>
 8003188:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800318c:	d05c      	beq.n	8003248 <CAN_RX+0xf8>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[1] << 8 | RxBuffer[0]);
		 break;

	 default:
		 break;
 800318e:	e06b      	b.n	8003268 <CAN_RX+0x118>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 8003190:	f001 fb72 	bl	8004878 <HAL_GetTick>
 8003194:	4603      	mov	r3, r0
 8003196:	4a37      	ldr	r2, [pc, #220]	; (8003274 <CAN_RX+0x124>)
 8003198:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 800319a:	7b3b      	ldrb	r3, [r7, #12]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <CAN_RX+0x128>)
 80031a4:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 80031a6:	7b3b      	ldrb	r3, [r7, #12]
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b32      	ldr	r3, [pc, #200]	; (800327c <CAN_RX+0x12c>)
 80031b4:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 80031b6:	7b3b      	ldrb	r3, [r7, #12]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	b25b      	sxtb	r3, r3
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	b25a      	sxtb	r2, r3
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <CAN_RX+0x130>)
 80031c6:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 80031c8:	7b7b      	ldrb	r3, [r7, #13]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <CAN_RX+0x134>)
 80031d2:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 80031d4:	7b7b      	ldrb	r3, [r7, #13]
 80031d6:	085b      	lsrs	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <CAN_RX+0x138>)
 80031e2:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 80031e4:	7b7b      	ldrb	r3, [r7, #13]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <CAN_RX+0x13c>)
 80031f2:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 80031f4:	7b7b      	ldrb	r3, [r7, #13]
 80031f6:	08db      	lsrs	r3, r3, #3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <CAN_RX+0x140>)
 8003202:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 8003204:	7b7b      	ldrb	r3, [r7, #13]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <CAN_RX+0x144>)
 8003212:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 8003214:	7b7b      	ldrb	r3, [r7, #13]
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <CAN_RX+0x148>)
 8003222:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 8003224:	7b7b      	ldrb	r3, [r7, #13]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <CAN_RX+0x14c>)
 8003232:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 8003234:	7b7b      	ldrb	r3, [r7, #13]
 8003236:	09db      	lsrs	r3, r3, #7
 8003238:	b2da      	uxtb	r2, r3
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <CAN_RX+0x150>)
 800323c:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 800323e:	7bbb      	ldrb	r3, [r7, #14]
 8003240:	b25a      	sxtb	r2, r3
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <CAN_RX+0x154>)
 8003244:	701a      	strb	r2, [r3, #0]
		 break;
 8003246:	e00f      	b.n	8003268 <CAN_RX+0x118>
		 tCANECULastSeen = HAL_GetTick();
 8003248:	f001 fb16 	bl	8004878 <HAL_GetTick>
 800324c:	4603      	mov	r3, r0
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <CAN_RX+0x158>)
 8003250:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[1] << 8 | RxBuffer[0]);
 8003252:	7b7b      	ldrb	r3, [r7, #13]
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	b21a      	sxth	r2, r3
 8003258:	7b3b      	ldrb	r3, [r7, #12]
 800325a:	b21b      	sxth	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b21b      	sxth	r3, r3
 8003260:	b29a      	uxth	r2, r3
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <CAN_RX+0x15c>)
 8003264:	801a      	strh	r2, [r3, #0]
		 break;
 8003266:	bf00      	nop
	 }
}
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200000f0 	.word	0x200000f0
 8003274:	2000015c 	.word	0x2000015c
 8003278:	20000162 	.word	0x20000162
 800327c:	2000016d 	.word	0x2000016d
 8003280:	20000150 	.word	0x20000150
 8003284:	20000184 	.word	0x20000184
 8003288:	20000177 	.word	0x20000177
 800328c:	20000158 	.word	0x20000158
 8003290:	20000168 	.word	0x20000168
 8003294:	20000182 	.word	0x20000182
 8003298:	20000160 	.word	0x20000160
 800329c:	20000174 	.word	0x20000174
 80032a0:	20000178 	.word	0x20000178
 80032a4:	20000179 	.word	0x20000179
 80032a8:	20000164 	.word	0x20000164
 80032ac:	20000180 	.word	0x20000180

080032b0 <MyHalfBufferAverage>:



uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	807b      	strh	r3, [r7, #2]
 80032c2:	460b      	mov	r3, r1
 80032c4:	707b      	strb	r3, [r7, #1]
 80032c6:	4613      	mov	r3, r2
 80032c8:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 80032ce:	787b      	ldrb	r3, [r7, #1]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <MyHalfBufferAverage+0x28>
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	e000      	b.n	80032da <MyHalfBufferAverage+0x2a>
 80032d8:	2300      	movs	r3, #0
 80032da:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 80032dc:	887b      	ldrh	r3, [r7, #2]
 80032de:	08db      	lsrs	r3, r3, #3
 80032e0:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	827b      	strh	r3, [r7, #18]
 80032e6:	e010      	b.n	800330a <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 80032e8:	8a7b      	ldrh	r3, [r7, #18]
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	783b      	ldrb	r3, [r7, #0]
 80032ee:	441a      	add	r2, r3
 80032f0:	8a3b      	ldrh	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	4413      	add	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8003304:	8a7b      	ldrh	r3, [r7, #18]
 8003306:	3301      	adds	r3, #1
 8003308:	827b      	strh	r3, [r7, #18]
 800330a:	8a7a      	ldrh	r2, [r7, #18]
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	429a      	cmp	r2, r3
 8003310:	d3ea      	bcc.n	80032e8 <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 8003312:	89fb      	ldrh	r3, [r7, #14]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	b29b      	uxth	r3, r3

}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8003332:	2100      	movs	r1, #0
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff0b 	bl	8003150 <CAN_RX>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 800334a:	2101      	movs	r1, #1
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff feff 	bl	8003150 <CAN_RX>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_CAN_ErrorCallback+0x20>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	3301      	adds	r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_CAN_ErrorCallback+0x20>)
 8003370:	701a      	strb	r2, [r3, #0]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	2000016e 	.word	0x2000016e

08003380 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d107      	bne.n	80033a0 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f083 0301 	eor.w	r3, r3, #1
 800339a:	b2da      	uxtb	r2, r3
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800339e:	701a      	strb	r2, [r3, #0]
	}
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	200001fc 	.word	0x200001fc
 80033b0:	20000161 	.word	0x20000161

080033b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033b8:	f3bf 8f4f 	dsb	sy
}
 80033bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <__NVIC_SystemReset+0x24>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80033c6:	4904      	ldr	r1, [pc, #16]	; (80033d8 <__NVIC_SystemReset+0x24>)
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_SystemReset+0x28>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80033ce:	f3bf 8f4f 	dsb	sy
}
 80033d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <__NVIC_SystemReset+0x20>
 80033d8:	e000ed00 	.word	0xe000ed00
 80033dc:	05fa0004 	.word	0x05fa0004

080033e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033e6:	f001 f9ef 	bl	80047c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033ea:	f000 f849 	bl	8003480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ee:	f000 fbaf 	bl	8003b50 <MX_GPIO_Init>
  MX_DMA_Init();
 80033f2:	f000 fb8f 	bl	8003b14 <MX_DMA_Init>
  MX_TIM3_Init();
 80033f6:	f000 fb15 	bl	8003a24 <MX_TIM3_Init>
  MX_ADC1_Init();
 80033fa:	f000 f89d 	bl	8003538 <MX_ADC1_Init>
  MX_CAN_Init();
 80033fe:	f000 f93d 	bl	800367c <MX_CAN_Init>
  MX_USART1_UART_Init();
 8003402:	f000 fb5d 	bl	8003ac0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003406:	f000 fac1 	bl	800398c <MX_TIM2_Init>
  MX_TIM1_Init();
 800340a:	f000 fa1f 	bl	800384c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 800340e:	4817      	ldr	r0, [pc, #92]	; (800346c <main+0x8c>)
 8003410:	f004 f83a 	bl	8007488 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 8003414:	4816      	ldr	r0, [pc, #88]	; (8003470 <main+0x90>)
 8003416:	f003 ffed 	bl	80073f4 <HAL_TIM_Base_Start>
  InitInputs();
 800341a:	f7ff fe87 	bl	800312c <InitInputs>
  InitController(&Inputs,&Outputs);
 800341e:	4915      	ldr	r1, [pc, #84]	; (8003474 <main+0x94>)
 8003420:	4815      	ldr	r0, [pc, #84]	; (8003478 <main+0x98>)
 8003422:	f7fd fb8b 	bl	8000b3c <InitController>
  InitOutputs();
 8003426:	f000 fc09 	bl	8003c3c <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 800342a:	2032      	movs	r0, #50	; 0x32
 800342c:	f001 fa2e 	bl	800488c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <main+0x9c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0fa      	beq.n	8003430 <main+0x50>
		  BCycleTimerFlag = 0;
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <main+0x9c>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
		  tMain = HAL_GetTick();
 8003440:	f001 fa1a 	bl	8004878 <HAL_GetTick>
 8003444:	6078      	str	r0, [r7, #4]
		  ReadInputs(&Inputs);
 8003446:	480c      	ldr	r0, [pc, #48]	; (8003478 <main+0x98>)
 8003448:	f7fe ff7a 	bl	8002340 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 800344c:	4909      	ldr	r1, [pc, #36]	; (8003474 <main+0x94>)
 800344e:	480a      	ldr	r0, [pc, #40]	; (8003478 <main+0x98>)
 8003450:	f7fd fc42 	bl	8000cd8 <Controller>
		  WriteOutputs(&Inputs,&Outputs);
 8003454:	4907      	ldr	r1, [pc, #28]	; (8003474 <main+0x94>)
 8003456:	4808      	ldr	r0, [pc, #32]	; (8003478 <main+0x98>)
 8003458:	f000 fc0c 	bl	8003c74 <WriteOutputs>
		  tExecution = HAL_GetTick() - tMain;
 800345c:	f001 fa0c 	bl	8004878 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	603b      	str	r3, [r7, #0]
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8003468:	e7e2      	b.n	8003430 <main+0x50>
 800346a:	bf00      	nop
 800346c:	200001b4 	.word	0x200001b4
 8003470:	200025d0 	.word	0x200025d0
 8003474:	20002618 	.word	0x20002618
 8003478:	200002b8 	.word	0x200002b8
 800347c:	200000f2 	.word	0x200000f2

08003480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b094      	sub	sp, #80	; 0x50
 8003484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800348a:	2228      	movs	r2, #40	; 0x28
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f005 f866 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034be:	2301      	movs	r3, #1
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034c2:	2302      	movs	r3, #2
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80034cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80034d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 f9c2 	bl	8006860 <HAL_RCC_OscConfig>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80034e2:	f000 fba1 	bl	8003c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034e6:	230f      	movs	r3, #15
 80034e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ea:	2302      	movs	r3, #2
 80034ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	2102      	movs	r1, #2
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fc2c 	bl	8006d60 <HAL_RCC_ClockConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800350e:	f000 fb8b 	bl	8003c28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003512:	2302      	movs	r3, #2
 8003514:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8003516:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800351a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	4618      	mov	r0, r3
 8003520:	f003 fdac 	bl	800707c <HAL_RCCEx_PeriphCLKConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800352a:	f000 fb7d 	bl	8003c28 <Error_Handler>
  }
}
 800352e:	bf00      	nop
 8003530:	3750      	adds	r7, #80	; 0x50
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003548:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <MX_ADC1_Init+0x13c>)
 800354a:	4a4b      	ldr	r2, [pc, #300]	; (8003678 <MX_ADC1_Init+0x140>)
 800354c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003558:	2201      	movs	r2, #1
 800355a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800355c:	4b45      	ldr	r3, [pc, #276]	; (8003674 <MX_ADC1_Init+0x13c>)
 800355e:	2200      	movs	r2, #0
 8003560:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003562:	4b44      	ldr	r3, [pc, #272]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003564:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003568:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800356a:	4b42      	ldr	r3, [pc, #264]	; (8003674 <MX_ADC1_Init+0x13c>)
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003572:	2208      	movs	r2, #8
 8003574:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003576:	483f      	ldr	r0, [pc, #252]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003578:	f001 f9ac 	bl	80048d4 <HAL_ADC_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003582:	f000 fb51 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800358a:	2301      	movs	r3, #1
 800358c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800358e:	2303      	movs	r3, #3
 8003590:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4837      	ldr	r0, [pc, #220]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003598:	f001 fb64 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80035a2:	f000 fb41 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80035aa:	2302      	movs	r3, #2
 80035ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	4619      	mov	r1, r3
 80035b2:	4830      	ldr	r0, [pc, #192]	; (8003674 <MX_ADC1_Init+0x13c>)
 80035b4:	f001 fb56 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80035be:	f000 fb33 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80035c2:	2302      	movs	r3, #2
 80035c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80035c6:	2303      	movs	r3, #3
 80035c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4829      	ldr	r0, [pc, #164]	; (8003674 <MX_ADC1_Init+0x13c>)
 80035d0:	f001 fb48 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80035da:	f000 fb25 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80035de:	2303      	movs	r3, #3
 80035e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80035e2:	2304      	movs	r3, #4
 80035e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4822      	ldr	r0, [pc, #136]	; (8003674 <MX_ADC1_Init+0x13c>)
 80035ec:	f001 fb3a 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80035f6:	f000 fb17 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80035fa:	2304      	movs	r3, #4
 80035fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80035fe:	2305      	movs	r3, #5
 8003600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	4619      	mov	r1, r3
 8003606:	481b      	ldr	r0, [pc, #108]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003608:	f001 fb2c 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003612:	f000 fb09 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003616:	2305      	movs	r3, #5
 8003618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800361a:	2306      	movs	r3, #6
 800361c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4814      	ldr	r0, [pc, #80]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003624:	f001 fb1e 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800362e:	f000 fafb 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003632:	2306      	movs	r3, #6
 8003634:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003636:	2307      	movs	r3, #7
 8003638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	4619      	mov	r1, r3
 800363e:	480d      	ldr	r0, [pc, #52]	; (8003674 <MX_ADC1_Init+0x13c>)
 8003640:	f001 fb10 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800364a:	f000 faed 	bl	8003c28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800364e:	2307      	movs	r3, #7
 8003650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003652:	2308      	movs	r3, #8
 8003654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003656:	1d3b      	adds	r3, r7, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4806      	ldr	r0, [pc, #24]	; (8003674 <MX_ADC1_Init+0x13c>)
 800365c:	f001 fb02 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8003666:	f000 fadf 	bl	8003c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200001fc 	.word	0x200001fc
 8003678:	40012400 	.word	0x40012400

0800367c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b0a8      	sub	sp, #160	; 0xa0
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <MX_CAN_Init+0x1c8>)
 8003684:	4a70      	ldr	r2, [pc, #448]	; (8003848 <MX_CAN_Init+0x1cc>)
 8003686:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8003688:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <MX_CAN_Init+0x1c8>)
 800368a:	2204      	movs	r2, #4
 800368c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <MX_CAN_Init+0x1c8>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003694:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <MX_CAN_Init+0x1c8>)
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800369a:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <MX_CAN_Init+0x1c8>)
 800369c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80036a0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80036a2:	4b68      	ldr	r3, [pc, #416]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036a8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80036aa:	4b66      	ldr	r3, [pc, #408]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80036b0:	4b64      	ldr	r3, [pc, #400]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80036bc:	4b61      	ldr	r3, [pc, #388]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036be:	2201      	movs	r2, #1
 80036c0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80036c2:	4b60      	ldr	r3, [pc, #384]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80036c8:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80036ce:	485d      	ldr	r0, [pc, #372]	; (8003844 <MX_CAN_Init+0x1c8>)
 80036d0:	f001 fd70 	bl	80051b4 <HAL_CAN_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80036da:	f000 faa5 	bl	8003c28 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_TX_ID01 << 5 ;
 80036de:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80036e2:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 80036e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 800370e:	2301      	movs	r3, #1
 8003710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8003714:	2301      	movs	r3, #1
 8003716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 800371a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800371e:	4619      	mov	r1, r3
 8003720:	4848      	ldr	r0, [pc, #288]	; (8003844 <MX_CAN_Init+0x1c8>)
 8003722:	f001 fe42 	bl	80053aa <HAL_CAN_ConfigFilter>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_CAN_Init+0xb4>
 	  Error_Handler();
 800372c:	f000 fa7c 	bl	8003c28 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_TX_ID01 << 5 ;
 8003730:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8003734:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 800373a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800373e:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8003744:	2301      	movs	r3, #1
 8003746:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8003748:	2301      	movs	r3, #1
 800374a:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 8003750:	2300      	movs	r3, #0
 8003752:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 8003754:	2301      	movs	r3, #1
 8003756:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8003758:	2301      	movs	r3, #1
 800375a:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 800375c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003760:	4619      	mov	r1, r3
 8003762:	4838      	ldr	r0, [pc, #224]	; (8003844 <MX_CAN_Init+0x1c8>)
 8003764:	f001 fe21 	bl	80053aa <HAL_CAN_ConfigFilter>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_CAN_Init+0xf6>
 	  Error_Handler();
 800376e:	f000 fa5b 	bl	8003c28 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_TX_ID01 << 5 ;
 8003772:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 800377c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003786:	2300      	movs	r3, #0
 8003788:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 800378a:	2302      	movs	r3, #2
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8003792:	2300      	movs	r3, #0
 8003794:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8003796:	2301      	movs	r3, #1
 8003798:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 800379a:	2301      	movs	r3, #1
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 800379e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037a2:	4619      	mov	r1, r3
 80037a4:	4827      	ldr	r0, [pc, #156]	; (8003844 <MX_CAN_Init+0x1c8>)
 80037a6:	f001 fe00 	bl	80053aa <HAL_CAN_ConfigFilter>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_CAN_Init+0x138>
 	  Error_Handler();
 80037b0:	f000 fa3a 	bl	8003c28 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_TX_ID01 << 5 ;
 80037b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80037b8:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 80037be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037c2:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 80037cc:	2303      	movs	r3, #3
 80037ce:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 80037d8:	2301      	movs	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 80037dc:	2301      	movs	r3, #1
 80037de:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 80037e0:	463b      	mov	r3, r7
 80037e2:	4619      	mov	r1, r3
 80037e4:	4817      	ldr	r0, [pc, #92]	; (8003844 <MX_CAN_Init+0x1c8>)
 80037e6:	f001 fde0 	bl	80053aa <HAL_CAN_ConfigFilter>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_CAN_Init+0x178>
 	  Error_Handler();
 80037f0:	f000 fa1a 	bl	8003c28 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80037f4:	2102      	movs	r1, #2
 80037f6:	4813      	ldr	r0, [pc, #76]	; (8003844 <MX_CAN_Init+0x1c8>)
 80037f8:	f002 f94c 	bl	8005a94 <HAL_CAN_ActivateNotification>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_CAN_Init+0x18a>
	   Error_Handler();
 8003802:	f000 fa11 	bl	8003c28 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8003806:	2110      	movs	r1, #16
 8003808:	480e      	ldr	r0, [pc, #56]	; (8003844 <MX_CAN_Init+0x1c8>)
 800380a:	f002 f943 	bl	8005a94 <HAL_CAN_ActivateNotification>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8003814:	f000 fa08 	bl	8003c28 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8003818:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 800381c:	4809      	ldr	r0, [pc, #36]	; (8003844 <MX_CAN_Init+0x1c8>)
 800381e:	f002 f939 	bl	8005a94 <HAL_CAN_ActivateNotification>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8003828:	f000 f9fe 	bl	8003c28 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 800382c:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_CAN_Init+0x1c8>)
 800382e:	f001 fe85 	bl	800553c <HAL_CAN_Start>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8003838:	f000 f9f6 	bl	8003c28 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 800383c:	bf00      	nop
 800383e:	37a0      	adds	r7, #160	; 0xa0
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	2000018c 	.word	0x2000018c
 8003848:	40006400 	.word	0x40006400

0800384c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b096      	sub	sp, #88	; 0x58
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003852:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003860:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800386a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	60da      	str	r2, [r3, #12]
 8003878:	611a      	str	r2, [r3, #16]
 800387a:	615a      	str	r2, [r3, #20]
 800387c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	2220      	movs	r2, #32
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f004 fe6b 	bl	8008560 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800388a:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <MX_TIM1_Init+0x138>)
 800388c:	4a3e      	ldr	r2, [pc, #248]	; (8003988 <MX_TIM1_Init+0x13c>)
 800388e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8003890:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <MX_TIM1_Init+0x138>)
 8003892:	2247      	movs	r2, #71	; 0x47
 8003894:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <MX_TIM1_Init+0x138>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <MX_TIM1_Init+0x138>)
 800389e:	f240 52db 	movw	r2, #1499	; 0x5db
 80038a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a4:	4b37      	ldr	r3, [pc, #220]	; (8003984 <MX_TIM1_Init+0x138>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <MX_TIM1_Init+0x138>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038b0:	4b34      	ldr	r3, [pc, #208]	; (8003984 <MX_TIM1_Init+0x138>)
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80038b6:	4833      	ldr	r0, [pc, #204]	; (8003984 <MX_TIM1_Init+0x138>)
 80038b8:	f003 fd4c 	bl	8007354 <HAL_TIM_Base_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80038c2:	f000 f9b1 	bl	8003c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80038cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038d0:	4619      	mov	r1, r3
 80038d2:	482c      	ldr	r0, [pc, #176]	; (8003984 <MX_TIM1_Init+0x138>)
 80038d4:	f004 f84c 	bl	8007970 <HAL_TIM_ConfigClockSource>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80038de:	f000 f9a3 	bl	8003c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80038e2:	4828      	ldr	r0, [pc, #160]	; (8003984 <MX_TIM1_Init+0x138>)
 80038e4:	f003 fe22 	bl	800752c <HAL_TIM_PWM_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80038ee:	f000 f99b 	bl	8003c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038fe:	4619      	mov	r1, r3
 8003900:	4820      	ldr	r0, [pc, #128]	; (8003984 <MX_TIM1_Init+0x138>)
 8003902:	f004 fc3f 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800390c:	f000 f98c 	bl	8003c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003910:	2360      	movs	r3, #96	; 0x60
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003918:	2300      	movs	r3, #0
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800391c:	2300      	movs	r3, #0
 800391e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003920:	2304      	movs	r3, #4
 8003922:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800392c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003930:	2204      	movs	r2, #4
 8003932:	4619      	mov	r1, r3
 8003934:	4813      	ldr	r0, [pc, #76]	; (8003984 <MX_TIM1_Init+0x138>)
 8003936:	f003 ff59 	bl	80077ec <HAL_TIM_PWM_ConfigChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003940:	f000 f972 	bl	8003c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003944:	2300      	movs	r3, #0
 8003946:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800395c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	4619      	mov	r1, r3
 8003966:	4807      	ldr	r0, [pc, #28]	; (8003984 <MX_TIM1_Init+0x138>)
 8003968:	f004 fc6a 	bl	8008240 <HAL_TIMEx_ConfigBreakDeadTime>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003972:	f000 f959 	bl	8003c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003976:	4803      	ldr	r0, [pc, #12]	; (8003984 <MX_TIM1_Init+0x138>)
 8003978:	f000 fd3e 	bl	80043f8 <HAL_TIM_MspPostInit>

}
 800397c:	bf00      	nop
 800397e:	3758      	adds	r7, #88	; 0x58
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000348 	.word	0x20000348
 8003988:	40012c00 	.word	0x40012c00

0800398c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a0:	463b      	mov	r3, r7
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039b2:	2247      	movs	r2, #71	; 0x47
 80039b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039d0:	4813      	ldr	r0, [pc, #76]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039d2:	f003 fcbf 	bl	8007354 <HAL_TIM_Base_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80039dc:	f000 f924 	bl	8003c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039e6:	f107 0308 	add.w	r3, r7, #8
 80039ea:	4619      	mov	r1, r3
 80039ec:	480c      	ldr	r0, [pc, #48]	; (8003a20 <MX_TIM2_Init+0x94>)
 80039ee:	f003 ffbf 	bl	8007970 <HAL_TIM_ConfigClockSource>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80039f8:	f000 f916 	bl	8003c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a04:	463b      	mov	r3, r7
 8003a06:	4619      	mov	r1, r3
 8003a08:	4805      	ldr	r0, [pc, #20]	; (8003a20 <MX_TIM2_Init+0x94>)
 8003a0a:	f004 fbbb 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003a14:	f000 f908 	bl	8003c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a18:	bf00      	nop
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	200025d0 	.word	0x200025d0

08003a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a38:	463b      	mov	r3, r7
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a40:	4b1d      	ldr	r3, [pc, #116]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <MX_TIM3_Init+0x98>)
 8003a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8003a46:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a48:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a56:	2263      	movs	r2, #99	; 0x63
 8003a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a66:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a68:	f003 fc74 	bl	8007354 <HAL_TIM_Base_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003a72:	f000 f8d9 	bl	8003c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a7c:	f107 0308 	add.w	r3, r7, #8
 8003a80:	4619      	mov	r1, r3
 8003a82:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003a84:	f003 ff74 	bl	8007970 <HAL_TIM_ConfigClockSource>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003a8e:	f000 f8cb 	bl	8003c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4806      	ldr	r0, [pc, #24]	; (8003ab8 <MX_TIM3_Init+0x94>)
 8003aa0:	f004 fb70 	bl	8008184 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003aaa:	f000 f8bd 	bl	8003c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200001b4 	.word	0x200001b4
 8003abc:	40000400 	.word	0x40000400

08003ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <MX_USART1_UART_Init+0x50>)
 8003ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003af6:	4805      	ldr	r0, [pc, #20]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003af8:	f004 fc29 	bl	800834e <HAL_UART_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b02:	f000 f891 	bl	8003c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000022c 	.word	0x2000022c
 8003b10:	40013800 	.word	0x40013800

08003b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <MX_DMA_Init+0x38>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <MX_DMA_Init+0x38>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6153      	str	r3, [r2, #20]
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <MX_DMA_Init+0x38>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2100      	movs	r1, #0
 8003b36:	200b      	movs	r0, #11
 8003b38:	f002 fab9 	bl	80060ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b3c:	200b      	movs	r0, #11
 8003b3e:	f002 fad2 	bl	80060e6 <HAL_NVIC_EnableIRQ>

}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000

08003b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b56:	f107 0310 	add.w	r3, r7, #16
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	609a      	str	r2, [r3, #8]
 8003b62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b64:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b6a:	f043 0320 	orr.w	r3, r3, #32
 8003b6e:	6193      	str	r3, [r2, #24]
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7c:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6193      	str	r3, [r2, #24]
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003b9a:	f043 0308 	orr.w	r3, r3, #8
 8003b9e:	6193      	str	r3, [r2, #24]
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <MX_GPIO_Init+0xa8>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8003bb2:	4812      	ldr	r0, [pc, #72]	; (8003bfc <MX_GPIO_Init+0xac>)
 8003bb4:	f002 fe3b 	bl	800682e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8003bb8:	237b      	movs	r3, #123	; 0x7b
 8003bba:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	4619      	mov	r1, r3
 8003bca:	480c      	ldr	r0, [pc, #48]	; (8003bfc <MX_GPIO_Init+0xac>)
 8003bcc:	f002 fc94 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 8003bd0:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8003bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bde:	2302      	movs	r3, #2
 8003be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be2:	f107 0310 	add.w	r3, r7, #16
 8003be6:	4619      	mov	r1, r3
 8003be8:	4804      	ldr	r0, [pc, #16]	; (8003bfc <MX_GPIO_Init+0xac>)
 8003bea:	f002 fc85 	bl	80064f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003bee:	bf00      	nop
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40010c00 	.word	0x40010c00

08003c00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a05      	ldr	r2, [pc, #20]	; (8003c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d102      	bne.n	8003c16 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
	}
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	200001b4 	.word	0x200001b4
 8003c24:	200000f2 	.word	0x200000f2

08003c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c2c:	b672      	cpsid	i
}
 8003c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8003c30:	20c8      	movs	r0, #200	; 0xc8
 8003c32:	f000 fe2b 	bl	800488c <HAL_Delay>
	  NVIC_SystemReset();
 8003c36:	f7ff fbbd 	bl	80033b4 <__NVIC_SystemReset>
	...

08003c3c <InitOutputs>:

// private function declarations
void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data);


void InitOutputs(void) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0

	// we start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)
	__HAL_TIM_SET_AUTORELOAD(&htim1, (CLUTCH_SERVO_MIN*2) -1 );
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <InitOutputs+0x34>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f640 526f 	movw	r2, #3439	; 0xd6f
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <InitOutputs+0x34>)
 8003c4c:	f640 526f 	movw	r2, #3439	; 0xd6f
 8003c50:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, (CLUTCH_SERVO_MIN*2)/2);
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <InitOutputs+0x34>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8003c5c:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <InitOutputs+0x34>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2200      	movs	r2, #0
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003c64:	2104      	movs	r1, #4
 8003c66:	4802      	ldr	r0, [pc, #8]	; (8003c70 <InitOutputs+0x34>)
 8003c68:	f004 f9ee 	bl	8008048 <HAL_TIMEx_PWMN_Start>
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20000348 	.word	0x20000348

08003c74 <WriteOutputs>:

void WriteOutputs(InputStruct *inputs, OutputStruct *outputs) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]

	tOutputsTimer = HAL_GetTick();
 8003c7e:	f000 fdfb 	bl	8004878 <HAL_GetTick>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <WriteOutputs+0x7c>)
 8003c86:	6013      	str	r3, [r2, #0]

	// CLUTCH

	// we convert from mm to timer prescaler
	My2DMapInterpolate(CLUTCH_SERVO_MAP_SIZE, xClutchTarget_rServoDemandMap, outputs->xClutchTarget, &outputs->rServoDemandRaw, CLUTCH_TARGET_MIN_MARGIN, CLUTCH_TARGET_MAX_MARGIN);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	33ac      	adds	r3, #172	; 0xac
 8003c90:	4918      	ldr	r1, [pc, #96]	; (8003cf4 <WriteOutputs+0x80>)
 8003c92:	9101      	str	r1, [sp, #4]
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	9100      	str	r1, [sp, #0]
 8003c9a:	4917      	ldr	r1, [pc, #92]	; (8003cf8 <WriteOutputs+0x84>)
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f000 fcc1 	bl	8004624 <My2DMapInterpolate>

	// convert from float to uint16_t
	outputs->rServoDemand  =(uint16_t)round(outputs->rServoDemandRaw);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fbb3 	bl	8000414 <__aeabi_f2d>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f005 f895 	bl	8008de4 <round>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fc fc27 	bl	8000514 <__aeabi_d2uiz>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	// Clamping to avoid out of bounds values
	outputs->rServoDemand = CLAMP(outputs->rServoDemand, CLUTCH_SERVO_ABSOLUTE_MAX, CLUTCH_SERVO_ABSOLUTE_MIN);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003cd6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003cda:	d20f      	bcs.n	8003cfc <WriteOutputs+0x88>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003ce2:	f240 5214 	movw	r2, #1300	; 0x514
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	bf38      	it	cc
 8003cea:	4613      	movcc	r3, r2
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	e007      	b.n	8003d00 <WriteOutputs+0x8c>
 8003cf0:	200026e4 	.word	0x200026e4
 8003cf4:	41700000 	.word	0x41700000
 8003cf8:	08009304 	.word	0x08009304
 8003cfc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	// Actuated flag (it will be applied on the next cycle because it gets saved in the controller)
	outputs->BClutchActuated = (outputs->rServoDemand <= CLUTCH_SERVO_ACTUATED ? 1 : 0);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003d0c:	f240 622c 	movw	r2, #1580	; 0x62c
 8003d10:	4293      	cmp	r3, r2
 8003d12:	bf94      	ite	ls
 8003d14:	2301      	movls	r3, #1
 8003d16:	2300      	movhi	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to
	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	outputs->rServoDemand *= 2;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
	//__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, outputs->rServoDemand -1 );
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	4baf      	ldr	r3, [pc, #700]	; (8003ff8 <WriteOutputs+0x384>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003d46:	3b01      	subs	r3, #1
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4bab      	ldr	r3, [pc, #684]	; (8003ff8 <WriteOutputs+0x384>)
 8003d4c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, outputs->rServoDemand/2);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	4ba7      	ldr	r3, [pc, #668]	; (8003ff8 <WriteOutputs+0x384>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting

	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, outputs->BDnShiftPortState);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003d64:	461a      	mov	r2, r3
 8003d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d6a:	48a4      	ldr	r0, [pc, #656]	; (8003ffc <WriteOutputs+0x388>)
 8003d6c:	f002 fd5f 	bl	800682e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, outputs->BUpShiftPortState);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d76:	461a      	mov	r2, r3
 8003d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d7c:	489f      	ldr	r0, [pc, #636]	; (8003ffc <WriteOutputs+0x388>)
 8003d7e:	f002 fd56 	bl	800682e <HAL_GPIO_WritePin>


	// Toggle Switches
	// output->BSWLEDA

	uint8_t BLaunchButtonCANSW = outputs->BLaunchControl;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8003d88:	73fb      	strb	r3, [r7, #15]
	uint8_t BSparkCutCANSW = outputs->BSparkCut;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003d90:	73bb      	strb	r3, [r7, #14]
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF, in order to have also the flashing action?

	// ---------------------------------------------------------------------------------------------------
	// Frame 1: Shifter Feedback

	TxData[0] = inputs->NGear;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003d98:	4b99      	ldr	r3, [pc, #612]	; (8004000 <WriteOutputs+0x38c>)
 8003d9a:	701a      	strb	r2, [r3, #0]
	TxData[1] = inputs->rClutchPaddle;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	4b96      	ldr	r3, [pc, #600]	; (8004000 <WriteOutputs+0x38c>)
 8003da6:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)(outputs->xClutchTarget * 10) >> 8;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	4995      	ldr	r1, [pc, #596]	; (8004004 <WriteOutputs+0x390>)
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fcde 	bl	8000770 <__aeabi_fmul>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fea0 	bl	8000afc <__aeabi_f2uiz>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	121b      	asrs	r3, r3, #8
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b8e      	ldr	r3, [pc, #568]	; (8004000 <WriteOutputs+0x38c>)
 8003dc6:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t)outputs->xClutchTarget;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fe95 	bl	8000afc <__aeabi_f2uiz>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b8a      	ldr	r3, [pc, #552]	; (8004000 <WriteOutputs+0x38c>)
 8003dd8:	70da      	strb	r2, [r3, #3]
	TxData[4] = (uint8_t)(inputs->nEngine >> 8);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8003de0:	121b      	asrs	r3, r3, #8
 8003de2:	b21b      	sxth	r3, r3
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b86      	ldr	r3, [pc, #536]	; (8004000 <WriteOutputs+0x38c>)
 8003de8:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t)inputs->nEngine;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4b83      	ldr	r3, [pc, #524]	; (8004000 <WriteOutputs+0x38c>)
 8003df4:	715a      	strb	r2, [r3, #5]

	uint16_t VSupplyCAN = (uint16_t)(inputs->VSupply * 1000);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	4982      	ldr	r1, [pc, #520]	; (8004008 <WriteOutputs+0x394>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fcb6 	bl	8000770 <__aeabi_fmul>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc fe78 	bl	8000afc <__aeabi_f2uiz>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	81bb      	strh	r3, [r7, #12]

	TxData[6] = (uint8_t)(VSupplyCAN >> 8);
 8003e10:	89bb      	ldrh	r3, [r7, #12]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b79      	ldr	r3, [pc, #484]	; (8004000 <WriteOutputs+0x38c>)
 8003e1a:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t)VSupplyCAN;
 8003e1c:	89bb      	ldrh	r3, [r7, #12]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	4b77      	ldr	r3, [pc, #476]	; (8004000 <WriteOutputs+0x38c>)
 8003e22:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID01, 8, TxData);
 8003e24:	4a76      	ldr	r2, [pc, #472]	; (8004000 <WriteOutputs+0x38c>)
 8003e26:	2108      	movs	r1, #8
 8003e28:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003e2c:	f000 f934 	bl	8004098 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------
	// Frame 2: Shifter Control 1

	TxData[0] = (uint8_t)outputs->NDispalyPage;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f993 304f 	ldrsb.w	r3, [r3, #79]	; 0x4f
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	4b71      	ldr	r3, [pc, #452]	; (8004000 <WriteOutputs+0x38c>)
 8003e3a:	701a      	strb	r2, [r3, #0]
	TxData[1] = outputs->NMultifunctionActiveSwitch;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8003e42:	4b6f      	ldr	r3, [pc, #444]	; (8004000 <WriteOutputs+0x38c>)
 8003e44:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)(outputs->NMultifunction[outputs->NMultifunctionActiveSwitch-1] + 1);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	4413      	add	r3, r2
 8003e52:	f993 306d 	ldrsb.w	r3, [r3, #109]	; 0x6d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	4b68      	ldr	r3, [pc, #416]	; (8004000 <WriteOutputs+0x38c>)
 8003e5e:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 8003e60:	4b67      	ldr	r3, [pc, #412]	; (8004000 <WriteOutputs+0x38c>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	70da      	strb	r2, [r3, #3]
	TxData[4] = outputs->NDisplayFlags;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8003e6c:	4b64      	ldr	r3, [pc, #400]	; (8004000 <WriteOutputs+0x38c>)
 8003e6e:	711a      	strb	r2, [r3, #4]

	TxData[5] = 0;
 8003e70:	4b63      	ldr	r3, [pc, #396]	; (8004000 <WriteOutputs+0x38c>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BUseButtonsForMultifunction	>> 0;
 8003e76:	4b62      	ldr	r3, [pc, #392]	; (8004000 <WriteOutputs+0x38c>)
 8003e78:	795a      	ldrb	r2, [r3, #5]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003e80:	4313      	orrs	r3, r2
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b5e      	ldr	r3, [pc, #376]	; (8004000 <WriteOutputs+0x38c>)
 8003e86:	715a      	strb	r2, [r3, #5]
	TxData[5] |= 0		>> 1;
 8003e88:	4b5d      	ldr	r3, [pc, #372]	; (8004000 <WriteOutputs+0x38c>)
 8003e8a:	795a      	ldrb	r2, [r3, #5]
 8003e8c:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <WriteOutputs+0x38c>)
 8003e8e:	715a      	strb	r2, [r3, #5]
	TxData[5] |= 0		>> 2;
 8003e90:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <WriteOutputs+0x38c>)
 8003e92:	795a      	ldrb	r2, [r3, #5]
 8003e94:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <WriteOutputs+0x38c>)
 8003e96:	715a      	strb	r2, [r3, #5]
	TxData[5] |= 0		>> 3;
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <WriteOutputs+0x38c>)
 8003e9a:	795a      	ldrb	r2, [r3, #5]
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <WriteOutputs+0x38c>)
 8003e9e:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDA						>> 4;
 8003ea0:	4b57      	ldr	r3, [pc, #348]	; (8004000 <WriteOutputs+0x38c>)
 8003ea2:	795a      	ldrb	r2, [r3, #5]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4b53      	ldr	r3, [pc, #332]	; (8004000 <WriteOutputs+0x38c>)
 8003eb4:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDB						>> 5;
 8003eb6:	4b52      	ldr	r3, [pc, #328]	; (8004000 <WriteOutputs+0x38c>)
 8003eb8:	795a      	ldrb	r2, [r3, #5]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b4d      	ldr	r3, [pc, #308]	; (8004000 <WriteOutputs+0x38c>)
 8003eca:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDC						>> 6;
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <WriteOutputs+0x38c>)
 8003ece:	795a      	ldrb	r2, [r3, #5]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003ed6:	099b      	lsrs	r3, r3, #6
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	4313      	orrs	r3, r2
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4b48      	ldr	r3, [pc, #288]	; (8004000 <WriteOutputs+0x38c>)
 8003ee0:	715a      	strb	r2, [r3, #5]
	TxData[5] |= outputs->BSWLEDD						>> 7;
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <WriteOutputs+0x38c>)
 8003ee4:	795a      	ldrb	r2, [r3, #5]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003eec:	09db      	lsrs	r3, r3, #7
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <WriteOutputs+0x38c>)
 8003ef6:	715a      	strb	r2, [r3, #5]

	TxData[6] = inputs->NCANErrors;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 8003efe:	4b40      	ldr	r3, [pc, #256]	; (8004000 <WriteOutputs+0x38c>)
 8003f00:	719a      	strb	r2, [r3, #6]
	TxData[7] = inputs->NCANRxErrors;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8003f08:	4b3d      	ldr	r3, [pc, #244]	; (8004000 <WriteOutputs+0x38c>)
 8003f0a:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID02, 8, TxData);
 8003f0c:	4a3c      	ldr	r2, [pc, #240]	; (8004000 <WriteOutputs+0x38c>)
 8003f0e:	2108      	movs	r1, #8
 8003f10:	f240 3021 	movw	r0, #801	; 0x321
 8003f14:	f000 f8c0 	bl	8004098 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------
	// Frame 3: Shifter Control 2

	TxData[0] = 0;	// Reserved for ECU control
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <WriteOutputs+0x38c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0;
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <WriteOutputs+0x38c>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0;
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <WriteOutputs+0x38c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <WriteOutputs+0x38c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0;
 8003f30:	4b33      	ldr	r3, [pc, #204]	; (8004000 <WriteOutputs+0x38c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0;
 8003f36:	4b32      	ldr	r3, [pc, #200]	; (8004000 <WriteOutputs+0x38c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	715a      	strb	r2, [r3, #5]
	TxData[6] = 0;
 8003f3c:	4b30      	ldr	r3, [pc, #192]	; (8004000 <WriteOutputs+0x38c>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	719a      	strb	r2, [r3, #6]
	TxData[7] = 0;
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <WriteOutputs+0x38c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID03, 8, TxData);
 8003f48:	4a2d      	ldr	r2, [pc, #180]	; (8004000 <WriteOutputs+0x38c>)
 8003f4a:	2108      	movs	r1, #8
 8003f4c:	f240 3022 	movw	r0, #802	; 0x322
 8003f50:	f000 f8a2 	bl	8004098 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------
	// Frame 4: Shifter Status

	TxData[0] = (uint8_t)(inputs->NInputsStatusWord >> 0);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <WriteOutputs+0x38c>)
 8003f5e:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)(inputs->NInputsStatusWord >> 8);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	4b25      	ldr	r3, [pc, #148]	; (8004000 <WriteOutputs+0x38c>)
 8003f6c:	705a      	strb	r2, [r3, #1]
	TxData[2] = (uint8_t)(inputs->NInputsStatusWord >> 16);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4b21      	ldr	r3, [pc, #132]	; (8004000 <WriteOutputs+0x38c>)
 8003f7a:	709a      	strb	r2, [r3, #2]
	TxData[3] = (uint8_t)(inputs->NInputsStatusWord >> 24);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f82:	0e1b      	lsrs	r3, r3, #24
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <WriteOutputs+0x38c>)
 8003f88:	70da      	strb	r2, [r3, #3]

	TxData[4] = (uint8_t)(outputs->NControllerStatusWord >> 0);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <WriteOutputs+0x38c>)
 8003f94:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t)(outputs->NControllerStatusWord >> 8);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b17      	ldr	r3, [pc, #92]	; (8004000 <WriteOutputs+0x38c>)
 8003fa2:	715a      	strb	r2, [r3, #5]
	TxData[6] = (uint8_t)(outputs->NControllerStatusWord >> 16);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <WriteOutputs+0x38c>)
 8003fb0:	719a      	strb	r2, [r3, #6]
	TxData[7] = (uint8_t)(outputs->NControllerStatusWord >> 24);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fb8:	0e1b      	lsrs	r3, r3, #24
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	4b10      	ldr	r3, [pc, #64]	; (8004000 <WriteOutputs+0x38c>)
 8003fbe:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID04, 8, TxData);
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	; (8004000 <WriteOutputs+0x38c>)
 8003fc2:	2108      	movs	r1, #8
 8003fc4:	f240 3023 	movw	r0, #803	; 0x323
 8003fc8:	f000 f866 	bl	8004098 <CAN_TX>


	// ---------------------------------------------------------------------------------------------------
	// Frame 6: ECU	Switch Control

	TxData[0] = 0;
 8003fcc:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <WriteOutputs+0x38c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0;
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <WriteOutputs+0x38c>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	705a      	strb	r2, [r3, #1]
	TxData[2] = 0;
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <WriteOutputs+0x38c>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <WriteOutputs+0x38c>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	70da      	strb	r2, [r3, #3]
	TxData[4] = 0;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <WriteOutputs+0x38c>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	711a      	strb	r2, [r3, #4]
	TxData[5] = 0;
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <WriteOutputs+0x38c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	715a      	strb	r2, [r3, #5]

	TxData[6] = 0;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <WriteOutputs+0x38c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	719a      	strb	r2, [r3, #6]
 8003ff6:	e009      	b.n	800400c <WriteOutputs+0x398>
 8003ff8:	20000348 	.word	0x20000348
 8003ffc:	40010c00 	.word	0x40010c00
 8004000:	200026d4 	.word	0x200026d4
 8004004:	41200000 	.word	0x41200000
 8004008:	447a0000 	.word	0x447a0000
	TxData[6] |= (inputs->BLaunchRequest	& 0x01) << 0;
 800400c:	4b21      	ldr	r3, [pc, #132]	; (8004094 <WriteOutputs+0x420>)
 800400e:	799b      	ldrb	r3, [r3, #6]
 8004010:	b25a      	sxtb	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8004018:	b25b      	sxtb	r3, r3
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	b25b      	sxtb	r3, r3
 8004020:	4313      	orrs	r3, r2
 8004022:	b25b      	sxtb	r3, r3
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <WriteOutputs+0x420>)
 8004028:	719a      	strb	r2, [r3, #6]
	TxData[6] |= (outputs->BSparkCut		& 0x01) << 1;
 800402a:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <WriteOutputs+0x420>)
 800402c:	799b      	ldrb	r3, [r3, #6]
 800402e:	b25a      	sxtb	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	b25b      	sxtb	r3, r3
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	b25b      	sxtb	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	b25b      	sxtb	r3, r3
 8004044:	b2da      	uxtb	r2, r3
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <WriteOutputs+0x420>)
 8004048:	719a      	strb	r2, [r3, #6]
	TxData[6] |= (0						  	& 0x01) << 2;
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <WriteOutputs+0x420>)
 800404c:	799a      	ldrb	r2, [r3, #6]
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <WriteOutputs+0x420>)
 8004050:	719a      	strb	r2, [r3, #6]
	TxData[6] |= (0							& 0x01) << 3;
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <WriteOutputs+0x420>)
 8004054:	799a      	ldrb	r2, [r3, #6]
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <WriteOutputs+0x420>)
 8004058:	719a      	strb	r2, [r3, #6]
	TxData[6] |= (0							& 0x01) << 4;
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <WriteOutputs+0x420>)
 800405c:	799a      	ldrb	r2, [r3, #6]
 800405e:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <WriteOutputs+0x420>)
 8004060:	719a      	strb	r2, [r3, #6]
	TxData[6] |= (0							& 0x01) << 5;
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <WriteOutputs+0x420>)
 8004064:	799a      	ldrb	r2, [r3, #6]
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <WriteOutputs+0x420>)
 8004068:	719a      	strb	r2, [r3, #6]
	TxData[6] |= (0							& 0x01) << 6;
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <WriteOutputs+0x420>)
 800406c:	799a      	ldrb	r2, [r3, #6]
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <WriteOutputs+0x420>)
 8004070:	719a      	strb	r2, [r3, #6]
	TxData[6] |= (0							& 0x01) << 7;
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <WriteOutputs+0x420>)
 8004074:	799a      	ldrb	r2, [r3, #6]
 8004076:	4b07      	ldr	r3, [pc, #28]	; (8004094 <WriteOutputs+0x420>)
 8004078:	719a      	strb	r2, [r3, #6]

	TxData[7] = 0;
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <WriteOutputs+0x420>)
 800407c:	2200      	movs	r2, #0
 800407e:	71da      	strb	r2, [r3, #7]

	CAN_TX(SHIFTER_TX_ID06, 8 , TxData);
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <WriteOutputs+0x420>)
 8004082:	2108      	movs	r1, #8
 8004084:	f240 6066 	movw	r0, #1638	; 0x666
 8004088:	f000 f806 	bl	8004098 <CAN_TX>

	// ---------------------------------------------------------------------------------------------------

}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	200026d4 	.word	0x200026d4

08004098 <CAN_TX>:

void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	; 0x30
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	460b      	mov	r3, r1
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef CanTxHeader;
	uint32_t nCanTxMailbox;

	CanTxHeader.DLC = dlc;
 80040a6:	7afb      	ldrb	r3, [r7, #11]
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
	CanTxHeader.StdId = ID;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	617b      	str	r3, [r7, #20]
	CanTxHeader.IDE = CAN_ID_STD;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
	CanTxHeader.RTR = CAN_RTR_DATA;
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80040b6:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <CAN_TX+0xcc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t wait = __HAL_TIM_GET_COUNTER(&htim2) + CAN_TX_TIMEOUT;
 80040be:	4b29      	ldr	r3, [pc, #164]	; (8004164 <CAN_TX+0xcc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) && (__HAL_TIM_GET_COUNTER(&htim2) < wait));
 80040ca:	bf00      	nop
 80040cc:	4826      	ldr	r0, [pc, #152]	; (8004168 <CAN_TX+0xd0>)
 80040ce:	f001 fb8c 	bl	80057ea <HAL_CAN_GetTxMailboxesFreeLevel>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <CAN_TX+0x4c>
 80040d8:	4b22      	ldr	r3, [pc, #136]	; (8004164 <CAN_TX+0xcc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d8f3      	bhi.n	80040cc <CAN_TX+0x34>

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {	// all mailboxes are still filled
 80040e4:	4820      	ldr	r0, [pc, #128]	; (8004168 <CAN_TX+0xd0>)
 80040e6:	f001 fb80 	bl	80057ea <HAL_CAN_GetTxMailboxesFreeLevel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <CAN_TX+0x64>
		HAL_CAN_AbortTxRequest(&hcan, nCanOldestMailbox);
 80040f0:	4b1e      	ldr	r3, [pc, #120]	; (800416c <CAN_TX+0xd4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4619      	mov	r1, r3
 80040f6:	481c      	ldr	r0, [pc, #112]	; (8004168 <CAN_TX+0xd0>)
 80040f8:	f001 fb33 	bl	8005762 <HAL_CAN_AbortTxRequest>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, data, &nCanTxMailbox) != HAL_OK) {
 80040fc:	f107 0310 	add.w	r3, r7, #16
 8004100:	f107 0114 	add.w	r1, r7, #20
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4818      	ldr	r0, [pc, #96]	; (8004168 <CAN_TX+0xd0>)
 8004108:	f001 fa5c 	bl	80055c4 <HAL_CAN_AddTxMessage>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <CAN_TX+0x8c>
		print("Failed to Add Message can 1\n");
 8004112:	4817      	ldr	r0, [pc, #92]	; (8004170 <CAN_TX+0xd8>)
 8004114:	f000 fa72 	bl	80045fc <print>
		nCanTxErrorCount++;
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <CAN_TX+0xdc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a15      	ldr	r2, [pc, #84]	; (8004174 <CAN_TX+0xdc>)
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01c      	b.n	800415e <CAN_TX+0xc6>
		return;
	}

	// Mailbox aging adjustment
	if(nCanTxMailbox != nCanYoungestMailbox) {
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <CAN_TX+0xe0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d017      	beq.n	800415e <CAN_TX+0xc6>

		if(nCanTxMailbox != nCanSecondOldestMailbox) {
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <CAN_TX+0xe4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d00b      	beq.n	8004150 <CAN_TX+0xb8>
			nCanOldestMailbox = nCanSecondOldestMailbox;
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <CAN_TX+0xe4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0b      	ldr	r2, [pc, #44]	; (800416c <CAN_TX+0xd4>)
 800413e:	6013      	str	r3, [r2, #0]
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <CAN_TX+0xe0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a0d      	ldr	r2, [pc, #52]	; (800417c <CAN_TX+0xe4>)
 8004146:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4a0b      	ldr	r2, [pc, #44]	; (8004178 <CAN_TX+0xe0>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e006      	b.n	800415e <CAN_TX+0xc6>
		}
		else {
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <CAN_TX+0xe0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a09      	ldr	r2, [pc, #36]	; (800417c <CAN_TX+0xe4>)
 8004156:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4a07      	ldr	r2, [pc, #28]	; (8004178 <CAN_TX+0xe0>)
 800415c:	6013      	str	r3, [r2, #0]
		}
	}

}
 800415e:	3730      	adds	r7, #48	; 0x30
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	200025d0 	.word	0x200025d0
 8004168:	2000018c 	.word	0x2000018c
 800416c:	20000058 	.word	0x20000058
 8004170:	08008e8c 	.word	0x08008e8c
 8004174:	200000f4 	.word	0x200000f4
 8004178:	20000060 	.word	0x20000060
 800417c:	2000005c 	.word	0x2000005c

08004180 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_MspInit+0x5c>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_MspInit+0x5c>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6193      	str	r3, [r2, #24]
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_MspInit+0x5c>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_MspInit+0x5c>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_MspInit+0x5c>)
 80041a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a8:	61d3      	str	r3, [r2, #28]
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_MspInit+0x5c>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <HAL_MspInit+0x60>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_MspInit+0x60>)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40010000 	.word	0x40010000

080041e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <HAL_ADC_MspInit+0xc0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d14a      	bne.n	800429a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004204:	4b28      	ldr	r3, [pc, #160]	; (80042a8 <HAL_ADC_MspInit+0xc4>)
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	4a27      	ldr	r2, [pc, #156]	; (80042a8 <HAL_ADC_MspInit+0xc4>)
 800420a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420e:	6193      	str	r3, [r2, #24]
 8004210:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <HAL_ADC_MspInit+0xc4>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_ADC_MspInit+0xc4>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <HAL_ADC_MspInit+0xc4>)
 8004222:	f043 0304 	orr.w	r3, r3, #4
 8004226:	6193      	str	r3, [r2, #24]
 8004228:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <HAL_ADC_MspInit+0xc4>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004234:	23ff      	movs	r3, #255	; 0xff
 8004236:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004238:	2303      	movs	r3, #3
 800423a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800423c:	f107 0310 	add.w	r3, r7, #16
 8004240:	4619      	mov	r1, r3
 8004242:	481a      	ldr	r0, [pc, #104]	; (80042ac <HAL_ADC_MspInit+0xc8>)
 8004244:	f002 f958 	bl	80064f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004248:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_ADC_MspInit+0xd0>)
 800424c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800424e:	4b18      	ldr	r3, [pc, #96]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004250:	2200      	movs	r2, #0
 8004252:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004254:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 800425c:	2280      	movs	r2, #128	; 0x80
 800425e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004260:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 800426a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800426e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004272:	2220      	movs	r2, #32
 8004274:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800427c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800427e:	480c      	ldr	r0, [pc, #48]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004280:	f001 ff4c 	bl	800611c <HAL_DMA_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800428a:	f7ff fccd 	bl	8003c28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004292:	621a      	str	r2, [r3, #32]
 8004294:	4a06      	ldr	r2, [pc, #24]	; (80042b0 <HAL_ADC_MspInit+0xcc>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800429a:	bf00      	nop
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40012400 	.word	0x40012400
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40010800 	.word	0x40010800
 80042b0:	20000274 	.word	0x20000274
 80042b4:	40020008 	.word	0x40020008

080042b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c0:	f107 0310 	add.w	r3, r7, #16
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a20      	ldr	r2, [pc, #128]	; (8004354 <HAL_CAN_MspInit+0x9c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d139      	bne.n	800434c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_CAN_MspInit+0xa0>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <HAL_CAN_MspInit+0xa0>)
 80042de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042e2:	61d3      	str	r3, [r2, #28]
 80042e4:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <HAL_CAN_MspInit+0xa0>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_CAN_MspInit+0xa0>)
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_CAN_MspInit+0xa0>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	6193      	str	r3, [r2, #24]
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <HAL_CAN_MspInit+0xa0>)
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800430c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004316:	f107 0310 	add.w	r3, r7, #16
 800431a:	4619      	mov	r1, r3
 800431c:	480f      	ldr	r0, [pc, #60]	; (800435c <HAL_CAN_MspInit+0xa4>)
 800431e:	f002 f8eb 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004328:	2302      	movs	r3, #2
 800432a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800432c:	2303      	movs	r3, #3
 800432e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004330:	f107 0310 	add.w	r3, r7, #16
 8004334:	4619      	mov	r1, r3
 8004336:	4809      	ldr	r0, [pc, #36]	; (800435c <HAL_CAN_MspInit+0xa4>)
 8004338:	f002 f8de 	bl	80064f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800433c:	2200      	movs	r2, #0
 800433e:	2100      	movs	r1, #0
 8004340:	2014      	movs	r0, #20
 8004342:	f001 feb4 	bl	80060ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004346:	2014      	movs	r0, #20
 8004348:	f001 fecd 	bl	80060e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40006400 	.word	0x40006400
 8004358:	40021000 	.word	0x40021000
 800435c:	40010800 	.word	0x40010800

08004360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1f      	ldr	r2, [pc, #124]	; (80043ec <HAL_TIM_Base_MspInit+0x8c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 8004378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800437c:	6193      	str	r3, [r2, #24]
 800437e:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800438a:	e02a      	b.n	80043e2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d10c      	bne.n	80043b0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004396:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	61d3      	str	r3, [r2, #28]
 80043a2:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
}
 80043ae:	e018      	b.n	80043e2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0f      	ldr	r2, [pc, #60]	; (80043f4 <HAL_TIM_Base_MspInit+0x94>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d113      	bne.n	80043e2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	61d3      	str	r3, [r2, #28]
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_TIM_Base_MspInit+0x90>)
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043d2:	2200      	movs	r2, #0
 80043d4:	2100      	movs	r1, #0
 80043d6:	201d      	movs	r0, #29
 80043d8:	f001 fe69 	bl	80060ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043dc:	201d      	movs	r0, #29
 80043de:	f001 fe82 	bl	80060e6 <HAL_NVIC_EnableIRQ>
}
 80043e2:	bf00      	nop
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40000400 	.word	0x40000400

080043f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004400:	f107 0310 	add.w	r3, r7, #16
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_TIM_MspPostInit+0x5c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d118      	bne.n	800444a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_TIM_MspPostInit+0x60>)
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <HAL_TIM_MspPostInit+0x60>)
 800441e:	f043 0308 	orr.w	r3, r3, #8
 8004422:	6193      	str	r3, [r2, #24]
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <HAL_TIM_MspPostInit+0x60>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 8004430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004436:	2302      	movs	r3, #2
 8004438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2302      	movs	r3, #2
 800443c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 800443e:	f107 0310 	add.w	r3, r7, #16
 8004442:	4619      	mov	r1, r3
 8004444:	4805      	ldr	r0, [pc, #20]	; (800445c <HAL_TIM_MspPostInit+0x64>)
 8004446:	f002 f857 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800444a:	bf00      	nop
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40021000 	.word	0x40021000
 800445c:	40010c00 	.word	0x40010c00

08004460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_UART_MspInit+0x8c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d131      	bne.n	80044e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <HAL_UART_MspInit+0x90>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <HAL_UART_MspInit+0x90>)
 8004486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800448a:	6193      	str	r3, [r2, #24]
 800448c:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <HAL_UART_MspInit+0x90>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_UART_MspInit+0x90>)
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <HAL_UART_MspInit+0x90>)
 800449e:	f043 0304 	orr.w	r3, r3, #4
 80044a2:	6193      	str	r3, [r2, #24]
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_UART_MspInit+0x90>)
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b6:	2302      	movs	r3, #2
 80044b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ba:	2303      	movs	r3, #3
 80044bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044be:	f107 0310 	add.w	r3, r7, #16
 80044c2:	4619      	mov	r1, r3
 80044c4:	480b      	ldr	r0, [pc, #44]	; (80044f4 <HAL_UART_MspInit+0x94>)
 80044c6:	f002 f817 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	4619      	mov	r1, r3
 80044de:	4805      	ldr	r0, [pc, #20]	; (80044f4 <HAL_UART_MspInit+0x94>)
 80044e0:	f002 f80a 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044e4:	bf00      	nop
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40013800 	.word	0x40013800
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40010800 	.word	0x40010800

080044f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044fc:	e7fe      	b.n	80044fc <NMI_Handler+0x4>

080044fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004502:	e7fe      	b.n	8004502 <HardFault_Handler+0x4>

08004504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004508:	e7fe      	b.n	8004508 <MemManage_Handler+0x4>

0800450a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800450e:	e7fe      	b.n	800450e <BusFault_Handler+0x4>

08004510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004514:	e7fe      	b.n	8004514 <UsageFault_Handler+0x4>

08004516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800451a:	bf00      	nop
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800453e:	f000 f989 	bl	8004854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800454c:	4802      	ldr	r0, [pc, #8]	; (8004558 <DMA1_Channel1_IRQHandler+0x10>)
 800454e:	f001 fe9f 	bl	8006290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000274 	.word	0x20000274

0800455c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004562:	f001 fabc 	bl	8005ade <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	2000018c 	.word	0x2000018c

08004570 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <TIM3_IRQHandler+0x10>)
 8004576:	f003 f831 	bl	80075dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200001b4 	.word	0x200001b4

08004584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800458c:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <_sbrk+0x5c>)
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <_sbrk+0x60>)
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <_sbrk+0x64>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <_sbrk+0x64>)
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <_sbrk+0x68>)
 80045a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <_sbrk+0x64>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d207      	bcs.n	80045c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045b4:	f003 ffaa 	bl	800850c <__errno>
 80045b8:	4603      	mov	r3, r0
 80045ba:	220c      	movs	r2, #12
 80045bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045be:	f04f 33ff 	mov.w	r3, #4294967295
 80045c2:	e009      	b.n	80045d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <_sbrk+0x64>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <_sbrk+0x64>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <_sbrk+0x64>)
 80045d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045d6:	68fb      	ldr	r3, [r7, #12]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20005000 	.word	0x20005000
 80045e4:	00000400 	.word	0x00000400
 80045e8:	200000f8 	.word	0x200000f8
 80045ec:	20002700 	.word	0x20002700

080045f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <print>:
 *      Author: orestis
 */

#include <Utils.h>

void print(char *msg, ...) {
 80045fc:	b40f      	push	{r0, r1, r2, r3}
 80045fe:	b580      	push	{r7, lr}
 8004600:	b09a      	sub	sp, #104	; 0x68
 8004602:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 8004604:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004608:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 800460a:	1d3b      	adds	r3, r7, #4
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004610:	4618      	mov	r0, r3
 8004612:	f003 ffc3 	bl	800859c <vsiprintf>
	va_end(args);

#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}
 8004616:	bf00      	nop
 8004618:	3768      	adds	r7, #104	; 0x68
 800461a:	46bd      	mov	sp, r7
 800461c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004620:	b004      	add	sp, #16
 8004622:	4770      	bx	lr

08004624 <My2DMapInterpolate>:

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	68fc      	ldr	r4, [r7, #12]
 8004634:	1e63      	subs	r3, r4, #1
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	4623      	mov	r3, r4
 800463a:	4618      	mov	r0, r3
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	014b      	lsls	r3, r1, #5
 800464a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800464e:	0142      	lsls	r2, r0, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004656:	4618      	mov	r0, r3
 8004658:	f7fb ff80 	bl	800055c <__aeabi_fsub>
 800465c:	4603      	mov	r3, r0
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc fa23 	bl	8000aac <__aeabi_fcmplt>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 800466c:	4623      	mov	r3, r4
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	4413      	add	r3, r2
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	601a      	str	r2, [r3, #0]
		return 1;
 800467a:	2301      	movs	r3, #1
 800467c:	e07a      	b.n	8004774 <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1e5a      	subs	r2, r3, #1
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004688:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb ff68 	bl	8000560 <__addsf3>
 8004690:	4603      	mov	r3, r0
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7fc fa27 	bl	8000ae8 <__aeabi_fcmpgt>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 80046a0:	4623      	mov	r3, r4
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	4413      	add	r3, r2
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	3a01      	subs	r2, #1
 80046ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]
		return 1;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e05d      	b.n	8004774 <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	e00e      	b.n	80046dc <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc f9ee 	bl	8000aac <__aeabi_fcmplt>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3301      	adds	r3, #1
 80046da:	61fb      	str	r3, [r7, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3b01      	subs	r3, #1
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	dbeb      	blt.n	80046be <My2DMapInterpolate+0x9a>
 80046e6:	e000      	b.n	80046ea <My2DMapInterpolate+0xc6>
			break;
 80046e8:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f7fb ff2d 	bl	800055c <__aeabi_fsub>
 8004702:	4603      	mov	r3, r0
 8004704:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 8004706:	4623      	mov	r3, r4
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	3201      	adds	r2, #1
 8004712:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004716:	4623      	mov	r3, r4
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	4413      	add	r3, r2
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004724:	4619      	mov	r1, r3
 8004726:	f7fb ff19 	bl	800055c <__aeabi_fsub>
 800472a:	4603      	mov	r3, r0
 800472c:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 800472e:	4623      	mov	r3, r4
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4413      	add	r3, r2
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fb ff08 	bl	800055c <__aeabi_fsub>
 800474c:	4603      	mov	r3, r0
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	4618      	mov	r0, r3
 8004752:	f7fc f80d 	bl	8000770 <__aeabi_fmul>
 8004756:	4603      	mov	r3, r0
 8004758:	6979      	ldr	r1, [r7, #20]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc f8bc 	bl	80008d8 <__aeabi_fdiv>
 8004760:	4603      	mov	r3, r0
 8004762:	4619      	mov	r1, r3
 8004764:	4620      	mov	r0, r4
 8004766:	f7fb fefb 	bl	8000560 <__addsf3>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	601a      	str	r2, [r3, #0]
	return 0;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3724      	adds	r7, #36	; 0x24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd90      	pop	{r4, r7, pc}

0800477c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800477c:	f7ff ff38 	bl	80045f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004780:	480b      	ldr	r0, [pc, #44]	; (80047b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004782:	490c      	ldr	r1, [pc, #48]	; (80047b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004784:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004788:	e002      	b.n	8004790 <LoopCopyDataInit>

0800478a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800478a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800478c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800478e:	3304      	adds	r3, #4

08004790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004794:	d3f9      	bcc.n	800478a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004798:	4c09      	ldr	r4, [pc, #36]	; (80047c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800479a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800479c:	e001      	b.n	80047a2 <LoopFillZerobss>

0800479e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800479e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047a0:	3204      	adds	r2, #4

080047a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a4:	d3fb      	bcc.n	800479e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047a6:	f003 feb7 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047aa:	f7fe fe19 	bl	80033e0 <main>
  bx lr
 80047ae:	4770      	bx	lr
  ldr r0, =_sdata
 80047b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80047b8:	08009390 	.word	0x08009390
  ldr r2, =_sbss
 80047bc:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80047c0:	200026fc 	.word	0x200026fc

080047c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047c4:	e7fe      	b.n	80047c4 <ADC1_2_IRQHandler>
	...

080047c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_Init+0x28>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <HAL_Init+0x28>)
 80047d2:	f043 0310 	orr.w	r3, r3, #16
 80047d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047d8:	2003      	movs	r0, #3
 80047da:	f001 fc5d 	bl	8006098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047de:	200f      	movs	r0, #15
 80047e0:	f000 f808 	bl	80047f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047e4:	f7ff fccc 	bl	8004180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40022000 	.word	0x40022000

080047f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_InitTick+0x54>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_InitTick+0x58>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800480a:	fbb3 f3f1 	udiv	r3, r3, r1
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fc75 	bl	8006102 <HAL_SYSTICK_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e00e      	b.n	8004840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b0f      	cmp	r3, #15
 8004826:	d80a      	bhi.n	800483e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004828:	2200      	movs	r2, #0
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	f001 fc3d 	bl	80060ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004834:	4a06      	ldr	r2, [pc, #24]	; (8004850 <HAL_InitTick+0x5c>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	e000      	b.n	8004840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000064 	.word	0x20000064
 800484c:	2000006c 	.word	0x2000006c
 8004850:	20000068 	.word	0x20000068

08004854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_IncTick+0x1c>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_IncTick+0x20>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4413      	add	r3, r2
 8004864:	4a03      	ldr	r2, [pc, #12]	; (8004874 <HAL_IncTick+0x20>)
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	2000006c 	.word	0x2000006c
 8004874:	200026e8 	.word	0x200026e8

08004878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return uwTick;
 800487c:	4b02      	ldr	r3, [pc, #8]	; (8004888 <HAL_GetTick+0x10>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr
 8004888:	200026e8 	.word	0x200026e8

0800488c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004894:	f7ff fff0 	bl	8004878 <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d005      	beq.n	80048b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_Delay+0x44>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048b2:	bf00      	nop
 80048b4:	f7ff ffe0 	bl	8004878 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d8f7      	bhi.n	80048b4 <HAL_Delay+0x28>
  {
  }
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000006c 	.word	0x2000006c

080048d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0be      	b.n	8004a74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fc66 	bl	80041e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 faf5 	bl	8004f08 <ADC_ConversionStop_Disable>
 800491e:	4603      	mov	r3, r0
 8004920:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 8099 	bne.w	8004a62 <HAL_ADC_Init+0x18e>
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 8095 	bne.w	8004a62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004940:	f023 0302 	bic.w	r3, r3, #2
 8004944:	f043 0202 	orr.w	r2, r3, #2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004954:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	7b1b      	ldrb	r3, [r3, #12]
 800495a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800495c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4313      	orrs	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496c:	d003      	beq.n	8004976 <HAL_ADC_Init+0xa2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d102      	bne.n	800497c <HAL_ADC_Init+0xa8>
 8004976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800497a:	e000      	b.n	800497e <HAL_ADC_Init+0xaa>
 800497c:	2300      	movs	r3, #0
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	7d1b      	ldrb	r3, [r3, #20]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d119      	bne.n	80049c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7b1b      	ldrb	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	3b01      	subs	r3, #1
 800499a:	035a      	lsls	r2, r3, #13
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e00b      	b.n	80049c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	f043 0201 	orr.w	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <HAL_ADC_Init+0x1a8>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d003      	beq.n	80049fa <HAL_ADC_Init+0x126>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d104      	bne.n	8004a04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	051b      	lsls	r3, r3, #20
 8004a02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	4b18      	ldr	r3, [pc, #96]	; (8004a80 <HAL_ADC_Init+0x1ac>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d10b      	bne.n	8004a40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a3e:	e018      	b.n	8004a72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	f023 0312 	bic.w	r3, r3, #18
 8004a48:	f043 0210 	orr.w	r2, r3, #16
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a60:	e007      	b.n	8004a72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	f043 0210 	orr.w	r2, r3, #16
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	ffe1f7fd 	.word	0xffe1f7fd
 8004a80:	ff1f0efe 	.word	0xff1f0efe

08004a84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a64      	ldr	r2, [pc, #400]	; (8004c2c <HAL_ADC_Start_DMA+0x1a8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_ADC_Start_DMA+0x24>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a63      	ldr	r2, [pc, #396]	; (8004c30 <HAL_ADC_Start_DMA+0x1ac>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d106      	bne.n	8004ab6 <HAL_ADC_Start_DMA+0x32>
 8004aa8:	4b60      	ldr	r3, [pc, #384]	; (8004c2c <HAL_ADC_Start_DMA+0x1a8>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 80b3 	bne.w	8004c1c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_ADC_Start_DMA+0x40>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e0ae      	b.n	8004c22 <HAL_ADC_Start_DMA+0x19e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f9c1 	bl	8004e54 <ADC_Enable>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 809a 	bne.w	8004c12 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4e      	ldr	r2, [pc, #312]	; (8004c30 <HAL_ADC_Start_DMA+0x1ac>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d105      	bne.n	8004b08 <HAL_ADC_Start_DMA+0x84>
 8004afc:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <HAL_ADC_Start_DMA+0x1a8>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d115      	bne.n	8004b34 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d026      	beq.n	8004b70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b32:	e01d      	b.n	8004b70 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <HAL_ADC_Start_DMA+0x1a8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_ADC_Start_DMA+0xd0>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a38      	ldr	r2, [pc, #224]	; (8004c30 <HAL_ADC_Start_DMA+0x1ac>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d10d      	bne.n	8004b70 <HAL_ADC_Start_DMA+0xec>
 8004b54:	4b35      	ldr	r3, [pc, #212]	; (8004c2c <HAL_ADC_Start_DMA+0x1a8>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	f023 0206 	bic.w	r2, r3, #6
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b88:	e002      	b.n	8004b90 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	; (8004c34 <HAL_ADC_Start_DMA+0x1b0>)
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	4a24      	ldr	r2, [pc, #144]	; (8004c38 <HAL_ADC_Start_DMA+0x1b4>)
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4a23      	ldr	r2, [pc, #140]	; (8004c3c <HAL_ADC_Start_DMA+0x1b8>)
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0202 	mvn.w	r2, #2
 8004bb8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a18      	ldr	r0, [r3, #32]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	334c      	adds	r3, #76	; 0x4c
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f001 faf9 	bl	80061d0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004be8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004bec:	d108      	bne.n	8004c00 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004bfc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004bfe:	e00f      	b.n	8004c20 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c0e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004c10:	e006      	b.n	8004c20 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004c1a:	e001      	b.n	8004c20 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40012400 	.word	0x40012400
 8004c30:	40012800 	.word	0x40012800
 8004c34:	08004f8b 	.word	0x08004f8b
 8004c38:	08005007 	.word	0x08005007
 8004c3c:	08005023 	.word	0x08005023

08004c40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr

08004c52 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x20>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e0dc      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x1da>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	d81c      	bhi.n	8004cce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b05      	subs	r3, #5
 8004ca6:	221f      	movs	r2, #31
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	4019      	ands	r1, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3b05      	subs	r3, #5
 8004cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	635a      	str	r2, [r3, #52]	; 0x34
 8004ccc:	e03c      	b.n	8004d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d81c      	bhi.n	8004d10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3b23      	subs	r3, #35	; 0x23
 8004ce8:	221f      	movs	r2, #31
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	4019      	ands	r1, r3
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	3b23      	subs	r3, #35	; 0x23
 8004d02:	fa00 f203 	lsl.w	r2, r0, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0e:	e01b      	b.n	8004d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	3b41      	subs	r3, #65	; 0x41
 8004d22:	221f      	movs	r2, #31
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	4019      	ands	r1, r3
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	3b41      	subs	r3, #65	; 0x41
 8004d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d91c      	bls.n	8004d8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4413      	add	r3, r2
 8004d60:	3b1e      	subs	r3, #30
 8004d62:	2207      	movs	r2, #7
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	4019      	ands	r1, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6898      	ldr	r0, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	3b1e      	subs	r3, #30
 8004d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	60da      	str	r2, [r3, #12]
 8004d88:	e019      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6919      	ldr	r1, [r3, #16]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	4019      	ands	r1, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6898      	ldr	r0, [r3, #8]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	fa00 f203 	lsl.w	r2, r0, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d003      	beq.n	8004dce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004dca:	2b11      	cmp	r3, #17
 8004dcc:	d132      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <HAL_ADC_ConfigChannel+0x1e4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d125      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d126      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004df4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d11a      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004dfe:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <HAL_ADC_ConfigChannel+0x1e8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <HAL_ADC_ConfigChannel+0x1ec>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	0c9a      	lsrs	r2, r3, #18
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e14:	e002      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f9      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x1b2>
 8004e22:	e007      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	40012400 	.word	0x40012400
 8004e4c:	20000064 	.word	0x20000064
 8004e50:	431bde83 	.word	0x431bde83

08004e54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d040      	beq.n	8004ef4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e82:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <ADC_Enable+0xac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <ADC_Enable+0xb0>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	0c9b      	lsrs	r3, r3, #18
 8004e8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e90:	e002      	b.n	8004e98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f9      	bne.n	8004e92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e9e:	f7ff fceb 	bl	8004878 <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004ea4:	e01f      	b.n	8004ee6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ea6:	f7ff fce7 	bl	8004878 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d918      	bls.n	8004ee6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d011      	beq.n	8004ee6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	f043 0210 	orr.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f043 0201 	orr.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e007      	b.n	8004ef6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d1d8      	bne.n	8004ea6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000064 	.word	0x20000064
 8004f04:	431bde83 	.word	0x431bde83

08004f08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d12e      	bne.n	8004f80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f32:	f7ff fca1 	bl	8004878 <HAL_GetTick>
 8004f36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f38:	e01b      	b.n	8004f72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f3a:	f7ff fc9d 	bl	8004878 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d914      	bls.n	8004f72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10d      	bne.n	8004f72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	f043 0210 	orr.w	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e007      	b.n	8004f82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d0dc      	beq.n	8004f3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d127      	bne.n	8004ff4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004fba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004fbe:	d115      	bne.n	8004fec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d111      	bne.n	8004fec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	f043 0201 	orr.w	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fe27 	bl	8004c40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ff2:	e004      	b.n	8004ffe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
}
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7fe f9b3 	bl	8003380 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f043 0204 	orr.w	r2, r3, #4
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f7ff fe02 	bl	8004c52 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_ADCEx_Calibration_Start+0x1e>
 8005072:	2302      	movs	r3, #2
 8005074:	e097      	b.n	80051a6 <HAL_ADCEx_Calibration_Start+0x14e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ff42 	bl	8004f08 <ADC_ConversionStop_Disable>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff fee3 	bl	8004e54 <ADC_Enable>
 800508e:	4603      	mov	r3, r0
 8005090:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f040 8081 	bne.w	800519c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050a2:	f023 0302 	bic.w	r3, r3, #2
 80050a6:	f043 0202 	orr.w	r2, r3, #2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80050ae:	4b40      	ldr	r3, [pc, #256]	; (80051b0 <HAL_ADCEx_Calibration_Start+0x158>)
 80050b0:	681c      	ldr	r4, [r3, #0]
 80050b2:	2002      	movs	r0, #2
 80050b4:	f002 f898 	bl	80071e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80050b8:	4603      	mov	r3, r0
 80050ba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80050be:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80050c0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80050c2:	e002      	b.n	80050ca <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f9      	bne.n	80050c4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0208 	orr.w	r2, r2, #8
 80050de:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80050e0:	f7ff fbca 	bl	8004878 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80050e6:	e01b      	b.n	8005120 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80050e8:	f7ff fbc6 	bl	8004878 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b0a      	cmp	r3, #10
 80050f4:	d914      	bls.n	8005120 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00d      	beq.n	8005120 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	f023 0312 	bic.w	r3, r3, #18
 800510c:	f043 0210 	orr.w	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e042      	b.n	80051a6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1dc      	bne.n	80050e8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0204 	orr.w	r2, r2, #4
 800513c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800513e:	f7ff fb9b 	bl	8004878 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005144:	e01b      	b.n	800517e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005146:	f7ff fb97 	bl	8004878 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b0a      	cmp	r3, #10
 8005152:	d914      	bls.n	800517e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00d      	beq.n	800517e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f023 0312 	bic.w	r3, r3, #18
 800516a:	f043 0210 	orr.w	r2, r3, #16
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e013      	b.n	80051a6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1dc      	bne.n	8005146 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f023 0303 	bic.w	r3, r3, #3
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000064 	.word	0x20000064

080051b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0ed      	b.n	80053a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff f870 	bl	80042b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051e8:	f7ff fb46 	bl	8004878 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ee:	e012      	b.n	8005216 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051f0:	f7ff fb42 	bl	8004878 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b0a      	cmp	r3, #10
 80051fc:	d90b      	bls.n	8005216 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2205      	movs	r2, #5
 800520e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0c5      	b.n	80053a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0e5      	beq.n	80051f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0202 	bic.w	r2, r2, #2
 8005232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005234:	f7ff fb20 	bl	8004878 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800523a:	e012      	b.n	8005262 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800523c:	f7ff fb1c 	bl	8004878 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b0a      	cmp	r3, #10
 8005248:	d90b      	bls.n	8005262 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2205      	movs	r2, #5
 800525a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e09f      	b.n	80053a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7e1b      	ldrb	r3, [r3, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d108      	bne.n	800528a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	e007      	b.n	800529a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005298:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7e5b      	ldrb	r3, [r3, #25]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d108      	bne.n	80052b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e007      	b.n	80052c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7e9b      	ldrb	r3, [r3, #26]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d108      	bne.n	80052de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0220 	orr.w	r2, r2, #32
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e007      	b.n	80052ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0220 	bic.w	r2, r2, #32
 80052ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7edb      	ldrb	r3, [r3, #27]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d108      	bne.n	8005308 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0210 	bic.w	r2, r2, #16
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e007      	b.n	8005318 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0210 	orr.w	r2, r2, #16
 8005316:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	7f1b      	ldrb	r3, [r3, #28]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d108      	bne.n	8005332 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0208 	orr.w	r2, r2, #8
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e007      	b.n	8005342 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0208 	bic.w	r2, r2, #8
 8005340:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	7f5b      	ldrb	r3, [r3, #29]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d108      	bne.n	800535c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0204 	orr.w	r2, r2, #4
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e007      	b.n	800536c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0204 	bic.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	ea42 0103 	orr.w	r1, r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d003      	beq.n	80053d0 <HAL_CAN_ConfigFilter+0x26>
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	f040 80aa 	bne.w	8005524 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2201      	movs	r2, #1
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d123      	bne.n	8005452 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	401a      	ands	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800542c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	3248      	adds	r2, #72	; 0x48
 8005432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	3348      	adds	r3, #72	; 0x48
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	440b      	add	r3, r1
 8005450:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d122      	bne.n	80054a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	431a      	orrs	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800547a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3248      	adds	r2, #72	; 0x48
 8005480:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005494:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005496:	6979      	ldr	r1, [r7, #20]
 8005498:	3348      	adds	r3, #72	; 0x48
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	440b      	add	r3, r1
 800549e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80054ba:	e007      	b.n	80054cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	43db      	mvns	r3, r3
 80054de:	401a      	ands	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80054e6:	e007      	b.n	80054f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d107      	bne.n	8005510 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	431a      	orrs	r2, r3
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005516:	f023 0201 	bic.w	r2, r3, #1
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e006      	b.n	8005532 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d12e      	bne.n	80055ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005568:	f7ff f986 	bl	8004878 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800556e:	e012      	b.n	8005596 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005570:	f7ff f982 	bl	8004878 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b0a      	cmp	r3, #10
 800557c:	d90b      	bls.n	8005596 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2205      	movs	r2, #5
 800558e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e012      	b.n	80055bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e5      	bne.n	8005570 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e006      	b.n	80055bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d003      	beq.n	80055f0 <HAL_CAN_AddTxMessage+0x2c>
 80055e8:	7ffb      	ldrb	r3, [r7, #31]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	f040 80ad 	bne.w	800574a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8095 	beq.w	800573a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	0e1b      	lsrs	r3, r3, #24
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800561a:	2201      	movs	r2, #1
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	409a      	lsls	r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10d      	bne.n	8005648 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	6809      	ldr	r1, [r1, #0]
 800563a:	431a      	orrs	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	3318      	adds	r3, #24
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	440b      	add	r3, r1
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e00f      	b.n	8005668 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005652:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005658:	68f9      	ldr	r1, [r7, #12]
 800565a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800565c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	3318      	adds	r3, #24
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	440b      	add	r3, r1
 8005666:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6819      	ldr	r1, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	3318      	adds	r3, #24
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	440b      	add	r3, r1
 8005678:	3304      	adds	r3, #4
 800567a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	7d1b      	ldrb	r3, [r3, #20]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d111      	bne.n	80056a8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	3318      	adds	r3, #24
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	4413      	add	r3, r2
 8005690:	3304      	adds	r3, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	6811      	ldr	r1, [r2, #0]
 8005698:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	3318      	adds	r3, #24
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	440b      	add	r3, r1
 80056a4:	3304      	adds	r3, #4
 80056a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3307      	adds	r3, #7
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	061a      	lsls	r2, r3, #24
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3306      	adds	r3, #6
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3305      	adds	r3, #5
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	4313      	orrs	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	3204      	adds	r2, #4
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	4610      	mov	r0, r2
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	6811      	ldr	r1, [r2, #0]
 80056d0:	ea43 0200 	orr.w	r2, r3, r0
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	440b      	add	r3, r1
 80056da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80056de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3303      	adds	r3, #3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	061a      	lsls	r2, r3, #24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3302      	adds	r3, #2
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3301      	adds	r3, #1
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	4313      	orrs	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	7812      	ldrb	r2, [r2, #0]
 8005700:	4610      	mov	r0, r2
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	6811      	ldr	r1, [r2, #0]
 8005706:	ea43 0200 	orr.w	r2, r3, r0
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	440b      	add	r3, r1
 8005710:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005714:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3318      	adds	r3, #24
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	6811      	ldr	r1, [r2, #0]
 8005728:	f043 0201 	orr.w	r2, r3, #1
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3318      	adds	r3, #24
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	440b      	add	r3, r1
 8005734:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	e00e      	b.n	8005758 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e006      	b.n	8005758 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3724      	adds	r7, #36	; 0x24
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005772:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d002      	beq.n	8005780 <HAL_CAN_AbortTxRequest+0x1e>
 800577a:	7bfb      	ldrb	r3, [r7, #15]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d128      	bne.n	80057d2 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005798:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057b2:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80057cc:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e006      	b.n	80057e0 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057fc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80057fe:	7afb      	ldrb	r3, [r7, #11]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d002      	beq.n	800580a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005804:	7afb      	ldrb	r3, [r7, #11]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d11d      	bne.n	8005846 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3301      	adds	r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005846:	68fb      	ldr	r3, [r7, #12]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005852:	b480      	push	{r7}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005866:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005868:	7dfb      	ldrb	r3, [r7, #23]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d003      	beq.n	8005876 <HAL_CAN_GetRxMessage+0x24>
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	2b02      	cmp	r3, #2
 8005872:	f040 8103 	bne.w	8005a7c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10e      	bne.n	800589a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e0f7      	b.n	8005a8a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0e8      	b.n	8005a8a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	331b      	adds	r3, #27
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	4413      	add	r3, r2
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0204 	and.w	r2, r3, #4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10c      	bne.n	80058f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	331b      	adds	r3, #27
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	4413      	add	r3, r2
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	0d5b      	lsrs	r3, r3, #21
 80058e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e00b      	b.n	8005908 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	331b      	adds	r3, #27
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	4413      	add	r3, r2
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	08db      	lsrs	r3, r3, #3
 8005900:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	331b      	adds	r3, #27
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	4413      	add	r3, r2
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0202 	and.w	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	331b      	adds	r3, #27
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	4413      	add	r3, r2
 800592a:	3304      	adds	r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2208      	movs	r2, #8
 800593a:	611a      	str	r2, [r3, #16]
 800593c:	e00b      	b.n	8005956 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	331b      	adds	r3, #27
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	4413      	add	r3, r2
 800594a:	3304      	adds	r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	331b      	adds	r3, #27
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	4413      	add	r3, r2
 8005962:	3304      	adds	r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	b2da      	uxtb	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	331b      	adds	r3, #27
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	4413      	add	r3, r2
 800597a:	3304      	adds	r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	b29a      	uxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	4413      	add	r3, r2
 8005990:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	0a1a      	lsrs	r2, r3, #8
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	4413      	add	r3, r2
 80059c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	0c1a      	lsrs	r2, r3, #16
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	3302      	adds	r3, #2
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	4413      	add	r3, r2
 80059da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	0e1a      	lsrs	r2, r3, #24
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	3303      	adds	r3, #3
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	3304      	adds	r3, #4
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	0a1a      	lsrs	r2, r3, #8
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	3305      	adds	r3, #5
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	0c1a      	lsrs	r2, r3, #16
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	3306      	adds	r3, #6
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	0e1a      	lsrs	r2, r3, #24
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	3307      	adds	r3, #7
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0220 	orr.w	r2, r2, #32
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e007      	b.n	8005a78 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0220 	orr.w	r2, r2, #32
 8005a76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e006      	b.n	8005a8a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
  }
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aa4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d002      	beq.n	8005ab2 <HAL_CAN_ActivateNotification+0x1e>
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d109      	bne.n	8005ac6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6959      	ldr	r1, [r3, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e006      	b.n	8005ad4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b08a      	sub	sp, #40	; 0x28
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d07c      	beq.n	8005c1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d023      	beq.n	8005b76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2201      	movs	r2, #1
 8005b34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f983 	bl	8005e4c <HAL_CAN_TxMailbox0CompleteCallback>
 8005b46:	e016      	b.n	8005b76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d004      	beq.n	8005b5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5a:	e00c      	b.n	8005b76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6e:	e002      	b.n	8005b76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f986 	bl	8005e82 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d024      	beq.n	8005bca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f962 	bl	8005e5e <HAL_CAN_TxMailbox1CompleteCallback>
 8005b9a:	e016      	b.n	8005bca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	e00c      	b.n	8005bca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc2:	e002      	b.n	8005bca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f965 	bl	8005e94 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d024      	beq.n	8005c1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005bdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f941 	bl	8005e70 <HAL_CAN_TxMailbox2CompleteCallback>
 8005bee:	e016      	b.n	8005c1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
 8005c02:	e00c      	b.n	8005c1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	e002      	b.n	8005c1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f944 	bl	8005ea6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00c      	beq.n	8005c42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2210      	movs	r2, #16
 8005c40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f92a 	bl	8005eb8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fd fb54 	bl	800332a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005c82:	6a3b      	ldr	r3, [r7, #32]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2210      	movs	r2, #16
 8005ca4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d006      	beq.n	8005cc8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f901 	bl	8005eca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fd fb2e 	bl	8003342 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f8ea 	bl	8005edc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8e2 	bl	8005eee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d07b      	beq.n	8005e2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d072      	beq.n	8005e24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d008      	beq.n	8005d5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	f043 0301 	orr.w	r3, r3, #1
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f043 0302 	orr.w	r3, r3, #2
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d008      	beq.n	8005d92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	f043 0304 	orr.w	r3, r3, #4
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d043      	beq.n	8005e24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d03e      	beq.n	8005e24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dac:	2b60      	cmp	r3, #96	; 0x60
 8005dae:	d02b      	beq.n	8005e08 <HAL_CAN_IRQHandler+0x32a>
 8005db0:	2b60      	cmp	r3, #96	; 0x60
 8005db2:	d82e      	bhi.n	8005e12 <HAL_CAN_IRQHandler+0x334>
 8005db4:	2b50      	cmp	r3, #80	; 0x50
 8005db6:	d022      	beq.n	8005dfe <HAL_CAN_IRQHandler+0x320>
 8005db8:	2b50      	cmp	r3, #80	; 0x50
 8005dba:	d82a      	bhi.n	8005e12 <HAL_CAN_IRQHandler+0x334>
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d019      	beq.n	8005df4 <HAL_CAN_IRQHandler+0x316>
 8005dc0:	2b40      	cmp	r3, #64	; 0x40
 8005dc2:	d826      	bhi.n	8005e12 <HAL_CAN_IRQHandler+0x334>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d010      	beq.n	8005dea <HAL_CAN_IRQHandler+0x30c>
 8005dc8:	2b30      	cmp	r3, #48	; 0x30
 8005dca:	d822      	bhi.n	8005e12 <HAL_CAN_IRQHandler+0x334>
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d002      	beq.n	8005dd6 <HAL_CAN_IRQHandler+0x2f8>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d005      	beq.n	8005de0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005dd4:	e01d      	b.n	8005e12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	f043 0308 	orr.w	r3, r3, #8
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005dde:	e019      	b.n	8005e14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f043 0310 	orr.w	r3, r3, #16
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005de8:	e014      	b.n	8005e14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	f043 0320 	orr.w	r3, r3, #32
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005df2:	e00f      	b.n	8005e14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005dfc:	e00a      	b.n	8005e14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e06:	e005      	b.n	8005e14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005e10:	e000      	b.n	8005e14 <HAL_CAN_IRQHandler+0x336>
            break;
 8005e12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d008      	beq.n	8005e44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fd fa8c 	bl	800335c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005e44:	bf00      	nop
 8005e46:	3728      	adds	r7, #40	; 0x28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bc80      	pop	{r7}
 8005eec:	4770      	bx	lr

08005eee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <__NVIC_SetPriorityGrouping>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f10:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <__NVIC_SetPriorityGrouping+0x44>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f32:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <__NVIC_SetPriorityGrouping+0x44>)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	60d3      	str	r3, [r2, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <__NVIC_GetPriorityGrouping>:
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f4c:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <__NVIC_GetPriorityGrouping+0x18>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	0a1b      	lsrs	r3, r3, #8
 8005f52:	f003 0307 	and.w	r3, r3, #7
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	e000ed00 	.word	0xe000ed00

08005f64 <__NVIC_EnableIRQ>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	db0b      	blt.n	8005f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	f003 021f 	and.w	r2, r3, #31
 8005f7c:	4906      	ldr	r1, [pc, #24]	; (8005f98 <__NVIC_EnableIRQ+0x34>)
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	2001      	movs	r0, #1
 8005f86:	fa00 f202 	lsl.w	r2, r0, r2
 8005f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr
 8005f98:	e000e100 	.word	0xe000e100

08005f9c <__NVIC_SetPriority>:
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	6039      	str	r1, [r7, #0]
 8005fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	db0a      	blt.n	8005fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	490c      	ldr	r1, [pc, #48]	; (8005fe8 <__NVIC_SetPriority+0x4c>)
 8005fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fba:	0112      	lsls	r2, r2, #4
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005fc4:	e00a      	b.n	8005fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4908      	ldr	r1, [pc, #32]	; (8005fec <__NVIC_SetPriority+0x50>)
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	3b04      	subs	r3, #4
 8005fd4:	0112      	lsls	r2, r2, #4
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	440b      	add	r3, r1
 8005fda:	761a      	strb	r2, [r3, #24]
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	e000e100 	.word	0xe000e100
 8005fec:	e000ed00 	.word	0xe000ed00

08005ff0 <NVIC_EncodePriority>:
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	; 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f1c3 0307 	rsb	r3, r3, #7
 800600a:	2b04      	cmp	r3, #4
 800600c:	bf28      	it	cs
 800600e:	2304      	movcs	r3, #4
 8006010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3304      	adds	r3, #4
 8006016:	2b06      	cmp	r3, #6
 8006018:	d902      	bls.n	8006020 <NVIC_EncodePriority+0x30>
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3b03      	subs	r3, #3
 800601e:	e000      	b.n	8006022 <NVIC_EncodePriority+0x32>
 8006020:	2300      	movs	r3, #0
 8006022:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006024:	f04f 32ff 	mov.w	r2, #4294967295
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	43da      	mvns	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	401a      	ands	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006038:	f04f 31ff 	mov.w	r1, #4294967295
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	43d9      	mvns	r1, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006048:	4313      	orrs	r3, r2
}
 800604a:	4618      	mov	r0, r3
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3b01      	subs	r3, #1
 8006060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006064:	d301      	bcc.n	800606a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006066:	2301      	movs	r3, #1
 8006068:	e00f      	b.n	800608a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800606a:	4a0a      	ldr	r2, [pc, #40]	; (8006094 <SysTick_Config+0x40>)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3b01      	subs	r3, #1
 8006070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006072:	210f      	movs	r1, #15
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	f7ff ff90 	bl	8005f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <SysTick_Config+0x40>)
 800607e:	2200      	movs	r2, #0
 8006080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006082:	4b04      	ldr	r3, [pc, #16]	; (8006094 <SysTick_Config+0x40>)
 8006084:	2207      	movs	r2, #7
 8006086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	e000e010 	.word	0xe000e010

08006098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff ff2d 	bl	8005f00 <__NVIC_SetPriorityGrouping>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	4603      	mov	r3, r0
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060bc:	2300      	movs	r3, #0
 80060be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060c0:	f7ff ff42 	bl	8005f48 <__NVIC_GetPriorityGrouping>
 80060c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	6978      	ldr	r0, [r7, #20]
 80060cc:	f7ff ff90 	bl	8005ff0 <NVIC_EncodePriority>
 80060d0:	4602      	mov	r2, r0
 80060d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff ff5f 	bl	8005f9c <__NVIC_SetPriority>
}
 80060de:	bf00      	nop
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	4603      	mov	r3, r0
 80060ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff35 	bl	8005f64 <__NVIC_EnableIRQ>
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff ffa2 	bl	8006054 <SysTick_Config>
 8006110:	4603      	mov	r3, r0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e043      	b.n	80061ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	4b22      	ldr	r3, [pc, #136]	; (80061c4 <HAL_DMA_Init+0xa8>)
 800613a:	4413      	add	r3, r2
 800613c:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <HAL_DMA_Init+0xac>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	009a      	lsls	r2, r3, #2
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_DMA_Init+0xb0>)
 800614e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006166:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800616a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800618c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr
 80061c4:	bffdfff8 	.word	0xbffdfff8
 80061c8:	cccccccd 	.word	0xcccccccd
 80061cc:	40020000 	.word	0x40020000

080061d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_DMA_Start_IT+0x20>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e04b      	b.n	8006288 <HAL_DMA_Start_IT+0xb8>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d13a      	bne.n	800627a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0201 	bic.w	r2, r2, #1
 8006220:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f937 	bl	800649c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 020e 	orr.w	r2, r2, #14
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e00f      	b.n	8006268 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0204 	bic.w	r2, r2, #4
 8006256:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 020a 	orr.w	r2, r2, #10
 8006266:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e005      	b.n	8006286 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006282:	2302      	movs	r3, #2
 8006284:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	2204      	movs	r2, #4
 80062ae:	409a      	lsls	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d04f      	beq.n	8006358 <HAL_DMA_IRQHandler+0xc8>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d04a      	beq.n	8006358 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d107      	bne.n	80062e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0204 	bic.w	r2, r2, #4
 80062de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a66      	ldr	r2, [pc, #408]	; (8006480 <HAL_DMA_IRQHandler+0x1f0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d029      	beq.n	800633e <HAL_DMA_IRQHandler+0xae>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a65      	ldr	r2, [pc, #404]	; (8006484 <HAL_DMA_IRQHandler+0x1f4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d022      	beq.n	800633a <HAL_DMA_IRQHandler+0xaa>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a63      	ldr	r2, [pc, #396]	; (8006488 <HAL_DMA_IRQHandler+0x1f8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01a      	beq.n	8006334 <HAL_DMA_IRQHandler+0xa4>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a62      	ldr	r2, [pc, #392]	; (800648c <HAL_DMA_IRQHandler+0x1fc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d012      	beq.n	800632e <HAL_DMA_IRQHandler+0x9e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a60      	ldr	r2, [pc, #384]	; (8006490 <HAL_DMA_IRQHandler+0x200>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00a      	beq.n	8006328 <HAL_DMA_IRQHandler+0x98>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5f      	ldr	r2, [pc, #380]	; (8006494 <HAL_DMA_IRQHandler+0x204>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d102      	bne.n	8006322 <HAL_DMA_IRQHandler+0x92>
 800631c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006320:	e00e      	b.n	8006340 <HAL_DMA_IRQHandler+0xb0>
 8006322:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006326:	e00b      	b.n	8006340 <HAL_DMA_IRQHandler+0xb0>
 8006328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800632c:	e008      	b.n	8006340 <HAL_DMA_IRQHandler+0xb0>
 800632e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006332:	e005      	b.n	8006340 <HAL_DMA_IRQHandler+0xb0>
 8006334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006338:	e002      	b.n	8006340 <HAL_DMA_IRQHandler+0xb0>
 800633a:	2340      	movs	r3, #64	; 0x40
 800633c:	e000      	b.n	8006340 <HAL_DMA_IRQHandler+0xb0>
 800633e:	2304      	movs	r3, #4
 8006340:	4a55      	ldr	r2, [pc, #340]	; (8006498 <HAL_DMA_IRQHandler+0x208>)
 8006342:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8094 	beq.w	8006476 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006356:	e08e      	b.n	8006476 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	2202      	movs	r2, #2
 800635e:	409a      	lsls	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d056      	beq.n	8006416 <HAL_DMA_IRQHandler+0x186>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d051      	beq.n	8006416 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 020a 	bic.w	r2, r2, #10
 800638e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a38      	ldr	r2, [pc, #224]	; (8006480 <HAL_DMA_IRQHandler+0x1f0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d029      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x166>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a37      	ldr	r2, [pc, #220]	; (8006484 <HAL_DMA_IRQHandler+0x1f4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x162>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a35      	ldr	r2, [pc, #212]	; (8006488 <HAL_DMA_IRQHandler+0x1f8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01a      	beq.n	80063ec <HAL_DMA_IRQHandler+0x15c>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a34      	ldr	r2, [pc, #208]	; (800648c <HAL_DMA_IRQHandler+0x1fc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d012      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x156>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a32      	ldr	r2, [pc, #200]	; (8006490 <HAL_DMA_IRQHandler+0x200>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00a      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x150>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a31      	ldr	r2, [pc, #196]	; (8006494 <HAL_DMA_IRQHandler+0x204>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d102      	bne.n	80063da <HAL_DMA_IRQHandler+0x14a>
 80063d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063d8:	e00e      	b.n	80063f8 <HAL_DMA_IRQHandler+0x168>
 80063da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063de:	e00b      	b.n	80063f8 <HAL_DMA_IRQHandler+0x168>
 80063e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063e4:	e008      	b.n	80063f8 <HAL_DMA_IRQHandler+0x168>
 80063e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063ea:	e005      	b.n	80063f8 <HAL_DMA_IRQHandler+0x168>
 80063ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f0:	e002      	b.n	80063f8 <HAL_DMA_IRQHandler+0x168>
 80063f2:	2320      	movs	r3, #32
 80063f4:	e000      	b.n	80063f8 <HAL_DMA_IRQHandler+0x168>
 80063f6:	2302      	movs	r3, #2
 80063f8:	4a27      	ldr	r2, [pc, #156]	; (8006498 <HAL_DMA_IRQHandler+0x208>)
 80063fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d034      	beq.n	8006476 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006414:	e02f      	b.n	8006476 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	2208      	movs	r2, #8
 800641c:	409a      	lsls	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4013      	ands	r3, r2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d028      	beq.n	8006478 <HAL_DMA_IRQHandler+0x1e8>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b00      	cmp	r3, #0
 800642e:	d023      	beq.n	8006478 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 020e 	bic.w	r2, r2, #14
 800643e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f202 	lsl.w	r2, r1, r2
 800644e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
    }
  }
  return;
 8006476:	bf00      	nop
 8006478:	bf00      	nop
}
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40020008 	.word	0x40020008
 8006484:	4002001c 	.word	0x4002001c
 8006488:	40020030 	.word	0x40020030
 800648c:	40020044 	.word	0x40020044
 8006490:	40020058 	.word	0x40020058
 8006494:	4002006c 	.word	0x4002006c
 8006498:	40020000 	.word	0x40020000

0800649c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	2101      	movs	r1, #1
 80064b4:	fa01 f202 	lsl.w	r2, r1, r2
 80064b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d108      	bne.n	80064dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064da:	e007      	b.n	80064ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	60da      	str	r2, [r3, #12]
}
 80064ec:	bf00      	nop
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr
	...

080064f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b08b      	sub	sp, #44	; 0x2c
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006506:	2300      	movs	r3, #0
 8006508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800650a:	e169      	b.n	80067e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800650c:	2201      	movs	r2, #1
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	4013      	ands	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	429a      	cmp	r2, r3
 8006526:	f040 8158 	bne.w	80067da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4a9a      	ldr	r2, [pc, #616]	; (8006798 <HAL_GPIO_Init+0x2a0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d05e      	beq.n	80065f2 <HAL_GPIO_Init+0xfa>
 8006534:	4a98      	ldr	r2, [pc, #608]	; (8006798 <HAL_GPIO_Init+0x2a0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d875      	bhi.n	8006626 <HAL_GPIO_Init+0x12e>
 800653a:	4a98      	ldr	r2, [pc, #608]	; (800679c <HAL_GPIO_Init+0x2a4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d058      	beq.n	80065f2 <HAL_GPIO_Init+0xfa>
 8006540:	4a96      	ldr	r2, [pc, #600]	; (800679c <HAL_GPIO_Init+0x2a4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d86f      	bhi.n	8006626 <HAL_GPIO_Init+0x12e>
 8006546:	4a96      	ldr	r2, [pc, #600]	; (80067a0 <HAL_GPIO_Init+0x2a8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d052      	beq.n	80065f2 <HAL_GPIO_Init+0xfa>
 800654c:	4a94      	ldr	r2, [pc, #592]	; (80067a0 <HAL_GPIO_Init+0x2a8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d869      	bhi.n	8006626 <HAL_GPIO_Init+0x12e>
 8006552:	4a94      	ldr	r2, [pc, #592]	; (80067a4 <HAL_GPIO_Init+0x2ac>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d04c      	beq.n	80065f2 <HAL_GPIO_Init+0xfa>
 8006558:	4a92      	ldr	r2, [pc, #584]	; (80067a4 <HAL_GPIO_Init+0x2ac>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d863      	bhi.n	8006626 <HAL_GPIO_Init+0x12e>
 800655e:	4a92      	ldr	r2, [pc, #584]	; (80067a8 <HAL_GPIO_Init+0x2b0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d046      	beq.n	80065f2 <HAL_GPIO_Init+0xfa>
 8006564:	4a90      	ldr	r2, [pc, #576]	; (80067a8 <HAL_GPIO_Init+0x2b0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d85d      	bhi.n	8006626 <HAL_GPIO_Init+0x12e>
 800656a:	2b12      	cmp	r3, #18
 800656c:	d82a      	bhi.n	80065c4 <HAL_GPIO_Init+0xcc>
 800656e:	2b12      	cmp	r3, #18
 8006570:	d859      	bhi.n	8006626 <HAL_GPIO_Init+0x12e>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <HAL_GPIO_Init+0x80>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065f3 	.word	0x080065f3
 800657c:	080065cd 	.word	0x080065cd
 8006580:	080065df 	.word	0x080065df
 8006584:	08006621 	.word	0x08006621
 8006588:	08006627 	.word	0x08006627
 800658c:	08006627 	.word	0x08006627
 8006590:	08006627 	.word	0x08006627
 8006594:	08006627 	.word	0x08006627
 8006598:	08006627 	.word	0x08006627
 800659c:	08006627 	.word	0x08006627
 80065a0:	08006627 	.word	0x08006627
 80065a4:	08006627 	.word	0x08006627
 80065a8:	08006627 	.word	0x08006627
 80065ac:	08006627 	.word	0x08006627
 80065b0:	08006627 	.word	0x08006627
 80065b4:	08006627 	.word	0x08006627
 80065b8:	08006627 	.word	0x08006627
 80065bc:	080065d5 	.word	0x080065d5
 80065c0:	080065e9 	.word	0x080065e9
 80065c4:	4a79      	ldr	r2, [pc, #484]	; (80067ac <HAL_GPIO_Init+0x2b4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80065ca:	e02c      	b.n	8006626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	623b      	str	r3, [r7, #32]
          break;
 80065d2:	e029      	b.n	8006628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	3304      	adds	r3, #4
 80065da:	623b      	str	r3, [r7, #32]
          break;
 80065dc:	e024      	b.n	8006628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	3308      	adds	r3, #8
 80065e4:	623b      	str	r3, [r7, #32]
          break;
 80065e6:	e01f      	b.n	8006628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	330c      	adds	r3, #12
 80065ee:	623b      	str	r3, [r7, #32]
          break;
 80065f0:	e01a      	b.n	8006628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80065fa:	2304      	movs	r3, #4
 80065fc:	623b      	str	r3, [r7, #32]
          break;
 80065fe:	e013      	b.n	8006628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d105      	bne.n	8006614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006608:	2308      	movs	r3, #8
 800660a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	611a      	str	r2, [r3, #16]
          break;
 8006612:	e009      	b.n	8006628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006614:	2308      	movs	r3, #8
 8006616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	615a      	str	r2, [r3, #20]
          break;
 800661e:	e003      	b.n	8006628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006620:	2300      	movs	r3, #0
 8006622:	623b      	str	r3, [r7, #32]
          break;
 8006624:	e000      	b.n	8006628 <HAL_GPIO_Init+0x130>
          break;
 8006626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2bff      	cmp	r3, #255	; 0xff
 800662c:	d801      	bhi.n	8006632 <HAL_GPIO_Init+0x13a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	e001      	b.n	8006636 <HAL_GPIO_Init+0x13e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2bff      	cmp	r3, #255	; 0xff
 800663c:	d802      	bhi.n	8006644 <HAL_GPIO_Init+0x14c>
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	e002      	b.n	800664a <HAL_GPIO_Init+0x152>
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	3b08      	subs	r3, #8
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	210f      	movs	r1, #15
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	fa01 f303 	lsl.w	r3, r1, r3
 8006658:	43db      	mvns	r3, r3
 800665a:	401a      	ands	r2, r3
 800665c:	6a39      	ldr	r1, [r7, #32]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	431a      	orrs	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80b1 	beq.w	80067da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006678:	4b4d      	ldr	r3, [pc, #308]	; (80067b0 <HAL_GPIO_Init+0x2b8>)
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	4a4c      	ldr	r2, [pc, #304]	; (80067b0 <HAL_GPIO_Init+0x2b8>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6193      	str	r3, [r2, #24]
 8006684:	4b4a      	ldr	r3, [pc, #296]	; (80067b0 <HAL_GPIO_Init+0x2b8>)
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006690:	4a48      	ldr	r2, [pc, #288]	; (80067b4 <HAL_GPIO_Init+0x2bc>)
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	089b      	lsrs	r3, r3, #2
 8006696:	3302      	adds	r3, #2
 8006698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800669c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	220f      	movs	r2, #15
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a40      	ldr	r2, [pc, #256]	; (80067b8 <HAL_GPIO_Init+0x2c0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <HAL_GPIO_Init+0x1ec>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3f      	ldr	r2, [pc, #252]	; (80067bc <HAL_GPIO_Init+0x2c4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00d      	beq.n	80066e0 <HAL_GPIO_Init+0x1e8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3e      	ldr	r2, [pc, #248]	; (80067c0 <HAL_GPIO_Init+0x2c8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d007      	beq.n	80066dc <HAL_GPIO_Init+0x1e4>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3d      	ldr	r2, [pc, #244]	; (80067c4 <HAL_GPIO_Init+0x2cc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d101      	bne.n	80066d8 <HAL_GPIO_Init+0x1e0>
 80066d4:	2303      	movs	r3, #3
 80066d6:	e006      	b.n	80066e6 <HAL_GPIO_Init+0x1ee>
 80066d8:	2304      	movs	r3, #4
 80066da:	e004      	b.n	80066e6 <HAL_GPIO_Init+0x1ee>
 80066dc:	2302      	movs	r3, #2
 80066de:	e002      	b.n	80066e6 <HAL_GPIO_Init+0x1ee>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <HAL_GPIO_Init+0x1ee>
 80066e4:	2300      	movs	r3, #0
 80066e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e8:	f002 0203 	and.w	r2, r2, #3
 80066ec:	0092      	lsls	r2, r2, #2
 80066ee:	4093      	lsls	r3, r2
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80066f6:	492f      	ldr	r1, [pc, #188]	; (80067b4 <HAL_GPIO_Init+0x2bc>)
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	089b      	lsrs	r3, r3, #2
 80066fc:	3302      	adds	r3, #2
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d006      	beq.n	800671e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006710:	4b2d      	ldr	r3, [pc, #180]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	492c      	ldr	r1, [pc, #176]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	4313      	orrs	r3, r2
 800671a:	608b      	str	r3, [r1, #8]
 800671c:	e006      	b.n	800672c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800671e:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	43db      	mvns	r3, r3
 8006726:	4928      	ldr	r1, [pc, #160]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006728:	4013      	ands	r3, r2
 800672a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d006      	beq.n	8006746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	4922      	ldr	r1, [pc, #136]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	4313      	orrs	r3, r2
 8006742:	60cb      	str	r3, [r1, #12]
 8006744:	e006      	b.n	8006754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006746:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	43db      	mvns	r3, r3
 800674e:	491e      	ldr	r1, [pc, #120]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006750:	4013      	ands	r3, r2
 8006752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d006      	beq.n	800676e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006760:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	4918      	ldr	r1, [pc, #96]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	4313      	orrs	r3, r2
 800676a:	604b      	str	r3, [r1, #4]
 800676c:	e006      	b.n	800677c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800676e:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	43db      	mvns	r3, r3
 8006776:	4914      	ldr	r1, [pc, #80]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 8006778:	4013      	ands	r3, r2
 800677a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d021      	beq.n	80067cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006788:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	490e      	ldr	r1, [pc, #56]	; (80067c8 <HAL_GPIO_Init+0x2d0>)
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	4313      	orrs	r3, r2
 8006792:	600b      	str	r3, [r1, #0]
 8006794:	e021      	b.n	80067da <HAL_GPIO_Init+0x2e2>
 8006796:	bf00      	nop
 8006798:	10320000 	.word	0x10320000
 800679c:	10310000 	.word	0x10310000
 80067a0:	10220000 	.word	0x10220000
 80067a4:	10210000 	.word	0x10210000
 80067a8:	10120000 	.word	0x10120000
 80067ac:	10110000 	.word	0x10110000
 80067b0:	40021000 	.word	0x40021000
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40010800 	.word	0x40010800
 80067bc:	40010c00 	.word	0x40010c00
 80067c0:	40011000 	.word	0x40011000
 80067c4:	40011400 	.word	0x40011400
 80067c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <HAL_GPIO_Init+0x304>)
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	4909      	ldr	r1, [pc, #36]	; (80067fc <HAL_GPIO_Init+0x304>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	3301      	adds	r3, #1
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f47f ae8e 	bne.w	800650c <HAL_GPIO_Init+0x14>
  }
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	372c      	adds	r7, #44	; 0x2c
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr
 80067fc:	40010400 	.word	0x40010400

08006800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	887b      	ldrh	r3, [r7, #2]
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
 800681c:	e001      	b.n	8006822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006822:	7bfb      	ldrb	r3, [r7, #15]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	807b      	strh	r3, [r7, #2]
 800683a:	4613      	mov	r3, r2
 800683c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800683e:	787b      	ldrb	r3, [r7, #1]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006844:	887a      	ldrh	r2, [r7, #2]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800684a:	e003      	b.n	8006854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800684c:	887b      	ldrh	r3, [r7, #2]
 800684e:	041a      	lsls	r2, r3, #16
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	611a      	str	r2, [r3, #16]
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr
	...

08006860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e26c      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8087 	beq.w	800698e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006880:	4b92      	ldr	r3, [pc, #584]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 030c 	and.w	r3, r3, #12
 8006888:	2b04      	cmp	r3, #4
 800688a:	d00c      	beq.n	80068a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800688c:	4b8f      	ldr	r3, [pc, #572]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b08      	cmp	r3, #8
 8006896:	d112      	bne.n	80068be <HAL_RCC_OscConfig+0x5e>
 8006898:	4b8c      	ldr	r3, [pc, #560]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a4:	d10b      	bne.n	80068be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a6:	4b89      	ldr	r3, [pc, #548]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d06c      	beq.n	800698c <HAL_RCC_OscConfig+0x12c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d168      	bne.n	800698c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e246      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c6:	d106      	bne.n	80068d6 <HAL_RCC_OscConfig+0x76>
 80068c8:	4b80      	ldr	r3, [pc, #512]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a7f      	ldr	r2, [pc, #508]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80068ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e02e      	b.n	8006934 <HAL_RCC_OscConfig+0xd4>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x98>
 80068de:	4b7b      	ldr	r3, [pc, #492]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a7a      	ldr	r2, [pc, #488]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80068e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	4b78      	ldr	r3, [pc, #480]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a77      	ldr	r2, [pc, #476]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80068f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	e01d      	b.n	8006934 <HAL_RCC_OscConfig+0xd4>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006900:	d10c      	bne.n	800691c <HAL_RCC_OscConfig+0xbc>
 8006902:	4b72      	ldr	r3, [pc, #456]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a71      	ldr	r2, [pc, #452]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b6f      	ldr	r3, [pc, #444]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6e      	ldr	r2, [pc, #440]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e00b      	b.n	8006934 <HAL_RCC_OscConfig+0xd4>
 800691c:	4b6b      	ldr	r3, [pc, #428]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a6a      	ldr	r2, [pc, #424]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4b68      	ldr	r3, [pc, #416]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a67      	ldr	r2, [pc, #412]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 800692e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d013      	beq.n	8006964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693c:	f7fd ff9c 	bl	8004878 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006944:	f7fd ff98 	bl	8004878 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b64      	cmp	r3, #100	; 0x64
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e1fa      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006956:	4b5d      	ldr	r3, [pc, #372]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0xe4>
 8006962:	e014      	b.n	800698e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fd ff88 	bl	8004878 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800696c:	f7fd ff84 	bl	8004878 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b64      	cmp	r3, #100	; 0x64
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e1e6      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697e:	4b53      	ldr	r3, [pc, #332]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x10c>
 800698a:	e000      	b.n	800698e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800698c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d063      	beq.n	8006a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800699a:	4b4c      	ldr	r3, [pc, #304]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f003 030c 	and.w	r3, r3, #12
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069a6:	4b49      	ldr	r3, [pc, #292]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 030c 	and.w	r3, r3, #12
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d11c      	bne.n	80069ec <HAL_RCC_OscConfig+0x18c>
 80069b2:	4b46      	ldr	r3, [pc, #280]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d116      	bne.n	80069ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069be:	4b43      	ldr	r3, [pc, #268]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_RCC_OscConfig+0x176>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d001      	beq.n	80069d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e1ba      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d6:	4b3d      	ldr	r3, [pc, #244]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4939      	ldr	r1, [pc, #228]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ea:	e03a      	b.n	8006a62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d020      	beq.n	8006a36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069f4:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <HAL_RCC_OscConfig+0x270>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fa:	f7fd ff3d 	bl	8004878 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a02:	f7fd ff39 	bl	8004878 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e19b      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a14:	4b2d      	ldr	r3, [pc, #180]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a20:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4927      	ldr	r1, [pc, #156]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	600b      	str	r3, [r1, #0]
 8006a34:	e015      	b.n	8006a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a36:	4b26      	ldr	r3, [pc, #152]	; (8006ad0 <HAL_RCC_OscConfig+0x270>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3c:	f7fd ff1c 	bl	8004878 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a44:	f7fd ff18 	bl	8004878 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e17a      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a56:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d03a      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d019      	beq.n	8006aaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <HAL_RCC_OscConfig+0x274>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7c:	f7fd fefc 	bl	8004878 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a84:	f7fd fef8 	bl	8004878 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e15a      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <HAL_RCC_OscConfig+0x26c>)
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	f000 facc 	bl	8007040 <RCC_Delay>
 8006aa8:	e01c      	b.n	8006ae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <HAL_RCC_OscConfig+0x274>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ab0:	f7fd fee2 	bl	8004878 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab6:	e00f      	b.n	8006ad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab8:	f7fd fede 	bl	8004878 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d908      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e140      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
 8006aca:	bf00      	nop
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	42420000 	.word	0x42420000
 8006ad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad8:	4b9e      	ldr	r3, [pc, #632]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e9      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80a6 	beq.w	8006c3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af6:	4b97      	ldr	r3, [pc, #604]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10d      	bne.n	8006b1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b02:	4b94      	ldr	r3, [pc, #592]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	4a93      	ldr	r2, [pc, #588]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	61d3      	str	r3, [r2, #28]
 8006b0e:	4b91      	ldr	r3, [pc, #580]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b16:	60bb      	str	r3, [r7, #8]
 8006b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1e:	4b8e      	ldr	r3, [pc, #568]	; (8006d58 <HAL_RCC_OscConfig+0x4f8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d118      	bne.n	8006b5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2a:	4b8b      	ldr	r3, [pc, #556]	; (8006d58 <HAL_RCC_OscConfig+0x4f8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a8a      	ldr	r2, [pc, #552]	; (8006d58 <HAL_RCC_OscConfig+0x4f8>)
 8006b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b36:	f7fd fe9f 	bl	8004878 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3e:	f7fd fe9b 	bl	8004878 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b64      	cmp	r3, #100	; 0x64
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e0fd      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b50:	4b81      	ldr	r3, [pc, #516]	; (8006d58 <HAL_RCC_OscConfig+0x4f8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d106      	bne.n	8006b72 <HAL_RCC_OscConfig+0x312>
 8006b64:	4b7b      	ldr	r3, [pc, #492]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	4a7a      	ldr	r2, [pc, #488]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	6213      	str	r3, [r2, #32]
 8006b70:	e02d      	b.n	8006bce <HAL_RCC_OscConfig+0x36e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0x334>
 8006b7a:	4b76      	ldr	r3, [pc, #472]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	4a75      	ldr	r2, [pc, #468]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	6213      	str	r3, [r2, #32]
 8006b86:	4b73      	ldr	r3, [pc, #460]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	4a72      	ldr	r2, [pc, #456]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b8c:	f023 0304 	bic.w	r3, r3, #4
 8006b90:	6213      	str	r3, [r2, #32]
 8006b92:	e01c      	b.n	8006bce <HAL_RCC_OscConfig+0x36e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b05      	cmp	r3, #5
 8006b9a:	d10c      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x356>
 8006b9c:	4b6d      	ldr	r3, [pc, #436]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	4a6c      	ldr	r2, [pc, #432]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006ba2:	f043 0304 	orr.w	r3, r3, #4
 8006ba6:	6213      	str	r3, [r2, #32]
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	4a69      	ldr	r2, [pc, #420]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	6213      	str	r3, [r2, #32]
 8006bb4:	e00b      	b.n	8006bce <HAL_RCC_OscConfig+0x36e>
 8006bb6:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	4a66      	ldr	r2, [pc, #408]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	6213      	str	r3, [r2, #32]
 8006bc2:	4b64      	ldr	r3, [pc, #400]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	4a63      	ldr	r2, [pc, #396]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006bc8:	f023 0304 	bic.w	r3, r3, #4
 8006bcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d015      	beq.n	8006c02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd6:	f7fd fe4f 	bl	8004878 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bdc:	e00a      	b.n	8006bf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bde:	f7fd fe4b 	bl	8004878 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e0ab      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf4:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0ee      	beq.n	8006bde <HAL_RCC_OscConfig+0x37e>
 8006c00:	e014      	b.n	8006c2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c02:	f7fd fe39 	bl	8004878 <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c08:	e00a      	b.n	8006c20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0a:	f7fd fe35 	bl	8004878 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e095      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c20:	4b4c      	ldr	r3, [pc, #304]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1ee      	bne.n	8006c0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d105      	bne.n	8006c3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c32:	4b48      	ldr	r3, [pc, #288]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	4a47      	ldr	r2, [pc, #284]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8081 	beq.w	8006d4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c48:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f003 030c 	and.w	r3, r3, #12
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d061      	beq.n	8006d18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d146      	bne.n	8006cea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c5c:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <HAL_RCC_OscConfig+0x4fc>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c62:	f7fd fe09 	bl	8004878 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6a:	f7fd fe05 	bl	8004878 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e067      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c7c:	4b35      	ldr	r3, [pc, #212]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1f0      	bne.n	8006c6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d108      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c92:	4b30      	ldr	r3, [pc, #192]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	492d      	ldr	r1, [pc, #180]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ca4:	4b2b      	ldr	r3, [pc, #172]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a19      	ldr	r1, [r3, #32]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	4927      	ldr	r1, [pc, #156]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cbc:	4b27      	ldr	r3, [pc, #156]	; (8006d5c <HAL_RCC_OscConfig+0x4fc>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc2:	f7fd fdd9 	bl	8004878 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cca:	f7fd fdd5 	bl	8004878 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e037      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cdc:	4b1d      	ldr	r3, [pc, #116]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCC_OscConfig+0x46a>
 8006ce8:	e02f      	b.n	8006d4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cea:	4b1c      	ldr	r3, [pc, #112]	; (8006d5c <HAL_RCC_OscConfig+0x4fc>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7fd fdc2 	bl	8004878 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf8:	f7fd fdbe 	bl	8004878 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e020      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f0      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x498>
 8006d16:	e018      	b.n	8006d4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e013      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d24:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <HAL_RCC_OscConfig+0x4f4>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d001      	beq.n	8006d4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40021000 	.word	0x40021000
 8006d58:	40007000 	.word	0x40007000
 8006d5c:	42420060 	.word	0x42420060

08006d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0d0      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d74:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d910      	bls.n	8006da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d82:	4b67      	ldr	r3, [pc, #412]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 0207 	bic.w	r2, r3, #7
 8006d8a:	4965      	ldr	r1, [pc, #404]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d92:	4b63      	ldr	r3, [pc, #396]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0b8      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d020      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dbc:	4b59      	ldr	r3, [pc, #356]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4a58      	ldr	r2, [pc, #352]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006dc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dd4:	4b53      	ldr	r3, [pc, #332]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4a52      	ldr	r2, [pc, #328]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006dde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de0:	4b50      	ldr	r3, [pc, #320]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	494d      	ldr	r1, [pc, #308]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d040      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e06:	4b47      	ldr	r3, [pc, #284]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d115      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e07f      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e1e:	4b41      	ldr	r3, [pc, #260]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e073      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e2e:	4b3d      	ldr	r3, [pc, #244]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e06b      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e3e:	4b39      	ldr	r3, [pc, #228]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f023 0203 	bic.w	r2, r3, #3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4936      	ldr	r1, [pc, #216]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e50:	f7fd fd12 	bl	8004878 <HAL_GetTick>
 8006e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e56:	e00a      	b.n	8006e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e58:	f7fd fd0e 	bl	8004878 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e053      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6e:	4b2d      	ldr	r3, [pc, #180]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f003 020c 	and.w	r2, r3, #12
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d1eb      	bne.n	8006e58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d210      	bcs.n	8006eb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8e:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f023 0207 	bic.w	r2, r3, #7
 8006e96:	4922      	ldr	r1, [pc, #136]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9e:	4b20      	ldr	r3, [pc, #128]	; (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d001      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e032      	b.n	8006f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	4916      	ldr	r1, [pc, #88]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	490e      	ldr	r1, [pc, #56]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006eee:	f000 f821 	bl	8006f34 <HAL_RCC_GetSysClockFreq>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	091b      	lsrs	r3, r3, #4
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	490a      	ldr	r1, [pc, #40]	; (8006f28 <HAL_RCC_ClockConfig+0x1c8>)
 8006f00:	5ccb      	ldrb	r3, [r1, r3]
 8006f02:	fa22 f303 	lsr.w	r3, r2, r3
 8006f06:	4a09      	ldr	r2, [pc, #36]	; (8006f2c <HAL_RCC_ClockConfig+0x1cc>)
 8006f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <HAL_RCC_ClockConfig+0x1d0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fd fc70 	bl	80047f4 <HAL_InitTick>

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40022000 	.word	0x40022000
 8006f24:	40021000 	.word	0x40021000
 8006f28:	08009314 	.word	0x08009314
 8006f2c:	20000064 	.word	0x20000064
 8006f30:	20000068 	.word	0x20000068

08006f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60bb      	str	r3, [r7, #8]
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	2300      	movs	r3, #0
 8006f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f003 030c 	and.w	r3, r3, #12
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d002      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0x30>
 8006f5e:	2b08      	cmp	r3, #8
 8006f60:	d003      	beq.n	8006f6a <HAL_RCC_GetSysClockFreq+0x36>
 8006f62:	e027      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f64:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006f66:	613b      	str	r3, [r7, #16]
      break;
 8006f68:	e027      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	0c9b      	lsrs	r3, r3, #18
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	4a17      	ldr	r2, [pc, #92]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006f74:	5cd3      	ldrb	r3, [r2, r3]
 8006f76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d010      	beq.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	0c5b      	lsrs	r3, r3, #17
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006f8e:	5cd3      	ldrb	r3, [r2, r3]
 8006f90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a0d      	ldr	r2, [pc, #52]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006f96:	fb02 f203 	mul.w	r2, r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e004      	b.n	8006fae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	613b      	str	r3, [r7, #16]
      break;
 8006fb2:	e002      	b.n	8006fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006fb6:	613b      	str	r3, [r7, #16]
      break;
 8006fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fba:	693b      	ldr	r3, [r7, #16]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	007a1200 	.word	0x007a1200
 8006fd0:	0800932c 	.word	0x0800932c
 8006fd4:	0800933c 	.word	0x0800933c
 8006fd8:	003d0900 	.word	0x003d0900

08006fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fe0:	4b02      	ldr	r3, [pc, #8]	; (8006fec <HAL_RCC_GetHCLKFreq+0x10>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr
 8006fec:	20000064 	.word	0x20000064

08006ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ff4:	f7ff fff2 	bl	8006fdc <HAL_RCC_GetHCLKFreq>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	4903      	ldr	r1, [pc, #12]	; (8007014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007006:	5ccb      	ldrb	r3, [r1, r3]
 8007008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800700c:	4618      	mov	r0, r3
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40021000 	.word	0x40021000
 8007014:	08009324 	.word	0x08009324

08007018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800701c:	f7ff ffde 	bl	8006fdc <HAL_RCC_GetHCLKFreq>
 8007020:	4602      	mov	r2, r0
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	0adb      	lsrs	r3, r3, #11
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	4903      	ldr	r1, [pc, #12]	; (800703c <HAL_RCC_GetPCLK2Freq+0x24>)
 800702e:	5ccb      	ldrb	r3, [r1, r3]
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007034:	4618      	mov	r0, r3
 8007036:	bd80      	pop	{r7, pc}
 8007038:	40021000 	.word	0x40021000
 800703c:	08009324 	.word	0x08009324

08007040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007048:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <RCC_Delay+0x34>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <RCC_Delay+0x38>)
 800704e:	fba2 2303 	umull	r2, r3, r2, r3
 8007052:	0a5b      	lsrs	r3, r3, #9
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	fb02 f303 	mul.w	r3, r2, r3
 800705a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800705c:	bf00      	nop
  }
  while (Delay --);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1e5a      	subs	r2, r3, #1
 8007062:	60fa      	str	r2, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f9      	bne.n	800705c <RCC_Delay+0x1c>
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	20000064 	.word	0x20000064
 8007078:	10624dd3 	.word	0x10624dd3

0800707c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d07d      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007098:	2300      	movs	r3, #0
 800709a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800709c:	4b4f      	ldr	r3, [pc, #316]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10d      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a8:	4b4c      	ldr	r3, [pc, #304]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	4a4b      	ldr	r2, [pc, #300]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b2:	61d3      	str	r3, [r2, #28]
 80070b4:	4b49      	ldr	r3, [pc, #292]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c0:	2301      	movs	r3, #1
 80070c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c4:	4b46      	ldr	r3, [pc, #280]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d118      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070d0:	4b43      	ldr	r3, [pc, #268]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a42      	ldr	r2, [pc, #264]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070dc:	f7fd fbcc 	bl	8004878 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e2:	e008      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e4:	f7fd fbc8 	bl	8004878 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b64      	cmp	r3, #100	; 0x64
 80070f0:	d901      	bls.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e06d      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f6:	4b3a      	ldr	r3, [pc, #232]	; (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007102:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800710a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d02e      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	429a      	cmp	r2, r3
 800711e:	d027      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007120:	4b2e      	ldr	r3, [pc, #184]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007128:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800712a:	4b2e      	ldr	r3, [pc, #184]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007130:	4b2c      	ldr	r3, [pc, #176]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007136:	4a29      	ldr	r2, [pc, #164]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d014      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007146:	f7fd fb97 	bl	8004878 <HAL_GetTick>
 800714a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714c:	e00a      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800714e:	f7fd fb93 	bl	8004878 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f241 3288 	movw	r2, #5000	; 0x1388
 800715c:	4293      	cmp	r3, r2
 800715e:	d901      	bls.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e036      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007164:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0ee      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007170:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4917      	ldr	r1, [pc, #92]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800717e:	4313      	orrs	r3, r2
 8007180:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d105      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007188:	4b14      	ldr	r3, [pc, #80]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4a13      	ldr	r2, [pc, #76]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800718e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007192:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	490b      	ldr	r1, [pc, #44]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	4904      	ldr	r1, [pc, #16]	; (80071dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40021000 	.word	0x40021000
 80071e0:	40007000 	.word	0x40007000
 80071e4:	42420440 	.word	0x42420440

080071e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	2300      	movs	r3, #0
 8007202:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b10      	cmp	r3, #16
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b10      	cmp	r3, #16
 800720e:	f200 808a 	bhi.w	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d045      	beq.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b02      	cmp	r3, #2
 800721c:	d075      	beq.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800721e:	e082      	b.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007220:	4b46      	ldr	r3, [pc, #280]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007226:	4b45      	ldr	r3, [pc, #276]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d07b      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	0c9b      	lsrs	r3, r3, #18
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	4a41      	ldr	r2, [pc, #260]	; (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800723c:	5cd3      	ldrb	r3, [r2, r3]
 800723e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d015      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800724a:	4b3c      	ldr	r3, [pc, #240]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	0c5b      	lsrs	r3, r3, #17
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	4a3b      	ldr	r2, [pc, #236]	; (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007256:	5cd3      	ldrb	r3, [r2, r3]
 8007258:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00d      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007264:	4a38      	ldr	r2, [pc, #224]	; (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	fbb2 f2f3 	udiv	r2, r2, r3
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	e004      	b.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4a34      	ldr	r2, [pc, #208]	; (800734c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007280:	4b2e      	ldr	r3, [pc, #184]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800728c:	d102      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	61bb      	str	r3, [r7, #24]
      break;
 8007292:	e04a      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4a2d      	ldr	r2, [pc, #180]	; (8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	61bb      	str	r3, [r7, #24]
      break;
 80072a2:	e042      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80072a4:	4b25      	ldr	r3, [pc, #148]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b4:	d108      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80072c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	e01f      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d2:	d109      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80072d4:	4b19      	ldr	r3, [pc, #100]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80072e0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	e00f      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072f2:	d11c      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80072f4:	4b11      	ldr	r3, [pc, #68]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d016      	beq.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007300:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007304:	61bb      	str	r3, [r7, #24]
      break;
 8007306:	e012      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007308:	e011      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800730a:	f7ff fe85 	bl	8007018 <HAL_RCC_GetPCLK2Freq>
 800730e:	4602      	mov	r2, r0
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	0b9b      	lsrs	r3, r3, #14
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	3301      	adds	r3, #1
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	61bb      	str	r3, [r7, #24]
      break;
 8007324:	e004      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007326:	bf00      	nop
 8007328:	e002      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800732a:	bf00      	nop
 800732c:	e000      	b.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800732e:	bf00      	nop
    }
  }
  return (frequency);
 8007330:	69bb      	ldr	r3, [r7, #24]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40021000 	.word	0x40021000
 8007340:	08009340 	.word	0x08009340
 8007344:	08009350 	.word	0x08009350
 8007348:	007a1200 	.word	0x007a1200
 800734c:	003d0900 	.word	0x003d0900
 8007350:	aaaaaaab 	.word	0xaaaaaaab

08007354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e041      	b.n	80073ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fc fff0 	bl	8004360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3304      	adds	r3, #4
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f000 fbd8 	bl	8007b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b01      	cmp	r3, #1
 8007406:	d001      	beq.n	800740c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e032      	b.n	8007472 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <HAL_TIM_Base_Start+0x88>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_TIM_Base_Start+0x48>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007426:	d009      	beq.n	800743c <HAL_TIM_Base_Start+0x48>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a14      	ldr	r2, [pc, #80]	; (8007480 <HAL_TIM_Base_Start+0x8c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIM_Base_Start+0x48>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <HAL_TIM_Base_Start+0x90>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d111      	bne.n	8007460 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b06      	cmp	r3, #6
 800744c:	d010      	beq.n	8007470 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745e:	e007      	b.n	8007470 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800

08007488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d001      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e03a      	b.n	8007516 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a18      	ldr	r2, [pc, #96]	; (8007520 <HAL_TIM_Base_Start_IT+0x98>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00e      	beq.n	80074e0 <HAL_TIM_Base_Start_IT+0x58>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d009      	beq.n	80074e0 <HAL_TIM_Base_Start_IT+0x58>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a14      	ldr	r2, [pc, #80]	; (8007524 <HAL_TIM_Base_Start_IT+0x9c>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d004      	beq.n	80074e0 <HAL_TIM_Base_Start_IT+0x58>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a13      	ldr	r2, [pc, #76]	; (8007528 <HAL_TIM_Base_Start_IT+0xa0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d111      	bne.n	8007504 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b06      	cmp	r3, #6
 80074f0:	d010      	beq.n	8007514 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0201 	orr.w	r2, r2, #1
 8007500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007502:	e007      	b.n	8007514 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0201 	orr.w	r2, r2, #1
 8007512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40000400 	.word	0x40000400
 8007528:	40000800 	.word	0x40000800

0800752c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e041      	b.n	80075c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f839 	bl	80075ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f000 faec 	bl	8007b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d122      	bne.n	8007638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d11b      	bne.n	8007638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0202 	mvn.w	r2, #2
 8007608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa76 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007624:	e005      	b.n	8007632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa69 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fa78 	bl	8007b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b04      	cmp	r3, #4
 8007644:	d122      	bne.n	800768c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b04      	cmp	r3, #4
 8007652:	d11b      	bne.n	800768c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0204 	mvn.w	r2, #4
 800765c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa4c 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007678:	e005      	b.n	8007686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa3f 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fa4e 	bl	8007b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	2b08      	cmp	r3, #8
 8007698:	d122      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d11b      	bne.n	80076e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0208 	mvn.w	r2, #8
 80076b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2204      	movs	r2, #4
 80076b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa22 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 80076cc:	e005      	b.n	80076da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa15 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fa24 	bl	8007b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d122      	bne.n	8007734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b10      	cmp	r3, #16
 80076fa:	d11b      	bne.n	8007734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f06f 0210 	mvn.w	r2, #16
 8007704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2208      	movs	r2, #8
 800770a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f9f8 	bl	8007b10 <HAL_TIM_IC_CaptureCallback>
 8007720:	e005      	b.n	800772e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9eb 	bl	8007afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f9fa 	bl	8007b22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10e      	bne.n	8007760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d107      	bne.n	8007760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f06f 0201 	mvn.w	r2, #1
 8007758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fc fa50 	bl	8003c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776a:	2b80      	cmp	r3, #128	; 0x80
 800776c:	d10e      	bne.n	800778c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007778:	2b80      	cmp	r3, #128	; 0x80
 800777a:	d107      	bne.n	800778c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fdb4 	bl	80082f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d10e      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	d107      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9be 	bl	8007b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	d10e      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d107      	bne.n	80077e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0220 	mvn.w	r2, #32
 80077dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fd7f 	bl	80082e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007806:	2302      	movs	r3, #2
 8007808:	e0ae      	b.n	8007968 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b0c      	cmp	r3, #12
 8007816:	f200 809f 	bhi.w	8007958 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007855 	.word	0x08007855
 8007824:	08007959 	.word	0x08007959
 8007828:	08007959 	.word	0x08007959
 800782c:	08007959 	.word	0x08007959
 8007830:	08007895 	.word	0x08007895
 8007834:	08007959 	.word	0x08007959
 8007838:	08007959 	.word	0x08007959
 800783c:	08007959 	.word	0x08007959
 8007840:	080078d7 	.word	0x080078d7
 8007844:	08007959 	.word	0x08007959
 8007848:	08007959 	.word	0x08007959
 800784c:	08007959 	.word	0x08007959
 8007850:	08007917 	.word	0x08007917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f9d6 	bl	8007c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0208 	orr.w	r2, r2, #8
 800786e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0204 	bic.w	r2, r2, #4
 800787e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6999      	ldr	r1, [r3, #24]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	619a      	str	r2, [r3, #24]
      break;
 8007892:	e064      	b.n	800795e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fa1c 	bl	8007cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6999      	ldr	r1, [r3, #24]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	021a      	lsls	r2, r3, #8
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	619a      	str	r2, [r3, #24]
      break;
 80078d4:	e043      	b.n	800795e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fa65 	bl	8007dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0208 	orr.w	r2, r2, #8
 80078f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0204 	bic.w	r2, r2, #4
 8007900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69d9      	ldr	r1, [r3, #28]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	61da      	str	r2, [r3, #28]
      break;
 8007914:	e023      	b.n	800795e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 faaf 	bl	8007e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69da      	ldr	r2, [r3, #28]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69d9      	ldr	r1, [r3, #28]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	021a      	lsls	r2, r3, #8
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	61da      	str	r2, [r3, #28]
      break;
 8007956:	e002      	b.n	800795e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	75fb      	strb	r3, [r7, #23]
      break;
 800795c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007966:	7dfb      	ldrb	r3, [r7, #23]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_TIM_ConfigClockSource+0x1c>
 8007988:	2302      	movs	r3, #2
 800798a:	e0b4      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x186>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c4:	d03e      	beq.n	8007a44 <HAL_TIM_ConfigClockSource+0xd4>
 80079c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ca:	f200 8087 	bhi.w	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	f000 8086 	beq.w	8007ae2 <HAL_TIM_ConfigClockSource+0x172>
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079da:	d87f      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 80079dc:	2b70      	cmp	r3, #112	; 0x70
 80079de:	d01a      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0xa6>
 80079e0:	2b70      	cmp	r3, #112	; 0x70
 80079e2:	d87b      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 80079e4:	2b60      	cmp	r3, #96	; 0x60
 80079e6:	d050      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x11a>
 80079e8:	2b60      	cmp	r3, #96	; 0x60
 80079ea:	d877      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 80079ec:	2b50      	cmp	r3, #80	; 0x50
 80079ee:	d03c      	beq.n	8007a6a <HAL_TIM_ConfigClockSource+0xfa>
 80079f0:	2b50      	cmp	r3, #80	; 0x50
 80079f2:	d873      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d058      	beq.n	8007aaa <HAL_TIM_ConfigClockSource+0x13a>
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	d86f      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 80079fc:	2b30      	cmp	r3, #48	; 0x30
 80079fe:	d064      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x15a>
 8007a00:	2b30      	cmp	r3, #48	; 0x30
 8007a02:	d86b      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	d060      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x15a>
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d867      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d05c      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x15a>
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d05a      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x15a>
 8007a14:	e062      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6899      	ldr	r1, [r3, #8]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f000 faf0 	bl	800800a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	609a      	str	r2, [r3, #8]
      break;
 8007a42:	e04f      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	6899      	ldr	r1, [r3, #8]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f000 fad9 	bl	800800a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a66:	609a      	str	r2, [r3, #8]
      break;
 8007a68:	e03c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6818      	ldr	r0, [r3, #0]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	6859      	ldr	r1, [r3, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f000 fa50 	bl	8007f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2150      	movs	r1, #80	; 0x50
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 faa7 	bl	8007fd6 <TIM_ITRx_SetConfig>
      break;
 8007a88:	e02c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	6859      	ldr	r1, [r3, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f000 fa6e 	bl	8007f78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2160      	movs	r1, #96	; 0x60
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fa97 	bl	8007fd6 <TIM_ITRx_SetConfig>
      break;
 8007aa8:	e01c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f000 fa30 	bl	8007f1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2140      	movs	r1, #64	; 0x40
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fa87 	bl	8007fd6 <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e00c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f000 fa7e 	bl	8007fd6 <TIM_ITRx_SetConfig>
      break;
 8007ada:	e003      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae0:	e000      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr

08007b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bc80      	pop	{r7}
 8007b44:	4770      	bx	lr
	...

08007b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a29      	ldr	r2, [pc, #164]	; (8007c00 <TIM_Base_SetConfig+0xb8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00b      	beq.n	8007b78 <TIM_Base_SetConfig+0x30>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b66:	d007      	beq.n	8007b78 <TIM_Base_SetConfig+0x30>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <TIM_Base_SetConfig+0xbc>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d003      	beq.n	8007b78 <TIM_Base_SetConfig+0x30>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a25      	ldr	r2, [pc, #148]	; (8007c08 <TIM_Base_SetConfig+0xc0>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d108      	bne.n	8007b8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1c      	ldr	r2, [pc, #112]	; (8007c00 <TIM_Base_SetConfig+0xb8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00b      	beq.n	8007baa <TIM_Base_SetConfig+0x62>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d007      	beq.n	8007baa <TIM_Base_SetConfig+0x62>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a19      	ldr	r2, [pc, #100]	; (8007c04 <TIM_Base_SetConfig+0xbc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d003      	beq.n	8007baa <TIM_Base_SetConfig+0x62>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <TIM_Base_SetConfig+0xc0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d108      	bne.n	8007bbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a07      	ldr	r2, [pc, #28]	; (8007c00 <TIM_Base_SetConfig+0xb8>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d103      	bne.n	8007bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	615a      	str	r2, [r3, #20]
}
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800

08007c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	f023 0201 	bic.w	r2, r3, #1
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0303 	bic.w	r3, r3, #3
 8007c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f023 0302 	bic.w	r3, r3, #2
 8007c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <TIM_OC1_SetConfig+0xc8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d10c      	bne.n	8007c82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f023 0308 	bic.w	r3, r3, #8
 8007c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f023 0304 	bic.w	r3, r3, #4
 8007c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <TIM_OC1_SetConfig+0xc8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d111      	bne.n	8007cae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	621a      	str	r2, [r3, #32]
}
 8007cc8:	bf00      	nop
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40012c00 	.word	0x40012c00

08007cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f023 0210 	bic.w	r2, r3, #16
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f023 0320 	bic.w	r3, r3, #32
 8007d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1d      	ldr	r2, [pc, #116]	; (8007da8 <TIM_OC2_SetConfig+0xd0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d10d      	bne.n	8007d54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a14      	ldr	r2, [pc, #80]	; (8007da8 <TIM_OC2_SetConfig+0xd0>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d113      	bne.n	8007d84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	621a      	str	r2, [r3, #32]
}
 8007d9e:	bf00      	nop
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr
 8007da8:	40012c00 	.word	0x40012c00

08007dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a1d      	ldr	r2, [pc, #116]	; (8007e7c <TIM_OC3_SetConfig+0xd0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10d      	bne.n	8007e26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a14      	ldr	r2, [pc, #80]	; (8007e7c <TIM_OC3_SetConfig+0xd0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d113      	bne.n	8007e56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	621a      	str	r2, [r3, #32]
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40012c00 	.word	0x40012c00

08007e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	021b      	lsls	r3, r3, #8
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	031b      	lsls	r3, r3, #12
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <TIM_OC4_SetConfig+0x98>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d109      	bne.n	8007ef4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	019b      	lsls	r3, r3, #6
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr
 8007f18:	40012c00 	.word	0x40012c00

08007f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f023 0201 	bic.w	r2, r3, #1
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f023 030a 	bic.w	r3, r3, #10
 8007f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0210 	bic.w	r2, r3, #16
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	031b      	lsls	r3, r3, #12
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	621a      	str	r2, [r3, #32]
}
 8007fcc:	bf00      	nop
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr

08007fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b085      	sub	sp, #20
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f043 0307 	orr.w	r3, r3, #7
 8007ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	609a      	str	r2, [r3, #8]
}
 8008000:	bf00      	nop
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr

0800800a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800800a:	b480      	push	{r7}
 800800c:	b087      	sub	sp, #28
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008024:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	021a      	lsls	r2, r3, #8
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	431a      	orrs	r2, r3
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	4313      	orrs	r3, r2
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	609a      	str	r2, [r3, #8]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d109      	bne.n	800806c <HAL_TIMEx_PWMN_Start+0x24>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	bf14      	ite	ne
 8008064:	2301      	movne	r3, #1
 8008066:	2300      	moveq	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	e022      	b.n	80080b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b04      	cmp	r3, #4
 8008070:	d109      	bne.n	8008086 <HAL_TIMEx_PWMN_Start+0x3e>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	bf14      	ite	ne
 800807e:	2301      	movne	r3, #1
 8008080:	2300      	moveq	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	e015      	b.n	80080b2 <HAL_TIMEx_PWMN_Start+0x6a>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b08      	cmp	r3, #8
 800808a:	d109      	bne.n	80080a0 <HAL_TIMEx_PWMN_Start+0x58>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	bf14      	ite	ne
 8008098:	2301      	movne	r3, #1
 800809a:	2300      	moveq	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	e008      	b.n	80080b2 <HAL_TIMEx_PWMN_Start+0x6a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	bf14      	ite	ne
 80080ac:	2301      	movne	r3, #1
 80080ae:	2300      	moveq	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e059      	b.n	800816e <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d104      	bne.n	80080ca <HAL_TIMEx_PWMN_Start+0x82>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c8:	e013      	b.n	80080f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d104      	bne.n	80080da <HAL_TIMEx_PWMN_Start+0x92>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080d8:	e00b      	b.n	80080f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d104      	bne.n	80080ea <HAL_TIMEx_PWMN_Start+0xa2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080e8:	e003      	b.n	80080f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2204      	movs	r2, #4
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f903 	bl	8008306 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800810e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a18      	ldr	r2, [pc, #96]	; (8008178 <HAL_TIMEx_PWMN_Start+0x130>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00e      	beq.n	8008138 <HAL_TIMEx_PWMN_Start+0xf0>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008122:	d009      	beq.n	8008138 <HAL_TIMEx_PWMN_Start+0xf0>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a14      	ldr	r2, [pc, #80]	; (800817c <HAL_TIMEx_PWMN_Start+0x134>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_TIMEx_PWMN_Start+0xf0>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a13      	ldr	r2, [pc, #76]	; (8008180 <HAL_TIMEx_PWMN_Start+0x138>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d111      	bne.n	800815c <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b06      	cmp	r3, #6
 8008148:	d010      	beq.n	800816c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0201 	orr.w	r2, r2, #1
 8008158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815a:	e007      	b.n	800816c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40012c00 	.word	0x40012c00
 800817c:	40000400 	.word	0x40000400
 8008180:	40000800 	.word	0x40000800

08008184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008198:	2302      	movs	r3, #2
 800819a:	e046      	b.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a16      	ldr	r2, [pc, #88]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00e      	beq.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e8:	d009      	beq.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a12      	ldr	r2, [pc, #72]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d004      	beq.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a10      	ldr	r2, [pc, #64]	; (800823c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d10c      	bne.n	8008218 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	4313      	orrs	r3, r2
 800820e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40000400 	.word	0x40000400
 800823c:	40000800 	.word	0x40000800

08008240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008258:	2302      	movs	r3, #2
 800825a:	e03d      	b.n	80082d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4313      	orrs	r3, r2
 800829a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008306:	b480      	push	{r7}
 8008308:	b087      	sub	sp, #28
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f003 031f 	and.w	r3, r3, #31
 8008318:	2204      	movs	r2, #4
 800831a:	fa02 f303 	lsl.w	r3, r2, r3
 800831e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a1a      	ldr	r2, [r3, #32]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	43db      	mvns	r3, r3
 8008328:	401a      	ands	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a1a      	ldr	r2, [r3, #32]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f003 031f 	and.w	r3, r3, #31
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	fa01 f303 	lsl.w	r3, r1, r3
 800833e:	431a      	orrs	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	bc80      	pop	{r7}
 800834c:	4770      	bx	lr

0800834e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e042      	b.n	80083e6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d106      	bne.n	800837a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fc f873 	bl	8004460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2224      	movs	r2, #36	; 0x24
 800837e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008390:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f82c 	bl	80083f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691a      	ldr	r2, [r3, #16]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	695a      	ldr	r2, [r3, #20]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	4313      	orrs	r3, r2
 800841e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800842a:	f023 030c 	bic.w	r3, r3, #12
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	68b9      	ldr	r1, [r7, #8]
 8008434:	430b      	orrs	r3, r1
 8008436:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a2c      	ldr	r2, [pc, #176]	; (8008504 <UART_SetConfig+0x114>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d103      	bne.n	8008460 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008458:	f7fe fdde 	bl	8007018 <HAL_RCC_GetPCLK2Freq>
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	e002      	b.n	8008466 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008460:	f7fe fdc6 	bl	8006ff0 <HAL_RCC_GetPCLK1Freq>
 8008464:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009a      	lsls	r2, r3, #2
 8008470:	441a      	add	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	fbb2 f3f3 	udiv	r3, r2, r3
 800847c:	4a22      	ldr	r2, [pc, #136]	; (8008508 <UART_SetConfig+0x118>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	0119      	lsls	r1, r3, #4
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009a      	lsls	r2, r3, #2
 8008490:	441a      	add	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	fbb2 f2f3 	udiv	r2, r2, r3
 800849c:	4b1a      	ldr	r3, [pc, #104]	; (8008508 <UART_SetConfig+0x118>)
 800849e:	fba3 0302 	umull	r0, r3, r3, r2
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	2064      	movs	r0, #100	; 0x64
 80084a6:	fb00 f303 	mul.w	r3, r0, r3
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	3332      	adds	r3, #50	; 0x32
 80084b0:	4a15      	ldr	r2, [pc, #84]	; (8008508 <UART_SetConfig+0x118>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084bc:	4419      	add	r1, r3
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009a      	lsls	r2, r3, #2
 80084c8:	441a      	add	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80084d4:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <UART_SetConfig+0x118>)
 80084d6:	fba3 0302 	umull	r0, r3, r3, r2
 80084da:	095b      	lsrs	r3, r3, #5
 80084dc:	2064      	movs	r0, #100	; 0x64
 80084de:	fb00 f303 	mul.w	r3, r0, r3
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	3332      	adds	r3, #50	; 0x32
 80084e8:	4a07      	ldr	r2, [pc, #28]	; (8008508 <UART_SetConfig+0x118>)
 80084ea:	fba2 2303 	umull	r2, r3, r2, r3
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	f003 020f 	and.w	r2, r3, #15
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	440a      	add	r2, r1
 80084fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40013800 	.word	0x40013800
 8008508:	51eb851f 	.word	0x51eb851f

0800850c <__errno>:
 800850c:	4b01      	ldr	r3, [pc, #4]	; (8008514 <__errno+0x8>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000070 	.word	0x20000070

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	2600      	movs	r6, #0
 800851c:	4d0c      	ldr	r5, [pc, #48]	; (8008550 <__libc_init_array+0x38>)
 800851e:	4c0d      	ldr	r4, [pc, #52]	; (8008554 <__libc_init_array+0x3c>)
 8008520:	1b64      	subs	r4, r4, r5
 8008522:	10a4      	asrs	r4, r4, #2
 8008524:	42a6      	cmp	r6, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	f000 fca4 	bl	8008e74 <_init>
 800852c:	2600      	movs	r6, #0
 800852e:	4d0a      	ldr	r5, [pc, #40]	; (8008558 <__libc_init_array+0x40>)
 8008530:	4c0a      	ldr	r4, [pc, #40]	; (800855c <__libc_init_array+0x44>)
 8008532:	1b64      	subs	r4, r4, r5
 8008534:	10a4      	asrs	r4, r4, #2
 8008536:	42a6      	cmp	r6, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008540:	4798      	blx	r3
 8008542:	3601      	adds	r6, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f855 3b04 	ldr.w	r3, [r5], #4
 800854a:	4798      	blx	r3
 800854c:	3601      	adds	r6, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	08009388 	.word	0x08009388
 8008554:	08009388 	.word	0x08009388
 8008558:	08009388 	.word	0x08009388
 800855c:	0800938c 	.word	0x0800938c

08008560 <memset>:
 8008560:	4603      	mov	r3, r0
 8008562:	4402      	add	r2, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <_vsiprintf_r>:
 8008570:	b500      	push	{lr}
 8008572:	b09b      	sub	sp, #108	; 0x6c
 8008574:	9100      	str	r1, [sp, #0]
 8008576:	9104      	str	r1, [sp, #16]
 8008578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800857c:	9105      	str	r1, [sp, #20]
 800857e:	9102      	str	r1, [sp, #8]
 8008580:	4905      	ldr	r1, [pc, #20]	; (8008598 <_vsiprintf_r+0x28>)
 8008582:	9103      	str	r1, [sp, #12]
 8008584:	4669      	mov	r1, sp
 8008586:	f000 f86f 	bl	8008668 <_svfiprintf_r>
 800858a:	2200      	movs	r2, #0
 800858c:	9b00      	ldr	r3, [sp, #0]
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	b01b      	add	sp, #108	; 0x6c
 8008592:	f85d fb04 	ldr.w	pc, [sp], #4
 8008596:	bf00      	nop
 8008598:	ffff0208 	.word	0xffff0208

0800859c <vsiprintf>:
 800859c:	4613      	mov	r3, r2
 800859e:	460a      	mov	r2, r1
 80085a0:	4601      	mov	r1, r0
 80085a2:	4802      	ldr	r0, [pc, #8]	; (80085ac <vsiprintf+0x10>)
 80085a4:	6800      	ldr	r0, [r0, #0]
 80085a6:	f7ff bfe3 	b.w	8008570 <_vsiprintf_r>
 80085aa:	bf00      	nop
 80085ac:	20000070 	.word	0x20000070

080085b0 <__ssputs_r>:
 80085b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b4:	688e      	ldr	r6, [r1, #8]
 80085b6:	4682      	mov	sl, r0
 80085b8:	429e      	cmp	r6, r3
 80085ba:	460c      	mov	r4, r1
 80085bc:	4690      	mov	r8, r2
 80085be:	461f      	mov	r7, r3
 80085c0:	d838      	bhi.n	8008634 <__ssputs_r+0x84>
 80085c2:	898a      	ldrh	r2, [r1, #12]
 80085c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c8:	d032      	beq.n	8008630 <__ssputs_r+0x80>
 80085ca:	6825      	ldr	r5, [r4, #0]
 80085cc:	6909      	ldr	r1, [r1, #16]
 80085ce:	3301      	adds	r3, #1
 80085d0:	eba5 0901 	sub.w	r9, r5, r1
 80085d4:	6965      	ldr	r5, [r4, #20]
 80085d6:	444b      	add	r3, r9
 80085d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085e0:	106d      	asrs	r5, r5, #1
 80085e2:	429d      	cmp	r5, r3
 80085e4:	bf38      	it	cc
 80085e6:	461d      	movcc	r5, r3
 80085e8:	0553      	lsls	r3, r2, #21
 80085ea:	d531      	bpl.n	8008650 <__ssputs_r+0xa0>
 80085ec:	4629      	mov	r1, r5
 80085ee:	f000 fb53 	bl	8008c98 <_malloc_r>
 80085f2:	4606      	mov	r6, r0
 80085f4:	b950      	cbnz	r0, 800860c <__ssputs_r+0x5c>
 80085f6:	230c      	movs	r3, #12
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	f8ca 3000 	str.w	r3, [sl]
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	464a      	mov	r2, r9
 800860e:	6921      	ldr	r1, [r4, #16]
 8008610:	f000 face 	bl	8008bb0 <memcpy>
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800861a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	6126      	str	r6, [r4, #16]
 8008622:	444e      	add	r6, r9
 8008624:	6026      	str	r6, [r4, #0]
 8008626:	463e      	mov	r6, r7
 8008628:	6165      	str	r5, [r4, #20]
 800862a:	eba5 0509 	sub.w	r5, r5, r9
 800862e:	60a5      	str	r5, [r4, #8]
 8008630:	42be      	cmp	r6, r7
 8008632:	d900      	bls.n	8008636 <__ssputs_r+0x86>
 8008634:	463e      	mov	r6, r7
 8008636:	4632      	mov	r2, r6
 8008638:	4641      	mov	r1, r8
 800863a:	6820      	ldr	r0, [r4, #0]
 800863c:	f000 fac6 	bl	8008bcc <memmove>
 8008640:	68a3      	ldr	r3, [r4, #8]
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	1b9b      	subs	r3, r3, r6
 8008646:	4432      	add	r2, r6
 8008648:	2000      	movs	r0, #0
 800864a:	60a3      	str	r3, [r4, #8]
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	e7db      	b.n	8008608 <__ssputs_r+0x58>
 8008650:	462a      	mov	r2, r5
 8008652:	f000 fb7b 	bl	8008d4c <_realloc_r>
 8008656:	4606      	mov	r6, r0
 8008658:	2800      	cmp	r0, #0
 800865a:	d1e1      	bne.n	8008620 <__ssputs_r+0x70>
 800865c:	4650      	mov	r0, sl
 800865e:	6921      	ldr	r1, [r4, #16]
 8008660:	f000 face 	bl	8008c00 <_free_r>
 8008664:	e7c7      	b.n	80085f6 <__ssputs_r+0x46>
	...

08008668 <_svfiprintf_r>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	4698      	mov	r8, r3
 800866e:	898b      	ldrh	r3, [r1, #12]
 8008670:	4607      	mov	r7, r0
 8008672:	061b      	lsls	r3, r3, #24
 8008674:	460d      	mov	r5, r1
 8008676:	4614      	mov	r4, r2
 8008678:	b09d      	sub	sp, #116	; 0x74
 800867a:	d50e      	bpl.n	800869a <_svfiprintf_r+0x32>
 800867c:	690b      	ldr	r3, [r1, #16]
 800867e:	b963      	cbnz	r3, 800869a <_svfiprintf_r+0x32>
 8008680:	2140      	movs	r1, #64	; 0x40
 8008682:	f000 fb09 	bl	8008c98 <_malloc_r>
 8008686:	6028      	str	r0, [r5, #0]
 8008688:	6128      	str	r0, [r5, #16]
 800868a:	b920      	cbnz	r0, 8008696 <_svfiprintf_r+0x2e>
 800868c:	230c      	movs	r3, #12
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	e0d1      	b.n	800883a <_svfiprintf_r+0x1d2>
 8008696:	2340      	movs	r3, #64	; 0x40
 8008698:	616b      	str	r3, [r5, #20]
 800869a:	2300      	movs	r3, #0
 800869c:	9309      	str	r3, [sp, #36]	; 0x24
 800869e:	2320      	movs	r3, #32
 80086a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a4:	2330      	movs	r3, #48	; 0x30
 80086a6:	f04f 0901 	mov.w	r9, #1
 80086aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008854 <_svfiprintf_r+0x1ec>
 80086b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b6:	4623      	mov	r3, r4
 80086b8:	469a      	mov	sl, r3
 80086ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086be:	b10a      	cbz	r2, 80086c4 <_svfiprintf_r+0x5c>
 80086c0:	2a25      	cmp	r2, #37	; 0x25
 80086c2:	d1f9      	bne.n	80086b8 <_svfiprintf_r+0x50>
 80086c4:	ebba 0b04 	subs.w	fp, sl, r4
 80086c8:	d00b      	beq.n	80086e2 <_svfiprintf_r+0x7a>
 80086ca:	465b      	mov	r3, fp
 80086cc:	4622      	mov	r2, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	4638      	mov	r0, r7
 80086d2:	f7ff ff6d 	bl	80085b0 <__ssputs_r>
 80086d6:	3001      	adds	r0, #1
 80086d8:	f000 80aa 	beq.w	8008830 <_svfiprintf_r+0x1c8>
 80086dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086de:	445a      	add	r2, fp
 80086e0:	9209      	str	r2, [sp, #36]	; 0x24
 80086e2:	f89a 3000 	ldrb.w	r3, [sl]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80a2 	beq.w	8008830 <_svfiprintf_r+0x1c8>
 80086ec:	2300      	movs	r3, #0
 80086ee:	f04f 32ff 	mov.w	r2, #4294967295
 80086f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f6:	f10a 0a01 	add.w	sl, sl, #1
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	9307      	str	r3, [sp, #28]
 80086fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008702:	931a      	str	r3, [sp, #104]	; 0x68
 8008704:	4654      	mov	r4, sl
 8008706:	2205      	movs	r2, #5
 8008708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870c:	4851      	ldr	r0, [pc, #324]	; (8008854 <_svfiprintf_r+0x1ec>)
 800870e:	f000 fa41 	bl	8008b94 <memchr>
 8008712:	9a04      	ldr	r2, [sp, #16]
 8008714:	b9d8      	cbnz	r0, 800874e <_svfiprintf_r+0xe6>
 8008716:	06d0      	lsls	r0, r2, #27
 8008718:	bf44      	itt	mi
 800871a:	2320      	movmi	r3, #32
 800871c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008720:	0711      	lsls	r1, r2, #28
 8008722:	bf44      	itt	mi
 8008724:	232b      	movmi	r3, #43	; 0x2b
 8008726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872a:	f89a 3000 	ldrb.w	r3, [sl]
 800872e:	2b2a      	cmp	r3, #42	; 0x2a
 8008730:	d015      	beq.n	800875e <_svfiprintf_r+0xf6>
 8008732:	4654      	mov	r4, sl
 8008734:	2000      	movs	r0, #0
 8008736:	f04f 0c0a 	mov.w	ip, #10
 800873a:	9a07      	ldr	r2, [sp, #28]
 800873c:	4621      	mov	r1, r4
 800873e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008742:	3b30      	subs	r3, #48	; 0x30
 8008744:	2b09      	cmp	r3, #9
 8008746:	d94e      	bls.n	80087e6 <_svfiprintf_r+0x17e>
 8008748:	b1b0      	cbz	r0, 8008778 <_svfiprintf_r+0x110>
 800874a:	9207      	str	r2, [sp, #28]
 800874c:	e014      	b.n	8008778 <_svfiprintf_r+0x110>
 800874e:	eba0 0308 	sub.w	r3, r0, r8
 8008752:	fa09 f303 	lsl.w	r3, r9, r3
 8008756:	4313      	orrs	r3, r2
 8008758:	46a2      	mov	sl, r4
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	e7d2      	b.n	8008704 <_svfiprintf_r+0x9c>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	1d19      	adds	r1, r3, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	9103      	str	r1, [sp, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	bfbb      	ittet	lt
 800876a:	425b      	neglt	r3, r3
 800876c:	f042 0202 	orrlt.w	r2, r2, #2
 8008770:	9307      	strge	r3, [sp, #28]
 8008772:	9307      	strlt	r3, [sp, #28]
 8008774:	bfb8      	it	lt
 8008776:	9204      	strlt	r2, [sp, #16]
 8008778:	7823      	ldrb	r3, [r4, #0]
 800877a:	2b2e      	cmp	r3, #46	; 0x2e
 800877c:	d10c      	bne.n	8008798 <_svfiprintf_r+0x130>
 800877e:	7863      	ldrb	r3, [r4, #1]
 8008780:	2b2a      	cmp	r3, #42	; 0x2a
 8008782:	d135      	bne.n	80087f0 <_svfiprintf_r+0x188>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	3402      	adds	r4, #2
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	9203      	str	r2, [sp, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfb8      	it	lt
 8008792:	f04f 33ff 	movlt.w	r3, #4294967295
 8008796:	9305      	str	r3, [sp, #20]
 8008798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008864 <_svfiprintf_r+0x1fc>
 800879c:	2203      	movs	r2, #3
 800879e:	4650      	mov	r0, sl
 80087a0:	7821      	ldrb	r1, [r4, #0]
 80087a2:	f000 f9f7 	bl	8008b94 <memchr>
 80087a6:	b140      	cbz	r0, 80087ba <_svfiprintf_r+0x152>
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	eba0 000a 	sub.w	r0, r0, sl
 80087ae:	fa03 f000 	lsl.w	r0, r3, r0
 80087b2:	9b04      	ldr	r3, [sp, #16]
 80087b4:	3401      	adds	r4, #1
 80087b6:	4303      	orrs	r3, r0
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087be:	2206      	movs	r2, #6
 80087c0:	4825      	ldr	r0, [pc, #148]	; (8008858 <_svfiprintf_r+0x1f0>)
 80087c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c6:	f000 f9e5 	bl	8008b94 <memchr>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d038      	beq.n	8008840 <_svfiprintf_r+0x1d8>
 80087ce:	4b23      	ldr	r3, [pc, #140]	; (800885c <_svfiprintf_r+0x1f4>)
 80087d0:	bb1b      	cbnz	r3, 800881a <_svfiprintf_r+0x1b2>
 80087d2:	9b03      	ldr	r3, [sp, #12]
 80087d4:	3307      	adds	r3, #7
 80087d6:	f023 0307 	bic.w	r3, r3, #7
 80087da:	3308      	adds	r3, #8
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e0:	4433      	add	r3, r6
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	e767      	b.n	80086b6 <_svfiprintf_r+0x4e>
 80087e6:	460c      	mov	r4, r1
 80087e8:	2001      	movs	r0, #1
 80087ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ee:	e7a5      	b.n	800873c <_svfiprintf_r+0xd4>
 80087f0:	2300      	movs	r3, #0
 80087f2:	f04f 0c0a 	mov.w	ip, #10
 80087f6:	4619      	mov	r1, r3
 80087f8:	3401      	adds	r4, #1
 80087fa:	9305      	str	r3, [sp, #20]
 80087fc:	4620      	mov	r0, r4
 80087fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008802:	3a30      	subs	r2, #48	; 0x30
 8008804:	2a09      	cmp	r2, #9
 8008806:	d903      	bls.n	8008810 <_svfiprintf_r+0x1a8>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0c5      	beq.n	8008798 <_svfiprintf_r+0x130>
 800880c:	9105      	str	r1, [sp, #20]
 800880e:	e7c3      	b.n	8008798 <_svfiprintf_r+0x130>
 8008810:	4604      	mov	r4, r0
 8008812:	2301      	movs	r3, #1
 8008814:	fb0c 2101 	mla	r1, ip, r1, r2
 8008818:	e7f0      	b.n	80087fc <_svfiprintf_r+0x194>
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462a      	mov	r2, r5
 8008820:	4638      	mov	r0, r7
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <_svfiprintf_r+0x1f8>)
 8008824:	a904      	add	r1, sp, #16
 8008826:	f3af 8000 	nop.w
 800882a:	1c42      	adds	r2, r0, #1
 800882c:	4606      	mov	r6, r0
 800882e:	d1d6      	bne.n	80087de <_svfiprintf_r+0x176>
 8008830:	89ab      	ldrh	r3, [r5, #12]
 8008832:	065b      	lsls	r3, r3, #25
 8008834:	f53f af2c 	bmi.w	8008690 <_svfiprintf_r+0x28>
 8008838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800883a:	b01d      	add	sp, #116	; 0x74
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008840:	ab03      	add	r3, sp, #12
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	462a      	mov	r2, r5
 8008846:	4638      	mov	r0, r7
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <_svfiprintf_r+0x1f8>)
 800884a:	a904      	add	r1, sp, #16
 800884c:	f000 f87c 	bl	8008948 <_printf_i>
 8008850:	e7eb      	b.n	800882a <_svfiprintf_r+0x1c2>
 8008852:	bf00      	nop
 8008854:	08009352 	.word	0x08009352
 8008858:	0800935c 	.word	0x0800935c
 800885c:	00000000 	.word	0x00000000
 8008860:	080085b1 	.word	0x080085b1
 8008864:	08009358 	.word	0x08009358

08008868 <_printf_common>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	4616      	mov	r6, r2
 800886e:	4699      	mov	r9, r3
 8008870:	688a      	ldr	r2, [r1, #8]
 8008872:	690b      	ldr	r3, [r1, #16]
 8008874:	4607      	mov	r7, r0
 8008876:	4293      	cmp	r3, r2
 8008878:	bfb8      	it	lt
 800887a:	4613      	movlt	r3, r2
 800887c:	6033      	str	r3, [r6, #0]
 800887e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008882:	460c      	mov	r4, r1
 8008884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008888:	b10a      	cbz	r2, 800888e <_printf_common+0x26>
 800888a:	3301      	adds	r3, #1
 800888c:	6033      	str	r3, [r6, #0]
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	0699      	lsls	r1, r3, #26
 8008892:	bf42      	ittt	mi
 8008894:	6833      	ldrmi	r3, [r6, #0]
 8008896:	3302      	addmi	r3, #2
 8008898:	6033      	strmi	r3, [r6, #0]
 800889a:	6825      	ldr	r5, [r4, #0]
 800889c:	f015 0506 	ands.w	r5, r5, #6
 80088a0:	d106      	bne.n	80088b0 <_printf_common+0x48>
 80088a2:	f104 0a19 	add.w	sl, r4, #25
 80088a6:	68e3      	ldr	r3, [r4, #12]
 80088a8:	6832      	ldr	r2, [r6, #0]
 80088aa:	1a9b      	subs	r3, r3, r2
 80088ac:	42ab      	cmp	r3, r5
 80088ae:	dc28      	bgt.n	8008902 <_printf_common+0x9a>
 80088b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088b4:	1e13      	subs	r3, r2, #0
 80088b6:	6822      	ldr	r2, [r4, #0]
 80088b8:	bf18      	it	ne
 80088ba:	2301      	movne	r3, #1
 80088bc:	0692      	lsls	r2, r2, #26
 80088be:	d42d      	bmi.n	800891c <_printf_common+0xb4>
 80088c0:	4649      	mov	r1, r9
 80088c2:	4638      	mov	r0, r7
 80088c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088c8:	47c0      	blx	r8
 80088ca:	3001      	adds	r0, #1
 80088cc:	d020      	beq.n	8008910 <_printf_common+0xa8>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	68e5      	ldr	r5, [r4, #12]
 80088d2:	f003 0306 	and.w	r3, r3, #6
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	bf18      	it	ne
 80088da:	2500      	movne	r5, #0
 80088dc:	6832      	ldr	r2, [r6, #0]
 80088de:	f04f 0600 	mov.w	r6, #0
 80088e2:	68a3      	ldr	r3, [r4, #8]
 80088e4:	bf08      	it	eq
 80088e6:	1aad      	subeq	r5, r5, r2
 80088e8:	6922      	ldr	r2, [r4, #16]
 80088ea:	bf08      	it	eq
 80088ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f0:	4293      	cmp	r3, r2
 80088f2:	bfc4      	itt	gt
 80088f4:	1a9b      	subgt	r3, r3, r2
 80088f6:	18ed      	addgt	r5, r5, r3
 80088f8:	341a      	adds	r4, #26
 80088fa:	42b5      	cmp	r5, r6
 80088fc:	d11a      	bne.n	8008934 <_printf_common+0xcc>
 80088fe:	2000      	movs	r0, #0
 8008900:	e008      	b.n	8008914 <_printf_common+0xac>
 8008902:	2301      	movs	r3, #1
 8008904:	4652      	mov	r2, sl
 8008906:	4649      	mov	r1, r9
 8008908:	4638      	mov	r0, r7
 800890a:	47c0      	blx	r8
 800890c:	3001      	adds	r0, #1
 800890e:	d103      	bne.n	8008918 <_printf_common+0xb0>
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008918:	3501      	adds	r5, #1
 800891a:	e7c4      	b.n	80088a6 <_printf_common+0x3e>
 800891c:	2030      	movs	r0, #48	; 0x30
 800891e:	18e1      	adds	r1, r4, r3
 8008920:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800892a:	4422      	add	r2, r4
 800892c:	3302      	adds	r3, #2
 800892e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008932:	e7c5      	b.n	80088c0 <_printf_common+0x58>
 8008934:	2301      	movs	r3, #1
 8008936:	4622      	mov	r2, r4
 8008938:	4649      	mov	r1, r9
 800893a:	4638      	mov	r0, r7
 800893c:	47c0      	blx	r8
 800893e:	3001      	adds	r0, #1
 8008940:	d0e6      	beq.n	8008910 <_printf_common+0xa8>
 8008942:	3601      	adds	r6, #1
 8008944:	e7d9      	b.n	80088fa <_printf_common+0x92>
	...

08008948 <_printf_i>:
 8008948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800894c:	460c      	mov	r4, r1
 800894e:	7e27      	ldrb	r7, [r4, #24]
 8008950:	4691      	mov	r9, r2
 8008952:	2f78      	cmp	r7, #120	; 0x78
 8008954:	4680      	mov	r8, r0
 8008956:	469a      	mov	sl, r3
 8008958:	990c      	ldr	r1, [sp, #48]	; 0x30
 800895a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800895e:	d807      	bhi.n	8008970 <_printf_i+0x28>
 8008960:	2f62      	cmp	r7, #98	; 0x62
 8008962:	d80a      	bhi.n	800897a <_printf_i+0x32>
 8008964:	2f00      	cmp	r7, #0
 8008966:	f000 80d9 	beq.w	8008b1c <_printf_i+0x1d4>
 800896a:	2f58      	cmp	r7, #88	; 0x58
 800896c:	f000 80a4 	beq.w	8008ab8 <_printf_i+0x170>
 8008970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008978:	e03a      	b.n	80089f0 <_printf_i+0xa8>
 800897a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800897e:	2b15      	cmp	r3, #21
 8008980:	d8f6      	bhi.n	8008970 <_printf_i+0x28>
 8008982:	a001      	add	r0, pc, #4	; (adr r0, 8008988 <_printf_i+0x40>)
 8008984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008988:	080089e1 	.word	0x080089e1
 800898c:	080089f5 	.word	0x080089f5
 8008990:	08008971 	.word	0x08008971
 8008994:	08008971 	.word	0x08008971
 8008998:	08008971 	.word	0x08008971
 800899c:	08008971 	.word	0x08008971
 80089a0:	080089f5 	.word	0x080089f5
 80089a4:	08008971 	.word	0x08008971
 80089a8:	08008971 	.word	0x08008971
 80089ac:	08008971 	.word	0x08008971
 80089b0:	08008971 	.word	0x08008971
 80089b4:	08008b03 	.word	0x08008b03
 80089b8:	08008a25 	.word	0x08008a25
 80089bc:	08008ae5 	.word	0x08008ae5
 80089c0:	08008971 	.word	0x08008971
 80089c4:	08008971 	.word	0x08008971
 80089c8:	08008b25 	.word	0x08008b25
 80089cc:	08008971 	.word	0x08008971
 80089d0:	08008a25 	.word	0x08008a25
 80089d4:	08008971 	.word	0x08008971
 80089d8:	08008971 	.word	0x08008971
 80089dc:	08008aed 	.word	0x08008aed
 80089e0:	680b      	ldr	r3, [r1, #0]
 80089e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089e6:	1d1a      	adds	r2, r3, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	600a      	str	r2, [r1, #0]
 80089ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0a4      	b.n	8008b3e <_printf_i+0x1f6>
 80089f4:	6825      	ldr	r5, [r4, #0]
 80089f6:	6808      	ldr	r0, [r1, #0]
 80089f8:	062e      	lsls	r6, r5, #24
 80089fa:	f100 0304 	add.w	r3, r0, #4
 80089fe:	d50a      	bpl.n	8008a16 <_printf_i+0xce>
 8008a00:	6805      	ldr	r5, [r0, #0]
 8008a02:	600b      	str	r3, [r1, #0]
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	da03      	bge.n	8008a10 <_printf_i+0xc8>
 8008a08:	232d      	movs	r3, #45	; 0x2d
 8008a0a:	426d      	negs	r5, r5
 8008a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a10:	230a      	movs	r3, #10
 8008a12:	485e      	ldr	r0, [pc, #376]	; (8008b8c <_printf_i+0x244>)
 8008a14:	e019      	b.n	8008a4a <_printf_i+0x102>
 8008a16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a1a:	6805      	ldr	r5, [r0, #0]
 8008a1c:	600b      	str	r3, [r1, #0]
 8008a1e:	bf18      	it	ne
 8008a20:	b22d      	sxthne	r5, r5
 8008a22:	e7ef      	b.n	8008a04 <_printf_i+0xbc>
 8008a24:	680b      	ldr	r3, [r1, #0]
 8008a26:	6825      	ldr	r5, [r4, #0]
 8008a28:	1d18      	adds	r0, r3, #4
 8008a2a:	6008      	str	r0, [r1, #0]
 8008a2c:	0628      	lsls	r0, r5, #24
 8008a2e:	d501      	bpl.n	8008a34 <_printf_i+0xec>
 8008a30:	681d      	ldr	r5, [r3, #0]
 8008a32:	e002      	b.n	8008a3a <_printf_i+0xf2>
 8008a34:	0669      	lsls	r1, r5, #25
 8008a36:	d5fb      	bpl.n	8008a30 <_printf_i+0xe8>
 8008a38:	881d      	ldrh	r5, [r3, #0]
 8008a3a:	2f6f      	cmp	r7, #111	; 0x6f
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2308      	moveq	r3, #8
 8008a40:	230a      	movne	r3, #10
 8008a42:	4852      	ldr	r0, [pc, #328]	; (8008b8c <_printf_i+0x244>)
 8008a44:	2100      	movs	r1, #0
 8008a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a4a:	6866      	ldr	r6, [r4, #4]
 8008a4c:	2e00      	cmp	r6, #0
 8008a4e:	bfa8      	it	ge
 8008a50:	6821      	ldrge	r1, [r4, #0]
 8008a52:	60a6      	str	r6, [r4, #8]
 8008a54:	bfa4      	itt	ge
 8008a56:	f021 0104 	bicge.w	r1, r1, #4
 8008a5a:	6021      	strge	r1, [r4, #0]
 8008a5c:	b90d      	cbnz	r5, 8008a62 <_printf_i+0x11a>
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d04d      	beq.n	8008afe <_printf_i+0x1b6>
 8008a62:	4616      	mov	r6, r2
 8008a64:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a68:	fb03 5711 	mls	r7, r3, r1, r5
 8008a6c:	5dc7      	ldrb	r7, [r0, r7]
 8008a6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a72:	462f      	mov	r7, r5
 8008a74:	42bb      	cmp	r3, r7
 8008a76:	460d      	mov	r5, r1
 8008a78:	d9f4      	bls.n	8008a64 <_printf_i+0x11c>
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	d10b      	bne.n	8008a96 <_printf_i+0x14e>
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	07df      	lsls	r7, r3, #31
 8008a82:	d508      	bpl.n	8008a96 <_printf_i+0x14e>
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	6861      	ldr	r1, [r4, #4]
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	bfde      	ittt	le
 8008a8c:	2330      	movle	r3, #48	; 0x30
 8008a8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a96:	1b92      	subs	r2, r2, r6
 8008a98:	6122      	str	r2, [r4, #16]
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	f8cd a000 	str.w	sl, [sp]
 8008aa4:	aa03      	add	r2, sp, #12
 8008aa6:	f7ff fedf 	bl	8008868 <_printf_common>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d14c      	bne.n	8008b48 <_printf_i+0x200>
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	b004      	add	sp, #16
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	4834      	ldr	r0, [pc, #208]	; (8008b8c <_printf_i+0x244>)
 8008aba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008abe:	680e      	ldr	r6, [r1, #0]
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ac6:	061f      	lsls	r7, r3, #24
 8008ac8:	600e      	str	r6, [r1, #0]
 8008aca:	d514      	bpl.n	8008af6 <_printf_i+0x1ae>
 8008acc:	07d9      	lsls	r1, r3, #31
 8008ace:	bf44      	itt	mi
 8008ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ad4:	6023      	strmi	r3, [r4, #0]
 8008ad6:	b91d      	cbnz	r5, 8008ae0 <_printf_i+0x198>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	f023 0320 	bic.w	r3, r3, #32
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	e7af      	b.n	8008a44 <_printf_i+0xfc>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	f043 0320 	orr.w	r3, r3, #32
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	2378      	movs	r3, #120	; 0x78
 8008aee:	4828      	ldr	r0, [pc, #160]	; (8008b90 <_printf_i+0x248>)
 8008af0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008af4:	e7e3      	b.n	8008abe <_printf_i+0x176>
 8008af6:	065e      	lsls	r6, r3, #25
 8008af8:	bf48      	it	mi
 8008afa:	b2ad      	uxthmi	r5, r5
 8008afc:	e7e6      	b.n	8008acc <_printf_i+0x184>
 8008afe:	4616      	mov	r6, r2
 8008b00:	e7bb      	b.n	8008a7a <_printf_i+0x132>
 8008b02:	680b      	ldr	r3, [r1, #0]
 8008b04:	6826      	ldr	r6, [r4, #0]
 8008b06:	1d1d      	adds	r5, r3, #4
 8008b08:	6960      	ldr	r0, [r4, #20]
 8008b0a:	600d      	str	r5, [r1, #0]
 8008b0c:	0635      	lsls	r5, r6, #24
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	d501      	bpl.n	8008b16 <_printf_i+0x1ce>
 8008b12:	6018      	str	r0, [r3, #0]
 8008b14:	e002      	b.n	8008b1c <_printf_i+0x1d4>
 8008b16:	0671      	lsls	r1, r6, #25
 8008b18:	d5fb      	bpl.n	8008b12 <_printf_i+0x1ca>
 8008b1a:	8018      	strh	r0, [r3, #0]
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4616      	mov	r6, r2
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	e7ba      	b.n	8008a9a <_printf_i+0x152>
 8008b24:	680b      	ldr	r3, [r1, #0]
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	600a      	str	r2, [r1, #0]
 8008b2a:	681e      	ldr	r6, [r3, #0]
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4630      	mov	r0, r6
 8008b30:	6862      	ldr	r2, [r4, #4]
 8008b32:	f000 f82f 	bl	8008b94 <memchr>
 8008b36:	b108      	cbz	r0, 8008b3c <_printf_i+0x1f4>
 8008b38:	1b80      	subs	r0, r0, r6
 8008b3a:	6060      	str	r0, [r4, #4]
 8008b3c:	6863      	ldr	r3, [r4, #4]
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	2300      	movs	r3, #0
 8008b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b46:	e7a8      	b.n	8008a9a <_printf_i+0x152>
 8008b48:	4632      	mov	r2, r6
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	47d0      	blx	sl
 8008b52:	3001      	adds	r0, #1
 8008b54:	d0ab      	beq.n	8008aae <_printf_i+0x166>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	079b      	lsls	r3, r3, #30
 8008b5a:	d413      	bmi.n	8008b84 <_printf_i+0x23c>
 8008b5c:	68e0      	ldr	r0, [r4, #12]
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	4298      	cmp	r0, r3
 8008b62:	bfb8      	it	lt
 8008b64:	4618      	movlt	r0, r3
 8008b66:	e7a4      	b.n	8008ab2 <_printf_i+0x16a>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	4632      	mov	r2, r6
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	4640      	mov	r0, r8
 8008b70:	47d0      	blx	sl
 8008b72:	3001      	adds	r0, #1
 8008b74:	d09b      	beq.n	8008aae <_printf_i+0x166>
 8008b76:	3501      	adds	r5, #1
 8008b78:	68e3      	ldr	r3, [r4, #12]
 8008b7a:	9903      	ldr	r1, [sp, #12]
 8008b7c:	1a5b      	subs	r3, r3, r1
 8008b7e:	42ab      	cmp	r3, r5
 8008b80:	dcf2      	bgt.n	8008b68 <_printf_i+0x220>
 8008b82:	e7eb      	b.n	8008b5c <_printf_i+0x214>
 8008b84:	2500      	movs	r5, #0
 8008b86:	f104 0619 	add.w	r6, r4, #25
 8008b8a:	e7f5      	b.n	8008b78 <_printf_i+0x230>
 8008b8c:	08009363 	.word	0x08009363
 8008b90:	08009374 	.word	0x08009374

08008b94 <memchr>:
 8008b94:	4603      	mov	r3, r0
 8008b96:	b510      	push	{r4, lr}
 8008b98:	b2c9      	uxtb	r1, r1
 8008b9a:	4402      	add	r2, r0
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	d101      	bne.n	8008ba6 <memchr+0x12>
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	e003      	b.n	8008bae <memchr+0x1a>
 8008ba6:	7804      	ldrb	r4, [r0, #0]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	428c      	cmp	r4, r1
 8008bac:	d1f6      	bne.n	8008b9c <memchr+0x8>
 8008bae:	bd10      	pop	{r4, pc}

08008bb0 <memcpy>:
 8008bb0:	440a      	add	r2, r1
 8008bb2:	4291      	cmp	r1, r2
 8008bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bb8:	d100      	bne.n	8008bbc <memcpy+0xc>
 8008bba:	4770      	bx	lr
 8008bbc:	b510      	push	{r4, lr}
 8008bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc8:	d1f9      	bne.n	8008bbe <memcpy+0xe>
 8008bca:	bd10      	pop	{r4, pc}

08008bcc <memmove>:
 8008bcc:	4288      	cmp	r0, r1
 8008bce:	b510      	push	{r4, lr}
 8008bd0:	eb01 0402 	add.w	r4, r1, r2
 8008bd4:	d902      	bls.n	8008bdc <memmove+0x10>
 8008bd6:	4284      	cmp	r4, r0
 8008bd8:	4623      	mov	r3, r4
 8008bda:	d807      	bhi.n	8008bec <memmove+0x20>
 8008bdc:	1e43      	subs	r3, r0, #1
 8008bde:	42a1      	cmp	r1, r4
 8008be0:	d008      	beq.n	8008bf4 <memmove+0x28>
 8008be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008be6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bea:	e7f8      	b.n	8008bde <memmove+0x12>
 8008bec:	4601      	mov	r1, r0
 8008bee:	4402      	add	r2, r0
 8008bf0:	428a      	cmp	r2, r1
 8008bf2:	d100      	bne.n	8008bf6 <memmove+0x2a>
 8008bf4:	bd10      	pop	{r4, pc}
 8008bf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bfe:	e7f7      	b.n	8008bf0 <memmove+0x24>

08008c00 <_free_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4605      	mov	r5, r0
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d043      	beq.n	8008c90 <_free_r+0x90>
 8008c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0c:	1f0c      	subs	r4, r1, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfb8      	it	lt
 8008c12:	18e4      	addlt	r4, r4, r3
 8008c14:	f000 f8d0 	bl	8008db8 <__malloc_lock>
 8008c18:	4a1e      	ldr	r2, [pc, #120]	; (8008c94 <_free_r+0x94>)
 8008c1a:	6813      	ldr	r3, [r2, #0]
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	b933      	cbnz	r3, 8008c2e <_free_r+0x2e>
 8008c20:	6063      	str	r3, [r4, #4]
 8008c22:	6014      	str	r4, [r2, #0]
 8008c24:	4628      	mov	r0, r5
 8008c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c2a:	f000 b8cb 	b.w	8008dc4 <__malloc_unlock>
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	d90a      	bls.n	8008c48 <_free_r+0x48>
 8008c32:	6821      	ldr	r1, [r4, #0]
 8008c34:	1862      	adds	r2, r4, r1
 8008c36:	4293      	cmp	r3, r2
 8008c38:	bf01      	itttt	eq
 8008c3a:	681a      	ldreq	r2, [r3, #0]
 8008c3c:	685b      	ldreq	r3, [r3, #4]
 8008c3e:	1852      	addeq	r2, r2, r1
 8008c40:	6022      	streq	r2, [r4, #0]
 8008c42:	6063      	str	r3, [r4, #4]
 8008c44:	6004      	str	r4, [r0, #0]
 8008c46:	e7ed      	b.n	8008c24 <_free_r+0x24>
 8008c48:	461a      	mov	r2, r3
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	b10b      	cbz	r3, 8008c52 <_free_r+0x52>
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	d9fa      	bls.n	8008c48 <_free_r+0x48>
 8008c52:	6811      	ldr	r1, [r2, #0]
 8008c54:	1850      	adds	r0, r2, r1
 8008c56:	42a0      	cmp	r0, r4
 8008c58:	d10b      	bne.n	8008c72 <_free_r+0x72>
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	4401      	add	r1, r0
 8008c5e:	1850      	adds	r0, r2, r1
 8008c60:	4283      	cmp	r3, r0
 8008c62:	6011      	str	r1, [r2, #0]
 8008c64:	d1de      	bne.n	8008c24 <_free_r+0x24>
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	4401      	add	r1, r0
 8008c6c:	6011      	str	r1, [r2, #0]
 8008c6e:	6053      	str	r3, [r2, #4]
 8008c70:	e7d8      	b.n	8008c24 <_free_r+0x24>
 8008c72:	d902      	bls.n	8008c7a <_free_r+0x7a>
 8008c74:	230c      	movs	r3, #12
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	e7d4      	b.n	8008c24 <_free_r+0x24>
 8008c7a:	6820      	ldr	r0, [r4, #0]
 8008c7c:	1821      	adds	r1, r4, r0
 8008c7e:	428b      	cmp	r3, r1
 8008c80:	bf01      	itttt	eq
 8008c82:	6819      	ldreq	r1, [r3, #0]
 8008c84:	685b      	ldreq	r3, [r3, #4]
 8008c86:	1809      	addeq	r1, r1, r0
 8008c88:	6021      	streq	r1, [r4, #0]
 8008c8a:	6063      	str	r3, [r4, #4]
 8008c8c:	6054      	str	r4, [r2, #4]
 8008c8e:	e7c9      	b.n	8008c24 <_free_r+0x24>
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	200000fc 	.word	0x200000fc

08008c98 <_malloc_r>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	1ccd      	adds	r5, r1, #3
 8008c9c:	f025 0503 	bic.w	r5, r5, #3
 8008ca0:	3508      	adds	r5, #8
 8008ca2:	2d0c      	cmp	r5, #12
 8008ca4:	bf38      	it	cc
 8008ca6:	250c      	movcc	r5, #12
 8008ca8:	2d00      	cmp	r5, #0
 8008caa:	4606      	mov	r6, r0
 8008cac:	db01      	blt.n	8008cb2 <_malloc_r+0x1a>
 8008cae:	42a9      	cmp	r1, r5
 8008cb0:	d903      	bls.n	8008cba <_malloc_r+0x22>
 8008cb2:	230c      	movs	r3, #12
 8008cb4:	6033      	str	r3, [r6, #0]
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cba:	f000 f87d 	bl	8008db8 <__malloc_lock>
 8008cbe:	4921      	ldr	r1, [pc, #132]	; (8008d44 <_malloc_r+0xac>)
 8008cc0:	680a      	ldr	r2, [r1, #0]
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	b99c      	cbnz	r4, 8008cee <_malloc_r+0x56>
 8008cc6:	4f20      	ldr	r7, [pc, #128]	; (8008d48 <_malloc_r+0xb0>)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	b923      	cbnz	r3, 8008cd6 <_malloc_r+0x3e>
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f000 f862 	bl	8008d98 <_sbrk_r>
 8008cd4:	6038      	str	r0, [r7, #0]
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 f85d 	bl	8008d98 <_sbrk_r>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d123      	bne.n	8008d2a <_malloc_r+0x92>
 8008ce2:	230c      	movs	r3, #12
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	6033      	str	r3, [r6, #0]
 8008ce8:	f000 f86c 	bl	8008dc4 <__malloc_unlock>
 8008cec:	e7e3      	b.n	8008cb6 <_malloc_r+0x1e>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	1b5b      	subs	r3, r3, r5
 8008cf2:	d417      	bmi.n	8008d24 <_malloc_r+0x8c>
 8008cf4:	2b0b      	cmp	r3, #11
 8008cf6:	d903      	bls.n	8008d00 <_malloc_r+0x68>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	441c      	add	r4, r3
 8008cfc:	6025      	str	r5, [r4, #0]
 8008cfe:	e004      	b.n	8008d0a <_malloc_r+0x72>
 8008d00:	6863      	ldr	r3, [r4, #4]
 8008d02:	42a2      	cmp	r2, r4
 8008d04:	bf0c      	ite	eq
 8008d06:	600b      	streq	r3, [r1, #0]
 8008d08:	6053      	strne	r3, [r2, #4]
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f000 f85a 	bl	8008dc4 <__malloc_unlock>
 8008d10:	f104 000b 	add.w	r0, r4, #11
 8008d14:	1d23      	adds	r3, r4, #4
 8008d16:	f020 0007 	bic.w	r0, r0, #7
 8008d1a:	1ac2      	subs	r2, r0, r3
 8008d1c:	d0cc      	beq.n	8008cb8 <_malloc_r+0x20>
 8008d1e:	1a1b      	subs	r3, r3, r0
 8008d20:	50a3      	str	r3, [r4, r2]
 8008d22:	e7c9      	b.n	8008cb8 <_malloc_r+0x20>
 8008d24:	4622      	mov	r2, r4
 8008d26:	6864      	ldr	r4, [r4, #4]
 8008d28:	e7cc      	b.n	8008cc4 <_malloc_r+0x2c>
 8008d2a:	1cc4      	adds	r4, r0, #3
 8008d2c:	f024 0403 	bic.w	r4, r4, #3
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d0e3      	beq.n	8008cfc <_malloc_r+0x64>
 8008d34:	1a21      	subs	r1, r4, r0
 8008d36:	4630      	mov	r0, r6
 8008d38:	f000 f82e 	bl	8008d98 <_sbrk_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d1dd      	bne.n	8008cfc <_malloc_r+0x64>
 8008d40:	e7cf      	b.n	8008ce2 <_malloc_r+0x4a>
 8008d42:	bf00      	nop
 8008d44:	200000fc 	.word	0x200000fc
 8008d48:	20000100 	.word	0x20000100

08008d4c <_realloc_r>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	4607      	mov	r7, r0
 8008d50:	4614      	mov	r4, r2
 8008d52:	460e      	mov	r6, r1
 8008d54:	b921      	cbnz	r1, 8008d60 <_realloc_r+0x14>
 8008d56:	4611      	mov	r1, r2
 8008d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d5c:	f7ff bf9c 	b.w	8008c98 <_malloc_r>
 8008d60:	b922      	cbnz	r2, 8008d6c <_realloc_r+0x20>
 8008d62:	f7ff ff4d 	bl	8008c00 <_free_r>
 8008d66:	4625      	mov	r5, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d6c:	f000 f830 	bl	8008dd0 <_malloc_usable_size_r>
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d20f      	bcs.n	8008d94 <_realloc_r+0x48>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4638      	mov	r0, r7
 8008d78:	f7ff ff8e 	bl	8008c98 <_malloc_r>
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0f2      	beq.n	8008d68 <_realloc_r+0x1c>
 8008d82:	4631      	mov	r1, r6
 8008d84:	4622      	mov	r2, r4
 8008d86:	f7ff ff13 	bl	8008bb0 <memcpy>
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff ff37 	bl	8008c00 <_free_r>
 8008d92:	e7e9      	b.n	8008d68 <_realloc_r+0x1c>
 8008d94:	4635      	mov	r5, r6
 8008d96:	e7e7      	b.n	8008d68 <_realloc_r+0x1c>

08008d98 <_sbrk_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4d05      	ldr	r5, [pc, #20]	; (8008db4 <_sbrk_r+0x1c>)
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	602b      	str	r3, [r5, #0]
 8008da4:	f7fb fbee 	bl	8004584 <_sbrk>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_sbrk_r+0x1a>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_sbrk_r+0x1a>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	200026ec 	.word	0x200026ec

08008db8 <__malloc_lock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__malloc_lock+0x8>)
 8008dba:	f000 b811 	b.w	8008de0 <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	200026f4 	.word	0x200026f4

08008dc4 <__malloc_unlock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__malloc_unlock+0x8>)
 8008dc6:	f000 b80c 	b.w	8008de2 <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	200026f4 	.word	0x200026f4

08008dd0 <_malloc_usable_size_r>:
 8008dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd4:	1f18      	subs	r0, r3, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bfbc      	itt	lt
 8008dda:	580b      	ldrlt	r3, [r1, r0]
 8008ddc:	18c0      	addlt	r0, r0, r3
 8008dde:	4770      	bx	lr

08008de0 <__retarget_lock_acquire_recursive>:
 8008de0:	4770      	bx	lr

08008de2 <__retarget_lock_release_recursive>:
 8008de2:	4770      	bx	lr

08008de4 <round>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008dea:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8008dee:	2c13      	cmp	r4, #19
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4606      	mov	r6, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	dc19      	bgt.n	8008e2e <round+0x4a>
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	da09      	bge.n	8008e12 <round+0x2e>
 8008dfe:	3401      	adds	r4, #1
 8008e00:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8008e04:	d103      	bne.n	8008e0e <round+0x2a>
 8008e06:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008e0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e0e:	2200      	movs	r2, #0
 8008e10:	e02a      	b.n	8008e68 <round+0x84>
 8008e12:	4917      	ldr	r1, [pc, #92]	; (8008e70 <round+0x8c>)
 8008e14:	4121      	asrs	r1, r4
 8008e16:	ea03 0001 	and.w	r0, r3, r1
 8008e1a:	4302      	orrs	r2, r0
 8008e1c:	d010      	beq.n	8008e40 <round+0x5c>
 8008e1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008e22:	fa42 f404 	asr.w	r4, r2, r4
 8008e26:	4423      	add	r3, r4
 8008e28:	ea23 0301 	bic.w	r3, r3, r1
 8008e2c:	e7ef      	b.n	8008e0e <round+0x2a>
 8008e2e:	2c33      	cmp	r4, #51	; 0x33
 8008e30:	dd09      	ble.n	8008e46 <round+0x62>
 8008e32:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008e36:	d103      	bne.n	8008e40 <round+0x5c>
 8008e38:	f7f7 f98e 	bl	8000158 <__adddf3>
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	4630      	mov	r0, r6
 8008e42:	4629      	mov	r1, r5
 8008e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008e4e:	40f8      	lsrs	r0, r7
 8008e50:	4202      	tst	r2, r0
 8008e52:	d0f5      	beq.n	8008e40 <round+0x5c>
 8008e54:	2101      	movs	r1, #1
 8008e56:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8008e5a:	fa01 f404 	lsl.w	r4, r1, r4
 8008e5e:	1912      	adds	r2, r2, r4
 8008e60:	bf28      	it	cs
 8008e62:	185b      	addcs	r3, r3, r1
 8008e64:	ea22 0200 	bic.w	r2, r2, r0
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	e7e6      	b.n	8008e3c <round+0x58>
 8008e6e:	bf00      	nop
 8008e70:	000fffff 	.word	0x000fffff

08008e74 <_init>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr

08008e80 <_fini>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr
