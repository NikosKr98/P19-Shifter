
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080044f8  080044f8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f8  080044f8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  20000024  08004524  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08004524  0002082c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bb1  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002841  00000000  00000000  00030c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00033488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c54  00000000  00000000  00034460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001972c  00000000  00000000  000350b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012666  00000000  00000000  0004e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000922d5  00000000  00000000  00060e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041dc  00000000  00000000  000f311c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000f72f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080044b4 	.word	0x080044b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080044b4 	.word	0x080044b4

0800014c <InitApplication>:

InputStruct myLocalInputs;

States NCurrentState, NPreviousState;

void InitApplication(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	IDLE_Entry();
 8000150:	f000 f82e 	bl	80001b0 <IDLE_Entry>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <RunApplication>:



void RunApplication(InputStruct *input, OutputStruct *output){
 8000158:	b580      	push	{r7, lr}
 800015a:	b082      	sub	sp, #8
 800015c:	af00      	add	r7, sp, #0
 800015e:	6078      	str	r0, [r7, #4]
 8000160:	6039      	str	r1, [r7, #0]
	//CLUTCH REACHED THE THRESHOLD

//	app->actual_gear = ;

	// SHIFTER STATE MACHINE
	switch (NCurrentState) {
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <RunApplication+0x54>)
 8000164:	781b      	ldrb	r3, [r3, #0]
 8000166:	2b04      	cmp	r3, #4
 8000168:	d81b      	bhi.n	80001a2 <RunApplication+0x4a>
 800016a:	a201      	add	r2, pc, #4	; (adr r2, 8000170 <RunApplication+0x18>)
 800016c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000170:	08000185 	.word	0x08000185
 8000174:	0800018b 	.word	0x0800018b
 8000178:	08000191 	.word	0x08000191
 800017c:	08000197 	.word	0x08000197
 8000180:	0800019d 	.word	0x0800019d

	case SHIFTER_IDLE:
		IDLE_Run();
 8000184:	f000 f826 	bl	80001d4 <IDLE_Run>
		break;
 8000188:	e00b      	b.n	80001a2 <RunApplication+0x4a>
	case SHIFTER_PRESHIFT:
		PRESHIFT_Run();
 800018a:	f000 f829 	bl	80001e0 <PRESHIFT_Run>
		break;
 800018e:	e008      	b.n	80001a2 <RunApplication+0x4a>
	case SHIFTER_SHIFTING:
		SHIFTING_Run();
 8000190:	f000 f82c 	bl	80001ec <SHIFTING_Run>
		break;
 8000194:	e005      	b.n	80001a2 <RunApplication+0x4a>
	case SHIFTER_POSTSHIFT:
		POSTSHIFT_Run();
 8000196:	f000 f82f 	bl	80001f8 <POSTSHIFT_Run>
		break;
 800019a:	e002      	b.n	80001a2 <RunApplication+0x4a>
	case SHIFTER_ERROR:
		ERROR_Run();
 800019c:	f000 f832 	bl	8000204 <ERROR_Run>
		break;
 80001a0:	bf00      	nop

	// CLUTCH CONTROL



}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000040 	.word	0x20000040

080001b0 <IDLE_Entry>:


void IDLE_Entry(void) {
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80001b4:	4b05      	ldr	r3, [pc, #20]	; (80001cc <IDLE_Entry+0x1c>)
 80001b6:	781a      	ldrb	r2, [r3, #0]
 80001b8:	4b05      	ldr	r3, [pc, #20]	; (80001d0 <IDLE_Entry+0x20>)
 80001ba:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTER_IDLE;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <IDLE_Entry+0x1c>)
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000040 	.word	0x20000040
 80001d0:	20000041 	.word	0x20000041

080001d4 <IDLE_Run>:
void IDLE_Run(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

//	if(myInput.BDownShiftRequest || myInput.BUpShiftRequest) {
//		IDLE_Exit();
//		PRESHIFT_Entry();
//	}
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <PRESHIFT_Run>:

void PRESHIFT_Entry(void) {
	NPreviousState = NCurrentState;
	NCurrentState = SHIFTER_PRESHIFT;
}
void PRESHIFT_Run(void) {
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0

}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <SHIFTING_Run>:

void SHIFTING_Entry(void) {
	NPreviousState = NCurrentState;
	NCurrentState = SHIFTER_SHIFTING;
}
void SHIFTING_Run(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0

}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <POSTSHIFT_Run>:

void POSTSHIFT_Entry(void) {
	NPreviousState = NCurrentState;
	NCurrentState = SHIFTER_POSTSHIFT;
}
void POSTSHIFT_Run(void) {
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0

}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr

08000204 <ERROR_Run>:

void ERROR_Entry(void) {
	NPreviousState = NCurrentState;
	NCurrentState = SHIFTER_ERROR;
}
void ERROR_Run(void) {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side);

void ReadInputs(InputStruct *input){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

	// NGear Conditioning

		// averaging
		NGearRawFiltered = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide);
 8000218:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <ReadInputs+0x74>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b2db      	uxtb	r3, r3
 800021e:	461a      	mov	r2, r3
 8000220:	f240 1177 	movw	r1, #375	; 0x177
 8000224:	4818      	ldr	r0, [pc, #96]	; (8000288 <ReadInputs+0x78>)
 8000226:	f000 f8bf 	bl	80003a8 <MyHalfBufferAverage>
 800022a:	4603      	mov	r3, r0
 800022c:	461a      	mov	r2, r3
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <ReadInputs+0x7c>)
 8000230:	801a      	strh	r2, [r3, #0]

		// mapping
		input->NGear = calculateActualNGear(NGearRawFiltered);
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <ReadInputs+0x7c>)
 8000234:	881b      	ldrh	r3, [r3, #0]
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f88e 	bl	8000358 <calculateActualNGear>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	701a      	strb	r2, [r3, #0]
	// PCB Supply Voltage Conditioning
//	input->VSupply = (float)ADC_VALUE * 3.3 / 4095 * (Voltage divider gain)
	// TODO: set the analog input and decide filtering (or not)

	// transfer CAN data into myInputs struct
	input->BUpShiftRequest = BUpShiftRequestCAN;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <ReadInputs+0x80>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	705a      	strb	r2, [r3, #1]
	input->BDownShiftRequest = BDownShiftRequestCAN;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <ReadInputs+0x84>)
 800024e:	781a      	ldrb	r2, [r3, #0]
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	709a      	strb	r2, [r3, #2]
	input->BLaunchRequest = BLaunchRequestCAN;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <ReadInputs+0x88>)
 8000256:	781a      	ldrb	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	70da      	strb	r2, [r3, #3]
	input->rClutchPaddle = rClutchPaddleCAN;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <ReadInputs+0x8c>)
 800025e:	f993 2000 	ldrsb.w	r2, [r3]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	711a      	strb	r2, [r3, #4]
	input->nEngine = nEngineCAN;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <ReadInputs+0x90>)
 8000268:	881b      	ldrh	r3, [r3, #0]
 800026a:	b21a      	sxth	r2, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	80da      	strh	r2, [r3, #6]

	input->NCANErrors = NCANErrorCount;	// update can error count if any
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <ReadInputs+0x94>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	721a      	strb	r2, [r3, #8]

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000004e 	.word	0x2000004e
 8000288:	2000020c 	.word	0x2000020c
 800028c:	2000004c 	.word	0x2000004c
 8000290:	20000042 	.word	0x20000042
 8000294:	20000043 	.word	0x20000043
 8000298:	20000044 	.word	0x20000044
 800029c:	20000045 	.word	0x20000045
 80002a0:	20000046 	.word	0x20000046
 80002a4:	20000048 	.word	0x20000048

080002a8 <InitInputs>:

void InitInputs(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 80002ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 80002b0:	4902      	ldr	r1, [pc, #8]	; (80002bc <InitInputs+0x14>)
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <InitInputs+0x18>)
 80002b4:	f001 f936 	bl	8001524 <HAL_ADC_Start_DMA>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	2000020c 	.word	0x2000020c
 80002c0:	20000050 	.word	0x20000050

080002c4 <CAN_RX>:


void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08c      	sub	sp, #48	; 0x30
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	f107 0214 	add.w	r2, r7, #20
 80002d6:	6839      	ldr	r1, [r7, #0]
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f001 fee3 	bl	80020a4 <HAL_CAN_GetRxMessage>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d007      	beq.n	80002f4 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <CAN_RX+0x7c>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	3301      	adds	r3, #1
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b14      	ldr	r3, [pc, #80]	; (8000340 <CAN_RX+0x7c>)
 80002f0:	801a      	strh	r2, [r3, #0]
 80002f2:	e021      	b.n	8000338 <CAN_RX+0x74>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80002fa:	d004      	beq.n	8000306 <CAN_RX+0x42>
 80002fc:	f240 3211 	movw	r2, #785	; 0x311
 8000300:	4293      	cmp	r3, r2
 8000302:	d00e      	beq.n	8000322 <CAN_RX+0x5e>
		 nEngineCAN = RxBuffer[0] << 8 | RxBuffer[1];

		 break;

	 default:
		 break;
 8000304:	e018      	b.n	8000338 <CAN_RX+0x74>
		BUpShiftRequestCAN = RxBuffer[0];
 8000306:	7b3a      	ldrb	r2, [r7, #12]
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <CAN_RX+0x80>)
 800030a:	701a      	strb	r2, [r3, #0]
		BDownShiftRequestCAN = RxBuffer[1];
 800030c:	7b7a      	ldrb	r2, [r7, #13]
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <CAN_RX+0x84>)
 8000310:	701a      	strb	r2, [r3, #0]
		BLaunchRequestCAN = RxBuffer[2];
 8000312:	7bba      	ldrb	r2, [r7, #14]
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <CAN_RX+0x88>)
 8000316:	701a      	strb	r2, [r3, #0]
		rClutchPaddleCAN = RxBuffer[3];
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	b25a      	sxtb	r2, r3
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <CAN_RX+0x8c>)
 800031e:	701a      	strb	r2, [r3, #0]
		break;
 8000320:	e00a      	b.n	8000338 <CAN_RX+0x74>
		 nEngineCAN = RxBuffer[0] << 8 | RxBuffer[1];
 8000322:	7b3b      	ldrb	r3, [r7, #12]
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	b21a      	sxth	r2, r3
 8000328:	7b7b      	ldrb	r3, [r7, #13]
 800032a:	b21b      	sxth	r3, r3
 800032c:	4313      	orrs	r3, r2
 800032e:	b21b      	sxth	r3, r3
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <CAN_RX+0x90>)
 8000334:	801a      	strh	r2, [r3, #0]
		 break;
 8000336:	bf00      	nop
	 }
}
 8000338:	3730      	adds	r7, #48	; 0x30
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000004a 	.word	0x2000004a
 8000344:	20000042 	.word	0x20000042
 8000348:	20000043 	.word	0x20000043
 800034c:	20000044 	.word	0x20000044
 8000350:	20000045 	.word	0x20000045
 8000354:	20000046 	.word	0x20000046

08000358 <calculateActualNGear>:


uint8_t calculateActualNGear(uint16_t NGearRaw) {
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	80fb      	strh	r3, [r7, #6]

    for (uint8_t gear = 0; gear < TOTAL_GEARS; ++gear) {
 8000362:	2300      	movs	r3, #0
 8000364:	73fb      	strb	r3, [r7, #15]
 8000366:	e013      	b.n	8000390 <calculateActualNGear+0x38>
        if (NGearRaw >= NGearMap[gear][0] && NGearRaw <= NGearMap[gear][1]) {
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <calculateActualNGear+0x4c>)
 800036c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000370:	88fa      	ldrh	r2, [r7, #6]
 8000372:	429a      	cmp	r2, r3
 8000374:	d309      	bcc.n	800038a <calculateActualNGear+0x32>
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <calculateActualNGear+0x4c>)
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	4413      	add	r3, r2
 800037e:	885b      	ldrh	r3, [r3, #2]
 8000380:	88fa      	ldrh	r2, [r7, #6]
 8000382:	429a      	cmp	r2, r3
 8000384:	d801      	bhi.n	800038a <calculateActualNGear+0x32>
            return gear;
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	e006      	b.n	8000398 <calculateActualNGear+0x40>
    for (uint8_t gear = 0; gear < TOTAL_GEARS; ++gear) {
 800038a:	7bfb      	ldrb	r3, [r7, #15]
 800038c:	3301      	adds	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	2b05      	cmp	r3, #5
 8000394:	d9e8      	bls.n	8000368 <calculateActualNGear+0x10>
        }
    }
    return 255; // If no match found, return 255!
 8000396:	23ff      	movs	r3, #255	; 0xff
}
 8000398:	4618      	mov	r0, r3
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000

080003a8 <MyHalfBufferAverage>:


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side) {
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
 80003b4:	4613      	mov	r3, r2
 80003b6:	707b      	strb	r3, [r7, #1]

	uint32_t Accumulator=0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
	uint16_t Offset = (side == 1 ? halfsize : 0);
 80003bc:	787b      	ldrb	r3, [r7, #1]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d101      	bne.n	80003c6 <MyHalfBufferAverage+0x1e>
 80003c2:	887b      	ldrh	r3, [r7, #2]
 80003c4:	e000      	b.n	80003c8 <MyHalfBufferAverage+0x20>
 80003c6:	2300      	movs	r3, #0
 80003c8:	813b      	strh	r3, [r7, #8]

	for(uint16_t i=0; i<halfsize; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	817b      	strh	r3, [r7, #10]
 80003ce:	e00d      	b.n	80003ec <MyHalfBufferAverage+0x44>
		Accumulator += buffer[i + Offset];
 80003d0:	897a      	ldrh	r2, [r7, #10]
 80003d2:	893b      	ldrh	r3, [r7, #8]
 80003d4:	4413      	add	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	461a      	mov	r2, r3
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4413      	add	r3, r2
 80003e4:	60fb      	str	r3, [r7, #12]
	for(uint16_t i=0; i<halfsize; i++) {
 80003e6:	897b      	ldrh	r3, [r7, #10]
 80003e8:	3301      	adds	r3, #1
 80003ea:	817b      	strh	r3, [r7, #10]
 80003ec:	897a      	ldrh	r2, [r7, #10]
 80003ee:	887b      	ldrh	r3, [r7, #2]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d3ed      	bcc.n	80003d0 <MyHalfBufferAverage+0x28>
	}

	Accumulator /= halfsize;
 80003f4:	887b      	ldrh	r3, [r7, #2]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003fc:	60fb      	str	r3, [r7, #12]
	return (uint16_t)Accumulator;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	b29b      	uxth	r3, r3

}
 8000402:	4618      	mov	r0, r3
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr

0800040c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8000414:	2100      	movs	r1, #0
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff ff54 	bl	80002c4 <CAN_RX>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 800042c:	2101      	movs	r1, #1
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f7ff ff48 	bl	80002c4 <CAN_RX>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <HAL_CAN_ErrorCallback+0x20>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	b2db      	uxtb	r3, r3
 800044a:	3301      	adds	r3, #1
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b03      	ldr	r3, [pc, #12]	; (800045c <HAL_CAN_ErrorCallback+0x20>)
 8000450:	701a      	strb	r2, [r3, #0]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	20000048 	.word	0x20000048

08000460 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a08      	ldr	r2, [pc, #32]	; (800048c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d107      	bne.n	8000480 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	f083 0301 	eor.w	r3, r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b04      	ldr	r3, [pc, #16]	; (8000490 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800047e:	701a      	strb	r2, [r3, #0]
	}
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000050 	.word	0x20000050
 8000490:	2000004e 	.word	0x2000004e

08000494 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000498:	f3bf 8f4f 	dsb	sy
}
 800049c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <__NVIC_SystemReset+0x24>)
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004a6:	4904      	ldr	r1, [pc, #16]	; (80004b8 <__NVIC_SystemReset+0x24>)
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <__NVIC_SystemReset+0x28>)
 80004aa:	4313      	orrs	r3, r2
 80004ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ae:	f3bf 8f4f 	dsb	sy
}
 80004b2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <__NVIC_SystemReset+0x20>
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	05fa0004 	.word	0x05fa0004

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fed0 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f83a 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 faee 	bl	8000aac <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 face 	bl	8000a70 <MX_DMA_Init>
  MX_TIM3_Init();
 80004d4:	f000 fa54 	bl	8000980 <MX_TIM3_Init>
  MX_ADC1_Init();
 80004d8:	f000 f88e 	bl	80005f8 <MX_ADC1_Init>
  MX_CAN_Init();
 80004dc:	f000 f8ca 	bl	8000674 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80004e0:	f000 fa9c 	bl	8000a1c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80004e4:	f000 f9fe 	bl	80008e4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80004e8:	f000 f9ac 	bl	8000844 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);		// general 1MHz timer for timing
 80004ec:	480f      	ldr	r0, [pc, #60]	; (800052c <main+0x6c>)
 80004ee:	f003 fadf 	bl	8003ab0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 80004f2:	480f      	ldr	r0, [pc, #60]	; (8000530 <main+0x70>)
 80004f4:	f003 fb26 	bl	8003b44 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start(&htim2);		// general timer for PWM use


  InitInputs();
 80004f8:	f7ff fed6 	bl	80002a8 <InitInputs>
  InitApplication();
 80004fc:	f7ff fe26 	bl	800014c <InitApplication>
  InitOutputs();
 8000500:	f000 fb61 	bl	8000bc6 <InitOutputs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <main+0x74>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0fa      	beq.n	8000504 <main+0x44>
		  BCycleTimerFlag = 0;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <main+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&myInput);
 8000514:	4808      	ldr	r0, [pc, #32]	; (8000538 <main+0x78>)
 8000516:	f7ff fe7b 	bl	8000210 <ReadInputs>
		  RunApplication(&myInput,&myOutput);
 800051a:	4908      	ldr	r1, [pc, #32]	; (800053c <main+0x7c>)
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x78>)
 800051e:	f7ff fe1b 	bl	8000158 <RunApplication>
		  WriteOutputs(&myOutput);
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x7c>)
 8000524:	f000 fb56 	bl	8000bd4 <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8000528:	e7ec      	b.n	8000504 <main+0x44>
 800052a:	bf00      	nop
 800052c:	200000ec 	.word	0x200000ec
 8000530:	2000017c 	.word	0x2000017c
 8000534:	200007e8 	.word	0x200007e8
 8000538:	200007ec 	.word	0x200007ec
 800053c:	200007fc 	.word	0x200007fc

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	2228      	movs	r2, #40	; 0x28
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 ff84 	bl	800445c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fd74 	bl	8003084 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a2:	f000 fb07 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2102      	movs	r1, #2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 ffe0 	bl	8003588 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005ce:	f000 faf1 	bl	8000bb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005d2:	2302      	movs	r3, #2
 80005d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80005d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f960 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ea:	f000 fae3 	bl	8000bb4 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_ADC1_Init+0x74>)
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <MX_ADC1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_ADC1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_ADC1_Init+0x74>)
 8000616:	2201      	movs	r2, #1
 8000618:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_ADC1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_ADC1_Init+0x74>)
 8000622:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000626:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_ADC1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_ADC1_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000634:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_ADC1_Init+0x74>)
 8000636:	f000 fe9d 	bl	8001374 <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 fab8 	bl	8000bb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000644:	2301      	movs	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000648:	2301      	movs	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800064c:	2307      	movs	r3, #7
 800064e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_ADC1_Init+0x74>)
 8000656:	f001 f855 	bl	8001704 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000660:	f000 faa8 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000050 	.word	0x20000050
 8000670:	40012400 	.word	0x40012400

08000674 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0a8      	sub	sp, #160	; 0xa0
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800067a:	4b70      	ldr	r3, [pc, #448]	; (800083c <MX_CAN_Init+0x1c8>)
 800067c:	4a70      	ldr	r2, [pc, #448]	; (8000840 <MX_CAN_Init+0x1cc>)
 800067e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000680:	4b6e      	ldr	r3, [pc, #440]	; (800083c <MX_CAN_Init+0x1c8>)
 8000682:	2204      	movs	r2, #4
 8000684:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000686:	4b6d      	ldr	r3, [pc, #436]	; (800083c <MX_CAN_Init+0x1c8>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800068c:	4b6b      	ldr	r3, [pc, #428]	; (800083c <MX_CAN_Init+0x1c8>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000692:	4b6a      	ldr	r3, [pc, #424]	; (800083c <MX_CAN_Init+0x1c8>)
 8000694:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000698:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800069a:	4b68      	ldr	r3, [pc, #416]	; (800083c <MX_CAN_Init+0x1c8>)
 800069c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006a2:	4b66      	ldr	r3, [pc, #408]	; (800083c <MX_CAN_Init+0x1c8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80006a8:	4b64      	ldr	r3, [pc, #400]	; (800083c <MX_CAN_Init+0x1c8>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006ae:	4b63      	ldr	r3, [pc, #396]	; (800083c <MX_CAN_Init+0x1c8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80006b4:	4b61      	ldr	r3, [pc, #388]	; (800083c <MX_CAN_Init+0x1c8>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <MX_CAN_Init+0x1c8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006c0:	4b5e      	ldr	r3, [pc, #376]	; (800083c <MX_CAN_Init+0x1c8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <MX_CAN_Init+0x1c8>)
 80006c8:	f001 fa15 	bl	8001af6 <HAL_CAN_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80006d2:	f000 fa6f 	bl	8000bb4 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = STEERING_RX_ID << 5 ;
 80006d6:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80006da:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 80006e0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80006e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000706:	2301      	movs	r3, #1
 8000708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 800070c:	2301      	movs	r3, #1
 800070e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8000712:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000716:	4619      	mov	r1, r3
 8000718:	4848      	ldr	r0, [pc, #288]	; (800083c <MX_CAN_Init+0x1c8>)
 800071a:	f001 fae7 	bl	8001cec <HAL_CAN_ConfigFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8000724:	f000 fa46 	bl	8000bb4 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = STEERING_RX_ID << 5 ;
 8000728:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8000732:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000736:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800073c:	2301      	movs	r3, #1
 800073e:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 8000748:	2300      	movs	r3, #0
 800074a:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 800074c:	2301      	movs	r3, #1
 800074e:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8000750:	2301      	movs	r3, #1
 8000752:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8000754:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000758:	4619      	mov	r1, r3
 800075a:	4838      	ldr	r0, [pc, #224]	; (800083c <MX_CAN_Init+0x1c8>)
 800075c:	f001 fac6 	bl	8001cec <HAL_CAN_ConfigFilter>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_CAN_Init+0xf6>
 	  Error_Handler();
 8000766:	f000 fa25 	bl	8000bb4 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 800076a:	f246 2320 	movw	r3, #25120	; 0x6220
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8000774:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800077e:	2300      	movs	r3, #0
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 800078a:	2300      	movs	r3, #0
 800078c:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 800078e:	2301      	movs	r3, #1
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 8000792:	2301      	movs	r3, #1
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8000796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079a:	4619      	mov	r1, r3
 800079c:	4827      	ldr	r0, [pc, #156]	; (800083c <MX_CAN_Init+0x1c8>)
 800079e:	f001 faa5 	bl	8001cec <HAL_CAN_ConfigFilter>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_CAN_Init+0x138>
 	  Error_Handler();
 80007a8:	f000 fa04 	bl	8000bb4 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 80007ac:	f246 2320 	movw	r3, #25120	; 0x6220
 80007b0:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 80007b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80007ba:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 80007c4:	2303      	movs	r3, #3
 80007c6:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4817      	ldr	r0, [pc, #92]	; (800083c <MX_CAN_Init+0x1c8>)
 80007de:	f001 fa85 	bl	8001cec <HAL_CAN_ConfigFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN_Init+0x178>
 	  Error_Handler();
 80007e8:	f000 f9e4 	bl	8000bb4 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80007ec:	2102      	movs	r1, #2
 80007ee:	4813      	ldr	r0, [pc, #76]	; (800083c <MX_CAN_Init+0x1c8>)
 80007f0:	f001 fd79 	bl	80022e6 <HAL_CAN_ActivateNotification>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_CAN_Init+0x18a>
	   Error_Handler();
 80007fa:	f000 f9db 	bl	8000bb4 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 80007fe:	2110      	movs	r1, #16
 8000800:	480e      	ldr	r0, [pc, #56]	; (800083c <MX_CAN_Init+0x1c8>)
 8000802:	f001 fd70 	bl	80022e6 <HAL_CAN_ActivateNotification>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_CAN_Init+0x19c>
	   Error_Handler();
 800080c:	f000 f9d2 	bl	8000bb4 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8000810:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_CAN_Init+0x1c8>)
 8000816:	f001 fd66 	bl	80022e6 <HAL_CAN_ActivateNotification>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8000820:	f000 f9c8 	bl	8000bb4 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_CAN_Init+0x1c8>)
 8000826:	f001 fb2a 	bl	8001e7e <HAL_CAN_Start>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8000830:	f000 f9c0 	bl	8000bb4 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	37a0      	adds	r7, #160	; 0xa0
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000c4 	.word	0x200000c4
 8000840:	40006400 	.word	0x40006400

08000844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_TIM1_Init+0x98>)
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <MX_TIM1_Init+0x9c>)
 8000864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_TIM1_Init+0x98>)
 8000868:	2247      	movs	r2, #71	; 0x47
 800086a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_TIM1_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_TIM1_Init+0x98>)
 8000874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_TIM1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_TIM1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_TIM1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <MX_TIM1_Init+0x98>)
 800088e:	f003 f8bf 	bl	8003a10 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f98c 	bl	8000bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_TIM1_Init+0x98>)
 80008aa:	f003 faa5 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008b4:	f000 f97e 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c0:	463b      	mov	r3, r7
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_TIM1_Init+0x98>)
 80008c6:	f003 fc7b 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008d0:	f000 f970 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000ec 	.word	0x200000ec
 80008e0:	40012c00 	.word	0x40012c00

080008e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_TIM2_Init+0x98>)
 8000902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_TIM2_Init+0x98>)
 800090a:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800090e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_TIM2_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_TIM2_Init+0x98>)
 8000918:	f240 32e7 	movw	r2, #999	; 0x3e7
 800091c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_TIM2_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM2_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <MX_TIM2_Init+0x98>)
 800092c:	f003 f870 	bl	8003a10 <HAL_TIM_Base_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000936:	f000 f93d 	bl	8000bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_TIM2_Init+0x98>)
 8000948:	f003 fa56 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000952:	f000 f92f 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_TIM2_Init+0x98>)
 8000964:	f003 fc2c 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800096e:	f000 f921 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000134 	.word	0x20000134

08000980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_TIM3_Init+0x94>)
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <MX_TIM3_Init+0x98>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009a4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009b2:	2263      	movs	r2, #99	; 0x63
 80009b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009c4:	f003 f824 	bl	8003a10 <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f8f1 	bl	8000bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009e0:	f003 fa0a 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f8e3 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_TIM3_Init+0x94>)
 80009fc:	f003 fbe0 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a06:	f000 f8d5 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000017c 	.word	0x2000017c
 8000a18:	40000400 	.word	0x40000400

08000a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART1_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f003 fc24 	bl	80042a0 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f8a9 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200001c4 	.word	0x200001c4
 8000a6c:	40013800 	.word	0x40013800

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_DMA_Init+0x38>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <MX_DMA_Init+0x38>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_DMA_Init+0x38>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	200b      	movs	r0, #11
 8000a94:	f001 ff35 	bl	8002902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f001 ff4e 	bl	800293a <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	4b2f      	ldr	r3, [pc, #188]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a2e      	ldr	r2, [pc, #184]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000ade:	f043 0320 	orr.w	r3, r3, #32
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0320 	and.w	r3, r3, #32
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000af6:	f043 0304 	orr.w	r3, r3, #4
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_GPIO_Init+0xd4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <MX_GPIO_Init+0xd8>)
 8000b10:	f002 faa0 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VCC_Pin|DOWN_PORT_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2141      	movs	r1, #65	; 0x41
 8000b18:	481b      	ldr	r0, [pc, #108]	; (8000b88 <MX_GPIO_Init+0xdc>)
 8000b1a:	f002 fa9b 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UP_PORT_GPIO_Port, UP_PORT_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	4819      	ldr	r0, [pc, #100]	; (8000b88 <MX_GPIO_Init+0xdc>)
 8000b24:	f002 fa96 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <MX_GPIO_Init+0xd8>)
 8000b42:	f002 f903 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_Pin DOWN_PORT_Pin UP_PORT_Pin */
  GPIO_InitStruct.Pin = VCC_Pin|DOWN_PORT_Pin|UP_PORT_Pin;
 8000b46:	23c1      	movs	r3, #193	; 0xc1
 8000b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <MX_GPIO_Init+0xdc>)
 8000b5e:	f002 f8f5 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b62:	2302      	movs	r3, #2
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b66:	2303      	movs	r3, #3
 8000b68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_GPIO_Init+0xdc>)
 8000b72:	f002 f8eb 	bl	8002d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010800 	.word	0x40010800

08000b8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d102      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	2000017c 	.word	0x2000017c
 8000bb0:	200007e8 	.word	0x200007e8

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8000bbc:	20c8      	movs	r0, #200	; 0xc8
 8000bbe:	f000 fbb5 	bl	800132c <HAL_Delay>
	  NVIC_SystemReset();
 8000bc2:	f7ff fc67 	bl	8000494 <__NVIC_SystemReset>

08000bc6 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
	...

08000bd4 <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

	end_of_shift(output);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f919 	bl	8000e14 <end_of_shift>


	if(output->up_button_out){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7a1b      	ldrb	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d044      	beq.n	8000c74 <WriteOutputs+0xa0>
		output->target_gear++;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	b25a      	sxtb	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	705a      	strb	r2, [r3, #1]

		if(output->target_gear!=output->current_gear+1){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c02:	461a      	mov	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f993 3000 	ldrsb.w	r3, [r3]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d008      	beq.n	8000c22 <WriteOutputs+0x4e>
			output->target_gear--;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	705a      	strb	r2, [r3, #1]
		}

		if(output->target_gear > TOTAL_GEARS){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	dd03      	ble.n	8000c34 <WriteOutputs+0x60>
			output->target_gear=5;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2205      	movs	r2, #5
 8000c30:	705a      	strb	r2, [r3, #1]
 8000c32:	e01f      	b.n	8000c74 <WriteOutputs+0xa0>
		}
		else if(output->target_gear > 1 && output->target_gear <= 5){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	dd08      	ble.n	8000c50 <WriteOutputs+0x7c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	dc03      	bgt.n	8000c50 <WriteOutputs+0x7c>
			shiftup_activation(output);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f891 	bl	8000d70 <shiftup_activation>
 8000c4e:	e011      	b.n	8000c74 <WriteOutputs+0xa0>
		}
		else if(output->target_gear == 1 && output->clutch_detection){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d107      	bne.n	8000c6a <WriteOutputs+0x96>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7d1b      	ldrb	r3, [r3, #20]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <WriteOutputs+0x96>
			shiftdown_activation(output);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 f8a0 	bl	8000da8 <shiftdown_activation>
 8000c68:	e004      	b.n	8000c74 <WriteOutputs+0xa0>
		}
		else {
			output->target_gear = output-> current_gear;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f993 2000 	ldrsb.w	r2, [r3]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	705a      	strb	r2, [r3, #1]
		}
	}


	if(output->down_button_out){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7a5b      	ldrb	r3, [r3, #9]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d03a      	beq.n	8000cf2 <WriteOutputs+0x11e>
		output->target_gear--;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	705a      	strb	r2, [r3, #1]

		if(output->target_gear!= output->current_gear-1){
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c94:	461a      	mov	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f993 3000 	ldrsb.w	r3, [r3]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d008      	beq.n	8000cb4 <WriteOutputs+0xe0>
			output->target_gear++;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3301      	adds	r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	b25a      	sxtb	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	705a      	strb	r2, [r3, #1]
		}

		if(output->target_gear < 0){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da08      	bge.n	8000cd0 <WriteOutputs+0xfc>
			output->target_gear=0;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	705a      	strb	r2, [r3, #1]
			output->current_gear=output->target_gear;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e010      	b.n	8000cf2 <WriteOutputs+0x11e>
		}
		else if(output->target_gear<1){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	dc03      	bgt.n	8000ce2 <WriteOutputs+0x10e>
			neutral_activation(output);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f880 	bl	8000de0 <neutral_activation>
 8000ce0:	e007      	b.n	8000cf2 <WriteOutputs+0x11e>
		}
		else if(output->target_gear>=1){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	dd02      	ble.n	8000cf2 <WriteOutputs+0x11e>
			shiftdown_activation(output);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f85b 	bl	8000da8 <shiftdown_activation>





		TxData[0]=(output->down_port_state || output->up_port_state);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	78db      	ldrb	r3, [r3, #3]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <WriteOutputs+0x12e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <WriteOutputs+0x132>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <WriteOutputs+0x134>
 8000d06:	2300      	movs	r3, #0
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <WriteOutputs+0x15c>)
 8000d0c:	701a      	strb	r2, [r3, #0]
		TxData[1]=output->current_gear;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f993 3000 	ldrsb.w	r3, [r3]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <WriteOutputs+0x15c>)
 8000d18:	705a      	strb	r2, [r3, #1]

		CAN_Tx(STEERING_ID,2,TxData);
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <WriteOutputs+0x15c>)
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d22:	f000 f807 	bl	8000d34 <CAN_Tx>

}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000820 	.word	0x20000820

08000d34 <CAN_Tx>:

void CAN_Tx(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	TxHeader.DLC = dlc;
 8000d42:	7afb      	ldrb	r3, [r7, #11]
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.StdId = ID;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24

	// TODO: fix CANTx with round robin
	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox) != HAL_OK) {
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	f107 0118 	add.w	r1, r7, #24
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <CAN_Tx+0x38>)
 8000d5e:	f001 f8d2 	bl	8001f06 <HAL_CAN_AddTxMessage>

	}

}
 8000d62:	bf00      	nop
 8000d64:	3730      	adds	r7, #48	; 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000c4 	.word	0x200000c4

08000d70 <shiftup_activation>:


void shiftup_activation(OutputStruct *output){ // Shift up function
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <shiftup_activation+0x30>)
 8000d7e:	f002 f969 	bl	8003054 <HAL_GPIO_WritePin>

	output->up_port_state = 1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + shifting_interval;
 8000d88:	f000 fac6 	bl	8001318 <HAL_GetTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <shiftup_activation+0x34>)
 8000d94:	6013      	str	r3, [r2, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40010800 	.word	0x40010800
 8000da4:	2000081c 	.word	0x2000081c

08000da8 <shiftdown_activation>:

void shiftdown_activation(OutputStruct *output){ // Shift down function
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <shiftdown_activation+0x30>)
 8000db6:	f002 f94d 	bl	8003054 <HAL_GPIO_WritePin>

	output->down_port_state = 1;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	70da      	strb	r2, [r3, #3]

	shift_end_time = HAL_GetTick() + shifting_interval;
 8000dc0:	f000 faaa 	bl	8001318 <HAL_GetTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <shiftdown_activation+0x34>)
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	2000081c 	.word	0x2000081c

08000de0 <neutral_activation>:

void neutral_activation(OutputStruct *output){ //Neutral shift function
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <neutral_activation+0x2c>)
 8000dee:	f002 f931 	bl	8003054 <HAL_GPIO_WritePin>

	output->up_port_state = 1;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	709a      	strb	r2, [r3, #2]

	shift_end_time = HAL_GetTick() + neutral_interval;
 8000df8:	f000 fa8e 	bl	8001318 <HAL_GetTick>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	330a      	adds	r3, #10
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <neutral_activation+0x30>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	2000081c 	.word	0x2000081c

08000e14 <end_of_shift>:



void end_of_shift(OutputStruct *output) {  //Shift Handling
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

	// Check if a shift is in progress and if the delay has ended
	if ((output->up_port_state || output->down_port_state) && HAL_GetTick() >= shift_end_time) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	789b      	ldrb	r3, [r3, #2]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <end_of_shift+0x18>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	78db      	ldrb	r3, [r3, #3]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01b      	beq.n	8000e64 <end_of_shift+0x50>
 8000e2c:	f000 fa74 	bl	8001318 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <end_of_shift+0x58>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d314      	bcc.n	8000e64 <end_of_shift+0x50>

		// Reset the port action and update the current gear

		HAL_GPIO_WritePin(GPIOA, UP_PORT_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	480c      	ldr	r0, [pc, #48]	; (8000e70 <end_of_shift+0x5c>)
 8000e40:	f002 f908 	bl	8003054 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, DOWN_PORT_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2140      	movs	r1, #64	; 0x40
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <end_of_shift+0x5c>)
 8000e4a:	f002 f903 	bl	8003054 <HAL_GPIO_WritePin>

		output-> current_gear = output->target_gear;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	701a      	strb	r2, [r3, #0]
		output->up_port_state = 0;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	709a      	strb	r2, [r3, #2]
		output->down_port_state=0;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	70da      	strb	r2, [r3, #3]
	}
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000081c 	.word	0x2000081c
 8000e70:	40010800 	.word	0x40010800

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x5c>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_MspInit+0x60>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_MspInit+0x60>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <HAL_ADC_MspInit+0xc0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d14a      	bne.n	8000f8e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_ADC_MspInit+0xc4>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_ADC_MspInit+0xc4>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_ADC_MspInit+0xc4>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_ADC_MspInit+0xc4>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <HAL_ADC_MspInit+0xc4>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_ADC_MspInit+0xc4>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <HAL_ADC_MspInit+0xc8>)
 8000f38:	f001 ff08 	bl	8002d4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f3e:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <HAL_ADC_MspInit+0xd0>)
 8000f40:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f62:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f74:	f001 fcfc 	bl	8002970 <HAL_DMA_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000f7e:	f7ff fe19 	bl	8000bb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f86:	621a      	str	r2, [r3, #32]
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_ADC_MspInit+0xcc>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	20000080 	.word	0x20000080
 8000fa8:	40020008 	.word	0x40020008

08000fac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_CAN_MspInit+0x9c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d139      	bne.n	8001040 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <HAL_CAN_MspInit+0xa0>)
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_CAN_MspInit+0xa0>)
 8000fd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd6:	61d3      	str	r3, [r2, #28]
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_CAN_MspInit+0xa0>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_CAN_MspInit+0xa0>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a18      	ldr	r2, [pc, #96]	; (800104c <HAL_CAN_MspInit+0xa0>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_CAN_MspInit+0xa0>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	480f      	ldr	r0, [pc, #60]	; (8001050 <HAL_CAN_MspInit+0xa4>)
 8001012:	f001 fe9b 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_CAN_MspInit+0xa4>)
 800102c:	f001 fe8e 	bl	8002d4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2014      	movs	r0, #20
 8001036:	f001 fc64 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800103a:	2014      	movs	r0, #20
 800103c:	f001 fc7d 	bl	800293a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40006400 	.word	0x40006400
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <HAL_TIM_Base_MspInit+0x8c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10c      	bne.n	8001080 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 800106c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800107e:	e02a      	b.n	80010d6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d10c      	bne.n	80010a4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
}
 80010a2:	e018      	b.n	80010d6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <HAL_TIM_Base_MspInit+0x94>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d113      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_TIM_Base_MspInit+0x90>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	201d      	movs	r0, #29
 80010cc:	f001 fc19 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010d0:	201d      	movs	r0, #29
 80010d2:	f001 fc32 	bl	800293a <HAL_NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40012c00 	.word	0x40012c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40000400 	.word	0x40000400

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_UART_MspInit+0x8c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d131      	bne.n	8001170 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_UART_MspInit+0x90>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <HAL_UART_MspInit+0x90>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_UART_MspInit+0x90>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x90>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <HAL_UART_MspInit+0x90>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_UART_MspInit+0x90>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <HAL_UART_MspInit+0x94>)
 8001152:	f001 fdfb 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_UART_MspInit+0x94>)
 800116c:	f001 fdee 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f893 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA1_Channel1_IRQHandler+0x10>)
 80011da:	f001 fc83 	bl	8002ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000080 	.word	0x20000080

080011e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011ee:	f001 f89f 	bl	8002330 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000c4 	.word	0x200000c4

080011fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <TIM3_IRQHandler+0x10>)
 8001202:	f002 fcf1 	bl	8003be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000017c 	.word	0x2000017c

08001210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800121c:	f7ff fff8 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001222:	490c      	ldr	r1, [pc, #48]	; (8001254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001228:	e002      	b.n	8001230 <LoopCopyDataInit>

0800122a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800122c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122e:	3304      	adds	r3, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001234:	d3f9      	bcc.n	800122a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001238:	4c09      	ldr	r4, [pc, #36]	; (8001260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800123c:	e001      	b.n	8001242 <LoopFillZerobss>

0800123e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001240:	3204      	adds	r2, #4

08001242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001244:	d3fb      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001246:	f003 f911 	bl	800446c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800124a:	f7ff f939 	bl	80004c0 <main>
  bx lr
 800124e:	4770      	bx	lr
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001258:	08004500 	.word	0x08004500
  ldr r2, =_sbss
 800125c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001260:	2000082c 	.word	0x2000082c

08001264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_2_IRQHandler>
	...

08001268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_Init+0x28>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_Init+0x28>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f001 fb37 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	200f      	movs	r0, #15
 8001280:	f000 f808 	bl	8001294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fdf6 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40022000 	.word	0x40022000

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x54>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x58>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fb4f 	bl	8002956 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f001 fb17 	bl	8002902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_InitTick+0x5c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000018 	.word	0x20000018
 80012ec:	20000020 	.word	0x20000020
 80012f0:	2000001c 	.word	0x2000001c

080012f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x1c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x20>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <HAL_IncTick+0x20>)
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000020 	.word	0x20000020
 8001314:	20000828 	.word	0x20000828

08001318 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <HAL_GetTick+0x10>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000828 	.word	0x20000828

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff fff0 	bl	8001318 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffe0 	bl	8001318 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000020 	.word	0x20000020

08001374 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0be      	b.n	8001514 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fd90 	bl	8000ed8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 faf5 	bl	80019a8 <ADC_ConversionStop_Disable>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 8099 	bne.w	8001502 <HAL_ADC_Init+0x18e>
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 8095 	bne.w	8001502 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013e0:	f023 0302 	bic.w	r3, r3, #2
 80013e4:	f043 0202 	orr.w	r2, r3, #2
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7b1b      	ldrb	r3, [r3, #12]
 80013fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	4313      	orrs	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800140c:	d003      	beq.n	8001416 <HAL_ADC_Init+0xa2>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d102      	bne.n	800141c <HAL_ADC_Init+0xa8>
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	e000      	b.n	800141e <HAL_ADC_Init+0xaa>
 800141c:	2300      	movs	r3, #0
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7d1b      	ldrb	r3, [r3, #20]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d119      	bne.n	8001460 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d109      	bne.n	8001448 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	3b01      	subs	r3, #1
 800143a:	035a      	lsls	r2, r3, #13
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	e00b      	b.n	8001460 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <HAL_ADC_Init+0x1a8>)
 800147c:	4013      	ands	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	430b      	orrs	r3, r1
 8001486:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001490:	d003      	beq.n	800149a <HAL_ADC_Init+0x126>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d104      	bne.n	80014a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	3b01      	subs	r3, #1
 80014a0:	051b      	lsls	r3, r3, #20
 80014a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_ADC_Init+0x1ac>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d10b      	bne.n	80014e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014de:	e018      	b.n	8001512 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f023 0312 	bic.w	r3, r3, #18
 80014e8:	f043 0210 	orr.w	r2, r3, #16
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	f043 0201 	orr.w	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001500:	e007      	b.n	8001512 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	f043 0210 	orr.w	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001512:	7dfb      	ldrb	r3, [r7, #23]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	ffe1f7fd 	.word	0xffe1f7fd
 8001520:	ff1f0efe 	.word	0xff1f0efe

08001524 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a64      	ldr	r2, [pc, #400]	; (80016cc <HAL_ADC_Start_DMA+0x1a8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d004      	beq.n	8001548 <HAL_ADC_Start_DMA+0x24>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a63      	ldr	r2, [pc, #396]	; (80016d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d106      	bne.n	8001556 <HAL_ADC_Start_DMA+0x32>
 8001548:	4b60      	ldr	r3, [pc, #384]	; (80016cc <HAL_ADC_Start_DMA+0x1a8>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f040 80b3 	bne.w	80016bc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_ADC_Start_DMA+0x40>
 8001560:	2302      	movs	r3, #2
 8001562:	e0ae      	b.n	80016c2 <HAL_ADC_Start_DMA+0x19e>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f9c1 	bl	80018f4 <ADC_Enable>
 8001572:	4603      	mov	r3, r0
 8001574:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 809a 	bne.w	80016b2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <HAL_ADC_Start_DMA+0x1ac>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d105      	bne.n	80015a8 <HAL_ADC_Start_DMA+0x84>
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_ADC_Start_DMA+0x1a8>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d115      	bne.n	80015d4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d026      	beq.n	8001610 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015d2:	e01d      	b.n	8001610 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a39      	ldr	r2, [pc, #228]	; (80016cc <HAL_ADC_Start_DMA+0x1a8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d004      	beq.n	80015f4 <HAL_ADC_Start_DMA+0xd0>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a38      	ldr	r2, [pc, #224]	; (80016d0 <HAL_ADC_Start_DMA+0x1ac>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d10d      	bne.n	8001610 <HAL_ADC_Start_DMA+0xec>
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_ADC_Start_DMA+0x1a8>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001608:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f023 0206 	bic.w	r2, r3, #6
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
 8001628:	e002      	b.n	8001630 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <HAL_ADC_Start_DMA+0x1b0>)
 800163e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <HAL_ADC_Start_DMA+0x1b4>)
 8001646:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a23      	ldr	r2, [pc, #140]	; (80016dc <HAL_ADC_Start_DMA+0x1b8>)
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0202 	mvn.w	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001668:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a18      	ldr	r0, [r3, #32]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	334c      	adds	r3, #76	; 0x4c
 8001674:	4619      	mov	r1, r3
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f001 f9d3 	bl	8002a24 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001688:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800168c:	d108      	bne.n	80016a0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800169c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800169e:	e00f      	b.n	80016c0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016ae:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80016b0:	e006      	b.n	80016c0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80016ba:	e001      	b.n	80016c0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40012400 	.word	0x40012400
 80016d0:	40012800 	.word	0x40012800
 80016d4:	08001a2b 	.word	0x08001a2b
 80016d8:	08001aa7 	.word	0x08001aa7
 80016dc:	08001ac3 	.word	0x08001ac3

080016e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x20>
 8001720:	2302      	movs	r3, #2
 8001722:	e0dc      	b.n	80018de <HAL_ADC_ConfigChannel+0x1da>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b06      	cmp	r3, #6
 8001732:	d81c      	bhi.n	800176e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b05      	subs	r3, #5
 8001746:	221f      	movs	r2, #31
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b05      	subs	r3, #5
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
 800176c:	e03c      	b.n	80017e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d81c      	bhi.n	80017b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b23      	subs	r3, #35	; 0x23
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	4019      	ands	r1, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3b23      	subs	r3, #35	; 0x23
 80017a2:	fa00 f203 	lsl.w	r2, r0, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
 80017ae:	e01b      	b.n	80017e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b41      	subs	r3, #65	; 0x41
 80017c2:	221f      	movs	r2, #31
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b41      	subs	r3, #65	; 0x41
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d91c      	bls.n	800182a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68d9      	ldr	r1, [r3, #12]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	3b1e      	subs	r3, #30
 8001802:	2207      	movs	r2, #7
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4019      	ands	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6898      	ldr	r0, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	3b1e      	subs	r3, #30
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	e019      	b.n	800185e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6919      	ldr	r1, [r3, #16]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	2207      	movs	r2, #7
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	4019      	ands	r1, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6898      	ldr	r0, [r3, #8]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d003      	beq.n	800186e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186a:	2b11      	cmp	r3, #17
 800186c:	d132      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d125      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d126      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001894:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d11a      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_ADC_ConfigChannel+0x1e8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9a      	lsrs	r2, r3, #18
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b4:	e002      	b.n	80018bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f9      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x1b2>
 80018c2:	e007      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f043 0220 	orr.w	r2, r3, #32
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40012400 	.word	0x40012400
 80018ec:	20000018 	.word	0x20000018
 80018f0:	431bde83 	.word	0x431bde83

080018f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d040      	beq.n	8001994 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <ADC_Enable+0xac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <ADC_Enable+0xb0>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001930:	e002      	b.n	8001938 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3b01      	subs	r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f9      	bne.n	8001932 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800193e:	f7ff fceb 	bl	8001318 <HAL_GetTick>
 8001942:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001944:	e01f      	b.n	8001986 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001946:	f7ff fce7 	bl	8001318 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d918      	bls.n	8001986 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b01      	cmp	r3, #1
 8001960:	d011      	beq.n	8001986 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	f043 0210 	orr.w	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f043 0201 	orr.w	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e007      	b.n	8001996 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d1d8      	bne.n	8001946 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000018 	.word	0x20000018
 80019a4:	431bde83 	.word	0x431bde83

080019a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d12e      	bne.n	8001a20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019d2:	f7ff fca1 	bl	8001318 <HAL_GetTick>
 80019d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019d8:	e01b      	b.n	8001a12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019da:	f7ff fc9d 	bl	8001318 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d914      	bls.n	8001a12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10d      	bne.n	8001a12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f043 0210 	orr.w	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f043 0201 	orr.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e007      	b.n	8001a22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d0dc      	beq.n	80019da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d127      	bne.n	8001a94 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a5e:	d115      	bne.n	8001a8c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d111      	bne.n	8001a8c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff fe27 	bl	80016e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a92:	e004      	b.n	8001a9e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7fe fcd3 	bl	8000460 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fe02 	bl	80016f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0ed      	b.n	8001ce4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d102      	bne.n	8001b1a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fa49 	bl	8000fac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b2a:	f7ff fbf5 	bl	8001318 <HAL_GetTick>
 8001b2e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b30:	e012      	b.n	8001b58 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b32:	f7ff fbf1 	bl	8001318 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b0a      	cmp	r3, #10
 8001b3e:	d90b      	bls.n	8001b58 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2205      	movs	r2, #5
 8001b50:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0c5      	b.n	8001ce4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0e5      	beq.n	8001b32 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0202 	bic.w	r2, r2, #2
 8001b74:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b76:	f7ff fbcf 	bl	8001318 <HAL_GetTick>
 8001b7a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b7c:	e012      	b.n	8001ba4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b7e:	f7ff fbcb 	bl	8001318 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b0a      	cmp	r3, #10
 8001b8a:	d90b      	bls.n	8001ba4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2205      	movs	r2, #5
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e09f      	b.n	8001ce4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1e5      	bne.n	8001b7e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7e1b      	ldrb	r3, [r3, #24]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e007      	b.n	8001bdc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7e5b      	ldrb	r3, [r3, #25]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d108      	bne.n	8001bf6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e007      	b.n	8001c06 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7e9b      	ldrb	r3, [r3, #26]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e007      	b.n	8001c30 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0220 	bic.w	r2, r2, #32
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7edb      	ldrb	r3, [r3, #27]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d108      	bne.n	8001c4a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0210 	bic.w	r2, r2, #16
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e007      	b.n	8001c5a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0210 	orr.w	r2, r2, #16
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7f1b      	ldrb	r3, [r3, #28]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d108      	bne.n	8001c74 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0208 	orr.w	r2, r2, #8
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e007      	b.n	8001c84 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0208 	bic.w	r2, r2, #8
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7f5b      	ldrb	r3, [r3, #29]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d108      	bne.n	8001c9e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0204 	orr.w	r2, r2, #4
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	e007      	b.n	8001cae <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0204 	bic.w	r2, r2, #4
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	ea42 0103 	orr.w	r1, r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	1e5a      	subs	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d02:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d04:	7cfb      	ldrb	r3, [r7, #19]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d003      	beq.n	8001d12 <HAL_CAN_ConfigFilter+0x26>
 8001d0a:	7cfb      	ldrb	r3, [r7, #19]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	f040 80aa 	bne.w	8001e66 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d123      	bne.n	8001d94 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d6e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3248      	adds	r2, #72	; 0x48
 8001d74:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d8a:	6979      	ldr	r1, [r7, #20]
 8001d8c:	3348      	adds	r3, #72	; 0x48
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	440b      	add	r3, r1
 8001d92:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d122      	bne.n	8001de2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3248      	adds	r2, #72	; 0x48
 8001dc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dd8:	6979      	ldr	r1, [r7, #20]
 8001dda:	3348      	adds	r3, #72	; 0x48
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	401a      	ands	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dfc:	e007      	b.n	8001e0e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	401a      	ands	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e28:	e007      	b.n	8001e3a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e58:	f023 0201 	bic.w	r2, r3, #1
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e006      	b.n	8001e74 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d12e      	bne.n	8001ef0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0201 	bic.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eaa:	f7ff fa35 	bl	8001318 <HAL_GetTick>
 8001eae:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eb0:	e012      	b.n	8001ed8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eb2:	f7ff fa31 	bl	8001318 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b0a      	cmp	r3, #10
 8001ebe:	d90b      	bls.n	8001ed8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2205      	movs	r2, #5
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e012      	b.n	8001efe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1e5      	bne.n	8001eb2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e006      	b.n	8001efe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b089      	sub	sp, #36	; 0x24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f24:	7ffb      	ldrb	r3, [r7, #31]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d003      	beq.n	8001f32 <HAL_CAN_AddTxMessage+0x2c>
 8001f2a:	7ffb      	ldrb	r3, [r7, #31]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	f040 80ad 	bne.w	800208c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10a      	bne.n	8001f52 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8095 	beq.w	800207c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	0e1b      	lsrs	r3, r3, #24
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	409a      	lsls	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	6809      	ldr	r1, [r1, #0]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3318      	adds	r3, #24
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	440b      	add	r3, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e00f      	b.n	8001faa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f94:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f9e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3318      	adds	r3, #24
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	440b      	add	r3, r1
 8001fa8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	440b      	add	r3, r1
 8001fba:	3304      	adds	r3, #4
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	7d1b      	ldrb	r3, [r3, #20]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d111      	bne.n	8001fea <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3318      	adds	r3, #24
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	6811      	ldr	r1, [r2, #0]
 8001fda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3318      	adds	r3, #24
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3307      	adds	r3, #7
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	061a      	lsls	r2, r3, #24
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3305      	adds	r3, #5
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4313      	orrs	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	3204      	adds	r2, #4
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	4610      	mov	r0, r2
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	6811      	ldr	r1, [r2, #0]
 8002012:	ea43 0200 	orr.w	r2, r3, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	440b      	add	r3, r1
 800201c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002020:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3303      	adds	r3, #3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	061a      	lsls	r2, r3, #24
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	4313      	orrs	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4610      	mov	r0, r2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6811      	ldr	r1, [r2, #0]
 8002048:	ea43 0200 	orr.w	r2, r3, r0
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	440b      	add	r3, r1
 8002052:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002056:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3318      	adds	r3, #24
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	6811      	ldr	r1, [r2, #0]
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3318      	adds	r3, #24
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	440b      	add	r3, r1
 8002076:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e00e      	b.n	800209a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e006      	b.n	800209a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d003      	beq.n	80020c8 <HAL_CAN_GetRxMessage+0x24>
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f040 8103 	bne.w	80022ce <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10e      	bne.n	80020ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d116      	bne.n	800210a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0f7      	b.n	80022dc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d107      	bne.n	800210a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0e8      	b.n	80022dc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	331b      	adds	r3, #27
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4413      	add	r3, r2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0204 	and.w	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10c      	bne.n	8002142 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	331b      	adds	r3, #27
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	4413      	add	r3, r2
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0d5b      	lsrs	r3, r3, #21
 8002138:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	e00b      	b.n	800215a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	331b      	adds	r3, #27
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	4413      	add	r3, r2
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	331b      	adds	r3, #27
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	4413      	add	r3, r2
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0202 	and.w	r2, r3, #2
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	331b      	adds	r3, #27
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2208      	movs	r2, #8
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	e00b      	b.n	80021a8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	331b      	adds	r3, #27
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	331b      	adds	r3, #27
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	331b      	adds	r3, #27
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	3304      	adds	r3, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0a1a      	lsrs	r2, r3, #8
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4413      	add	r3, r2
 8002212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0c1a      	lsrs	r2, r3, #16
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	3302      	adds	r3, #2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e1a      	lsrs	r2, r3, #24
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	3303      	adds	r3, #3
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3304      	adds	r3, #4
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0a1a      	lsrs	r2, r3, #8
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3305      	adds	r3, #5
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0c1a      	lsrs	r2, r3, #16
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3306      	adds	r3, #6
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e1a      	lsrs	r2, r3, #24
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3307      	adds	r3, #7
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0220 	orr.w	r2, r2, #32
 80022c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e006      	b.n	80022dc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_CAN_ActivateNotification+0x1e>
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d109      	bne.n	8002318 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6959      	ldr	r1, [r3, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e006      	b.n	8002326 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d07c      	beq.n	8002470 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d023      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f983 	bl	800269e <HAL_CAN_TxMailbox0CompleteCallback>
 8002398:	e016      	b.n	80023c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d004      	beq.n	80023ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	e00c      	b.n	80023c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e002      	b.n	80023c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f986 	bl	80026d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d024      	beq.n	800241c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f962 	bl	80026b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80023ec:	e016      	b.n	800241c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002400:	e00c      	b.n	800241c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
 8002414:	e002      	b.n	800241c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f965 	bl	80026e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d024      	beq.n	8002470 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800242e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f941 	bl	80026c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002440:	e016      	b.n	8002470 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	e00c      	b.n	8002470 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d004      	beq.n	800246a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
 8002468:	e002      	b.n	8002470 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f944 	bl	80026f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2210      	movs	r2, #16
 8002492:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2208      	movs	r2, #8
 80024ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f92a 	bl	800270a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fd ff9c 	bl	800040c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2208      	movs	r2, #8
 8002512:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f901 	bl	800271c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fd ff76 	bl	8000424 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8ea 	bl	800272e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00b      	beq.n	800257c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2208      	movs	r2, #8
 8002574:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8e2 	bl	8002740 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d07b      	beq.n	800267e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d072      	beq.n	8002676 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d043      	beq.n	8002676 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d03e      	beq.n	8002676 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025fe:	2b60      	cmp	r3, #96	; 0x60
 8002600:	d02b      	beq.n	800265a <HAL_CAN_IRQHandler+0x32a>
 8002602:	2b60      	cmp	r3, #96	; 0x60
 8002604:	d82e      	bhi.n	8002664 <HAL_CAN_IRQHandler+0x334>
 8002606:	2b50      	cmp	r3, #80	; 0x50
 8002608:	d022      	beq.n	8002650 <HAL_CAN_IRQHandler+0x320>
 800260a:	2b50      	cmp	r3, #80	; 0x50
 800260c:	d82a      	bhi.n	8002664 <HAL_CAN_IRQHandler+0x334>
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d019      	beq.n	8002646 <HAL_CAN_IRQHandler+0x316>
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d826      	bhi.n	8002664 <HAL_CAN_IRQHandler+0x334>
 8002616:	2b30      	cmp	r3, #48	; 0x30
 8002618:	d010      	beq.n	800263c <HAL_CAN_IRQHandler+0x30c>
 800261a:	2b30      	cmp	r3, #48	; 0x30
 800261c:	d822      	bhi.n	8002664 <HAL_CAN_IRQHandler+0x334>
 800261e:	2b10      	cmp	r3, #16
 8002620:	d002      	beq.n	8002628 <HAL_CAN_IRQHandler+0x2f8>
 8002622:	2b20      	cmp	r3, #32
 8002624:	d005      	beq.n	8002632 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002626:	e01d      	b.n	8002664 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002630:	e019      	b.n	8002666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800263a:	e014      	b.n	8002666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	f043 0320 	orr.w	r3, r3, #32
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002644:	e00f      	b.n	8002666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800264e:	e00a      	b.n	8002666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002658:	e005      	b.n	8002666 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002662:	e000      	b.n	8002666 <HAL_CAN_IRQHandler+0x336>
            break;
 8002664:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002674:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2204      	movs	r2, #4
 800267c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7fd fed3 	bl	800043c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	; 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <__NVIC_SetPriorityGrouping>:
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800277c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	; (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_GetPriorityGrouping>:
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <__NVIC_GetPriorityGrouping+0x18>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0307 	and.w	r3, r3, #7
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_EnableIRQ>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db0b      	blt.n	80027e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	4906      	ldr	r1, [pc, #24]	; (80027ec <__NVIC_EnableIRQ+0x34>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2001      	movs	r0, #1
 80027da:	fa00 f202 	lsl.w	r2, r0, r2
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f7ff ff90 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff2d 	bl	8002754 <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002914:	f7ff ff42 	bl	800279c <__NVIC_GetPriorityGrouping>
 8002918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff ff90 	bl	8002844 <NVIC_EncodePriority>
 8002924:	4602      	mov	r2, r0
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff5f 	bl	80027f0 <__NVIC_SetPriority>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff35 	bl	80027b8 <__NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ffa2 	bl	80028a8 <SysTick_Config>
 8002964:	4603      	mov	r3, r0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e043      	b.n	8002a0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_DMA_Init+0xa8>)
 800298e:	4413      	add	r3, r2
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_DMA_Init+0xac>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	009a      	lsls	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_DMA_Init+0xb0>)
 80029a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	bffdfff8 	.word	0xbffdfff8
 8002a1c:	cccccccd 	.word	0xcccccccd
 8002a20:	40020000 	.word	0x40020000

08002a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_DMA_Start_IT+0x20>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e04b      	b.n	8002adc <HAL_DMA_Start_IT+0xb8>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d13a      	bne.n	8002ace <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f937 	bl	8002cf0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 020e 	orr.w	r2, r2, #14
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e00f      	b.n	8002abc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0204 	bic.w	r2, r2, #4
 8002aaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 020a 	orr.w	r2, r2, #10
 8002aba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e005      	b.n	8002ada <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	2204      	movs	r2, #4
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d04f      	beq.n	8002bac <HAL_DMA_IRQHandler+0xc8>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d04a      	beq.n	8002bac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0204 	bic.w	r2, r2, #4
 8002b32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a66      	ldr	r2, [pc, #408]	; (8002cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d029      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xae>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a65      	ldr	r2, [pc, #404]	; (8002cd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d022      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xaa>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a63      	ldr	r2, [pc, #396]	; (8002cdc <HAL_DMA_IRQHandler+0x1f8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01a      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xa4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a62      	ldr	r2, [pc, #392]	; (8002ce0 <HAL_DMA_IRQHandler+0x1fc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d012      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x9e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a60      	ldr	r2, [pc, #384]	; (8002ce4 <HAL_DMA_IRQHandler+0x200>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00a      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x98>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <HAL_DMA_IRQHandler+0x204>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d102      	bne.n	8002b76 <HAL_DMA_IRQHandler+0x92>
 8002b70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b74:	e00e      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b7a:	e00b      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b80:	e008      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b86:	e005      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8c:	e002      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b8e:	2340      	movs	r3, #64	; 0x40
 8002b90:	e000      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b92:	2304      	movs	r3, #4
 8002b94:	4a55      	ldr	r2, [pc, #340]	; (8002cec <HAL_DMA_IRQHandler+0x208>)
 8002b96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8094 	beq.w	8002cca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002baa:	e08e      	b.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d056      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x186>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d051      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020a 	bic.w	r2, r2, #10
 8002be2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d029      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x166>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x162>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <HAL_DMA_IRQHandler+0x1f8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x15c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <HAL_DMA_IRQHandler+0x1fc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d012      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x156>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <HAL_DMA_IRQHandler+0x200>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00a      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x150>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a31      	ldr	r2, [pc, #196]	; (8002ce8 <HAL_DMA_IRQHandler+0x204>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d102      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x14a>
 8002c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c2c:	e00e      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c32:	e00b      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c38:	e008      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c3e:	e005      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c44:	e002      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c46:	2320      	movs	r3, #32
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_DMA_IRQHandler+0x208>)
 8002c4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d034      	beq.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c68:	e02f      	b.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2208      	movs	r2, #8
 8002c70:	409a      	lsls	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d028      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x1e8>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d023      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 020e 	bic.w	r2, r2, #14
 8002c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
    }
  }
  return;
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
}
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40020008 	.word	0x40020008
 8002cd8:	4002001c 	.word	0x4002001c
 8002cdc:	40020030 	.word	0x40020030
 8002ce0:	40020044 	.word	0x40020044
 8002ce4:	40020058 	.word	0x40020058
 8002ce8:	4002006c 	.word	0x4002006c
 8002cec:	40020000 	.word	0x40020000

08002cf0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d108      	bne.n	8002d30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d2e:	e007      	b.n	8002d40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5e:	e169      	b.n	8003034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d60:	2201      	movs	r2, #1
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8158 	bne.w	800302e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a9a      	ldr	r2, [pc, #616]	; (8002fec <HAL_GPIO_Init+0x2a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d05e      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002d88:	4a98      	ldr	r2, [pc, #608]	; (8002fec <HAL_GPIO_Init+0x2a0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d875      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002d8e:	4a98      	ldr	r2, [pc, #608]	; (8002ff0 <HAL_GPIO_Init+0x2a4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d058      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002d94:	4a96      	ldr	r2, [pc, #600]	; (8002ff0 <HAL_GPIO_Init+0x2a4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d86f      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002d9a:	4a96      	ldr	r2, [pc, #600]	; (8002ff4 <HAL_GPIO_Init+0x2a8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d052      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002da0:	4a94      	ldr	r2, [pc, #592]	; (8002ff4 <HAL_GPIO_Init+0x2a8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d869      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002da6:	4a94      	ldr	r2, [pc, #592]	; (8002ff8 <HAL_GPIO_Init+0x2ac>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04c      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002dac:	4a92      	ldr	r2, [pc, #584]	; (8002ff8 <HAL_GPIO_Init+0x2ac>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d863      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002db2:	4a92      	ldr	r2, [pc, #584]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d046      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
 8002db8:	4a90      	ldr	r2, [pc, #576]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d85d      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002dbe:	2b12      	cmp	r3, #18
 8002dc0:	d82a      	bhi.n	8002e18 <HAL_GPIO_Init+0xcc>
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d859      	bhi.n	8002e7a <HAL_GPIO_Init+0x12e>
 8002dc6:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <HAL_GPIO_Init+0x80>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002e47 	.word	0x08002e47
 8002dd0:	08002e21 	.word	0x08002e21
 8002dd4:	08002e33 	.word	0x08002e33
 8002dd8:	08002e75 	.word	0x08002e75
 8002ddc:	08002e7b 	.word	0x08002e7b
 8002de0:	08002e7b 	.word	0x08002e7b
 8002de4:	08002e7b 	.word	0x08002e7b
 8002de8:	08002e7b 	.word	0x08002e7b
 8002dec:	08002e7b 	.word	0x08002e7b
 8002df0:	08002e7b 	.word	0x08002e7b
 8002df4:	08002e7b 	.word	0x08002e7b
 8002df8:	08002e7b 	.word	0x08002e7b
 8002dfc:	08002e7b 	.word	0x08002e7b
 8002e00:	08002e7b 	.word	0x08002e7b
 8002e04:	08002e7b 	.word	0x08002e7b
 8002e08:	08002e7b 	.word	0x08002e7b
 8002e0c:	08002e7b 	.word	0x08002e7b
 8002e10:	08002e29 	.word	0x08002e29
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	4a79      	ldr	r2, [pc, #484]	; (8003000 <HAL_GPIO_Init+0x2b4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e1e:	e02c      	b.n	8002e7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	623b      	str	r3, [r7, #32]
          break;
 8002e26:	e029      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	623b      	str	r3, [r7, #32]
          break;
 8002e30:	e024      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	3308      	adds	r3, #8
 8002e38:	623b      	str	r3, [r7, #32]
          break;
 8002e3a:	e01f      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	330c      	adds	r3, #12
 8002e42:	623b      	str	r3, [r7, #32]
          break;
 8002e44:	e01a      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e4e:	2304      	movs	r3, #4
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e013      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	611a      	str	r2, [r3, #16]
          break;
 8002e66:	e009      	b.n	8002e7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e68:	2308      	movs	r3, #8
 8002e6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	615a      	str	r2, [r3, #20]
          break;
 8002e72:	e003      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
          break;
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_Init+0x130>
          break;
 8002e7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2bff      	cmp	r3, #255	; 0xff
 8002e80:	d801      	bhi.n	8002e86 <HAL_GPIO_Init+0x13a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	e001      	b.n	8002e8a <HAL_GPIO_Init+0x13e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2bff      	cmp	r3, #255	; 0xff
 8002e90:	d802      	bhi.n	8002e98 <HAL_GPIO_Init+0x14c>
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	e002      	b.n	8002e9e <HAL_GPIO_Init+0x152>
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	3b08      	subs	r3, #8
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	210f      	movs	r1, #15
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	6a39      	ldr	r1, [r7, #32]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80b1 	beq.w	800302e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ecc:	4b4d      	ldr	r3, [pc, #308]	; (8003004 <HAL_GPIO_Init+0x2b8>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	4a4c      	ldr	r2, [pc, #304]	; (8003004 <HAL_GPIO_Init+0x2b8>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6193      	str	r3, [r2, #24]
 8002ed8:	4b4a      	ldr	r3, [pc, #296]	; (8003004 <HAL_GPIO_Init+0x2b8>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee4:	4a48      	ldr	r2, [pc, #288]	; (8003008 <HAL_GPIO_Init+0x2bc>)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	220f      	movs	r2, #15
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a40      	ldr	r2, [pc, #256]	; (800300c <HAL_GPIO_Init+0x2c0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_GPIO_Init+0x1ec>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <HAL_GPIO_Init+0x2c4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00d      	beq.n	8002f34 <HAL_GPIO_Init+0x1e8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3e      	ldr	r2, [pc, #248]	; (8003014 <HAL_GPIO_Init+0x2c8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <HAL_GPIO_Init+0x1e4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3d      	ldr	r2, [pc, #244]	; (8003018 <HAL_GPIO_Init+0x2cc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_GPIO_Init+0x1e0>
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e006      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e004      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <HAL_GPIO_Init+0x1ee>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3c:	f002 0203 	and.w	r2, r2, #3
 8002f40:	0092      	lsls	r2, r2, #2
 8002f42:	4093      	lsls	r3, r2
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f4a:	492f      	ldr	r1, [pc, #188]	; (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	3302      	adds	r3, #2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f64:	4b2d      	ldr	r3, [pc, #180]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	492c      	ldr	r1, [pc, #176]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	4928      	ldr	r1, [pc, #160]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	491e      	ldr	r1, [pc, #120]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4918      	ldr	r1, [pc, #96]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	4914      	ldr	r1, [pc, #80]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d021      	beq.n	8003020 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	490e      	ldr	r1, [pc, #56]	; (800301c <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	e021      	b.n	800302e <HAL_GPIO_Init+0x2e2>
 8002fea:	bf00      	nop
 8002fec:	10320000 	.word	0x10320000
 8002ff0:	10310000 	.word	0x10310000
 8002ff4:	10220000 	.word	0x10220000
 8002ff8:	10210000 	.word	0x10210000
 8002ffc:	10120000 	.word	0x10120000
 8003000:	10110000 	.word	0x10110000
 8003004:	40021000 	.word	0x40021000
 8003008:	40010000 	.word	0x40010000
 800300c:	40010800 	.word	0x40010800
 8003010:	40010c00 	.word	0x40010c00
 8003014:	40011000 	.word	0x40011000
 8003018:	40011400 	.word	0x40011400
 800301c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <HAL_GPIO_Init+0x304>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	43db      	mvns	r3, r3
 8003028:	4909      	ldr	r1, [pc, #36]	; (8003050 <HAL_GPIO_Init+0x304>)
 800302a:	4013      	ands	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	3301      	adds	r3, #1
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	f47f ae8e 	bne.w	8002d60 <HAL_GPIO_Init+0x14>
  }
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	372c      	adds	r7, #44	; 0x2c
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr
 8003050:	40010400 	.word	0x40010400

08003054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003070:	e003      	b.n	800307a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e272      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8087 	beq.w	80031b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a4:	4b92      	ldr	r3, [pc, #584]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d00c      	beq.n	80030ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030b0:	4b8f      	ldr	r3, [pc, #572]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d112      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5e>
 80030bc:	4b8c      	ldr	r3, [pc, #560]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d10b      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d06c      	beq.n	80031b0 <HAL_RCC_OscConfig+0x12c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d168      	bne.n	80031b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e24c      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x76>
 80030ec:	4b80      	ldr	r3, [pc, #512]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a7f      	ldr	r2, [pc, #508]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e02e      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0x98>
 8003102:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7a      	ldr	r2, [pc, #488]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b78      	ldr	r3, [pc, #480]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a77      	ldr	r2, [pc, #476]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e01d      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0xbc>
 8003126:	4b72      	ldr	r3, [pc, #456]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a71      	ldr	r2, [pc, #452]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6e      	ldr	r2, [pc, #440]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0xd4>
 8003140:	4b6b      	ldr	r3, [pc, #428]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a6a      	ldr	r2, [pc, #424]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a67      	ldr	r2, [pc, #412]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003156:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe f8da 	bl	8001318 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe f8d6 	bl	8001318 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e200      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0xe4>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe f8c6 	bl	8001318 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe f8c2 	bl	8001318 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1ec      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x10c>
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d063      	beq.n	8003286 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031be:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d11c      	bne.n	8003210 <HAL_RCC_OscConfig+0x18c>
 80031d6:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d116      	bne.n	8003210 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e1c0      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4939      	ldr	r1, [pc, #228]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	e03a      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x270>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fe f87b 	bl	8001318 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7fe f877 	bl	8001318 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1a1      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4927      	ldr	r1, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	e015      	b.n	8003286 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x270>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe f85a 	bl	8001318 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe f856 	bl	8001318 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e180      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	4b1d      	ldr	r3, [pc, #116]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d03a      	beq.n	8003308 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_RCC_OscConfig+0x274>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fe f83a 	bl	8001318 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fe f836 	bl	8001318 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e160      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f000 face 	bl	8003868 <RCC_Delay>
 80032cc:	e01c      	b.n	8003308 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_RCC_OscConfig+0x274>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7fe f820 	bl	8001318 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032da:	e00f      	b.n	80032fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fe f81c 	bl	8001318 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e146      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	42420000 	.word	0x42420000
 80032f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b92      	ldr	r3, [pc, #584]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e9      	bne.n	80032dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a6 	beq.w	8003462 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10d      	bne.n	8003342 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4a87      	ldr	r2, [pc, #540]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	61d3      	str	r3, [r2, #28]
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d118      	bne.n	8003380 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334e:	4b7f      	ldr	r3, [pc, #508]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7e      	ldr	r2, [pc, #504]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fd ffdd 	bl	8001318 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fd ffd9 	bl	8001318 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e103      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b75      	ldr	r3, [pc, #468]	; (800354c <HAL_RCC_OscConfig+0x4c8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x312>
 8003388:	4b6f      	ldr	r3, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e02d      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x334>
 800339e:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a69      	ldr	r2, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	6213      	str	r3, [r2, #32]
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a66      	ldr	r2, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	e01c      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d10c      	bne.n	80033da <HAL_RCC_OscConfig+0x356>
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4a60      	ldr	r2, [pc, #384]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6213      	str	r3, [r2, #32]
 80033d8:	e00b      	b.n	80033f2 <HAL_RCC_OscConfig+0x36e>
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	4b58      	ldr	r3, [pc, #352]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a57      	ldr	r2, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fd ff8d 	bl	8001318 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fd ff89 	bl	8001318 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0b1      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b4b      	ldr	r3, [pc, #300]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCC_OscConfig+0x37e>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fd ff77 	bl	8001318 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fd ff73 	bl	8001318 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e09b      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b3c      	ldr	r3, [pc, #240]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8087 	beq.w	800357a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	d061      	beq.n	800353c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d146      	bne.n	800350e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b33      	ldr	r3, [pc, #204]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fd ff47 	bl	8001318 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fd ff43 	bl	8001318 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e06d      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f0      	bne.n	800348e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d108      	bne.n	80034c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4921      	ldr	r1, [pc, #132]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a19      	ldr	r1, [r3, #32]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	430b      	orrs	r3, r1
 80034da:	491b      	ldr	r1, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fd ff17 	bl	8001318 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fd ff13 	bl	8001318 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e03d      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x46a>
 800350c:	e035      	b.n	800357a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_RCC_OscConfig+0x4cc>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd ff00 	bl	8001318 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fd fefc 	bl	8001318 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e026      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x498>
 800353a:	e01e      	b.n	800357a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e019      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
 8003550:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_RCC_OscConfig+0x500>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	429a      	cmp	r2, r3
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0d0      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d910      	bls.n	80035cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4965      	ldr	r1, [pc, #404]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b8      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003606:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	494d      	ldr	r1, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d040      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d115      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07f      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e073      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e06b      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b39      	ldr	r3, [pc, #228]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4936      	ldr	r1, [pc, #216]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fd fe4e 	bl	8001318 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fd fe4a 	bl	8001318 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e053      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d210      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 0207 	bic.w	r2, r3, #7
 80036be:	4922      	ldr	r1, [pc, #136]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e032      	b.n	800373e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4916      	ldr	r1, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003716:	f000 f821 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800371a:	4602      	mov	r2, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	5ccb      	ldrb	r3, [r1, r3]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1cc>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1d0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fd fdac 	bl	8001294 <HAL_InitTick>

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40022000 	.word	0x40022000
 800374c:	40021000 	.word	0x40021000
 8003750:	080044cc 	.word	0x080044cc
 8003754:	20000018 	.word	0x20000018
 8003758:	2000001c 	.word	0x2000001c

0800375c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003776:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b04      	cmp	r3, #4
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x30>
 8003786:	2b08      	cmp	r3, #8
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x36>
 800378a:	e027      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800378e:	613b      	str	r3, [r7, #16]
      break;
 8003790:	e027      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	0c9b      	lsrs	r3, r3, #18
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800379c:	5cd3      	ldrb	r3, [r2, r3]
 800379e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037aa:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0c5b      	lsrs	r3, r3, #17
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80037b6:	5cd3      	ldrb	r3, [r2, r3]
 80037b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037be:	fb03 f202 	mul.w	r2, r3, r2
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e004      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a0c      	ldr	r2, [pc, #48]	; (8003800 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	613b      	str	r3, [r7, #16]
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80037de:	613b      	str	r3, [r7, #16]
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	693b      	ldr	r3, [r7, #16]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	007a1200 	.word	0x007a1200
 80037f8:	080044e4 	.word	0x080044e4
 80037fc:	080044f4 	.word	0x080044f4
 8003800:	003d0900 	.word	0x003d0900

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b02      	ldr	r3, [pc, #8]	; (8003814 <HAL_RCC_GetHCLKFreq+0x10>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	20000018 	.word	0x20000018

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff2 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	080044dc 	.word	0x080044dc

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003844:	f7ff ffde 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	0adb      	lsrs	r3, r3, #11
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000
 8003864:	080044dc 	.word	0x080044dc

08003868 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <RCC_Delay+0x34>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <RCC_Delay+0x38>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	0a5b      	lsrs	r3, r3, #9
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003884:	bf00      	nop
  }
  while (Delay --);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	60fa      	str	r2, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f9      	bne.n	8003884 <RCC_Delay+0x1c>
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	20000018 	.word	0x20000018
 80038a0:	10624dd3 	.word	0x10624dd3

080038a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07d      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c4:	4b4f      	ldr	r3, [pc, #316]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	4a4b      	ldr	r2, [pc, #300]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038da:	61d3      	str	r3, [r2, #28]
 80038dc:	4b49      	ldr	r3, [pc, #292]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d118      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f8:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a42      	ldr	r2, [pc, #264]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003902:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003904:	f7fd fd08 	bl	8001318 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390a:	e008      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390c:	f7fd fd04 	bl	8001318 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e06d      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d02e      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	429a      	cmp	r2, r3
 8003946:	d027      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003948:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d014      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fd fcd3 	bl	8001318 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fd fccf 	bl	8001318 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e036      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ee      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4917      	ldr	r1, [pc, #92]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	490b      	ldr	r1, [pc, #44]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	4904      	ldr	r1, [pc, #16]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	42420440 	.word	0x42420440

08003a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e041      	b.n	8003aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fb0c 	bl	8001054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f000 fabe 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d001      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIM_Base_Start+0x88>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_Base_Start+0x48>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_Base_Start+0x48>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <HAL_TIM_Base_Start+0x8c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_Base_Start+0x48>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <HAL_TIM_Base_Start+0x90>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800

08003b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e03a      	b.n	8003bd2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_TIM_Base_Start_IT+0x98>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d009      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x58>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d010      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	e007      	b.n	8003bd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800

08003be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d122      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0202 	mvn.w	r2, #2
 8003c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9b4 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9a7 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f9b6 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0204 	mvn.w	r2, #4
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f98a 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f97d 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f98c 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d122      	bne.n	8003cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d11b      	bne.n	8003cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0208 	mvn.w	r2, #8
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f960 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f953 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f962 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0210 	mvn.w	r2, #16
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2208      	movs	r2, #8
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f936 	bl	8003f98 <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f929 	bl	8003f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f938 	bl	8003faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0201 	mvn.w	r2, #1
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fc ff10 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b80      	cmp	r3, #128	; 0x80
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fa7b 	bl	800428e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8fc 	bl	8003fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d10e      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d107      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0220 	mvn.w	r2, #32
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa46 	bl	800427c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIM_ConfigClockSource+0x1c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e0b4      	b.n	8003f7e <HAL_TIM_ConfigClockSource+0x186>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	d03e      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0xd4>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e52:	f200 8087 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	f000 8086 	beq.w	8003f6a <HAL_TIM_ConfigClockSource+0x172>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d87f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b70      	cmp	r3, #112	; 0x70
 8003e66:	d01a      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0xa6>
 8003e68:	2b70      	cmp	r3, #112	; 0x70
 8003e6a:	d87b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b60      	cmp	r3, #96	; 0x60
 8003e6e:	d050      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x11a>
 8003e70:	2b60      	cmp	r3, #96	; 0x60
 8003e72:	d877      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b50      	cmp	r3, #80	; 0x50
 8003e76:	d03c      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e78:	2b50      	cmp	r3, #80	; 0x50
 8003e7a:	d873      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d058      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x13a>
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d86f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b30      	cmp	r3, #48	; 0x30
 8003e86:	d064      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	2b30      	cmp	r3, #48	; 0x30
 8003e8a:	d86b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d060      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d867      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d05c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d05a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e9c:	e062      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	f000 f968 	bl	8004182 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	609a      	str	r2, [r3, #8]
      break;
 8003eca:	e04f      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	f000 f951 	bl	8004182 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eee:	609a      	str	r2, [r3, #8]
      break;
 8003ef0:	e03c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 f8c8 	bl	8004094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2150      	movs	r1, #80	; 0x50
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f91f 	bl	800414e <TIM_ITRx_SetConfig>
      break;
 8003f10:	e02c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f000 f8e6 	bl	80040f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2160      	movs	r1, #96	; 0x60
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f90f 	bl	800414e <TIM_ITRx_SetConfig>
      break;
 8003f30:	e01c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 f8a8 	bl	8004094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2140      	movs	r1, #64	; 0x40
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f8ff 	bl	800414e <TIM_ITRx_SetConfig>
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 f8f6 	bl	800414e <TIM_ITRx_SetConfig>
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a29      	ldr	r2, [pc, #164]	; (8004088 <TIM_Base_SetConfig+0xb8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_Base_SetConfig+0x30>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0x30>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a26      	ldr	r2, [pc, #152]	; (800408c <TIM_Base_SetConfig+0xbc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0x30>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a25      	ldr	r2, [pc, #148]	; (8004090 <TIM_Base_SetConfig+0xc0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d108      	bne.n	8004012 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <TIM_Base_SetConfig+0xb8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0x62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0x62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a19      	ldr	r2, [pc, #100]	; (800408c <TIM_Base_SetConfig+0xbc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a18      	ldr	r2, [pc, #96]	; (8004090 <TIM_Base_SetConfig+0xc0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <TIM_Base_SetConfig+0xb8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d103      	bne.n	8004078 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	615a      	str	r2, [r3, #20]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800

08004094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0201 	bic.w	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f023 030a 	bic.w	r3, r3, #10
 80040d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f023 0210 	bic.w	r2, r3, #16
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800411a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	031b      	lsls	r3, r3, #12
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800412c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	f043 0307 	orr.w	r3, r3, #7
 8004170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004182:	b480      	push	{r7}
 8004184:	b087      	sub	sp, #28
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800419c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	609a      	str	r2, [r3, #8]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e046      	b.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00e      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d009      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10c      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4313      	orrs	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40000400 	.word	0x40000400
 8004278:	40000800 	.word	0x40000800

0800427c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e042      	b.n	8004338 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc ff10 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f82b 	bl	8004340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800437a:	f023 030c 	bic.w	r3, r3, #12
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	430b      	orrs	r3, r1
 8004386:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <UART_SetConfig+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d103      	bne.n	80043b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043a8:	f7ff fa4a 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	e002      	b.n	80043b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7ff fa32 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009a      	lsls	r2, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <UART_SetConfig+0x118>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	0119      	lsls	r1, r3, #4
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <UART_SetConfig+0x118>)
 80043ee:	fba3 0302 	umull	r0, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2064      	movs	r0, #100	; 0x64
 80043f6:	fb00 f303 	mul.w	r3, r0, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	3332      	adds	r3, #50	; 0x32
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <UART_SetConfig+0x118>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800440c:	4419      	add	r1, r3
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	fbb2 f2f3 	udiv	r2, r2, r3
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <UART_SetConfig+0x118>)
 8004426:	fba3 0302 	umull	r0, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2064      	movs	r0, #100	; 0x64
 800442e:	fb00 f303 	mul.w	r3, r0, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	3332      	adds	r3, #50	; 0x32
 8004438:	4a07      	ldr	r2, [pc, #28]	; (8004458 <UART_SetConfig+0x118>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	440a      	add	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40013800 	.word	0x40013800
 8004458:	51eb851f 	.word	0x51eb851f

0800445c <memset>:
 800445c:	4603      	mov	r3, r0
 800445e:	4402      	add	r2, r0
 8004460:	4293      	cmp	r3, r2
 8004462:	d100      	bne.n	8004466 <memset+0xa>
 8004464:	4770      	bx	lr
 8004466:	f803 1b01 	strb.w	r1, [r3], #1
 800446a:	e7f9      	b.n	8004460 <memset+0x4>

0800446c <__libc_init_array>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	2600      	movs	r6, #0
 8004470:	4d0c      	ldr	r5, [pc, #48]	; (80044a4 <__libc_init_array+0x38>)
 8004472:	4c0d      	ldr	r4, [pc, #52]	; (80044a8 <__libc_init_array+0x3c>)
 8004474:	1b64      	subs	r4, r4, r5
 8004476:	10a4      	asrs	r4, r4, #2
 8004478:	42a6      	cmp	r6, r4
 800447a:	d109      	bne.n	8004490 <__libc_init_array+0x24>
 800447c:	f000 f81a 	bl	80044b4 <_init>
 8004480:	2600      	movs	r6, #0
 8004482:	4d0a      	ldr	r5, [pc, #40]	; (80044ac <__libc_init_array+0x40>)
 8004484:	4c0a      	ldr	r4, [pc, #40]	; (80044b0 <__libc_init_array+0x44>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	42a6      	cmp	r6, r4
 800448c:	d105      	bne.n	800449a <__libc_init_array+0x2e>
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	f855 3b04 	ldr.w	r3, [r5], #4
 8004494:	4798      	blx	r3
 8004496:	3601      	adds	r6, #1
 8004498:	e7ee      	b.n	8004478 <__libc_init_array+0xc>
 800449a:	f855 3b04 	ldr.w	r3, [r5], #4
 800449e:	4798      	blx	r3
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7f2      	b.n	800448a <__libc_init_array+0x1e>
 80044a4:	080044f8 	.word	0x080044f8
 80044a8:	080044f8 	.word	0x080044f8
 80044ac:	080044f8 	.word	0x080044f8
 80044b0:	080044fc 	.word	0x080044fc

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	bf00      	nop
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
