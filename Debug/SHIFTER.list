
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007694  08007694  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007694  08007694  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007694  08007694  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800769c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025bc  2000000c  080076a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025c8  080076a8  000225c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197eb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa8  00000000  00000000  00039820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a919  00000000  00000000  0003e820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143e1  00000000  00000000  00059139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095256  00000000  00000000  0006d51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102770  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b0  00000000  00000000  001027c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800748c 	.word	0x0800748c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800748c 	.word	0x0800748c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_d2uiz>:
 8000514:	004a      	lsls	r2, r1, #1
 8000516:	d211      	bcs.n	800053c <__aeabi_d2uiz+0x28>
 8000518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800051c:	d211      	bcs.n	8000542 <__aeabi_d2uiz+0x2e>
 800051e:	d50d      	bpl.n	800053c <__aeabi_d2uiz+0x28>
 8000520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000528:	d40e      	bmi.n	8000548 <__aeabi_d2uiz+0x34>
 800052a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000536:	fa23 f002 	lsr.w	r0, r3, r2
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000546:	d102      	bne.n	800054e <__aeabi_d2uiz+0x3a>
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	4770      	bx	lr
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_frsub>:
 8000554:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__addsf3>
 800055a:	bf00      	nop

0800055c <__aeabi_fsub>:
 800055c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000560 <__addsf3>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	bf1f      	itttt	ne
 8000564:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000568:	ea92 0f03 	teqne	r2, r3
 800056c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000570:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000574:	d06a      	beq.n	800064c <__addsf3+0xec>
 8000576:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800057e:	bfc1      	itttt	gt
 8000580:	18d2      	addgt	r2, r2, r3
 8000582:	4041      	eorgt	r1, r0
 8000584:	4048      	eorgt	r0, r1
 8000586:	4041      	eorgt	r1, r0
 8000588:	bfb8      	it	lt
 800058a:	425b      	neglt	r3, r3
 800058c:	2b19      	cmp	r3, #25
 800058e:	bf88      	it	hi
 8000590:	4770      	bxhi	lr
 8000592:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4249      	negne	r1, r1
 80005b2:	ea92 0f03 	teq	r2, r3
 80005b6:	d03f      	beq.n	8000638 <__addsf3+0xd8>
 80005b8:	f1a2 0201 	sub.w	r2, r2, #1
 80005bc:	fa41 fc03 	asr.w	ip, r1, r3
 80005c0:	eb10 000c 	adds.w	r0, r0, ip
 80005c4:	f1c3 0320 	rsb	r3, r3, #32
 80005c8:	fa01 f103 	lsl.w	r1, r1, r3
 80005cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d0:	d502      	bpl.n	80005d8 <__addsf3+0x78>
 80005d2:	4249      	negs	r1, r1
 80005d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005dc:	d313      	bcc.n	8000606 <__addsf3+0xa6>
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d306      	bcc.n	80005f2 <__addsf3+0x92>
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	f102 0201 	add.w	r2, r2, #1
 80005ee:	2afe      	cmp	r2, #254	; 0xfe
 80005f0:	d251      	bcs.n	8000696 <__addsf3+0x136>
 80005f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005fa:	bf08      	it	eq
 80005fc:	f020 0001 	biceq.w	r0, r0, #1
 8000600:	ea40 0003 	orr.w	r0, r0, r3
 8000604:	4770      	bx	lr
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	eb40 0000 	adc.w	r0, r0, r0
 800060c:	3a01      	subs	r2, #1
 800060e:	bf28      	it	cs
 8000610:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000614:	d2ed      	bcs.n	80005f2 <__addsf3+0x92>
 8000616:	fab0 fc80 	clz	ip, r0
 800061a:	f1ac 0c08 	sub.w	ip, ip, #8
 800061e:	ebb2 020c 	subs.w	r2, r2, ip
 8000622:	fa00 f00c 	lsl.w	r0, r0, ip
 8000626:	bfaa      	itet	ge
 8000628:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800062c:	4252      	neglt	r2, r2
 800062e:	4318      	orrge	r0, r3
 8000630:	bfbc      	itt	lt
 8000632:	40d0      	lsrlt	r0, r2
 8000634:	4318      	orrlt	r0, r3
 8000636:	4770      	bx	lr
 8000638:	f092 0f00 	teq	r2, #0
 800063c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000640:	bf06      	itte	eq
 8000642:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000646:	3201      	addeq	r2, #1
 8000648:	3b01      	subne	r3, #1
 800064a:	e7b5      	b.n	80005b8 <__addsf3+0x58>
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d021      	beq.n	80006a0 <__addsf3+0x140>
 800065c:	ea92 0f03 	teq	r2, r3
 8000660:	d004      	beq.n	800066c <__addsf3+0x10c>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	bf08      	it	eq
 8000668:	4608      	moveq	r0, r1
 800066a:	4770      	bx	lr
 800066c:	ea90 0f01 	teq	r0, r1
 8000670:	bf1c      	itt	ne
 8000672:	2000      	movne	r0, #0
 8000674:	4770      	bxne	lr
 8000676:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800067a:	d104      	bne.n	8000686 <__addsf3+0x126>
 800067c:	0040      	lsls	r0, r0, #1
 800067e:	bf28      	it	cs
 8000680:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000684:	4770      	bx	lr
 8000686:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800068a:	bf3c      	itt	cc
 800068c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000690:	4770      	bxcc	lr
 8000692:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000696:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800069a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800069e:	4770      	bx	lr
 80006a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006a4:	bf16      	itet	ne
 80006a6:	4608      	movne	r0, r1
 80006a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ac:	4601      	movne	r1, r0
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	bf06      	itte	eq
 80006b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006b6:	ea90 0f01 	teqeq	r0, r1
 80006ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006be:	4770      	bx	lr

080006c0 <__aeabi_ui2f>:
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e004      	b.n	80006d0 <__aeabi_i2f+0x8>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2f>:
 80006c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	bf48      	it	mi
 80006ce:	4240      	negmi	r0, r0
 80006d0:	ea5f 0c00 	movs.w	ip, r0
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006dc:	4601      	mov	r1, r0
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	e01c      	b.n	800071e <__aeabi_l2f+0x2a>

080006e4 <__aeabi_ul2f>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e00a      	b.n	8000708 <__aeabi_l2f+0x14>
 80006f2:	bf00      	nop

080006f4 <__aeabi_l2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000700:	d502      	bpl.n	8000708 <__aeabi_l2f+0x14>
 8000702:	4240      	negs	r0, r0
 8000704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000708:	ea5f 0c01 	movs.w	ip, r1
 800070c:	bf02      	ittt	eq
 800070e:	4684      	moveq	ip, r0
 8000710:	4601      	moveq	r1, r0
 8000712:	2000      	moveq	r0, #0
 8000714:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000718:	bf08      	it	eq
 800071a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800071e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000722:	fabc f28c 	clz	r2, ip
 8000726:	3a08      	subs	r2, #8
 8000728:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800072c:	db10      	blt.n	8000750 <__aeabi_l2f+0x5c>
 800072e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000732:	4463      	add	r3, ip
 8000734:	fa00 fc02 	lsl.w	ip, r0, r2
 8000738:	f1c2 0220 	rsb	r2, r2, #32
 800073c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000740:	fa20 f202 	lsr.w	r2, r0, r2
 8000744:	eb43 0002 	adc.w	r0, r3, r2
 8000748:	bf08      	it	eq
 800074a:	f020 0001 	biceq.w	r0, r0, #1
 800074e:	4770      	bx	lr
 8000750:	f102 0220 	add.w	r2, r2, #32
 8000754:	fa01 fc02 	lsl.w	ip, r1, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000760:	fa21 f202 	lsr.w	r2, r1, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800076e:	4770      	bx	lr

08000770 <__aeabi_fmul>:
 8000770:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000774:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000778:	bf1e      	ittt	ne
 800077a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800077e:	ea92 0f0c 	teqne	r2, ip
 8000782:	ea93 0f0c 	teqne	r3, ip
 8000786:	d06f      	beq.n	8000868 <__aeabi_fmul+0xf8>
 8000788:	441a      	add	r2, r3
 800078a:	ea80 0c01 	eor.w	ip, r0, r1
 800078e:	0240      	lsls	r0, r0, #9
 8000790:	bf18      	it	ne
 8000792:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000796:	d01e      	beq.n	80007d6 <__aeabi_fmul+0x66>
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007a4:	fba0 3101 	umull	r3, r1, r0, r1
 80007a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b0:	bf3e      	ittt	cc
 80007b2:	0049      	lslcc	r1, r1, #1
 80007b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007b8:	005b      	lslcc	r3, r3, #1
 80007ba:	ea40 0001 	orr.w	r0, r0, r1
 80007be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007c2:	2afd      	cmp	r2, #253	; 0xfd
 80007c4:	d81d      	bhi.n	8000802 <__aeabi_fmul+0x92>
 80007c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	4770      	bx	lr
 80007d6:	f090 0f00 	teq	r0, #0
 80007da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007de:	bf08      	it	eq
 80007e0:	0249      	lsleq	r1, r1, #9
 80007e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ea:	3a7f      	subs	r2, #127	; 0x7f
 80007ec:	bfc2      	ittt	gt
 80007ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007f6:	4770      	bxgt	lr
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	3a01      	subs	r2, #1
 8000802:	dc5d      	bgt.n	80008c0 <__aeabi_fmul+0x150>
 8000804:	f112 0f19 	cmn.w	r2, #25
 8000808:	bfdc      	itt	le
 800080a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800080e:	4770      	bxle	lr
 8000810:	f1c2 0200 	rsb	r2, r2, #0
 8000814:	0041      	lsls	r1, r0, #1
 8000816:	fa21 f102 	lsr.w	r1, r1, r2
 800081a:	f1c2 0220 	rsb	r2, r2, #32
 800081e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000822:	ea5f 0031 	movs.w	r0, r1, rrx
 8000826:	f140 0000 	adc.w	r0, r0, #0
 800082a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800082e:	bf08      	it	eq
 8000830:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000834:	4770      	bx	lr
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800083e:	bf02      	ittt	eq
 8000840:	0040      	lsleq	r0, r0, #1
 8000842:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000846:	3a01      	subeq	r2, #1
 8000848:	d0f9      	beq.n	800083e <__aeabi_fmul+0xce>
 800084a:	ea40 000c 	orr.w	r0, r0, ip
 800084e:	f093 0f00 	teq	r3, #0
 8000852:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000856:	bf02      	ittt	eq
 8000858:	0049      	lsleq	r1, r1, #1
 800085a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800085e:	3b01      	subeq	r3, #1
 8000860:	d0f9      	beq.n	8000856 <__aeabi_fmul+0xe6>
 8000862:	ea41 010c 	orr.w	r1, r1, ip
 8000866:	e78f      	b.n	8000788 <__aeabi_fmul+0x18>
 8000868:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800086c:	ea92 0f0c 	teq	r2, ip
 8000870:	bf18      	it	ne
 8000872:	ea93 0f0c 	teqne	r3, ip
 8000876:	d00a      	beq.n	800088e <__aeabi_fmul+0x11e>
 8000878:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800087c:	bf18      	it	ne
 800087e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000882:	d1d8      	bne.n	8000836 <__aeabi_fmul+0xc6>
 8000884:	ea80 0001 	eor.w	r0, r0, r1
 8000888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f090 0f00 	teq	r0, #0
 8000892:	bf17      	itett	ne
 8000894:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000898:	4608      	moveq	r0, r1
 800089a:	f091 0f00 	teqne	r1, #0
 800089e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008a2:	d014      	beq.n	80008ce <__aeabi_fmul+0x15e>
 80008a4:	ea92 0f0c 	teq	r2, ip
 80008a8:	d101      	bne.n	80008ae <__aeabi_fmul+0x13e>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d10f      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008ae:	ea93 0f0c 	teq	r3, ip
 80008b2:	d103      	bne.n	80008bc <__aeabi_fmul+0x14c>
 80008b4:	024b      	lsls	r3, r1, #9
 80008b6:	bf18      	it	ne
 80008b8:	4608      	movne	r0, r1
 80008ba:	d108      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008bc:	ea80 0001 	eor.w	r0, r0, r1
 80008c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bx	lr
 80008ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fdiv>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d069      	beq.n	80009c4 <__aeabi_fdiv+0xec>
 80008f0:	eba2 0203 	sub.w	r2, r2, r3
 80008f4:	ea80 0c01 	eor.w	ip, r0, r1
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008fe:	d037      	beq.n	8000970 <__aeabi_fdiv+0x98>
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000908:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800090c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000910:	428b      	cmp	r3, r1
 8000912:	bf38      	it	cc
 8000914:	005b      	lslcc	r3, r3, #1
 8000916:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800091a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800091e:	428b      	cmp	r3, r1
 8000920:	bf24      	itt	cs
 8000922:	1a5b      	subcs	r3, r3, r1
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800092c:	bf24      	itt	cs
 800092e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000932:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000936:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800093a:	bf24      	itt	cs
 800093c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000948:	bf24      	itt	cs
 800094a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800094e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	bf18      	it	ne
 8000956:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800095a:	d1e0      	bne.n	800091e <__aeabi_fdiv+0x46>
 800095c:	2afd      	cmp	r2, #253	; 0xfd
 800095e:	f63f af50 	bhi.w	8000802 <__aeabi_fmul+0x92>
 8000962:	428b      	cmp	r3, r1
 8000964:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000968:	bf08      	it	eq
 800096a:	f020 0001 	biceq.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000974:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000978:	327f      	adds	r2, #127	; 0x7f
 800097a:	bfc2      	ittt	gt
 800097c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000980:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000984:	4770      	bxgt	lr
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	3a01      	subs	r2, #1
 8000990:	e737      	b.n	8000802 <__aeabi_fmul+0x92>
 8000992:	f092 0f00 	teq	r2, #0
 8000996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800099a:	bf02      	ittt	eq
 800099c:	0040      	lsleq	r0, r0, #1
 800099e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009a2:	3a01      	subeq	r2, #1
 80009a4:	d0f9      	beq.n	800099a <__aeabi_fdiv+0xc2>
 80009a6:	ea40 000c 	orr.w	r0, r0, ip
 80009aa:	f093 0f00 	teq	r3, #0
 80009ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0049      	lsleq	r1, r1, #1
 80009b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ba:	3b01      	subeq	r3, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fdiv+0xda>
 80009be:	ea41 010c 	orr.w	r1, r1, ip
 80009c2:	e795      	b.n	80008f0 <__aeabi_fdiv+0x18>
 80009c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d108      	bne.n	80009e0 <__aeabi_fdiv+0x108>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	f47f af7d 	bne.w	80008ce <__aeabi_fmul+0x15e>
 80009d4:	ea93 0f0c 	teq	r3, ip
 80009d8:	f47f af70 	bne.w	80008bc <__aeabi_fmul+0x14c>
 80009dc:	4608      	mov	r0, r1
 80009de:	e776      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009e0:	ea93 0f0c 	teq	r3, ip
 80009e4:	d104      	bne.n	80009f0 <__aeabi_fdiv+0x118>
 80009e6:	024b      	lsls	r3, r1, #9
 80009e8:	f43f af4c 	beq.w	8000884 <__aeabi_fmul+0x114>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e76e      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f4:	bf18      	it	ne
 80009f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	d1ca      	bne.n	8000992 <__aeabi_fdiv+0xba>
 80009fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a00:	f47f af5c 	bne.w	80008bc <__aeabi_fmul+0x14c>
 8000a04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a08:	f47f af3c 	bne.w	8000884 <__aeabi_fmul+0x114>
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0x15e>
 8000a0e:	bf00      	nop

08000a10 <__gesf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295
 8000a14:	e006      	b.n	8000a24 <__cmpsf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__lesf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpsf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpsf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d011      	beq.n	8000a60 <__cmpsf2+0x40>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a42:	bf18      	it	ne
 8000a44:	ea90 0f01 	teqne	r0, r1
 8000a48:	bf58      	it	pl
 8000a4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a4e:	bf88      	it	hi
 8000a50:	17c8      	asrhi	r0, r1, #31
 8000a52:	bf38      	it	cc
 8000a54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a58:	bf18      	it	ne
 8000a5a:	f040 0001 	orrne.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	d102      	bne.n	8000a6c <__cmpsf2+0x4c>
 8000a66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a6a:	d105      	bne.n	8000a78 <__cmpsf2+0x58>
 8000a6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a70:	d1e4      	bne.n	8000a3c <__cmpsf2+0x1c>
 8000a72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a76:	d0e1      	beq.n	8000a3c <__cmpsf2+0x1c>
 8000a78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cfrcmple>:
 8000a80:	4684      	mov	ip, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4661      	mov	r1, ip
 8000a86:	e7ff      	b.n	8000a88 <__aeabi_cfcmpeq>

08000a88 <__aeabi_cfcmpeq>:
 8000a88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a8a:	f7ff ffc9 	bl	8000a20 <__cmpsf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a98 <__aeabi_fcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cfcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_fcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffd2 	bl	8000a80 <__aeabi_cfrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc8 	bl	8000a80 <__aeabi_cfrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_f2uiz>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	d20e      	bcs.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b04:	d30b      	bcc.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b0e:	d409      	bmi.n	8000b24 <__aeabi_f2uiz+0x28>
 8000b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2uiz+0x32>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_f2uiz+0x38>
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000b46:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <InitController+0x1b4>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000b4c:	4a69      	ldr	r2, [pc, #420]	; (8000cf4 <InitController+0x1b8>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6013      	str	r3, [r2, #0]

	MyOutputs->xClutchBitepoint = xCLUTCH_BITE_POINT;
 8000b52:	4b68      	ldr	r3, [pc, #416]	; (8000cf4 <InitController+0x1b8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000b5a:	821a      	strh	r2, [r3, #16]


	// Multifunction

	// default values
	outputs->NMultifunctionDefMask[0] = MULTIFUNCTION01_DEF_POS;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	outputs->NMultifunctionDefMask[1] = MULTIFUNCTION02_DEF_POS;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	outputs->NMultifunctionDefMask[2] = MULTIFUNCTION03_DEF_POS;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	outputs->NMultifunctionDefMask[3] = MULTIFUNCTION04_DEF_POS;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2201      	movs	r2, #1
 8000b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	outputs->NMultifunctionDefMask[4] = MULTIFUNCTION05_DEF_POS;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	outputs->NMultifunctionDefMask[5] = MULTIFUNCTION06_DEF_POS;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	outputs->NMultifunctionDefMask[6] = MULTIFUNCTION07_DEF_POS;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	outputs->NMultifunctionDefMask[7] = MULTIFUNCTION08_DEF_POS;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2201      	movs	r2, #1
 8000b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	outputs->NMultifunctionDefMask[8] = MULTIFUNCTION09_DEF_POS;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	outputs->NMultifunctionDefMask[9] = MULTIFUNCTION10_DEF_POS;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	outputs->NMultifunctionDefMask[10] = MULTIFUNCTION11_DEF_POS;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	outputs->NMultifunctionDefMask[11] = MULTIFUNCTION12_DEF_POS;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	outputs->NMultifunctionDefMask[12] = MULTIFUNCTION13_DEF_POS;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	outputs->NMultifunctionDefMask[13] = MULTIFUNCTION13_DEF_POS;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	// wrapping
	outputs->BMultifunctionWrap[0] = MULTIFUNCTION01_WRAP;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	outputs->BMultifunctionWrap[1] = MULTIFUNCTION02_WRAP;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	outputs->BMultifunctionWrap[2] = MULTIFUNCTION03_WRAP;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	outputs->BMultifunctionWrap[3] = MULTIFUNCTION04_WRAP;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	outputs->BMultifunctionWrap[4] = MULTIFUNCTION05_WRAP;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	outputs->BMultifunctionWrap[5] = MULTIFUNCTION06_WRAP;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	outputs->BMultifunctionWrap[6] = MULTIFUNCTION07_WRAP;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	outputs->BMultifunctionWrap[7] = MULTIFUNCTION08_WRAP;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	outputs->BMultifunctionWrap[8] = MULTIFUNCTION09_WRAP;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	outputs->BMultifunctionWrap[9] = MULTIFUNCTION10_WRAP;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2201      	movs	r2, #1
 8000c18:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	outputs->BMultifunctionWrap[10] = MULTIFUNCTION11_WRAP;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	outputs->BMultifunctionWrap[11] = MULTIFUNCTION12_WRAP;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	outputs->BMultifunctionWrap[12] = MULTIFUNCTION13_WRAP;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	outputs->BMultifunctionWrap[13] = MULTIFUNCTION13_WRAP;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

	// map map size
	outputs->NMultifunctionMaxPos[0] = MULTIFUNCTION01_MAX_POS;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	220e      	movs	r2, #14
 8000c40:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	outputs->NMultifunctionMaxPos[1] = MULTIFUNCTION02_MAX_POS;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	220e      	movs	r2, #14
 8000c48:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	outputs->NMultifunctionMaxPos[2] = MULTIFUNCTION03_MAX_POS;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	220e      	movs	r2, #14
 8000c50:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	outputs->NMultifunctionMaxPos[3] = MULTIFUNCTION04_MAX_POS;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	220e      	movs	r2, #14
 8000c58:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	outputs->NMultifunctionMaxPos[4] = MULTIFUNCTION05_MAX_POS;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	220e      	movs	r2, #14
 8000c60:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	outputs->NMultifunctionMaxPos[5] = MULTIFUNCTION06_MAX_POS;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	220e      	movs	r2, #14
 8000c68:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	outputs->NMultifunctionMaxPos[6] = MULTIFUNCTION07_MAX_POS;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	220e      	movs	r2, #14
 8000c70:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	outputs->NMultifunctionMaxPos[7] = MULTIFUNCTION08_MAX_POS;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2202      	movs	r2, #2
 8000c78:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	outputs->NMultifunctionMaxPos[8] = MULTIFUNCTION09_MAX_POS;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	220e      	movs	r2, #14
 8000c80:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	outputs->NMultifunctionMaxPos[9] = MULTIFUNCTION10_MAX_POS;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	220e      	movs	r2, #14
 8000c88:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	outputs->NMultifunctionMaxPos[10] = MULTIFUNCTION11_MAX_POS;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	220e      	movs	r2, #14
 8000c90:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	outputs->NMultifunctionMaxPos[11] = MULTIFUNCTION12_MAX_POS;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	220e      	movs	r2, #14
 8000c98:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	outputs->NMultifunctionMaxPos[12] = MULTIFUNCTION13_MAX_POS;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	220e      	movs	r2, #14
 8000ca0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	outputs->NMultifunctionMaxPos[13] = MULTIFUNCTION13_MAX_POS;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	220e      	movs	r2, #14
 8000ca8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	NMultifunctionActiveSwitchPrev = MyInputs->NSwitchA;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <InitController+0x1b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <InitController+0x1bc>)
 8000cb6:	701a      	strb	r2, [r3, #0]

	// set the current values to default
	for(uint8_t i=0; i<NMF; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e00e      	b.n	8000cdc <InitController+0x1a0>
		outputs->NMultifunction[i] = outputs->NMultifunctionMaxPos[i];
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	f893 2063 	ldrb.w	r2, [r3, #99]	; 0x63
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	b251      	sxtb	r1, r2
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	for(uint8_t i=0; i<NMF; i++) {
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b0d      	cmp	r3, #13
 8000ce0:	d9ed      	bls.n	8000cbe <InitController+0x182>
	}


	IDLE_Entry();
 8000ce2:	f000 fb17 	bl	8001314 <IDLE_Entry>
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000054 	.word	0x20000054
 8000cf4:	20000044 	.word	0x20000044
 8000cf8:	20000034 	.word	0x20000034

08000cfc <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 8000d06:	f002 fe49 	bl	800399c <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a58      	ldr	r2, [pc, #352]	; (8000e70 <Controller+0x174>)
 8000d0e:	6013      	str	r3, [r2, #0]

	// ANTISTALL
		#ifdef ANTISTALL_ENABLED

			// if the shut down is activated and we are at gear greater than neutral we can enter
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError && !MyOutputs->BShiftingInProgress && !MyInputs->BFalseNeutral) {
 8000d10:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <Controller+0x178>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f040 809f 	bne.w	8000e5c <Controller+0x160>
 8000d1e:	4b55      	ldr	r3, [pc, #340]	; (8000e74 <Controller+0x178>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8098 	beq.w	8000e5c <Controller+0x160>
 8000d2c:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <Controller+0x178>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 8091 	bne.w	8000e5c <Controller+0x160>
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <Controller+0x178>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 808a 	bne.w	8000e5c <Controller+0x160>
 8000d48:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <Controller+0x17c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f040 8083 	bne.w	8000e5c <Controller+0x160>
 8000d56:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <Controller+0x178>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d17c      	bne.n	8000e5c <Controller+0x160>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8000d62:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <Controller+0x17c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d03c      	beq.n	8000de8 <Controller+0xec>
 8000d6e:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <Controller+0x178>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <Controller+0x178>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000d80:	4619      	mov	r1, r3
 8000d82:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <Controller+0x180>)
 8000d84:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dc2d      	bgt.n	8000de8 <Controller+0xec>
 8000d8c:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <Controller+0x178>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000d94:	2b27      	cmp	r3, #39	; 0x27
 8000d96:	dc27      	bgt.n	8000de8 <Controller+0xec>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <Controller+0x17c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <Controller+0xbc>
						MyOutputs->NAntistallState = Init;
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <Controller+0x17c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
						tAntistallTimmer = HAL_GetTick();
 8000dae:	f002 fdf5 	bl	800399c <HAL_GetTick>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <Controller+0x184>)
 8000db6:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <Controller+0x17c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d111      	bne.n	8000de8 <Controller+0xec>
 8000dc4:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <Controller+0x184>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <Controller+0x174>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d209      	bcs.n	8000de8 <Controller+0xec>
						MyOutputs->NAntistallState = Active;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <Controller+0x17c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2202      	movs	r2, #2
 8000dda:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
						MyOutputs->xClutchTargetProtection = xCLUTCH_ABSOLUTE_MAX;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <Controller+0x17c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f640 0234 	movw	r2, #2100	; 0x834
 8000de6:	809a      	strh	r2, [r3, #4]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <Controller+0x17c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d11d      	bne.n	8000e30 <Controller+0x134>
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <Controller+0x178>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <Controller+0x178>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000e06:	4619      	mov	r1, r3
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <Controller+0x180>)
 8000e0a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dc05      	bgt.n	8000e1e <Controller+0x122>
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <Controller+0x178>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000e1a:	2b5f      	cmp	r3, #95	; 0x5f
 8000e1c:	dd08      	ble.n	8000e30 <Controller+0x134>
					MyOutputs->NAntistallState = Off;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <Controller+0x17c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					MyOutputs->xClutchTargetProtection = 0;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <Controller+0x17c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	809a      	strh	r2, [r3, #4]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <Controller+0x17c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d123      	bne.n	8000e84 <Controller+0x188>
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <Controller+0x178>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000e44:	2b5f      	cmp	r3, #95	; 0x5f
 8000e46:	dd1d      	ble.n	8000e84 <Controller+0x188>
					MyOutputs->NAntistallState = Off;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <Controller+0x17c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
					MyOutputs->xClutchTargetProtection = 0;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <Controller+0x17c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2200      	movs	r2, #0
 8000e58:	809a      	strh	r2, [r3, #4]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e5a:	e013      	b.n	8000e84 <Controller+0x188>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <Controller+0x17c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				MyOutputs->xClutchTargetProtection = 0;
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <Controller+0x17c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	809a      	strh	r2, [r3, #4]
 8000e6e:	e00a      	b.n	8000e86 <Controller+0x18a>
 8000e70:	20000048 	.word	0x20000048
 8000e74:	20000054 	.word	0x20000054
 8000e78:	20000044 	.word	0x20000044
 8000e7c:	080074fc 	.word	0x080074fc
 8000e80:	2000004c 	.word	0x2000004c
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000e84:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8000e86:	4ba2      	ldr	r3, [pc, #648]	; (8001110 <Controller+0x414>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d114      	bne.n	8000ebc <Controller+0x1c0>
			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_MAX_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8000e92:	4b9f      	ldr	r3, [pc, #636]	; (8001110 <Controller+0x414>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fc14 	bl	80006c8 <__aeabi_i2f>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	4b9c      	ldr	r3, [pc, #624]	; (8001114 <Controller+0x418>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	f04f 0100 	mov.w	r1, #0
 8000eac:	9101      	str	r1, [sp, #4]
 8000eae:	f04f 0100 	mov.w	r1, #0
 8000eb2:	9100      	str	r1, [sp, #0]
 8000eb4:	4998      	ldr	r1, [pc, #608]	; (8001118 <Controller+0x41c>)
 8000eb6:	200b      	movs	r0, #11
 8000eb8:	f002 fc46 	bl	8003748 <My2DMapInterpolate>
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the one request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MAX(MyOutputs->xClutchTargetProtection, MAX((uint16_t)MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift));
 8000ebc:	4b95      	ldr	r3, [pc, #596]	; (8001114 <Controller+0x418>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	899c      	ldrh	r4, [r3, #12]
 8000ec2:	4b94      	ldr	r3, [pc, #592]	; (8001114 <Controller+0x418>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe17 	bl	8000afc <__aeabi_f2uiz>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	42a3      	cmp	r3, r4
 8000ed4:	bf38      	it	cc
 8000ed6:	4623      	movcc	r3, r4
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	4b8e      	ldr	r3, [pc, #568]	; (8001114 <Controller+0x418>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	889a      	ldrh	r2, [r3, #4]
 8000ee0:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <Controller+0x418>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	460a      	movcc	r2, r1
 8000eea:	b292      	uxth	r2, r2
 8000eec:	81da      	strh	r2, [r3, #14]


	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES & LEDS
		MyOutputs->BSWLEDA = MyInputs->NToggleSwitch01State;
 8000eee:	4b88      	ldr	r3, [pc, #544]	; (8001110 <Controller+0x414>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b88      	ldr	r3, [pc, #544]	; (8001114 <Controller+0x418>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 8000efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		MyOutputs->BSWLEDB = MyInputs->NToggleSwitch02State;
 8000efe:	4b84      	ldr	r3, [pc, #528]	; (8001110 <Controller+0x414>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b84      	ldr	r3, [pc, #528]	; (8001114 <Controller+0x418>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
 8000f0a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		MyOutputs->BSWLEDC = MyInputs->NToggleSwitch03State;
 8000f0e:	4b80      	ldr	r3, [pc, #512]	; (8001110 <Controller+0x414>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4b80      	ldr	r3, [pc, #512]	; (8001114 <Controller+0x418>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
 8000f1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// MULTIFUNCTION

		// inputs
		MyOutputs->NMultifunctionActiveSwitch = MyInputs->NSwitchA;
 8000f1e:	4b7c      	ldr	r3, [pc, #496]	; (8001110 <Controller+0x414>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <Controller+0x418>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8000f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		MyOutputs->BMultifunctionNextPos = MyInputs->BSWButtonD;
 8000f2e:	4b78      	ldr	r3, [pc, #480]	; (8001110 <Controller+0x414>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b78      	ldr	r3, [pc, #480]	; (8001114 <Controller+0x418>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f892 206e 	ldrb.w	r2, [r2, #110]	; 0x6e
 8000f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		MyOutputs->BMultifunctionPrevPos = MyInputs->BSWButtonC;
 8000f3e:	4b74      	ldr	r3, [pc, #464]	; (8001110 <Controller+0x414>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b74      	ldr	r3, [pc, #464]	; (8001114 <Controller+0x418>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8000f4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

		if(MyOutputs->NMultifunctionActiveSwitch != NMultifunctionActiveSwitchPrev) {
 8000f4e:	4b71      	ldr	r3, [pc, #452]	; (8001114 <Controller+0x418>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8000f56:	4b71      	ldr	r3, [pc, #452]	; (800111c <Controller+0x420>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d019      	beq.n	8000f92 <Controller+0x296>
			NMultifunctionActiveSwitchPrev = MyOutputs->NMultifunctionActiveSwitch;
 8000f5e:	4b6d      	ldr	r3, [pc, #436]	; (8001114 <Controller+0x418>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8000f66:	4b6d      	ldr	r3, [pc, #436]	; (800111c <Controller+0x420>)
 8000f68:	701a      	strb	r2, [r3, #0]
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 8000f6a:	4b6d      	ldr	r3, [pc, #436]	; (8001120 <Controller+0x424>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b69      	ldr	r3, [pc, #420]	; (8001114 <Controller+0x418>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8000f76:	675a      	str	r2, [r3, #116]	; 0x74
			MyOutputs->BUseButtonsForMultifunction = 1;
 8000f78:	4b66      	ldr	r3, [pc, #408]	; (8001114 <Controller+0x418>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			NMFIdx = MyOutputs->NMultifunctionActiveSwitch - 1;	// to go from 1-14 to 0-13 indexing for the arrays
 8000f82:	4b64      	ldr	r3, [pc, #400]	; (8001114 <Controller+0x418>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b65      	ldr	r3, [pc, #404]	; (8001124 <Controller+0x428>)
 8000f90:	701a      	strb	r2, [r3, #0]
		}


		// + Button (next position)
		if(MyOutputs->BMultifunctionNextPos && (MyOutputs->tMultifunctionActiveOnRot >= tControllerTimmer || ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) && !MyOutputs->BMultifunctionNextPosState) {
 8000f92:	4b60      	ldr	r3, [pc, #384]	; (8001114 <Controller+0x418>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d04b      	beq.n	8001036 <Controller+0x33a>
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <Controller+0x418>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000fa4:	4b5e      	ldr	r3, [pc, #376]	; (8001120 <Controller+0x424>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d344      	bcc.n	8001036 <Controller+0x33a>
 8000fac:	4b59      	ldr	r3, [pc, #356]	; (8001114 <Controller+0x418>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d13e      	bne.n	8001036 <Controller+0x33a>
			MyOutputs->BMultifunctionNextPosState = 1;
 8000fb8:	4b56      	ldr	r3, [pc, #344]	; (8001114 <Controller+0x418>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <Controller+0x424>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <Controller+0x418>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8000fce:	675a      	str	r2, [r3, #116]	; 0x74

			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 8000fd0:	4b50      	ldr	r3, [pc, #320]	; (8001114 <Controller+0x418>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a53      	ldr	r2, [pc, #332]	; (8001124 <Controller+0x428>)
 8000fd6:	7812      	ldrb	r2, [r2, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f993 3047 	ldrsb.w	r3, [r3, #71]	; 0x47
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a4c      	ldr	r2, [pc, #304]	; (8001114 <Controller+0x418>)
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	494f      	ldr	r1, [pc, #316]	; (8001124 <Controller+0x428>)
 8000fe6:	7809      	ldrb	r1, [r1, #0]
 8000fe8:	440a      	add	r2, r1
 8000fea:	f892 2063 	ldrb.w	r2, [r2, #99]	; 0x63
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	db11      	blt.n	8001016 <Controller+0x31a>
				if(MyOutputs->BMultifunctionWrap[NMFIdx]) MyOutputs->NMultifunction[NMFIdx] = 0;
 8000ff2:	4b48      	ldr	r3, [pc, #288]	; (8001114 <Controller+0x418>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4b      	ldr	r2, [pc, #300]	; (8001124 <Controller+0x428>)
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001000:	2b00      	cmp	r3, #0
 8001002:	d024      	beq.n	800104e <Controller+0x352>
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <Controller+0x418>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <Controller+0x428>)
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	4413      	add	r3, r2
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 8001014:	e01b      	b.n	800104e <Controller+0x352>
			}
			else {
				MyOutputs->NMultifunction[NMFIdx] ++;
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <Controller+0x418>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a42      	ldr	r2, [pc, #264]	; (8001124 <Controller+0x428>)
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	1899      	adds	r1, r3, r2
 8001020:	f991 1047 	ldrsb.w	r1, [r1, #71]	; 0x47
 8001024:	b2c9      	uxtb	r1, r1
 8001026:	3101      	adds	r1, #1
 8001028:	b2c9      	uxtb	r1, r1
 800102a:	b249      	sxtb	r1, r1
 800102c:	4413      	add	r3, r2
 800102e:	460a      	mov	r2, r1
 8001030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 8001034:	e00b      	b.n	800104e <Controller+0x352>
			}
		}
		else if(!MyOutputs->BMultifunctionNextPos) {
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <Controller+0x418>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <Controller+0x354>
			MyOutputs->BMultifunctionNextPosState = 0;
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <Controller+0x418>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800104c:	e000      	b.n	8001050 <Controller+0x354>
			if(MyOutputs->NMultifunction[NMFIdx] + 1 >= MyOutputs->NMultifunctionMaxPos[NMFIdx]) {
 800104e:	bf00      	nop
		}

		if(MyOutputs->BMultifunctionPrevPos && (MyOutputs->tMultifunctionActiveOnRot >= tControllerTimmer || ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) && !MyOutputs->BMultifunctionPrevPosState) {
 8001050:	4b30      	ldr	r3, [pc, #192]	; (8001114 <Controller+0x418>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001058:	2b00      	cmp	r3, #0
 800105a:	d04d      	beq.n	80010f8 <Controller+0x3fc>
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <Controller+0x418>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <Controller+0x424>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d346      	bcc.n	80010f8 <Controller+0x3fc>
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <Controller+0x418>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001072:	2b00      	cmp	r3, #0
 8001074:	d140      	bne.n	80010f8 <Controller+0x3fc>
			MyOutputs->BMultifunctionPrevPosState = 1;
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <Controller+0x418>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			MyOutputs->tMultifunctionActiveOnRot = tControllerTimmer + MULTIFUNCTION_ACTIVE_TIME;
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <Controller+0x424>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <Controller+0x418>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 800108c:	675a      	str	r2, [r3, #116]	; 0x74

			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <Controller+0x418>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <Controller+0x428>)
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	4413      	add	r3, r2
 8001098:	f993 3047 	ldrsb.w	r3, [r3, #71]	; 0x47
 800109c:	2b00      	cmp	r3, #0
 800109e:	dc1b      	bgt.n	80010d8 <Controller+0x3dc>
				if(MyOutputs->BMultifunctionWrap[NMFIdx]) MyOutputs->NMultifunction[NMFIdx] = MyOutputs->NMultifunctionMaxPos[NMFIdx] - 1;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <Controller+0x418>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <Controller+0x428>)
 80010a6:	7812      	ldrb	r2, [r2, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d03a      	beq.n	8001128 <Controller+0x42c>
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <Controller+0x418>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <Controller+0x428>)
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b2d8      	uxtb	r0, r3
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <Controller+0x418>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a16      	ldr	r2, [pc, #88]	; (8001124 <Controller+0x428>)
 80010ca:	7812      	ldrb	r2, [r2, #0]
 80010cc:	4611      	mov	r1, r2
 80010ce:	b242      	sxtb	r2, r0
 80010d0:	440b      	add	r3, r1
 80010d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 80010d6:	e027      	b.n	8001128 <Controller+0x42c>
			}
			else {
				MyOutputs->NMultifunction[NMFIdx] --;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <Controller+0x418>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a11      	ldr	r2, [pc, #68]	; (8001124 <Controller+0x428>)
 80010de:	7812      	ldrb	r2, [r2, #0]
 80010e0:	1899      	adds	r1, r3, r2
 80010e2:	f991 1047 	ldrsb.w	r1, [r1, #71]	; 0x47
 80010e6:	b2c9      	uxtb	r1, r1
 80010e8:	3901      	subs	r1, #1
 80010ea:	b2c9      	uxtb	r1, r1
 80010ec:	b249      	sxtb	r1, r1
 80010ee:	4413      	add	r3, r2
 80010f0:	460a      	mov	r2, r1
 80010f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 80010f6:	e017      	b.n	8001128 <Controller+0x42c>
			}
		}
		else if(!MyOutputs->BMultifunctionPrevPos) {
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <Controller+0x418>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001100:	2b00      	cmp	r3, #0
 8001102:	d112      	bne.n	800112a <Controller+0x42e>
			MyOutputs->BMultifunctionPrevPosState = 0;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <Controller+0x418>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800110e:	e00c      	b.n	800112a <Controller+0x42e>
 8001110:	20000054 	.word	0x20000054
 8001114:	20000044 	.word	0x20000044
 8001118:	080074a4 	.word	0x080074a4
 800111c:	20000034 	.word	0x20000034
 8001120:	20000048 	.word	0x20000048
 8001124:	20000050 	.word	0x20000050
			if(MyOutputs->NMultifunction[NMFIdx] - 1 < 0 ) {
 8001128:	bf00      	nop
		}

		if(MyOutputs->tMultifunctionActiveOnRot < tControllerTimmer) {
 800112a:	4b75      	ldr	r3, [pc, #468]	; (8001300 <Controller+0x604>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001130:	4b74      	ldr	r3, [pc, #464]	; (8001304 <Controller+0x608>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d204      	bcs.n	8001142 <Controller+0x446>
			MyOutputs->BUseButtonsForMultifunction = 0;
 8001138:	4b71      	ldr	r3, [pc, #452]	; (8001300 <Controller+0x604>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// DISPLAY

		// inputs
		MyOutputs->BDisplayPageNext = MyInputs->BSWButtonD;
 8001142:	4b71      	ldr	r3, [pc, #452]	; (8001308 <Controller+0x60c>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <Controller+0x604>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f892 206e 	ldrb.w	r2, [r2, #110]	; 0x6e
 800114e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		MyOutputs->BDisplayPagePrev = MyInputs->BSWButtonC;
 8001152:	4b6d      	ldr	r3, [pc, #436]	; (8001308 <Controller+0x60c>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <Controller+0x604>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 800115e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		if(!ALLOW_MULTIFUNC_WITH_NO_ACTIVE_TIME) {	// we use the page buttons function only if we have the multifunction timing feature enabled

			if(!MyOutputs->BUseButtonsForMultifunction) {	// we only use them as page buttons when they are not used for the multifunction
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <Controller+0x604>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 8088 	bne.w	8001280 <Controller+0x584>
				if(MyOutputs->BDisplayPageNext && (MyOutputs->tDisplayPageDebounce < tControllerTimmer) && !MyOutputs->BDisplayPageNextState) {
 8001170:	4b63      	ldr	r3, [pc, #396]	; (8001300 <Controller+0x604>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001178:	2b00      	cmp	r3, #0
 800117a:	d036      	beq.n	80011ea <Controller+0x4ee>
 800117c:	4b60      	ldr	r3, [pc, #384]	; (8001300 <Controller+0x604>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <Controller+0x608>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d22f      	bcs.n	80011ea <Controller+0x4ee>
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <Controller+0x604>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001192:	2b00      	cmp	r3, #0
 8001194:	d129      	bne.n	80011ea <Controller+0x4ee>
					MyOutputs->BDisplayPageNextState = 1;
 8001196:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <Controller+0x604>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->tDisplayPageDebounce = tControllerTimmer + DISPLAY_PAGE_DEBOUNCE;
 80011a0:	4b58      	ldr	r3, [pc, #352]	; (8001304 <Controller+0x608>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b56      	ldr	r3, [pc, #344]	; (8001300 <Controller+0x604>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30

					MyOutputs->NDispalyPage ++;
 80011ae:	4b54      	ldr	r3, [pc, #336]	; (8001300 <Controller+0x604>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f993 2029 	ldrsb.w	r2, [r3, #41]	; 0x29
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	3201      	adds	r2, #1
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	b252      	sxtb	r2, r2
 80011be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
					MyOutputs->NDispalyPage %= DISPLAY_MAX_PAGE;
 80011c2:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <Controller+0x604>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f993 2029 	ldrsb.w	r2, [r3, #41]	; 0x29
 80011ca:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <Controller+0x604>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <Controller+0x610>)
 80011d0:	fb83 1302 	smull	r1, r3, r3, r2
 80011d4:	1059      	asrs	r1, r3, #1
 80011d6:	17d3      	asrs	r3, r2, #31
 80011d8:	1ac9      	subs	r1, r1, r3
 80011da:	460b      	mov	r3, r1
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80011e8:	e00a      	b.n	8001200 <Controller+0x504>

				}
				else if(!MyOutputs->BDisplayPageNext) {
 80011ea:	4b45      	ldr	r3, [pc, #276]	; (8001300 <Controller+0x604>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d104      	bne.n	8001200 <Controller+0x504>
					MyOutputs->BDisplayPageNextState = 0;
 80011f6:	4b42      	ldr	r3, [pc, #264]	; (8001300 <Controller+0x604>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				}

				if(MyOutputs->BDisplayPagePrev && (MyOutputs->tDisplayPageDebounce < tControllerTimmer) && !MyOutputs->BDisplayPagePrevState) {
 8001200:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <Controller+0x604>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001208:	2b00      	cmp	r3, #0
 800120a:	d02e      	beq.n	800126a <Controller+0x56e>
 800120c:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <Controller+0x604>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <Controller+0x608>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d227      	bcs.n	800126a <Controller+0x56e>
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <Controller+0x604>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <Controller+0x56e>
					MyOutputs->BDisplayPagePrevState = 1;
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <Controller+0x604>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					MyOutputs->tDisplayPageDebounce = tControllerTimmer + DISPLAY_PAGE_DEBOUNCE;
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <Controller+0x608>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <Controller+0x604>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 800123c:	631a      	str	r2, [r3, #48]	; 0x30

					MyOutputs->NDispalyPage --;
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <Controller+0x604>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f993 2029 	ldrsb.w	r2, [r3, #41]	; 0x29
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	3a01      	subs	r2, #1
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	b252      	sxtb	r2, r2
 800124e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
					if(MyOutputs->NDispalyPage < 0) MyOutputs->NDispalyPage = DISPLAY_MAX_PAGE - 1;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <Controller+0x604>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800125a:	2b00      	cmp	r3, #0
 800125c:	da10      	bge.n	8001280 <Controller+0x584>
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <Controller+0x604>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2204      	movs	r2, #4
 8001264:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001268:	e00a      	b.n	8001280 <Controller+0x584>

				}
				else if(!MyOutputs->BDisplayPagePrev) {
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <Controller+0x604>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <Controller+0x584>
					MyOutputs->BDisplayPagePrevState = 0;
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <Controller+0x604>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <Controller+0x614>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d82d      	bhi.n	80012e4 <Controller+0x5e8>
 8001288:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <Controller+0x594>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080012b3 	.word	0x080012b3
 8001298:	080012bd 	.word	0x080012bd
 800129c:	080012c7 	.word	0x080012c7
 80012a0:	080012d1 	.word	0x080012d1
 80012a4:	080012db 	.word	0x080012db

		case IDLE_STATE:
			IDLE_Run();
 80012a8:	f000 f878 	bl	800139c <IDLE_Run>
			IDLE_Event();
 80012ac:	f000 f84a 	bl	8001344 <IDLE_Event>
			break;
 80012b0:	e018      	b.n	80012e4 <Controller+0x5e8>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 80012b2:	f000 f8fd 	bl	80014b0 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 80012b6:	f000 f89b 	bl	80013f0 <PRE_UPSHIFT_Event>
			break;
 80012ba:	e013      	b.n	80012e4 <Controller+0x5e8>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 80012bc:	f000 fa0c 	bl	80016d8 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 80012c0:	f000 f9bc 	bl	800163c <PRE_DNSHIFT_Event>
			break;
 80012c4:	e00e      	b.n	80012e4 <Controller+0x5e8>
		case SHIFTING_STATE:
			SHIFTING_Run();
 80012c6:	f000 fb4d 	bl	8001964 <SHIFTING_Run>
			SHIFTING_Event();
 80012ca:	f000 fb25 	bl	8001918 <SHIFTING_Event>
			break;
 80012ce:	e009      	b.n	80012e4 <Controller+0x5e8>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 80012d0:	f000 fbc0 	bl	8001a54 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 80012d4:	f000 fb7e 	bl	80019d4 <POSTSHIFT_Event>
			break;
 80012d8:	e004      	b.n	80012e4 <Controller+0x5e8>
		case ERROR_STATE:
			ERROR_Run();
 80012da:	f000 fc29 	bl	8001b30 <ERROR_Run>
			ERROR_Event();
 80012de:	f000 fc15 	bl	8001b0c <ERROR_Event>
			break;
 80012e2:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// SHIFTER STATE MACHINE

		// we copy the input errors to be displayed in the screen
		MyOutputs->NErrorWord = (MyInputs->InputsErrorWord) << 16;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <Controller+0x60c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <Controller+0x604>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		// TODO: in the 16 LSBs include
		// false neutral
		// other controller errors that are useful for the driver like rejected shifts
		// antistall until it gets deactivated

}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000044 	.word	0x20000044
 8001304:	20000048 	.word	0x20000048
 8001308:	20000054 	.word	0x20000054
 800130c:	66666667 	.word	0x66666667
 8001310:	2000002e 	.word	0x2000002e

08001314 <IDLE_Entry>:

void IDLE_Entry(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <IDLE_Entry+0x1c>)
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <IDLE_Entry+0x20>)
 800131e:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <IDLE_Entry+0x1c>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2000002e 	.word	0x2000002e
 8001334:	2000002d 	.word	0x2000002d

08001338 <IDLE_Exit>:
void IDLE_Exit(void) {
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <IDLE_Event>:
void IDLE_Event(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <IDLE_Event+0x54>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fa21 	bl	8002794 <CheckFaults>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <IDLE_Event+0x1e>
		IDLE_Exit();
 8001358:	f7ff ffee 	bl	8001338 <IDLE_Exit>
		ERROR_Entry();
 800135c:	f000 fba6 	bl	8001aac <ERROR_Entry>
		return;
 8001360:	e018      	b.n	8001394 <IDLE_Event+0x50>
	}

	// TODO: do we need to also check controller errors here? I think no...

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <IDLE_Event+0x54>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <IDLE_Event+0x36>
        IDLE_Exit();
 8001370:	f7ff ffe2 	bl	8001338 <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8001374:	f000 f818 	bl	80013a8 <PRE_UPSHIFT_Entry>
        return;
 8001378:	e00c      	b.n	8001394 <IDLE_Event+0x50>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <IDLE_Event+0x54>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <IDLE_Event+0x50>
        IDLE_Exit();
 800138a:	f7ff ffd5 	bl	8001338 <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 800138e:	f000 f931 	bl	80015f4 <PRE_DNSHIFT_Entry>
        return;
 8001392:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000054 	.word	0x20000054

0800139c <IDLE_Run>:
void IDLE_Run(void) {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <PRE_UPSHIFT_Entry+0x2c>)
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <PRE_UPSHIFT_Entry+0x30>)
 80013b2:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <PRE_UPSHIFT_Entry+0x2c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftingInProgress = 1;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <PRE_UPSHIFT_Entry+0x34>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	tPreShiftTimer = HAL_GetTick();
 80013c4:	f002 faea 	bl	800399c <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <PRE_UPSHIFT_Entry+0x38>)
 80013cc:	6013      	str	r3, [r2, #0]
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000002e 	.word	0x2000002e
 80013d8:	2000002d 	.word	0x2000002d
 80013dc:	20000044 	.word	0x20000044
 80013e0:	20000030 	.word	0x20000030

080013e4 <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 80013f0:	b598      	push	{r3, r4, r7, lr}
 80013f2:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <PRE_UPSHIFT_Event+0xb0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 f9cb 	bl	8002794 <CheckFaults>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <PRE_UPSHIFT_Event+0x1e>
		PRE_UPSHIFT_Exit();
 8001404:	f7ff ffee 	bl	80013e4 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8001408:	f000 fb50 	bl	8001aac <ERROR_Entry>
		return;
 800140c:	e046      	b.n	800149c <PRE_UPSHIFT_Event+0xac>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d12e      	bne.n	8001476 <PRE_UPSHIFT_Event+0x86>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <PRE_UPSHIFT_Event+0xb0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3201      	adds	r2, #1
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_UPSHIFT || MyOutputs->BOverrideActuateClutchOnUpShift) {		// we check for clutch strategy during shift
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001432:	2b00      	cmp	r3, #0
 8001434:	d011      	beq.n	800145a <PRE_UPSHIFT_Event+0x6a>
			MyOutputs->xClutchTargetShift = xClutchTargetUpShiftMap[MyInputs->NGear];
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <PRE_UPSHIFT_Event+0xb0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800143e:	461a      	mov	r2, r3
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <PRE_UPSHIFT_Event+0xb8>)
 8001442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b292      	uxth	r2, r2
 800144c:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnUpShift = 0; 									// reset the strat for the next gear
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8001458:	e003      	b.n	8001462 <PRE_UPSHIFT_Event+0x72>
		}
		else {
			MyOutputs->xClutchTargetShift = 0;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	819a      	strh	r2, [r3, #12]
		}

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

		PRE_UPSHIFT_Exit();
 800146c:	f7ff ffba 	bl	80013e4 <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8001470:	f000 f9da 	bl	8001828 <SHIFTING_Entry>
		return;
 8001474:	e012      	b.n	800149c <PRE_UPSHIFT_Event+0xac>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <PRE_UPSHIFT_Event+0xb4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00d      	beq.n	800149c <PRE_UPSHIFT_Event+0xac>
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <PRE_UPSHIFT_Event+0xbc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001488:	f002 fa88 	bl	800399c <HAL_GetTick>
 800148c:	4603      	mov	r3, r0
 800148e:	429c      	cmp	r4, r3
 8001490:	d804      	bhi.n	800149c <PRE_UPSHIFT_Event+0xac>
		PRE_UPSHIFT_Exit();
 8001492:	f7ff ffa7 	bl	80013e4 <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8001496:	f000 fb09 	bl	8001aac <ERROR_Entry>
		return;
 800149a:	bf00      	nop
	}


}
 800149c:	bd98      	pop	{r3, r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000054 	.word	0x20000054
 80014a4:	20000044 	.word	0x20000044
 80014a8:	08007520 	.word	0x08007520
 80014ac:	20000030 	.word	0x20000030

080014b0 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d113      	bne.n	80014e8 <PRE_UPSHIFT_Run+0x38>
 80014c0:	4b49      	ldr	r3, [pc, #292]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 80014c8:	2b59      	cmp	r3, #89	; 0x59
 80014ca:	dc0d      	bgt.n	80014e8 <PRE_UPSHIFT_Run+0x38>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 80014cc:	4b47      	ldr	r3, [pc, #284]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0202 	orr.w	r2, r2, #2
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2201      	movs	r2, #1
 80014e4:	705a      	strb	r2, [r3, #1]
 80014e6:	e008      	b.n	80014fa <PRE_UPSHIFT_Run+0x4a>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0202 	bic.w	r2, r2, #2
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError && !(ALLOW_GEARS_WITH_CAR_STOPPED && MyInputs->rClutchPaddle >= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST)) {	// trying to shift up with too low rpm
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001502:	461a      	mov	r2, r3
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800150c:	4619      	mov	r1, r3
 800150e:	4b38      	ldr	r3, [pc, #224]	; (80015f0 <PRE_UPSHIFT_Run+0x140>)
 8001510:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001514:	429a      	cmp	r2, r3
 8001516:	da19      	bge.n	800154c <PRE_UPSHIFT_Run+0x9c>
 8001518:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001520:	2b00      	cmp	r3, #0
 8001522:	d113      	bne.n	800154c <PRE_UPSHIFT_Run+0x9c>
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800152c:	2b59      	cmp	r3, #89	; 0x59
 800152e:	dc0d      	bgt.n	800154c <PRE_UPSHIFT_Run+0x9c>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0208 	orr.w	r2, r2, #8
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2203      	movs	r2, #3
 8001548:	705a      	strb	r2, [r3, #1]
 800154a:	e008      	b.n	800155e <PRE_UPSHIFT_Run+0xae>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0208 	bic.w	r2, r2, #8
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001566:	2b04      	cmp	r3, #4
 8001568:	d90d      	bls.n	8001586 <PRE_UPSHIFT_Run+0xd6>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0210 	orr.w	r2, r2, #16
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2204      	movs	r2, #4
 8001582:	705a      	strb	r2, [r3, #1]
 8001584:	e008      	b.n	8001598 <PRE_UPSHIFT_Run+0xe8>
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0210 	bic.w	r2, r2, #16
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]

	if(MyInputs->BFalseNeutral && !MyInputs->BNGearInError && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST) {	// trying to shift during False Neutral without clutch pressed
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d016      	beq.n	80015d2 <PRE_UPSHIFT_Run+0x122>
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d110      	bne.n	80015d2 <PRE_UPSHIFT_Run+0x122>
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <PRE_UPSHIFT_Run+0x138>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 80015b8:	2b59      	cmp	r3, #89	; 0x59
 80015ba:	dc0a      	bgt.n	80015d2 <PRE_UPSHIFT_Run+0x122>
		RaiseControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH);
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2209      	movs	r2, #9
 80015ce:	705a      	strb	r2, [r3, #1]
 80015d0:	e006      	b.n	80015e0 <PRE_UPSHIFT_Run+0x130>
	}
	else { ClearControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH); }
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <PRE_UPSHIFT_Run+0x13c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000054 	.word	0x20000054
 80015ec:	20000044 	.word	0x20000044
 80015f0:	08007508 	.word	0x08007508

080015f4 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <PRE_DNSHIFT_Entry+0x2c>)
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <PRE_DNSHIFT_Entry+0x30>)
 80015fe:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <PRE_DNSHIFT_Entry+0x2c>)
 8001602:	2202      	movs	r2, #2
 8001604:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftingInProgress = 1;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <PRE_DNSHIFT_Entry+0x34>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	tPreShiftTimer = HAL_GetTick();
 8001610:	f002 f9c4 	bl	800399c <HAL_GetTick>
 8001614:	4603      	mov	r3, r0
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <PRE_DNSHIFT_Entry+0x38>)
 8001618:	6013      	str	r3, [r2, #0]
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000002e 	.word	0x2000002e
 8001624:	2000002d 	.word	0x2000002d
 8001628:	20000044 	.word	0x20000044
 800162c:	20000030 	.word	0x20000030

08001630 <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 800163c:	b598      	push	{r3, r4, r7, lr}
 800163e:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <PRE_DNSHIFT_Event+0x8c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f001 f8a5 	bl	8002794 <CheckFaults>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <PRE_DNSHIFT_Event+0x1e>
		PRE_DNSHIFT_Exit();
 8001650:	f7ff ffee 	bl	8001630 <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 8001654:	f000 fa2a 	bl	8001aac <ERROR_Entry>
		return;
 8001658:	e035      	b.n	80016c6 <PRE_DNSHIFT_Event+0x8a>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <PRE_DNSHIFT_Event+0x90>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d11d      	bne.n	80016a0 <PRE_DNSHIFT_Event+0x64>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <PRE_DNSHIFT_Event+0x8c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <PRE_DNSHIFT_Event+0x90>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3a01      	subs	r2, #1
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_DNSHIFT || MyOutputs->BOverrideActuateClutchOnDnShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetDnShiftMap[MyInputs->NGear];
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <PRE_DNSHIFT_Event+0x8c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800167e:	4619      	mov	r1, r3
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <PRE_DNSHIFT_Event+0x90>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <PRE_DNSHIFT_Event+0x94>)
 8001686:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800168a:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnDnShift = 0; 									// reset the strat for the next gear
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <PRE_DNSHIFT_Event+0x90>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			MyOutputs->xClutchTargetShift = 0;
		}

		if(ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 8001696:	f7ff ffcb 	bl	8001630 <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 800169a:	f000 f8c5 	bl	8001828 <SHIFTING_Entry>
		return;
 800169e:	e012      	b.n	80016c6 <PRE_DNSHIFT_Event+0x8a>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <PRE_DNSHIFT_Event+0x90>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00d      	beq.n	80016c6 <PRE_DNSHIFT_Event+0x8a>
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <PRE_DNSHIFT_Event+0x98>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 80016b2:	f002 f973 	bl	800399c <HAL_GetTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	429c      	cmp	r4, r3
 80016ba:	d804      	bhi.n	80016c6 <PRE_DNSHIFT_Event+0x8a>
		PRE_DNSHIFT_Exit();
 80016bc:	f7ff ffb8 	bl	8001630 <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 80016c0:	f000 f9f4 	bl	8001aac <ERROR_Entry>
		return;
 80016c4:	bf00      	nop
	}

}
 80016c6:	bd98      	pop	{r3, r4, r7, pc}
 80016c8:	20000054 	.word	0x20000054
 80016cc:	20000044 	.word	0x20000044
 80016d0:	08007538 	.word	0x08007538
 80016d4:	20000030 	.word	0x20000030

080016d8 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH && !(MyInputs->BrClutchPaddleInError && ALLOW_NEUTRAL_WHEN_PADDLE_IN_ERROR)) {	// trying to put neutral gear without clutch
 80016dc:	4b4f      	ldr	r3, [pc, #316]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d119      	bne.n	800171c <PRE_DNSHIFT_Run+0x44>
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 80016f0:	2b59      	cmp	r3, #89	; 0x59
 80016f2:	dc13      	bgt.n	800171c <PRE_DNSHIFT_Run+0x44>
 80016f4:	4b49      	ldr	r3, [pc, #292]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10d      	bne.n	800171c <PRE_DNSHIFT_Run+0x44>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 8001700:	4b47      	ldr	r3, [pc, #284]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0204 	orr.w	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	705a      	strb	r2, [r3, #1]
 800171a:	e008      	b.n	800172e <PRE_DNSHIFT_Run+0x56>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 800171c:	4b40      	ldr	r3, [pc, #256]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError && !(ALLOW_GEARS_WITH_CAR_STOPPED && MyInputs->rClutchPaddle >= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST)) {	// trying to shift down with too high rpm
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001736:	461a      	mov	r2, r3
 8001738:	4b38      	ldr	r3, [pc, #224]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001740:	4619      	mov	r1, r3
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <PRE_DNSHIFT_Run+0x14c>)
 8001744:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001748:	429a      	cmp	r2, r3
 800174a:	dd19      	ble.n	8001780 <PRE_DNSHIFT_Run+0xa8>
 800174c:	4b33      	ldr	r3, [pc, #204]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001754:	2b00      	cmp	r3, #0
 8001756:	d113      	bne.n	8001780 <PRE_DNSHIFT_Run+0xa8>
 8001758:	4b30      	ldr	r3, [pc, #192]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8001760:	2b59      	cmp	r3, #89	; 0x59
 8001762:	dc0d      	bgt.n	8001780 <PRE_DNSHIFT_Run+0xa8>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2205      	movs	r2, #5
 800177c:	705a      	strb	r2, [r3, #1]
 800177e:	e008      	b.n	8001792 <PRE_DNSHIFT_Run+0xba>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0220 	bic.w	r2, r2, #32
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <PRE_DNSHIFT_Run+0xe2>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2206      	movs	r2, #6
 80017b6:	705a      	strb	r2, [r3, #1]
 80017b8:	e008      	b.n	80017cc <PRE_DNSHIFT_Run+0xf4>
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]

	if(MyInputs->BFalseNeutral && !MyInputs->BNGearInError && MyInputs->rClutchPaddle < CLUTCH_PADDLE_THRESHOLD_FOR_FIRST) {	// trying to shift during False Neutral without clutch pressed
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d016      	beq.n	8001806 <PRE_DNSHIFT_Run+0x12e>
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d110      	bne.n	8001806 <PRE_DNSHIFT_Run+0x12e>
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <PRE_DNSHIFT_Run+0x144>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 80017ec:	2b59      	cmp	r3, #89	; 0x59
 80017ee:	dc0a      	bgt.n	8001806 <PRE_DNSHIFT_Run+0x12e>
		RaiseControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2209      	movs	r2, #9
 8001802:	705a      	strb	r2, [r3, #1]
 8001804:	e006      	b.n	8001814 <PRE_DNSHIFT_Run+0x13c>
	}
	else { ClearControlError(FALSE_NEUTRAL_WITH_NO_CLUTCH); }
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <PRE_DNSHIFT_Run+0x148>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	701a      	strb	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000054 	.word	0x20000054
 8001820:	20000044 	.word	0x20000044
 8001824:	08007514 	.word	0x08007514

08001828 <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <SHIFTING_Entry+0xc0>)
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <SHIFTING_Entry+0xc4>)
 8001832:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <SHIFTING_Entry+0xc0>)
 8001836:	2203      	movs	r2, #3
 8001838:	701a      	strb	r2, [r3, #0]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <SHIFTING_Entry+0xc4>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d11b      	bne.n	800187a <SHIFTING_Entry+0x52>
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <SHIFTING_Entry+0xc8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800184a:	461a      	mov	r2, r3
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <SHIFTING_Entry+0xcc>)
 800184e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001852:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <SHIFTING_Entry+0xd0>)
 8001854:	6013      	str	r3, [r2, #0]
		NShiftRequest = Up;
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <SHIFTING_Entry+0xd4>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <SHIFTING_Entry+0xd8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	78db      	ldrb	r3, [r3, #3]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d104      	bne.n	8001870 <SHIFTING_Entry+0x48>
			MyOutputs->BDnShiftPortState = 1;
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <SHIFTING_Entry+0xd8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	751a      	strb	r2, [r3, #20]
 800186e:	e034      	b.n	80018da <SHIFTING_Entry+0xb2>
		}
		else {									// all other upshifts are normal
			MyOutputs->BUpShiftPortState = 1;
 8001870:	4b23      	ldr	r3, [pc, #140]	; (8001900 <SHIFTING_Entry+0xd8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	74da      	strb	r2, [r3, #19]
 8001878:	e02f      	b.n	80018da <SHIFTING_Entry+0xb2>
		}

	}
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <SHIFTING_Entry+0xc4>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d11b      	bne.n	80018ba <SHIFTING_Entry+0x92>
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear - 1];
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <SHIFTING_Entry+0xc8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800188a:	3b01      	subs	r3, #1
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <SHIFTING_Entry+0xdc>)
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	4a19      	ldr	r2, [pc, #100]	; (80018f8 <SHIFTING_Entry+0xd0>)
 8001894:	6013      	str	r3, [r2, #0]
		NShiftRequest = Down;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <SHIFTING_Entry+0xd4>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <SHIFTING_Entry+0xd8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d104      	bne.n	80018b0 <SHIFTING_Entry+0x88>
			MyOutputs->BUpShiftPortState = 1;
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <SHIFTING_Entry+0xd8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2201      	movs	r2, #1
 80018ac:	74da      	strb	r2, [r3, #19]
 80018ae:	e014      	b.n	80018da <SHIFTING_Entry+0xb2>
		}
		else {									// all other downshifts are normal
			MyOutputs->BDnShiftPortState = 1;
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <SHIFTING_Entry+0xd8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2201      	movs	r2, #1
 80018b6:	751a      	strb	r2, [r3, #20]
 80018b8:	e00f      	b.n	80018da <SHIFTING_Entry+0xb2>
		}

	}
	else {
		NCurrentState = Unknown;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <SHIFTING_Entry+0xc0>)
 80018bc:	2202      	movs	r2, #2
 80018be:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <SHIFTING_Entry+0xd8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	781a      	ldrb	r2, [r3, #0]
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <SHIFTING_Entry+0xd8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <SHIFTING_Entry+0xd8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2207      	movs	r2, #7
 80018d8:	705a      	strb	r2, [r3, #1]
	}

	tShiftTimer = HAL_GetTick();
 80018da:	f002 f85f 	bl	800399c <HAL_GetTick>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a09      	ldr	r2, [pc, #36]	; (8001908 <SHIFTING_Entry+0xe0>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000002e 	.word	0x2000002e
 80018ec:	2000002d 	.word	0x2000002d
 80018f0:	20000054 	.word	0x20000054
 80018f4:	08007544 	.word	0x08007544
 80018f8:	20000040 	.word	0x20000040
 80018fc:	2000002c 	.word	0x2000002c
 8001900:	20000044 	.word	0x20000044
 8001904:	0800755c 	.word	0x0800755c
 8001908:	20000038 	.word	0x20000038

0800190c <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <SHIFTING_Event+0x3c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 ff37 	bl	8002794 <CheckFaults>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <SHIFTING_Event+0x1e>
		SHIFTING_Exit();
 800192c:	f7ff ffee 	bl	800190c <SHIFTING_Exit>
		ERROR_Entry();
 8001930:	f000 f8bc 	bl	8001aac <ERROR_Entry>
		return;
 8001934:	e00d      	b.n	8001952 <SHIFTING_Event+0x3a>
	}

	// TODO: keep checking for control errors ??


	if((tShiftTimer + tShifterMaxTransitTime) < tControllerTimmer) {	// the max time for the gear has expired
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <SHIFTING_Event+0x40>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <SHIFTING_Event+0x44>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	441a      	add	r2, r3
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <SHIFTING_Event+0x48>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d204      	bcs.n	8001952 <SHIFTING_Event+0x3a>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 8001948:	f7ff ffe0 	bl	800190c <SHIFTING_Exit>
		POSTSHIFT_Entry();
 800194c:	f000 f810 	bl	8001970 <POSTSHIFT_Entry>
		return;
 8001950:	bf00      	nop
	}

}
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000054 	.word	0x20000054
 8001958:	20000038 	.word	0x20000038
 800195c:	20000040 	.word	0x20000040
 8001960:	20000048 	.word	0x20000048

08001964 <SHIFTING_Run>:
void SHIFTING_Run(void) {
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	// PID


	// FEED FORWARD

}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <POSTSHIFT_Entry+0x3c>)
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <POSTSHIFT_Entry+0x40>)
 800197a:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <POSTSHIFT_Entry+0x3c>)
 800197e:	2204      	movs	r2, #4
 8001980:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <POSTSHIFT_Entry+0x44>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2200      	movs	r2, #0
 8001988:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <POSTSHIFT_Entry+0x44>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShift = 0;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <POSTSHIFT_Entry+0x44>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2200      	movs	r2, #0
 8001998:	819a      	strh	r2, [r3, #12]
	MyOutputs->BSparkCut = 0;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <POSTSHIFT_Entry+0x44>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	2000002e 	.word	0x2000002e
 80019b0:	2000002d 	.word	0x2000002d
 80019b4:	20000044 	.word	0x20000044

080019b8 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	MyOutputs->BShiftingInProgress = 0;
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <POSTSHIFT_Exit+0x18>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000044 	.word	0x20000044

080019d4 <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 80019d4:	b598      	push	{r3, r4, r7, lr}
 80019d6:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <POSTSHIFT_Event+0x74>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fed9 	bl	8002794 <CheckFaults>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <POSTSHIFT_Event+0x1e>
		SHIFTING_Exit();
 80019e8:	f7ff ff90 	bl	800190c <SHIFTING_Exit>
		ERROR_Entry();
 80019ec:	f000 f85e 	bl	8001aac <ERROR_Entry>
		return;
 80019f0:	e028      	b.n	8001a44 <POSTSHIFT_Event+0x70>
	}


	if(!MyOutputs->NControlErrorStatus) {
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <POSTSHIFT_Event+0x78>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d110      	bne.n	8001a1e <POSTSHIFT_Event+0x4a>
		// we update the Gear variable for the outputs
		MyOutputs->NGear = MyInputs->NGear;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <POSTSHIFT_Event+0x74>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <POSTSHIFT_Event+0x78>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8001a08:	709a      	strb	r2, [r3, #2]

		// we rest the False Neutral flag TODO: not sure if correct here
		MyInputs->BFalseNeutral = 0;
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <POSTSHIFT_Event+0x74>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		POSTSHIFT_Exit();
 8001a14:	f7ff ffd0 	bl	80019b8 <POSTSHIFT_Exit>
		IDLE_Entry();
 8001a18:	f7ff fc7c 	bl	8001314 <IDLE_Entry>
		return;
 8001a1c:	e012      	b.n	8001a44 <POSTSHIFT_Event+0x70>
	}


	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPostShiftTimer + POSTSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <POSTSHIFT_Event+0x78>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00d      	beq.n	8001a44 <POSTSHIFT_Event+0x70>
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <POSTSHIFT_Event+0x7c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8001a30:	f001 ffb4 	bl	800399c <HAL_GetTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	429c      	cmp	r4, r3
 8001a38:	d804      	bhi.n	8001a44 <POSTSHIFT_Event+0x70>
		POSTSHIFT_Exit();
 8001a3a:	f7ff ffbd 	bl	80019b8 <POSTSHIFT_Exit>
		ERROR_Entry();
 8001a3e:	f000 f835 	bl	8001aac <ERROR_Entry>
		return;
 8001a42:	bf00      	nop
	}
}
 8001a44:	bd98      	pop	{r3, r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000054 	.word	0x20000054
 8001a4c:	20000044 	.word	0x20000044
 8001a50:	2000003c 	.word	0x2000003c

08001a54 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

	if(CHECK_POST_SHIFT_GEAR && MyInputs->NGear != MyOutputs->NGearTarget && !MyInputs->BFalseNeutral) {
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <POSTSHIFT_Run+0x50>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <POSTSHIFT_Run+0x54>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	78db      	ldrb	r3, [r3, #3]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d010      	beq.n	8001a8c <POSTSHIFT_Run+0x38>
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <POSTSHIFT_Run+0x50>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <POSTSHIFT_Run+0x38>
		RaiseControlError(GEAR_TARGET_MISMATCH);
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <POSTSHIFT_Run+0x54>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <POSTSHIFT_Run+0x54>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <POSTSHIFT_Run+0x54>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2208      	movs	r2, #8
 8001a88:	705a      	strb	r2, [r3, #1]
 8001a8a:	e006      	b.n	8001a9a <POSTSHIFT_Run+0x46>
	}
	else { ClearControlError(GEAR_TARGET_MISMATCH); }
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <POSTSHIFT_Run+0x54>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <POSTSHIFT_Run+0x54>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	701a      	strb	r2, [r3, #0]

}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000054 	.word	0x20000054
 8001aa8:	20000044 	.word	0x20000044

08001aac <ERROR_Entry>:


void ERROR_Entry(void) {
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <ERROR_Entry+0x48>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <ERROR_Entry+0x4c>)
 8001ab6:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <ERROR_Entry+0x48>)
 8001aba:	2205      	movs	r2, #5
 8001abc:	701a      	strb	r2, [r3, #0]

	MyOutputs->BShiftingInProgress = 0;
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <ERROR_Entry+0x50>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	// TODO: we need to open a led to indicate the Error State !!!
	// or send it to the display via CAN

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <ERROR_Entry+0x50>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <ERROR_Entry+0x50>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	751a      	strb	r2, [r3, #20]
	MyOutputs->xClutchTargetShift = 0;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <ERROR_Entry+0x50>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	819a      	strh	r2, [r3, #12]

	// reset all control variables for the next actuation
	//MyOutputs->xClutchTarget = xCLUTCH_FULLY_ENGAGED;
	// clutch should always work... if we enter here during an actuation, not sure if it is correct to interrupt it
	MyOutputs->BSparkCut = 0;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <ERROR_Entry+0x50>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	2000002e 	.word	0x2000002e
 8001af8:	2000002d 	.word	0x2000002d
 8001afc:	20000044 	.word	0x20000044

08001b00 <ERROR_Exit>:

void ERROR_Exit(void) {
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <ERROR_Event>:
void ERROR_Event(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0

	// check that all faults are cleared
	if(!CheckFaults(MyInputs)) {
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <ERROR_Event+0x20>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 fe3d 	bl	8002794 <CheckFaults>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d104      	bne.n	8001b2a <ERROR_Event+0x1e>
		ERROR_Exit();
 8001b20:	f7ff ffee 	bl	8001b00 <ERROR_Exit>
		IDLE_Entry();
 8001b24:	f7ff fbf6 	bl	8001314 <IDLE_Entry>
		return;
 8001b28:	bf00      	nop
	// check that all control errors are cleared
	// and do not zero the logged error status
	// remember return in all functions

	// Remember to create the Strategy (and a way to exit the error) to be able to function without NGear (complete open loop)
}
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000054 	.word	0x20000054

08001b30 <ERROR_Run>:
void ERROR_Run(void) {
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <ERROR_Run+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]


	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle

}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	20000044 	.word	0x20000044

08001b48 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 8001b56:	f001 ff21 	bl	800399c <HAL_GetTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4aa8      	ldr	r2, [pc, #672]	; (8001e00 <ReadInputs+0x2b8>)
 8001b5e:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);	// PA0
 8001b60:	4ba8      	ldr	r3, [pc, #672]	; (8001e04 <ReadInputs+0x2bc>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	2300      	movs	r3, #0
 8001b68:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001b6c:	48a6      	ldr	r0, [pc, #664]	; (8001e08 <ReadInputs+0x2c0>)
 8001b6e:	f000 fed1 	bl	8002914 <MyHalfBufferAverage>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);	// PA1
 8001b7a:	4ba2      	ldr	r3, [pc, #648]	; (8001e04 <ReadInputs+0x2bc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	2301      	movs	r3, #1
 8001b82:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001b86:	48a0      	ldr	r0, [pc, #640]	; (8001e08 <ReadInputs+0x2c0>)
 8001b88:	f000 fec4 	bl	8002914 <MyHalfBufferAverage>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);	// PA2
 8001b94:	4b9b      	ldr	r3, [pc, #620]	; (8001e04 <ReadInputs+0x2bc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001ba0:	4899      	ldr	r0, [pc, #612]	; (8001e08 <ReadInputs+0x2c0>)
 8001ba2:	f000 feb7 	bl	8002914 <MyHalfBufferAverage>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);	// PA3
 8001bae:	4b95      	ldr	r3, [pc, #596]	; (8001e04 <ReadInputs+0x2bc>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001bba:	4893      	ldr	r0, [pc, #588]	; (8001e08 <ReadInputs+0x2c0>)
 8001bbc:	f000 feaa 	bl	8002914 <MyHalfBufferAverage>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);	// PA5
 8001bc8:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <ReadInputs+0x2bc>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	2305      	movs	r3, #5
 8001bd0:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001bd4:	488c      	ldr	r0, [pc, #560]	; (8001e08 <ReadInputs+0x2c0>)
 8001bd6:	f000 fe9d 	bl	8002914 <MyHalfBufferAverage>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);	// PA4
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <ReadInputs+0x2bc>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	2304      	movs	r3, #4
 8001bea:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001bee:	4886      	ldr	r0, [pc, #536]	; (8001e08 <ReadInputs+0x2c0>)
 8001bf0:	f000 fe90 	bl	8002914 <MyHalfBufferAverage>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	865a      	strh	r2, [r3, #50]	; 0x32
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);	// PA7
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <ReadInputs+0x2bc>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	2307      	movs	r3, #7
 8001c04:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001c08:	487f      	ldr	r0, [pc, #508]	; (8001e08 <ReadInputs+0x2c0>)
 8001c0a:	f000 fe83 	bl	8002914 <MyHalfBufferAverage>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	869a      	strh	r2, [r3, #52]	; 0x34
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);	// PA7
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <ReadInputs+0x2bc>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001c22:	4879      	ldr	r0, [pc, #484]	; (8001e08 <ReadInputs+0x2c0>)
 8001c24:	f000 fe76 	bl	8002914 <MyHalfBufferAverage>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	86da      	strh	r2, [r3, #54]	; 0x36

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fd47 	bl	80006c8 <__aeabi_i2f>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4973      	ldr	r1, [pc, #460]	; (8001e0c <ReadInputs+0x2c4>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fd96 	bl	8000770 <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4972      	ldr	r1, [pc, #456]	; (8001e10 <ReadInputs+0x2c8>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fe45 	bl	80008d8 <__aeabi_fdiv>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fd34 	bl	80006c8 <__aeabi_i2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	496a      	ldr	r1, [pc, #424]	; (8001e0c <ReadInputs+0x2c4>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fd83 	bl	8000770 <__aeabi_fmul>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4968      	ldr	r1, [pc, #416]	; (8001e10 <ReadInputs+0x2c8>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fe32 	bl	80008d8 <__aeabi_fdiv>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fd21 	bl	80006c8 <__aeabi_i2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4960      	ldr	r1, [pc, #384]	; (8001e0c <ReadInputs+0x2c4>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fd70 	bl	8000770 <__aeabi_fmul>
 8001c90:	4603      	mov	r3, r0
 8001c92:	495f      	ldr	r1, [pc, #380]	; (8001e10 <ReadInputs+0x2c8>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fe1f 	bl	80008d8 <__aeabi_fdiv>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fd0e 	bl	80006c8 <__aeabi_i2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4957      	ldr	r1, [pc, #348]	; (8001e0c <ReadInputs+0x2c4>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fd5d 	bl	8000770 <__aeabi_fmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4955      	ldr	r1, [pc, #340]	; (8001e10 <ReadInputs+0x2c8>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fe0c 	bl	80008d8 <__aeabi_fdiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fcfb 	bl	80006c8 <__aeabi_i2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <ReadInputs+0x2c4>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fd4a 	bl	8000770 <__aeabi_fmul>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	494c      	ldr	r1, [pc, #304]	; (8001e10 <ReadInputs+0x2c8>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fdf9 	bl	80008d8 <__aeabi_fdiv>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fce8 	bl	80006c8 <__aeabi_i2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4944      	ldr	r1, [pc, #272]	; (8001e0c <ReadInputs+0x2c4>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fd37 	bl	8000770 <__aeabi_fmul>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4942      	ldr	r1, [pc, #264]	; (8001e10 <ReadInputs+0x2c8>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fde6 	bl	80008d8 <__aeabi_fdiv>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fcd5 	bl	80006c8 <__aeabi_i2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	493a      	ldr	r1, [pc, #232]	; (8001e0c <ReadInputs+0x2c4>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fd24 	bl	8000770 <__aeabi_fmul>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4939      	ldr	r1, [pc, #228]	; (8001e10 <ReadInputs+0x2c8>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fdd3 	bl	80008d8 <__aeabi_fdiv>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	621a      	str	r2, [r3, #32]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fcc2 	bl	80006c8 <__aeabi_i2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4931      	ldr	r1, [pc, #196]	; (8001e0c <ReadInputs+0x2c4>)
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fd11 	bl	8000770 <__aeabi_fmul>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	492f      	ldr	r1, [pc, #188]	; (8001e10 <ReadInputs+0x2c8>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fdc0 	bl	80008d8 <__aeabi_fdiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

	//Digital Inputs
	inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8001d60:	2101      	movs	r1, #1
 8001d62:	482c      	ldr	r0, [pc, #176]	; (8001e14 <ReadInputs+0x2cc>)
 8001d64:	f003 fc98 	bl	8005698 <HAL_GPIO_ReadPin>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 8001d72:	2102      	movs	r1, #2
 8001d74:	4827      	ldr	r0, [pc, #156]	; (8001e14 <ReadInputs+0x2cc>)
 8001d76:	f003 fc8f 	bl	8005698 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 8001d84:	2120      	movs	r1, #32
 8001d86:	4823      	ldr	r0, [pc, #140]	; (8001e14 <ReadInputs+0x2cc>)
 8001d88:	f003 fc86 	bl	8005698 <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 8001d96:	2140      	movs	r1, #64	; 0x40
 8001d98:	481e      	ldr	r0, [pc, #120]	; (8001e14 <ReadInputs+0x2cc>)
 8001d9a:	f003 fc7d 	bl	8005698 <HAL_GPIO_ReadPin>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <ReadInputs+0x2d0>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	inputs->BSWButtonB = BButtonBCAN;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <ReadInputs+0x2d4>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	inputs->BSWButtonC = BButtonCCAN;
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <ReadInputs+0x2d8>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	inputs->BSWButtonD = BButtonDCAN;
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <ReadInputs+0x2dc>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	inputs->BSWButtonE = BButtonECAN;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <ReadInputs+0x2e0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	inputs->BSWButtonF = BButtonFCAN;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <ReadInputs+0x2e4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

		// Inverted logic!! DriverKill=1 means ShutDown is Open, DriverKill=0 means ShutDown is closed
	if(inputs->NSHIFTERDIN04 && (tBDriverKillTimer < tInputsTimmer) && inputs->BDriverKill) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02f      	beq.n	8001e5a <ReadInputs+0x312>
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <ReadInputs+0x2e8>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	e019      	b.n	8001e34 <ReadInputs+0x2ec>
 8001e00:	2000007c 	.word	0x2000007c
 8001e04:	20000065 	.word	0x20000065
 8001e08:	200002a8 	.word	0x200002a8
 8001e0c:	4055c28f 	.word	0x4055c28f
 8001e10:	457ff000 	.word	0x457ff000
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	20000059 	.word	0x20000059
 8001e1c:	20000074 	.word	0x20000074
 8001e20:	2000008e 	.word	0x2000008e
 8001e24:	20000064 	.word	0x20000064
 8001e28:	20000080 	.word	0x20000080
 8001e2c:	20000084 	.word	0x20000084
 8001e30:	20000094 	.word	0x20000094
 8001e34:	4bad      	ldr	r3, [pc, #692]	; (80020ec <ReadInputs+0x5a4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d20e      	bcs.n	8001e5a <ReadInputs+0x312>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <ReadInputs+0x312>
		inputs->BDriverKill = 0;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		tBDriverKillTimer = tInputsTimmer + DRIVER_KILL_DEBOUNCE;
 8001e4e:	4ba7      	ldr	r3, [pc, #668]	; (80020ec <ReadInputs+0x5a4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	33c8      	adds	r3, #200	; 0xc8
 8001e54:	4aa6      	ldr	r2, [pc, #664]	; (80020f0 <ReadInputs+0x5a8>)
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e00d      	b.n	8001e76 <ReadInputs+0x32e>
	}
	else if(!inputs->NSHIFTERDIN04 & !inputs->BDriverKill) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <ReadInputs+0x32e>
		inputs->BDriverKill = 1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

	// ---------------------------------------------------------------------------------------------------
	// NGear Input

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3344      	adds	r3, #68	; 0x44
 8001e86:	499b      	ldr	r1, [pc, #620]	; (80020f4 <ReadInputs+0x5ac>)
 8001e88:	9101      	str	r1, [sp, #4]
 8001e8a:	499a      	ldr	r1, [pc, #616]	; (80020f4 <ReadInputs+0x5ac>)
 8001e8c:	9100      	str	r1, [sp, #0]
 8001e8e:	499a      	ldr	r1, [pc, #616]	; (80020f8 <ReadInputs+0x5b0>)
 8001e90:	2006      	movs	r0, #6
 8001e92:	f001 fc59 	bl	8003748 <My2DMapInterpolate>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fab5 	bl	8000414 <__aeabi_f2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f005 faa3 	bl	80073fc <round>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fb29 	bl	8000514 <__aeabi_d2uiz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	bf28      	it	cs
 8001ed6:	2305      	movcs	r3, #5
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// False Neutral detection
	if(inputs->NGearRaw >= NGearRawLimsMaxMap[inputs->NGear] || inputs->NGearRaw <= NGearRawLimsMinMap[inputs->NGear]) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001eea:	4619      	mov	r1, r3
 8001eec:	4b83      	ldr	r3, [pc, #524]	; (80020fc <ReadInputs+0x5b4>)
 8001eee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f7fe fded 	bl	8000ad4 <__aeabi_fcmpge>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <ReadInputs+0x3d8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <ReadInputs+0x5b8>)
 8001f0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f12:	4619      	mov	r1, r3
 8001f14:	4610      	mov	r0, r2
 8001f16:	f7fe fdd3 	bl	8000ac0 <__aeabi_fcmple>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <ReadInputs+0x3ea>
		tBFalseNeutral = tInputsTimmer + FALSE_NEUTRAL_DEBOUNCE;
 8001f20:	4b72      	ldr	r3, [pc, #456]	; (80020ec <ReadInputs+0x5a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3328      	adds	r3, #40	; 0x28
 8001f26:	4a77      	ldr	r2, [pc, #476]	; (8002104 <ReadInputs+0x5bc>)
 8001f28:	6013      	str	r3, [r2, #0]
		BFalseNeutralState = 1;
 8001f2a:	4b77      	ldr	r3, [pc, #476]	; (8002108 <ReadInputs+0x5c0>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e002      	b.n	8001f38 <ReadInputs+0x3f0>
	}
	else {
		BFalseNeutralState = 0;
 8001f32:	4b75      	ldr	r3, [pc, #468]	; (8002108 <ReadInputs+0x5c0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
	}

	if(tBFalseNeutral < tInputsTimmer && BFalseNeutralState) { //leave some time for the NGear to settle before deciding if it is in false neutral and to avoid flickering
 8001f38:	4b72      	ldr	r3, [pc, #456]	; (8002104 <ReadInputs+0x5bc>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b6b      	ldr	r3, [pc, #428]	; (80020ec <ReadInputs+0x5a4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <ReadInputs+0x40c>
 8001f44:	4b70      	ldr	r3, [pc, #448]	; (8002108 <ReadInputs+0x5c0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <ReadInputs+0x40c>
		inputs->BFalseNeutral = 1; // it gets reset inside the controller code at the post shift phase after a successful gear change
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}

	// check for errors
	if(inputs->BNGearInError) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <ReadInputs+0x424>
		RaiseFault(inputs, NGEAR_FAULT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	e005      	b.n	8001f78 <ReadInputs+0x430>
		// inputs->NGear = default gear; // TODO: is it correct??? not sure. I would put 1 to be able trigger antistall and to be generic for all functions
	}
	else ClearFault(inputs, NGEAR_FAULT);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 0201 	bic.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <ReadInputs+0x5c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001f80:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <ReadInputs+0x5a4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d204      	bcs.n	8001f92 <ReadInputs+0x44a>
		inputs->BSteeringWheelFitted = 0;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001f90:	e003      	b.n	8001f9a <ReadInputs+0x452>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <ReadInputs+0x472>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inputs->BDeclutchRequestInError = 0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8001fb8:	e007      	b.n	8001fca <ReadInputs+0x482>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Conditioning

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 8001fca:	4b51      	ldr	r3, [pc, #324]	; (8002110 <ReadInputs+0x5c8>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	; (8002114 <ReadInputs+0x5cc>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b25a      	sxtb	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	661a      	str	r2, [r3, #96]	; 0x60
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_PADDLE_MARGIN_MIN, VrCLUTCH_PADDLE_MARGIN_MAX);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3364      	adds	r3, #100	; 0x64
 8001ff4:	4948      	ldr	r1, [pc, #288]	; (8002118 <ReadInputs+0x5d0>)
 8001ff6:	9101      	str	r1, [sp, #4]
 8001ff8:	4947      	ldr	r1, [pc, #284]	; (8002118 <ReadInputs+0x5d0>)
 8001ffa:	9100      	str	r1, [sp, #0]
 8001ffc:	4947      	ldr	r1, [pc, #284]	; (800211c <ReadInputs+0x5d4>)
 8001ffe:	2002      	movs	r0, #2
 8002000:	f001 fba2 	bl	8003748 <My2DMapInterpolate>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <ReadInputs+0x4f6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <ReadInputs+0x4f6>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f993 205c 	ldrsb.w	r2, [r3, #92]	; 0x5c
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <ReadInputs+0x5d8>)
 800202a:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800203c:	e02d      	b.n	800209a <ReadInputs+0x552>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002044:	2b00      	cmp	r3, #0
 8002046:	d11d      	bne.n	8002084 <ReadInputs+0x53c>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f9e1 	bl	8000414 <__aeabi_f2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f005 f9cf 	bl	80073fc <round>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fa2d 	bl	80004c4 <__aeabi_d2iz>
 800206a:	4603      	mov	r3, r0
 800206c:	b25a      	sxtb	r2, r3
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <ReadInputs+0x5d8>)
 8002070:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002082:	e00a      	b.n	800209a <ReadInputs+0x552>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		inputs->NrClutchPaddleSource = NoSource;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <ReadInputs+0x5d8>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d109      	bne.n	80020b8 <ReadInputs+0x570>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <ReadInputs+0x56a>
 80020ae:	2264      	movs	r2, #100	; 0x64
 80020b0:	e000      	b.n	80020b4 <ReadInputs+0x56c>
 80020b2:	2200      	movs	r2, #0
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <ReadInputs+0x5dc>)
 80020b6:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <ReadInputs+0x5dc>)
 80020ba:	f993 2000 	ldrsb.w	r2, [r3]
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <ReadInputs+0x5d8>)
 80020c0:	f993 3000 	ldrsb.w	r3, [r3]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bfb8      	it	lt
 80020c8:	4613      	movlt	r3, r2
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	2b63      	cmp	r3, #99	; 0x63
 80020ce:	dc2b      	bgt.n	8002128 <ReadInputs+0x5e0>
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <ReadInputs+0x5dc>)
 80020d2:	f993 2000 	ldrsb.w	r2, [r3]
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <ReadInputs+0x5d8>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	4293      	cmp	r3, r2
 80020de:	bfb8      	it	lt
 80020e0:	4613      	movlt	r3, r2
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	e01e      	b.n	800212a <ReadInputs+0x5e2>
 80020ec:	2000007c 	.word	0x2000007c
 80020f0:	20000094 	.word	0x20000094
 80020f4:	3e4ccccd 	.word	0x3e4ccccd
 80020f8:	08007574 	.word	0x08007574
 80020fc:	080075bc 	.word	0x080075bc
 8002100:	080075a4 	.word	0x080075a4
 8002104:	20000088 	.word	0x20000088
 8002108:	20000077 	.word	0x20000077
 800210c:	20000060 	.word	0x20000060
 8002110:	20000058 	.word	0x20000058
 8002114:	20000085 	.word	0x20000085
 8002118:	3dcccccd 	.word	0x3dcccccd
 800211c:	080075d4 	.word	0x080075d4
 8002120:	20000075 	.word	0x20000075
 8002124:	20000078 	.word	0x20000078
 8002128:	2264      	movs	r2, #100	; 0x64
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Conditioning

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8002130:	4bb2      	ldr	r3, [pc, #712]	; (80023fc <ReadInputs+0x8b4>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 800213c:	4bb0      	ldr	r3, [pc, #704]	; (8002400 <ReadInputs+0x8b8>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8002148:	4bae      	ldr	r3, [pc, #696]	; (8002404 <ReadInputs+0x8bc>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8002154:	4bac      	ldr	r3, [pc, #688]	; (8002408 <ReadInputs+0x8c0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	// Analog Input
	// TODO: Debouncing and STUCK detection ???
	inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	651a      	str	r2, [r3, #80]	; 0x50

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe faaa 	bl	80006c8 <__aeabi_i2f>
 8002174:	4603      	mov	r3, r0
 8002176:	49a5      	ldr	r1, [pc, #660]	; (800240c <ReadInputs+0x8c4>)
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fcab 	bl	8000ad4 <__aeabi_fcmpge>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <ReadInputs+0x64e>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8002194:	e058      	b.n	8002248 <ReadInputs+0x700>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	499d      	ldr	r1, [pc, #628]	; (8002410 <ReadInputs+0x8c8>)
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fc8f 	bl	8000ac0 <__aeabi_fcmple>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d011      	beq.n	80021cc <ReadInputs+0x684>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ac:	4999      	ldr	r1, [pc, #612]	; (8002414 <ReadInputs+0x8cc>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fc90 	bl	8000ad4 <__aeabi_fcmpge>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <ReadInputs+0x684>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80021ca:	e03d      	b.n	8002248 <ReadInputs+0x700>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d0:	4991      	ldr	r1, [pc, #580]	; (8002418 <ReadInputs+0x8d0>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fc74 	bl	8000ac0 <__aeabi_fcmple>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <ReadInputs+0x6ba>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	498e      	ldr	r1, [pc, #568]	; (800241c <ReadInputs+0x8d4>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fc75 	bl	8000ad4 <__aeabi_fcmpge>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <ReadInputs+0x6ba>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8002200:	e022      	b.n	8002248 <ReadInputs+0x700>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002206:	4986      	ldr	r1, [pc, #536]	; (8002420 <ReadInputs+0x8d8>)
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fc59 	bl	8000ac0 <__aeabi_fcmple>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d011      	beq.n	8002238 <ReadInputs+0x6f0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002218:	4982      	ldr	r1, [pc, #520]	; (8002424 <ReadInputs+0x8dc>)
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fc5a 	bl	8000ad4 <__aeabi_fcmpge>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <ReadInputs+0x6f0>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8002236:	e007      	b.n	8002248 <ReadInputs+0x700>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d013      	beq.n	800227a <ReadInputs+0x732>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10e      	bne.n	800227a <ReadInputs+0x732>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = CAN;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002278:	e025      	b.n	80022c6 <ReadInputs+0x77e>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002280:	2b00      	cmp	r3, #0
 8002282:	d114      	bne.n	80022ae <ReadInputs+0x766>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800228a:	2b01      	cmp	r3, #1
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = Analog;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80022ac:	e00b      	b.n	80022c6 <ReadInputs+0x77e>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = NoSource;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2202      	movs	r2, #2
 80022c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <ReadInputs+0x7b0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10e      	bne.n	80022f8 <ReadInputs+0x7b0>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = CAN;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80022f6:	e025      	b.n	8002344 <ReadInputs+0x7fc>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d114      	bne.n	800232c <ReadInputs+0x7e4>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002308:	2b02      	cmp	r3, #2
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = Analog;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800232a:	e00b      	b.n	8002344 <ReadInputs+0x7fc>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = NoSource;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	// ---------------------------------------------------------------------------------------------------
	// Launch

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <ReadInputs+0x81c>
		inputs->BLaunchRequest = inputs->BSWButtonD;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		inputs->BLaunchRequestInError = 0;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002362:	e007      	b.n	8002374 <ReadInputs+0x82c>
	}
	else {
		inputs->BLaunchRequestInError = 1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72


	// ---------------------------------------------------------------------------------------------------
	// Rotary Switch

	inputs->VSwhitchA = inputs->VSHIFTERAnalog05;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699a      	ldr	r2, [r3, #24]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	67da      	str	r2, [r3, #124]	; 0x7c
	inputs->BNSwitchAInError = My2DMapInterpolate(SWITCHA_MAP_SIZE, NSWitchAmap, inputs->VSwhitchA, &(inputs->NSwitchARaw), VNSWITCH_MARGIN, VNSWITCH_MARGIN);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3380      	adds	r3, #128	; 0x80
 8002384:	4928      	ldr	r1, [pc, #160]	; (8002428 <ReadInputs+0x8e0>)
 8002386:	9101      	str	r1, [sp, #4]
 8002388:	4927      	ldr	r1, [pc, #156]	; (8002428 <ReadInputs+0x8e0>)
 800238a:	9100      	str	r1, [sp, #0]
 800238c:	4927      	ldr	r1, [pc, #156]	; (800242c <ReadInputs+0x8e4>)
 800238e:	200e      	movs	r0, #14
 8002390:	f001 f9da 	bl	8003748 <My2DMapInterpolate>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

	inputs->NSwitchA = CLAMP((uint8_t)round(inputs->NSwitchARaw), 1, SWITCHA_MAP_SIZE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f835 	bl	8000414 <__aeabi_f2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f005 f823 	bl	80073fc <round>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe f8a9 	bl	8000514 <__aeabi_d2uiz>
 80023c2:	4603      	mov	r3, r0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b0d      	cmp	r3, #13
 80023c8:	d832      	bhi.n	8002430 <ReadInputs+0x8e8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f81f 	bl	8000414 <__aeabi_f2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f005 f80d 	bl	80073fc <round>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe f893 	bl	8000514 <__aeabi_d2uiz>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	bf38      	it	cc
 80023f6:	2301      	movcc	r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	e01a      	b.n	8002432 <ReadInputs+0x8ea>
 80023fc:	20000066 	.word	0x20000066
 8002400:	20000079 	.word	0x20000079
 8002404:	20000090 	.word	0x20000090
 8002408:	20000083 	.word	0x20000083
 800240c:	40200000 	.word	0x40200000
 8002410:	3f8ccccd 	.word	0x3f8ccccd
 8002414:	3f733333 	.word	0x3f733333
 8002418:	3ff33333 	.word	0x3ff33333
 800241c:	3fd9999a 	.word	0x3fd9999a
 8002420:	3f666666 	.word	0x3f666666
 8002424:	3f4ccccd 	.word	0x3f4ccccd
 8002428:	3dcccccd 	.word	0x3dcccccd
 800242c:	080075e4 	.word	0x080075e4
 8002430:	220e      	movs	r2, #14
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	// ---------------------------------------------------------------------------------------------------
	// Toggle Switches

	// Toggle 1
	if(inputs->BSWButtonE && tToggleSwitch01 < tInputsTimmer) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800243e:	2b00      	cmp	r3, #0
 8002440:	d014      	beq.n	800246c <ReadInputs+0x924>
 8002442:	4b99      	ldr	r3, [pc, #612]	; (80026a8 <ReadInputs+0xb60>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4b99      	ldr	r3, [pc, #612]	; (80026ac <ReadInputs+0xb64>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d20e      	bcs.n	800246c <ReadInputs+0x924>
		inputs->NToggleSwitch01State ^= 1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002454:	f083 0301 	eor.w	r3, r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		tToggleSwitch01 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8002460:	4b92      	ldr	r3, [pc, #584]	; (80026ac <ReadInputs+0xb64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002468:	4a8f      	ldr	r2, [pc, #572]	; (80026a8 <ReadInputs+0xb60>)
 800246a:	6013      	str	r3, [r2, #0]
	}

	// Toggle 2
	if(inputs->BSWButtonA && tToggleSwitch02 < tInputsTimmer) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002472:	2b00      	cmp	r3, #0
 8002474:	d014      	beq.n	80024a0 <ReadInputs+0x958>
 8002476:	4b8e      	ldr	r3, [pc, #568]	; (80026b0 <ReadInputs+0xb68>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b8c      	ldr	r3, [pc, #560]	; (80026ac <ReadInputs+0xb64>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d20e      	bcs.n	80024a0 <ReadInputs+0x958>
		inputs->NToggleSwitch02State ^= 1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002488:	f083 0301 	eor.w	r3, r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		tToggleSwitch02 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8002494:	4b85      	ldr	r3, [pc, #532]	; (80026ac <ReadInputs+0xb64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800249c:	4a84      	ldr	r2, [pc, #528]	; (80026b0 <ReadInputs+0xb68>)
 800249e:	6013      	str	r3, [r2, #0]
	}

	// Toggle 3
	if(inputs->BSWButtonB && tToggleSwitch03 < tInputsTimmer) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d014      	beq.n	80024d4 <ReadInputs+0x98c>
 80024aa:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <ReadInputs+0xb6c>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <ReadInputs+0xb64>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20e      	bcs.n	80024d4 <ReadInputs+0x98c>
		inputs->NToggleSwitch03State ^= 1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80024bc:	f083 0301 	eor.w	r3, r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		tToggleSwitch03 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <ReadInputs+0xb64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80024d0:	4a78      	ldr	r2, [pc, #480]	; (80026b4 <ReadInputs+0xb6c>)
 80024d2:	6013      	str	r3, [r2, #0]


	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSHIFTERAnalog01 / VSUPPLY_DIVIDER_GAIN;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4977      	ldr	r1, [pc, #476]	; (80026b8 <ReadInputs+0xb70>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f9fc 	bl	80008d8 <__aeabi_fdiv>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	// ---------------------------------------------------------------------------------------------------
	// nEngine Conditioning

	// CAN Input

	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 80024ea:	4b74      	ldr	r3, [pc, #464]	; (80026bc <ReadInputs+0xb74>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80024f2:	4b6e      	ldr	r3, [pc, #440]	; (80026ac <ReadInputs+0xb64>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d20c      	bcs.n	8002514 <ReadInputs+0x9cc>
		inputs->BnEngineInError = 1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		inputs->BnEngineReliable = 0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		inputs->nEngine = 0; 		// we force to zero if in error
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8002512:	e007      	b.n	8002524 <ReadInputs+0x9dc>
	}
	else {
		inputs->BnEngineInError = 0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		inputs->BnEngineReliable = 1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <ReadInputs+0xb78>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	b21a      	sxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <ReadInputs+0x9fc>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8002544:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <ReadInputs+0xb7c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 8002550:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <ReadInputs+0xb80>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	b2da      	uxtb	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002564:	2b00      	cmp	r3, #0
 8002566:	d112      	bne.n	800258e <ReadInputs+0xa46>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00d      	beq.n	800258e <ReadInputs+0xa46>
 8002572:	4b56      	ldr	r3, [pc, #344]	; (80026cc <ReadInputs+0xb84>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <ReadInputs+0xa46>
		BUpShiftRequested = 1;
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <ReadInputs+0xb84>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e016      	b.n	80025bc <ReadInputs+0xa74>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <ReadInputs+0xa74>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10c      	bne.n	80025bc <ReadInputs+0xa74>
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <ReadInputs+0xb84>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <ReadInputs+0xa74>
		BUpShiftRequested = 0;
 80025aa:	4b48      	ldr	r3, [pc, #288]	; (80026cc <ReadInputs+0xb84>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f043 0202 	orr.w	r2, r3, #2
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d112      	bne.n	80025ec <ReadInputs+0xaa4>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <ReadInputs+0xaa4>
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <ReadInputs+0xb88>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <ReadInputs+0xaa4>
		BDnShiftRequested = 1;
 80025d8:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <ReadInputs+0xb88>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e016      	b.n	800261a <ReadInputs+0xad2>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d111      	bne.n	800261a <ReadInputs+0xad2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10c      	bne.n	800261a <ReadInputs+0xad2>
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <ReadInputs+0xb88>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <ReadInputs+0xad2>
		BDnShiftRequested = 0;
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <ReadInputs+0xb88>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f043 0208 	orr.w	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002620:	2b00      	cmp	r3, #0
 8002622:	d112      	bne.n	800264a <ReadInputs+0xb02>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <ReadInputs+0xb02>
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <ReadInputs+0xb8c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <ReadInputs+0xb02>
		BLaunchRequested = 1;
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <ReadInputs+0xb8c>)
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e016      	b.n	8002678 <ReadInputs+0xb30>
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <ReadInputs+0xb30>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10c      	bne.n	8002678 <ReadInputs+0xb30>
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <ReadInputs+0xb8c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <ReadInputs+0xb30>
		BLaunchRequested = 0;
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <ReadInputs+0xb8c>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800267e:	2b00      	cmp	r3, #0
 8002680:	d12c      	bne.n	80026dc <ReadInputs+0xb94>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002688:	2b00      	cmp	r3, #0
 800268a:	d027      	beq.n	80026dc <ReadInputs+0xb94>
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <ReadInputs+0xb90>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d123      	bne.n	80026dc <ReadInputs+0xb94>
		BDeclutchRequested = 1;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <ReadInputs+0xb90>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e030      	b.n	800270a <ReadInputs+0xbc2>
 80026a8:	2000006c 	.word	0x2000006c
 80026ac:	2000007c 	.word	0x2000007c
 80026b0:	20000098 	.word	0x20000098
 80026b4:	2000005c 	.word	0x2000005c
 80026b8:	3e617c1c 	.word	0x3e617c1c
 80026bc:	20000070 	.word	0x20000070
 80026c0:	2000008c 	.word	0x2000008c
 80026c4:	2000007a 	.word	0x2000007a
 80026c8:	20000028 	.word	0x20000028
 80026cc:	20000091 	.word	0x20000091
 80026d0:	20000081 	.word	0x20000081
 80026d4:	20000076 	.word	0x20000076
 80026d8:	2000008f 	.word	0x2000008f
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d111      	bne.n	800270a <ReadInputs+0xbc2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10c      	bne.n	800270a <ReadInputs+0xbc2>
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <ReadInputs+0xc20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <ReadInputs+0xbc2>
		BDeclutchRequested = 0;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <ReadInputs+0xc20>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002710:	2b00      	cmp	r3, #0
 8002712:	d124      	bne.n	800275e <ReadInputs+0xc16>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800271a:	2b4f      	cmp	r3, #79	; 0x4f
 800271c:	dd0d      	ble.n	800273a <ReadInputs+0xbf2>
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <ReadInputs+0xc24>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <ReadInputs+0xbf2>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <ReadInputs+0xc24>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
	// TODO: fill the InputsErroWord with all the InError variables
	// SWfitted should get inverted, see all others

	// ---------------------------------------------------------------------------------------------------

}
 8002738:	e011      	b.n	800275e <ReadInputs+0xc16>
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8002740:	2b00      	cmp	r3, #0
 8002742:	dc0c      	bgt.n	800275e <ReadInputs+0xc16>
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <ReadInputs+0xc24>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <ReadInputs+0xc16>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <ReadInputs+0xc24>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000008f 	.word	0x2000008f
 800276c:	20000082 	.word	0x20000082

08002770 <InitInputs>:

void InitInputs(void) {
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <InitInputs+0x1c>)
 8002776:	f001 fd01 	bl	800417c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 800277a:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 800277e:	4904      	ldr	r1, [pc, #16]	; (8002790 <InitInputs+0x20>)
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <InitInputs+0x1c>)
 8002782:	f001 fa11 	bl	8003ba8 <HAL_ADC_Start_DMA>
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000010c 	.word	0x2000010c
 8002790:	200002a8 	.word	0x200002a8

08002794 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <CheckFaults+0x14>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <CheckFaults+0x16>
	return 0;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	f107 0214 	add.w	r2, r7, #20
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 ff8d 	bl	80046e8 <HAL_CAN_GetRxMessage>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80027d4:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <CAN_RX+0x120>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3301      	adds	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <CAN_RX+0x120>)
 80027e0:	801a      	strh	r2, [r3, #0]
 80027e2:	e074      	b.n	80028ce <CAN_RX+0x11a>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80027ea:	d004      	beq.n	80027f6 <CAN_RX+0x42>
 80027ec:	f240 3211 	movw	r2, #785	; 0x311
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d05c      	beq.n	80028ae <CAN_RX+0xfa>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
		 break;

	 default:
		 break;
 80027f4:	e06b      	b.n	80028ce <CAN_RX+0x11a>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 80027f6:	f001 f8d1 	bl	800399c <HAL_GetTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a36      	ldr	r2, [pc, #216]	; (80028d8 <CAN_RX+0x124>)
 80027fe:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 8002800:	7b3b      	ldrb	r3, [r7, #12]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b34      	ldr	r3, [pc, #208]	; (80028dc <CAN_RX+0x128>)
 800280a:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 800280c:	7b3b      	ldrb	r3, [r7, #12]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <CAN_RX+0x12c>)
 800281a:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 800281c:	7b3b      	ldrb	r3, [r7, #12]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	b2db      	uxtb	r3, r3
 8002822:	b25b      	sxtb	r3, r3
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	b25a      	sxtb	r2, r3
 800282a:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <CAN_RX+0x130>)
 800282c:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 800282e:	7b7b      	ldrb	r3, [r7, #13]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <CAN_RX+0x134>)
 8002838:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 800283a:	7b7b      	ldrb	r3, [r7, #13]
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <CAN_RX+0x138>)
 8002848:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 800284a:	7b7b      	ldrb	r3, [r7, #13]
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <CAN_RX+0x13c>)
 8002858:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 800285a:	7b7b      	ldrb	r3, [r7, #13]
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <CAN_RX+0x140>)
 8002868:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 800286a:	7b7b      	ldrb	r3, [r7, #13]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <CAN_RX+0x144>)
 8002878:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <CAN_RX+0x148>)
 8002888:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 800288a:	7b7b      	ldrb	r3, [r7, #13]
 800288c:	099b      	lsrs	r3, r3, #6
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <CAN_RX+0x14c>)
 8002898:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 800289a:	7b7b      	ldrb	r3, [r7, #13]
 800289c:	09db      	lsrs	r3, r3, #7
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <CAN_RX+0x150>)
 80028a2:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	b25a      	sxtb	r2, r3
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <CAN_RX+0x154>)
 80028aa:	701a      	strb	r2, [r3, #0]
		 break;
 80028ac:	e00f      	b.n	80028ce <CAN_RX+0x11a>
		 tCANECULastSeen = HAL_GetTick();
 80028ae:	f001 f875 	bl	800399c <HAL_GetTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <CAN_RX+0x158>)
 80028b6:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
 80028b8:	7b3b      	ldrb	r3, [r7, #12]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	b21a      	sxth	r2, r3
 80028be:	7b7b      	ldrb	r3, [r7, #13]
 80028c0:	b21b      	sxth	r3, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <CAN_RX+0x15c>)
 80028ca:	801a      	strh	r2, [r3, #0]
		 break;
 80028cc:	bf00      	nop
	 }
}
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000028 	.word	0x20000028
 80028d8:	20000060 	.word	0x20000060
 80028dc:	20000066 	.word	0x20000066
 80028e0:	20000079 	.word	0x20000079
 80028e4:	20000058 	.word	0x20000058
 80028e8:	20000090 	.word	0x20000090
 80028ec:	20000083 	.word	0x20000083
 80028f0:	20000059 	.word	0x20000059
 80028f4:	20000074 	.word	0x20000074
 80028f8:	2000008e 	.word	0x2000008e
 80028fc:	20000064 	.word	0x20000064
 8002900:	20000080 	.word	0x20000080
 8002904:	20000084 	.word	0x20000084
 8002908:	20000085 	.word	0x20000085
 800290c:	20000070 	.word	0x20000070
 8002910:	2000008c 	.word	0x2000008c

08002914 <MyHalfBufferAverage>:
    }
    return 1; // If no match found, return error!
}


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	807b      	strh	r3, [r7, #2]
 8002926:	460b      	mov	r3, r1
 8002928:	707b      	strb	r3, [r7, #1]
 800292a:	4613      	mov	r3, r2
 800292c:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 8002932:	787b      	ldrb	r3, [r7, #1]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <MyHalfBufferAverage+0x28>
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	e000      	b.n	800293e <MyHalfBufferAverage+0x2a>
 800293c:	2300      	movs	r3, #0
 800293e:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	08db      	lsrs	r3, r3, #3
 8002944:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8002946:	2300      	movs	r3, #0
 8002948:	827b      	strh	r3, [r7, #18]
 800294a:	e010      	b.n	800296e <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 800294c:	8a7b      	ldrh	r3, [r7, #18]
 800294e:	00da      	lsls	r2, r3, #3
 8002950:	783b      	ldrb	r3, [r7, #0]
 8002952:	441a      	add	r2, r3
 8002954:	8a3b      	ldrh	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	4413      	add	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8002968:	8a7b      	ldrh	r3, [r7, #18]
 800296a:	3301      	adds	r3, #1
 800296c:	827b      	strh	r3, [r7, #18]
 800296e:	8a7a      	ldrh	r2, [r7, #18]
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3ea      	bcc.n	800294c <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	b29b      	uxth	r3, r3

}
 8002984:	4618      	mov	r0, r3
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff0b 	bl	80027b4 <CAN_RX>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 80029ae:	2101      	movs	r1, #1
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff feff 	bl	80027b4 <CAN_RX>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_CAN_ErrorCallback+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_CAN_ErrorCallback+0x20>)
 80029d4:	701a      	strb	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	2000007a 	.word	0x2000007a

080029e4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d107      	bne.n	8002a04 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f083 0301 	eor.w	r3, r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002a02:	701a      	strb	r2, [r3, #0]
	}
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000010c 	.word	0x2000010c
 8002a14:	20000065 	.word	0x20000065

08002a18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a1c:	f3bf 8f4f 	dsb	sy
}
 8002a20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <__NVIC_SystemReset+0x24>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a2a:	4904      	ldr	r1, [pc, #16]	; (8002a3c <__NVIC_SystemReset+0x24>)
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_SystemReset+0x28>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a32:	f3bf 8f4f 	dsb	sy
}
 8002a36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <__NVIC_SystemReset+0x20>
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	05fa0004 	.word	0x05fa0004

08002a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a48:	f000 ff50 	bl	80038ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a4c:	f000 f83e 	bl	8002acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a50:	f000 fba4 	bl	800319c <MX_GPIO_Init>
  MX_DMA_Init();
 8002a54:	f000 fb84 	bl	8003160 <MX_DMA_Init>
  MX_TIM3_Init();
 8002a58:	f000 fb0a 	bl	8003070 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002a5c:	f000 f892 	bl	8002b84 <MX_ADC1_Init>
  MX_CAN_Init();
 8002a60:	f000 f932 	bl	8002cc8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002a64:	f000 fb52 	bl	800310c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002a68:	f000 fab6 	bl	8002fd8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002a6c:	f000 fa14 	bl	8002e98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8002a70:	4811      	ldr	r0, [pc, #68]	; (8002ab8 <main+0x74>)
 8002a72:	f003 fc55 	bl	8006320 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 8002a76:	4811      	ldr	r0, [pc, #68]	; (8002abc <main+0x78>)
 8002a78:	f003 fc08 	bl	800628c <HAL_TIM_Base_Start>

  InitInputs();
 8002a7c:	f7ff fe78 	bl	8002770 <InitInputs>
  InitController(&Inputs,&Outputs);
 8002a80:	490f      	ldr	r1, [pc, #60]	; (8002ac0 <main+0x7c>)
 8002a82:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <main+0x80>)
 8002a84:	f7fe f85a 	bl	8000b3c <InitController>
  InitOutputs();
 8002a88:	f000 fbfe 	bl	8003288 <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 8002a8c:	2032      	movs	r0, #50	; 0x32
 8002a8e:	f000 ff8f 	bl	80039b0 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <main+0x84>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0fa      	beq.n	8002a92 <main+0x4e>
		  BCycleTimerFlag = 0;
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <main+0x84>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 8002aa2:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <main+0x80>)
 8002aa4:	f7ff f850 	bl	8001b48 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 8002aa8:	4905      	ldr	r1, [pc, #20]	; (8002ac0 <main+0x7c>)
 8002aaa:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <main+0x80>)
 8002aac:	f7fe f926 	bl	8000cfc <Controller>
		  WriteOutputs(&Outputs);
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <main+0x7c>)
 8002ab2:	f000 fbf7 	bl	80032a4 <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002ab6:	e7ec      	b.n	8002a92 <main+0x4e>
 8002ab8:	200000c4 	.word	0x200000c4
 8002abc:	200024e8 	.word	0x200024e8
 8002ac0:	20002530 	.word	0x20002530
 8002ac4:	200001c8 	.word	0x200001c8
 8002ac8:	2000002a 	.word	0x2000002a

08002acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b094      	sub	sp, #80	; 0x50
 8002ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ad6:	2228      	movs	r2, #40	; 0x28
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 fc86 	bl	80073ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b06:	2300      	movs	r3, #0
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b22:	4618      	mov	r0, r3
 8002b24:	f002 fde8 	bl	80056f8 <HAL_RCC_OscConfig>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002b2e:	f000 fba1 	bl	8003274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b32:	230f      	movs	r3, #15
 8002b34:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b36:	2302      	movs	r3, #2
 8002b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 f852 	bl	8005bf8 <HAL_RCC_ClockConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002b5a:	f000 fb8b 	bl	8003274 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002b62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b66:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 f9d2 	bl	8005f14 <HAL_RCCEx_PeriphCLKConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002b76:	f000 fb7d 	bl	8003274 <Error_Handler>
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3750      	adds	r7, #80	; 0x50
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b94:	4b4a      	ldr	r3, [pc, #296]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002b96:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <MX_ADC1_Init+0x140>)
 8002b98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ba8:	4b45      	ldr	r3, [pc, #276]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002bb0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002bb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bb6:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bc2:	483f      	ldr	r0, [pc, #252]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002bc4:	f000 ff18 	bl	80039f8 <HAL_ADC_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002bce:	f000 fb51 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4837      	ldr	r0, [pc, #220]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002be4:	f001 f8d0 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002bee:	f000 fb41 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bfa:	1d3b      	adds	r3, r7, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4830      	ldr	r0, [pc, #192]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002c00:	f001 f8c2 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002c0a:	f000 fb33 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c12:	2303      	movs	r3, #3
 8002c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4829      	ldr	r0, [pc, #164]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002c1c:	f001 f8b4 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002c26:	f000 fb25 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002c2e:	2304      	movs	r3, #4
 8002c30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	4822      	ldr	r0, [pc, #136]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002c38:	f001 f8a6 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002c42:	f000 fb17 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c46:	2304      	movs	r3, #4
 8002c48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002c4a:	2305      	movs	r3, #5
 8002c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	481b      	ldr	r0, [pc, #108]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002c54:	f001 f898 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002c5e:	f000 fb09 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c62:	2305      	movs	r3, #5
 8002c64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002c66:	2306      	movs	r3, #6
 8002c68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4814      	ldr	r0, [pc, #80]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002c70:	f001 f88a 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002c7a:	f000 fafb 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002c7e:	2306      	movs	r3, #6
 8002c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002c82:	2307      	movs	r3, #7
 8002c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002c8c:	f001 f87c 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002c96:	f000 faed 	bl	8003274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <MX_ADC1_Init+0x13c>)
 8002ca8:	f001 f86e 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8002cb2:	f000 fadf 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000010c 	.word	0x2000010c
 8002cc4:	40012400 	.word	0x40012400

08002cc8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b0a8      	sub	sp, #160	; 0xa0
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002cd0:	4a70      	ldr	r2, [pc, #448]	; (8002e94 <MX_CAN_Init+0x1cc>)
 8002cd2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002cd4:	4b6e      	ldr	r3, [pc, #440]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002cda:	4b6d      	ldr	r3, [pc, #436]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ce0:	4b6b      	ldr	r3, [pc, #428]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002ce6:	4b6a      	ldr	r3, [pc, #424]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002ce8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002cec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002cee:	4b68      	ldr	r3, [pc, #416]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002cf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cf4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002cf6:	4b66      	ldr	r3, [pc, #408]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002cfc:	4b64      	ldr	r3, [pc, #400]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002d02:	4b63      	ldr	r3, [pc, #396]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002d0e:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002d1a:	485d      	ldr	r0, [pc, #372]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002d1c:	f001 fadc 	bl	80042d8 <HAL_CAN_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002d26:	f000 faa5 	bl	8003274 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_RX_ID << 5 ;
 8002d2a:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002d2e:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8002d34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8002d66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4848      	ldr	r0, [pc, #288]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002d6e:	f001 fbae 	bl	80044ce <HAL_CAN_ConfigFilter>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8002d78:	f000 fa7c 	bl	8003274 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_RX_ID << 5 ;
 8002d7c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002d80:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8002d86:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d8a:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8002d94:	2301      	movs	r3, #1
 8002d96:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 8002da0:	2301      	movs	r3, #1
 8002da2:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 8002da8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002dac:	4619      	mov	r1, r3
 8002dae:	4838      	ldr	r0, [pc, #224]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002db0:	f001 fb8d 	bl	80044ce <HAL_CAN_ConfigFilter>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_CAN_Init+0xf6>
 	  Error_Handler();
 8002dba:	f000 fa5b 	bl	8003274 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 8002dbe:	f246 2320 	movw	r3, #25120	; 0x6220
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 8002dc8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8002de2:	2301      	movs	r3, #1
 8002de4:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 8002de6:	2301      	movs	r3, #1
 8002de8:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 8002dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dee:	4619      	mov	r1, r3
 8002df0:	4827      	ldr	r0, [pc, #156]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002df2:	f001 fb6c 	bl	80044ce <HAL_CAN_ConfigFilter>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_CAN_Init+0x138>
 	  Error_Handler();
 8002dfc:	f000 fa3a 	bl	8003274 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 8002e00:	f246 2320 	movw	r3, #25120	; 0x6220
 8002e04:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 8002e0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e0e:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4817      	ldr	r0, [pc, #92]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002e32:	f001 fb4c 	bl	80044ce <HAL_CAN_ConfigFilter>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_CAN_Init+0x178>
 	  Error_Handler();
 8002e3c:	f000 fa1a 	bl	8003274 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002e40:	2102      	movs	r1, #2
 8002e42:	4813      	ldr	r0, [pc, #76]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002e44:	f001 fd71 	bl	800492a <HAL_CAN_ActivateNotification>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_CAN_Init+0x18a>
	   Error_Handler();
 8002e4e:	f000 fa11 	bl	8003274 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8002e52:	2110      	movs	r1, #16
 8002e54:	480e      	ldr	r0, [pc, #56]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002e56:	f001 fd68 	bl	800492a <HAL_CAN_ActivateNotification>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8002e60:	f000 fa08 	bl	8003274 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8002e64:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8002e68:	4809      	ldr	r0, [pc, #36]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002e6a:	f001 fd5e 	bl	800492a <HAL_CAN_ActivateNotification>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8002e74:	f000 f9fe 	bl	8003274 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <MX_CAN_Init+0x1c8>)
 8002e7a:	f001 fbf1 	bl	8004660 <HAL_CAN_Start>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8002e84:	f000 f9f6 	bl	8003274 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8002e88:	bf00      	nop
 8002e8a:	37a0      	adds	r7, #160	; 0xa0
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	2000009c 	.word	0x2000009c
 8002e94:	40006400 	.word	0x40006400

08002e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b096      	sub	sp, #88	; 0x58
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	2220      	movs	r2, #32
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f004 fa8b 	bl	80073ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002ed8:	4a3e      	ldr	r2, [pc, #248]	; (8002fd4 <MX_TIM1_Init+0x13c>)
 8002eda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002edc:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002ede:	2247      	movs	r2, #71	; 0x47
 8002ee0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002eea:	f240 52db 	movw	r2, #1499	; 0x5db
 8002eee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef0:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002efc:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f02:	4833      	ldr	r0, [pc, #204]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002f04:	f003 f972 	bl	80061ec <HAL_TIM_Base_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002f0e:	f000 f9b1 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	482c      	ldr	r0, [pc, #176]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002f20:	f003 fc72 	bl	8006808 <HAL_TIM_ConfigClockSource>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f2a:	f000 f9a3 	bl	8003274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f2e:	4828      	ldr	r0, [pc, #160]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002f30:	f003 fa48 	bl	80063c4 <HAL_TIM_PWM_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002f3a:	f000 f99b 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4820      	ldr	r0, [pc, #128]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002f4e:	f004 f865 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002f58:	f000 f98c 	bl	8003274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f5c:	2360      	movs	r3, #96	; 0x60
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f70:	2300      	movs	r3, #0
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4813      	ldr	r0, [pc, #76]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002f82:	f003 fb7f 	bl	8006684 <HAL_TIM_PWM_ConfigChannel>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002f8c:	f000 f972 	bl	8003274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002fb4:	f004 f890 	bl	80070d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002fbe:	f000 f959 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fc2:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <MX_TIM1_Init+0x138>)
 8002fc4:	f000 faf4 	bl	80035b0 <HAL_TIM_MspPostInit>

}
 8002fc8:	bf00      	nop
 8002fca:	3758      	adds	r7, #88	; 0x58
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000260 	.word	0x20000260
 8002fd4:	40012c00 	.word	0x40012c00

08002fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fde:	f107 0308 	add.w	r3, r7, #8
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <MX_TIM2_Init+0x94>)
 8002ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <MX_TIM2_Init+0x94>)
 8002ffe:	2247      	movs	r2, #71	; 0x47
 8003000:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <MX_TIM2_Init+0x94>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <MX_TIM2_Init+0x94>)
 800300a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800300e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <MX_TIM2_Init+0x94>)
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <MX_TIM2_Init+0x94>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800301c:	4813      	ldr	r0, [pc, #76]	; (800306c <MX_TIM2_Init+0x94>)
 800301e:	f003 f8e5 	bl	80061ec <HAL_TIM_Base_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003028:	f000 f924 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4619      	mov	r1, r3
 8003038:	480c      	ldr	r0, [pc, #48]	; (800306c <MX_TIM2_Init+0x94>)
 800303a:	f003 fbe5 	bl	8006808 <HAL_TIM_ConfigClockSource>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003044:	f000 f916 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003050:	463b      	mov	r3, r7
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <MX_TIM2_Init+0x94>)
 8003056:	f003 ffe1 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003060:	f000 f908 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003064:	bf00      	nop
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200024e8 	.word	0x200024e8

08003070 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003076:	f107 0308 	add.w	r3, r7, #8
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003084:	463b      	mov	r3, r7
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <MX_TIM3_Init+0x94>)
 800308e:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <MX_TIM3_Init+0x98>)
 8003090:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <MX_TIM3_Init+0x94>)
 8003094:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <MX_TIM3_Init+0x94>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <MX_TIM3_Init+0x94>)
 80030a2:	2263      	movs	r2, #99	; 0x63
 80030a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <MX_TIM3_Init+0x94>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <MX_TIM3_Init+0x94>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030b2:	4814      	ldr	r0, [pc, #80]	; (8003104 <MX_TIM3_Init+0x94>)
 80030b4:	f003 f89a 	bl	80061ec <HAL_TIM_Base_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80030be:	f000 f8d9 	bl	8003274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030c8:	f107 0308 	add.w	r3, r7, #8
 80030cc:	4619      	mov	r1, r3
 80030ce:	480d      	ldr	r0, [pc, #52]	; (8003104 <MX_TIM3_Init+0x94>)
 80030d0:	f003 fb9a 	bl	8006808 <HAL_TIM_ConfigClockSource>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80030da:	f000 f8cb 	bl	8003274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030e6:	463b      	mov	r3, r7
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	; (8003104 <MX_TIM3_Init+0x94>)
 80030ec:	f003 ff96 	bl	800701c <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80030f6:	f000 f8bd 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200000c4 	.word	0x200000c4
 8003108:	40000400 	.word	0x40000400

0800310c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <MX_USART1_UART_Init+0x50>)
 8003114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800311c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_USART1_UART_Init+0x4c>)
 8003144:	f004 f84f 	bl	80071e6 <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800314e:	f000 f891 	bl	8003274 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000013c 	.word	0x2000013c
 800315c:	40013800 	.word	0x40013800

08003160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <MX_DMA_Init+0x38>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <MX_DMA_Init+0x38>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6153      	str	r3, [r2, #20]
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <MX_DMA_Init+0x38>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	200b      	movs	r0, #11
 8003184:	f001 fedf 	bl	8004f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003188:	200b      	movs	r0, #11
 800318a:	f001 fef8 	bl	8004f7e <HAL_NVIC_EnableIRQ>

}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031b6:	f043 0320 	orr.w	r3, r3, #32
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b21      	ldr	r3, [pc, #132]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	6193      	str	r3, [r2, #24]
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	4a17      	ldr	r2, [pc, #92]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031e6:	f043 0308 	orr.w	r3, r3, #8
 80031ea:	6193      	str	r3, [r2, #24]
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <MX_GPIO_Init+0xa8>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 80031f8:	2200      	movs	r2, #0
 80031fa:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 80031fe:	4812      	ldr	r0, [pc, #72]	; (8003248 <MX_GPIO_Init+0xac>)
 8003200:	f002 fa61 	bl	80056c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8003204:	237b      	movs	r3, #123	; 0x7b
 8003206:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	4619      	mov	r1, r3
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <MX_GPIO_Init+0xac>)
 8003218:	f002 f8ba 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 800321c:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8003220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003222:	2301      	movs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322a:	2302      	movs	r3, #2
 800322c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 0310 	add.w	r3, r7, #16
 8003232:	4619      	mov	r1, r3
 8003234:	4804      	ldr	r0, [pc, #16]	; (8003248 <MX_GPIO_Init+0xac>)
 8003236:	f002 f8ab 	bl	8005390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800323a:	bf00      	nop
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	40010c00 	.word	0x40010c00

0800324c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d102      	bne.n	8003262 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
	}
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	200000c4 	.word	0x200000c4
 8003270:	2000002a 	.word	0x2000002a

08003274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003278:	b672      	cpsid	i
}
 800327a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 800327c:	20c8      	movs	r0, #200	; 0xc8
 800327e:	f000 fb97 	bl	80039b0 <HAL_Delay>
	  NVIC_SystemReset();
 8003282:	f7ff fbc9 	bl	8002a18 <__NVIC_SystemReset>
	...

08003288 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0

	// TODO: start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 800328c:	4b04      	ldr	r3, [pc, #16]	; (80032a0 <InitOutputs+0x18>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2200      	movs	r2, #0
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003294:	2104      	movs	r1, #4
 8003296:	4802      	ldr	r0, [pc, #8]	; (80032a0 <InitOutputs+0x18>)
 8003298:	f003 fe22 	bl	8006ee0 <HAL_TIMEx_PWMN_Start>
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000260 	.word	0x20000260

080032a4 <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

	// CLUTCH

	// Clamping to avoid out of bounds values
	xClutchTargetOut = CLAMP(output->xClutchTarget, xCLUTCH_ABSOLUTE_MIN, xCLUTCH_ABSOLUTE_MAX);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	89db      	ldrh	r3, [r3, #14]
 80032b0:	f640 0233 	movw	r2, #2099	; 0x833
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d808      	bhi.n	80032ca <WriteOutputs+0x26>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	89db      	ldrh	r3, [r3, #14]
 80032bc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80032c0:	bf38      	it	cc
 80032c2:	f44f 7361 	movcc.w	r3, #900	; 0x384
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	e001      	b.n	80032ce <WriteOutputs+0x2a>
 80032ca:	f640 0334 	movw	r3, #2100	; 0x834
 80032ce:	4a17      	ldr	r2, [pc, #92]	; (800332c <WriteOutputs+0x88>)
 80032d0:	8013      	strh	r3, [r2, #0]
	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to

	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	xClutchTargetOut *= 2;
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <WriteOutputs+0x88>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <WriteOutputs+0x88>)
 80032dc:	801a      	strh	r2, [r3, #0]

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
	//__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, xClutchTargetOut -1 );
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <WriteOutputs+0x88>)
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <WriteOutputs+0x8c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <WriteOutputs+0x88>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	461a      	mov	r2, r3
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <WriteOutputs+0x8c>)
 80032f4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, xClutchTargetOut/2);
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <WriteOutputs+0x88>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <WriteOutputs+0x8c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting

	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, output->BUpShiftPortState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7cdb      	ldrb	r3, [r3, #19]
 8003308:	461a      	mov	r2, r3
 800330a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800330e:	4809      	ldr	r0, [pc, #36]	; (8003334 <WriteOutputs+0x90>)
 8003310:	f002 f9d9 	bl	80056c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, output->BDnShiftPortState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7d1b      	ldrb	r3, [r3, #20]
 8003318:	461a      	mov	r2, r3
 800331a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800331e:	4805      	ldr	r0, [pc, #20]	; (8003334 <WriteOutputs+0x90>)
 8003320:	f002 f9d1 	bl	80056c6 <HAL_GPIO_WritePin>
	// CAN
	// add the info of the shutDown (DriverKill) in the CAN for others to see
	// use the output->BUseButtonsForMultifunction to pop up the message for the multifunction in the screen
	// send the display index (remember it is already 0-based)
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF, in order to have also the flashing action?
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200025b4 	.word	0x200025b4
 8003330:	20000260 	.word	0x20000260
 8003334:	40010c00 	.word	0x40010c00

08003338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <HAL_MspInit+0x5c>)
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_MspInit+0x5c>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6193      	str	r3, [r2, #24]
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_MspInit+0x5c>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_MspInit+0x5c>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_MspInit+0x5c>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	61d3      	str	r3, [r2, #28]
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_MspInit+0x5c>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_MspInit+0x60>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_MspInit+0x60>)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	40021000 	.word	0x40021000
 8003398:	40010000 	.word	0x40010000

0800339c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a29      	ldr	r2, [pc, #164]	; (800345c <HAL_ADC_MspInit+0xc0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d14a      	bne.n	8003452 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033bc:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_ADC_MspInit+0xc4>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <HAL_ADC_MspInit+0xc4>)
 80033c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c6:	6193      	str	r3, [r2, #24]
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_ADC_MspInit+0xc4>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d4:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_ADC_MspInit+0xc4>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	4a21      	ldr	r2, [pc, #132]	; (8003460 <HAL_ADC_MspInit+0xc4>)
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	6193      	str	r3, [r2, #24]
 80033e0:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <HAL_ADC_MspInit+0xc4>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80033ec:	23ff      	movs	r3, #255	; 0xff
 80033ee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f0:	2303      	movs	r3, #3
 80033f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	f107 0310 	add.w	r3, r7, #16
 80033f8:	4619      	mov	r1, r3
 80033fa:	481a      	ldr	r0, [pc, #104]	; (8003464 <HAL_ADC_MspInit+0xc8>)
 80033fc:	f001 ffc8 	bl	8005390 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 8003402:	4a1a      	ldr	r2, [pc, #104]	; (800346c <HAL_ADC_MspInit+0xd0>)
 8003404:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 8003408:	2200      	movs	r2, #0
 800340a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 800341a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800341e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003420:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 8003422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003426:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 800342a:	2220      	movs	r2, #32
 800342c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 8003430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003434:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003436:	480c      	ldr	r0, [pc, #48]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 8003438:	f001 fdbc 	bl	8004fb4 <HAL_DMA_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8003442:	f7ff ff17 	bl	8003274 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 800344a:	621a      	str	r2, [r3, #32]
 800344c:	4a06      	ldr	r2, [pc, #24]	; (8003468 <HAL_ADC_MspInit+0xcc>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003452:	bf00      	nop
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40012400 	.word	0x40012400
 8003460:	40021000 	.word	0x40021000
 8003464:	40010800 	.word	0x40010800
 8003468:	20000184 	.word	0x20000184
 800346c:	40020008 	.word	0x40020008

08003470 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0310 	add.w	r3, r7, #16
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a20      	ldr	r2, [pc, #128]	; (800350c <HAL_CAN_MspInit+0x9c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d139      	bne.n	8003504 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_CAN_MspInit+0xa0>)
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	4a1e      	ldr	r2, [pc, #120]	; (8003510 <HAL_CAN_MspInit+0xa0>)
 8003496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800349a:	61d3      	str	r3, [r2, #28]
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <HAL_CAN_MspInit+0xa0>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_CAN_MspInit+0xa0>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_CAN_MspInit+0xa0>)
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	6193      	str	r3, [r2, #24]
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <HAL_CAN_MspInit+0xa0>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ce:	f107 0310 	add.w	r3, r7, #16
 80034d2:	4619      	mov	r1, r3
 80034d4:	480f      	ldr	r0, [pc, #60]	; (8003514 <HAL_CAN_MspInit+0xa4>)
 80034d6:	f001 ff5b 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	2302      	movs	r3, #2
 80034e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034e4:	2303      	movs	r3, #3
 80034e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	4619      	mov	r1, r3
 80034ee:	4809      	ldr	r0, [pc, #36]	; (8003514 <HAL_CAN_MspInit+0xa4>)
 80034f0:	f001 ff4e 	bl	8005390 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	2014      	movs	r0, #20
 80034fa:	f001 fd24 	bl	8004f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80034fe:	2014      	movs	r0, #20
 8003500:	f001 fd3d 	bl	8004f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003504:	bf00      	nop
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40006400 	.word	0x40006400
 8003510:	40021000 	.word	0x40021000
 8003514:	40010800 	.word	0x40010800

08003518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_TIM_Base_MspInit+0x8c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d10c      	bne.n	8003544 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800352a:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 8003530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003534:	6193      	str	r3, [r2, #24]
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003542:	e02a      	b.n	800359a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d10c      	bne.n	8003568 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	61d3      	str	r3, [r2, #28]
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	693b      	ldr	r3, [r7, #16]
}
 8003566:	e018      	b.n	800359a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <HAL_TIM_Base_MspInit+0x94>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d113      	bne.n	800359a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_TIM_Base_MspInit+0x90>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800358a:	2200      	movs	r2, #0
 800358c:	2100      	movs	r1, #0
 800358e:	201d      	movs	r0, #29
 8003590:	f001 fcd9 	bl	8004f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003594:	201d      	movs	r0, #29
 8003596:	f001 fcf2 	bl	8004f7e <HAL_NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40000400 	.word	0x40000400

080035b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0310 	add.w	r3, r7, #16
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a10      	ldr	r2, [pc, #64]	; (800360c <HAL_TIM_MspPostInit+0x5c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d118      	bne.n	8003602 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_TIM_MspPostInit+0x60>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <HAL_TIM_MspPostInit+0x60>)
 80035d6:	f043 0308 	orr.w	r3, r3, #8
 80035da:	6193      	str	r3, [r2, #24]
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_TIM_MspPostInit+0x60>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 80035e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2302      	movs	r3, #2
 80035f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 0310 	add.w	r3, r7, #16
 80035fa:	4619      	mov	r1, r3
 80035fc:	4805      	ldr	r0, [pc, #20]	; (8003614 <HAL_TIM_MspPostInit+0x64>)
 80035fe:	f001 fec7 	bl	8005390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003602:	bf00      	nop
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40010c00 	.word	0x40010c00

08003618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003620:	f107 0310 	add.w	r3, r7, #16
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_UART_MspInit+0x8c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d131      	bne.n	800369c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_UART_MspInit+0x90>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_UART_MspInit+0x90>)
 800363e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003642:	6193      	str	r3, [r2, #24]
 8003644:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_UART_MspInit+0x90>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003650:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_UART_MspInit+0x90>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <HAL_UART_MspInit+0x90>)
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	6193      	str	r3, [r2, #24]
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_UART_MspInit+0x90>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800366c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003672:	2303      	movs	r3, #3
 8003674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 0310 	add.w	r3, r7, #16
 800367a:	4619      	mov	r1, r3
 800367c:	480b      	ldr	r0, [pc, #44]	; (80036ac <HAL_UART_MspInit+0x94>)
 800367e:	f001 fe87 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	f107 0310 	add.w	r3, r7, #16
 8003694:	4619      	mov	r1, r3
 8003696:	4805      	ldr	r0, [pc, #20]	; (80036ac <HAL_UART_MspInit+0x94>)
 8003698:	f001 fe7a 	bl	8005390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800369c:	bf00      	nop
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40010800 	.word	0x40010800

080036b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036b4:	e7fe      	b.n	80036b4 <NMI_Handler+0x4>

080036b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ba:	e7fe      	b.n	80036ba <HardFault_Handler+0x4>

080036bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c0:	e7fe      	b.n	80036c0 <MemManage_Handler+0x4>

080036c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c6:	e7fe      	b.n	80036c6 <BusFault_Handler+0x4>

080036c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036cc:	e7fe      	b.n	80036cc <UsageFault_Handler+0x4>

080036ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036f6:	f000 f93f 	bl	8003978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003704:	4802      	ldr	r0, [pc, #8]	; (8003710 <DMA1_Channel1_IRQHandler+0x10>)
 8003706:	f001 fd0f 	bl	8005128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800370a:	bf00      	nop
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000184 	.word	0x20000184

08003714 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003718:	4802      	ldr	r0, [pc, #8]	; (8003724 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800371a:	f001 f92b 	bl	8004974 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	2000009c 	.word	0x2000009c

08003728 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800372c:	4802      	ldr	r0, [pc, #8]	; (8003738 <TIM3_IRQHandler+0x10>)
 800372e:	f002 fea1 	bl	8006474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200000c4 	.word	0x200000c4

0800373c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <My2DMapInterpolate>:
#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	68fc      	ldr	r4, [r7, #12]
 8003758:	1e63      	subs	r3, r4, #1
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	4623      	mov	r3, r4
 800375e:	4618      	mov	r0, r3
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	014b      	lsls	r3, r1, #5
 800376e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003772:	0142      	lsls	r2, r0, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800377a:	4618      	mov	r0, r3
 800377c:	f7fc feee 	bl	800055c <__aeabi_fsub>
 8003780:	4603      	mov	r3, r0
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7fd f991 	bl	8000aac <__aeabi_fcmplt>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8003790:	4623      	mov	r3, r4
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	4413      	add	r3, r2
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	601a      	str	r2, [r3, #0]
		return 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	e07a      	b.n	8003898 <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1e5a      	subs	r2, r3, #1
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fed6 	bl	8000560 <__addsf3>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4619      	mov	r1, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fd f995 	bl	8000ae8 <__aeabi_fcmpgt>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 80037c4:	4623      	mov	r3, r4
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	4413      	add	r3, r2
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	3a01      	subs	r2, #1
 80037d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	601a      	str	r2, [r3, #0]
		return 1;
 80037d8:	2301      	movs	r3, #1
 80037da:	e05d      	b.n	8003898 <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e00e      	b.n	8003800 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd f95c 	bl	8000aac <__aeabi_fcmplt>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d108      	bne.n	800380c <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	3b01      	subs	r3, #1
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	429a      	cmp	r2, r3
 8003808:	dbeb      	blt.n	80037e2 <My2DMapInterpolate+0x9a>
 800380a:	e000      	b.n	800380e <My2DMapInterpolate+0xc6>
			break;
 800380c:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003820:	4619      	mov	r1, r3
 8003822:	f7fc fe9b 	bl	800055c <__aeabi_fsub>
 8003826:	4603      	mov	r3, r0
 8003828:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 800382a:	4623      	mov	r3, r4
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4413      	add	r3, r2
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	3201      	adds	r2, #1
 8003836:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800383a:	4623      	mov	r3, r4
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	4413      	add	r3, r2
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	4619      	mov	r1, r3
 800384a:	f7fc fe87 	bl	800055c <__aeabi_fsub>
 800384e:	4603      	mov	r3, r0
 8003850:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 8003852:	4623      	mov	r3, r4
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4413      	add	r3, r2
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fc fe76 	bl	800055c <__aeabi_fsub>
 8003870:	4603      	mov	r3, r0
 8003872:	6939      	ldr	r1, [r7, #16]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc ff7b 	bl	8000770 <__aeabi_fmul>
 800387a:	4603      	mov	r3, r0
 800387c:	6979      	ldr	r1, [r7, #20]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd f82a 	bl	80008d8 <__aeabi_fdiv>
 8003884:	4603      	mov	r3, r0
 8003886:	4619      	mov	r1, r3
 8003888:	4620      	mov	r0, r4
 800388a:	f7fc fe69 	bl	8000560 <__addsf3>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
	return 0;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3724      	adds	r7, #36	; 0x24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038a0:	f7ff ff4c 	bl	800373c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038a4:	480b      	ldr	r0, [pc, #44]	; (80038d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80038a6:	490c      	ldr	r1, [pc, #48]	; (80038d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80038a8:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80038aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038ac:	e002      	b.n	80038b4 <LoopCopyDataInit>

080038ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038b2:	3304      	adds	r3, #4

080038b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b8:	d3f9      	bcc.n	80038ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80038bc:	4c09      	ldr	r4, [pc, #36]	; (80038e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c0:	e001      	b.n	80038c6 <LoopFillZerobss>

080038c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c4:	3204      	adds	r2, #4

080038c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c8:	d3fb      	bcc.n	80038c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038ca:	f003 fd6b 	bl	80073a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ce:	f7ff f8b9 	bl	8002a44 <main>
  bx lr
 80038d2:	4770      	bx	lr
  ldr r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80038dc:	0800769c 	.word	0x0800769c
  ldr r2, =_sbss
 80038e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80038e4:	200025c8 	.word	0x200025c8

080038e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <ADC1_2_IRQHandler>
	...

080038ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_Init+0x28>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a07      	ldr	r2, [pc, #28]	; (8003914 <HAL_Init+0x28>)
 80038f6:	f043 0310 	orr.w	r3, r3, #16
 80038fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038fc:	2003      	movs	r0, #3
 80038fe:	f001 fb17 	bl	8004f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003902:	200f      	movs	r0, #15
 8003904:	f000 f808 	bl	8003918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003908:	f7ff fd16 	bl	8003338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40022000 	.word	0x40022000

08003918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_InitTick+0x54>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_InitTick+0x58>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800392e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fb2f 	bl	8004f9a <HAL_SYSTICK_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e00e      	b.n	8003964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b0f      	cmp	r3, #15
 800394a:	d80a      	bhi.n	8003962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394c:	2200      	movs	r2, #0
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	f001 faf7 	bl	8004f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <HAL_InitTick+0x5c>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000000 	.word	0x20000000
 8003970:	20000008 	.word	0x20000008
 8003974:	20000004 	.word	0x20000004

08003978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_IncTick+0x1c>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_IncTick+0x20>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4413      	add	r3, r2
 8003988:	4a03      	ldr	r2, [pc, #12]	; (8003998 <HAL_IncTick+0x20>)
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000008 	.word	0x20000008
 8003998:	200025c4 	.word	0x200025c4

0800399c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return uwTick;
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <HAL_GetTick+0x10>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	200025c4 	.word	0x200025c4

080039b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b8:	f7ff fff0 	bl	800399c <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d005      	beq.n	80039d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <HAL_Delay+0x44>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039d6:	bf00      	nop
 80039d8:	f7ff ffe0 	bl	800399c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d8f7      	bhi.n	80039d8 <HAL_Delay+0x28>
  {
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000008 	.word	0x20000008

080039f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0be      	b.n	8003b98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fcb0 	bl	800339c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 faf5 	bl	800402c <ADC_ConversionStop_Disable>
 8003a42:	4603      	mov	r3, r0
 8003a44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 8099 	bne.w	8003b86 <HAL_ADC_Init+0x18e>
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8095 	bne.w	8003b86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a64:	f023 0302 	bic.w	r3, r3, #2
 8003a68:	f043 0202 	orr.w	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7b1b      	ldrb	r3, [r3, #12]
 8003a7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a90:	d003      	beq.n	8003a9a <HAL_ADC_Init+0xa2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d102      	bne.n	8003aa0 <HAL_ADC_Init+0xa8>
 8003a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9e:	e000      	b.n	8003aa2 <HAL_ADC_Init+0xaa>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7d1b      	ldrb	r3, [r3, #20]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d119      	bne.n	8003ae4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7b1b      	ldrb	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	035a      	lsls	r2, r3, #13
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e00b      	b.n	8003ae4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_ADC_Init+0x1a8>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d003      	beq.n	8003b1e <HAL_ADC_Init+0x126>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d104      	bne.n	8003b28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	051b      	lsls	r3, r3, #20
 8003b26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <HAL_ADC_Init+0x1ac>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d10b      	bne.n	8003b64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	f023 0303 	bic.w	r3, r3, #3
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b62:	e018      	b.n	8003b96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f023 0312 	bic.w	r3, r3, #18
 8003b6c:	f043 0210 	orr.w	r2, r3, #16
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f043 0201 	orr.w	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b84:	e007      	b.n	8003b96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	ffe1f7fd 	.word	0xffe1f7fd
 8003ba4:	ff1f0efe 	.word	0xff1f0efe

08003ba8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a64      	ldr	r2, [pc, #400]	; (8003d50 <HAL_ADC_Start_DMA+0x1a8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_ADC_Start_DMA+0x24>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a63      	ldr	r2, [pc, #396]	; (8003d54 <HAL_ADC_Start_DMA+0x1ac>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d106      	bne.n	8003bda <HAL_ADC_Start_DMA+0x32>
 8003bcc:	4b60      	ldr	r3, [pc, #384]	; (8003d50 <HAL_ADC_Start_DMA+0x1a8>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 80b3 	bne.w	8003d40 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_Start_DMA+0x40>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0ae      	b.n	8003d46 <HAL_ADC_Start_DMA+0x19e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f9c1 	bl	8003f78 <ADC_Enable>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f040 809a 	bne.w	8003d36 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a4e      	ldr	r2, [pc, #312]	; (8003d54 <HAL_ADC_Start_DMA+0x1ac>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d105      	bne.n	8003c2c <HAL_ADC_Start_DMA+0x84>
 8003c20:	4b4b      	ldr	r3, [pc, #300]	; (8003d50 <HAL_ADC_Start_DMA+0x1a8>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d115      	bne.n	8003c58 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d026      	beq.n	8003c94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c56:	e01d      	b.n	8003c94 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a39      	ldr	r2, [pc, #228]	; (8003d50 <HAL_ADC_Start_DMA+0x1a8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <HAL_ADC_Start_DMA+0xd0>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a38      	ldr	r2, [pc, #224]	; (8003d54 <HAL_ADC_Start_DMA+0x1ac>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d10d      	bne.n	8003c94 <HAL_ADC_Start_DMA+0xec>
 8003c78:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <HAL_ADC_Start_DMA+0x1a8>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	f023 0206 	bic.w	r2, r3, #6
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cac:	e002      	b.n	8003cb4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <HAL_ADC_Start_DMA+0x1b0>)
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_ADC_Start_DMA+0x1b4>)
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <HAL_ADC_Start_DMA+0x1b8>)
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0202 	mvn.w	r2, #2
 8003cdc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a18      	ldr	r0, [r3, #32]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	334c      	adds	r3, #76	; 0x4c
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f001 f9b3 	bl	8005068 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d10:	d108      	bne.n	8003d24 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003d20:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003d22:	e00f      	b.n	8003d44 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d32:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003d34:	e006      	b.n	8003d44 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003d3e:	e001      	b.n	8003d44 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40012400 	.word	0x40012400
 8003d54:	40012800 	.word	0x40012800
 8003d58:	080040af 	.word	0x080040af
 8003d5c:	0800412b 	.word	0x0800412b
 8003d60:	08004147 	.word	0x08004147

08003d64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x20>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0dc      	b.n	8003f62 <HAL_ADC_ConfigChannel+0x1da>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d81c      	bhi.n	8003df2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3b05      	subs	r3, #5
 8003dca:	221f      	movs	r2, #31
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	4019      	ands	r1, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	3b05      	subs	r3, #5
 8003de4:	fa00 f203 	lsl.w	r2, r0, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	635a      	str	r2, [r3, #52]	; 0x34
 8003df0:	e03c      	b.n	8003e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	d81c      	bhi.n	8003e34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	3b23      	subs	r3, #35	; 0x23
 8003e0c:	221f      	movs	r2, #31
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	4019      	ands	r1, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b23      	subs	r3, #35	; 0x23
 8003e26:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
 8003e32:	e01b      	b.n	8003e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	3b41      	subs	r3, #65	; 0x41
 8003e46:	221f      	movs	r2, #31
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	4019      	ands	r1, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3b41      	subs	r3, #65	; 0x41
 8003e60:	fa00 f203 	lsl.w	r2, r0, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b09      	cmp	r3, #9
 8003e72:	d91c      	bls.n	8003eae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68d9      	ldr	r1, [r3, #12]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	3b1e      	subs	r3, #30
 8003e86:	2207      	movs	r2, #7
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	4019      	ands	r1, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	6898      	ldr	r0, [r3, #8]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3b1e      	subs	r3, #30
 8003ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	e019      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6919      	ldr	r1, [r3, #16]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	4019      	ands	r1, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6898      	ldr	r0, [r3, #8]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d003      	beq.n	8003ef2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003eee:	2b11      	cmp	r3, #17
 8003ef0:	d132      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_ADC_ConfigChannel+0x1e4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d125      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d126      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d11a      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <HAL_ADC_ConfigChannel+0x1e8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_ADC_ConfigChannel+0x1ec>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	0c9a      	lsrs	r2, r3, #18
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f38:	e002      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f9      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x1b2>
 8003f46:	e007      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	40012400 	.word	0x40012400
 8003f70:	20000000 	.word	0x20000000
 8003f74:	431bde83 	.word	0x431bde83

08003f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d040      	beq.n	8004018 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fa6:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <ADC_Enable+0xac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <ADC_Enable+0xb0>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fb4:	e002      	b.n	8003fbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f9      	bne.n	8003fb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fc2:	f7ff fceb 	bl	800399c <HAL_GetTick>
 8003fc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003fc8:	e01f      	b.n	800400a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fca:	f7ff fce7 	bl	800399c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d918      	bls.n	800400a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d011      	beq.n	800400a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	f043 0210 	orr.w	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e007      	b.n	800401a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d1d8      	bne.n	8003fca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000000 	.word	0x20000000
 8004028:	431bde83 	.word	0x431bde83

0800402c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d12e      	bne.n	80040a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004056:	f7ff fca1 	bl	800399c <HAL_GetTick>
 800405a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800405c:	e01b      	b.n	8004096 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800405e:	f7ff fc9d 	bl	800399c <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d914      	bls.n	8004096 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10d      	bne.n	8004096 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f043 0210 	orr.w	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	f043 0201 	orr.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e007      	b.n	80040a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d0dc      	beq.n	800405e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d127      	bne.n	8004118 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80040de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80040e2:	d115      	bne.n	8004110 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d111      	bne.n	8004110 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff fe27 	bl	8003d64 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004116:	e004      	b.n	8004122 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7fe fc53 	bl	80029e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fe02 	bl	8003d76 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_ADCEx_Calibration_Start+0x1e>
 8004196:	2302      	movs	r3, #2
 8004198:	e097      	b.n	80042ca <HAL_ADCEx_Calibration_Start+0x14e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff ff42 	bl	800402c <ADC_ConversionStop_Disable>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fee3 	bl	8003f78 <ADC_Enable>
 80041b2:	4603      	mov	r3, r0
 80041b4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f040 8081 	bne.w	80042c0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041c6:	f023 0302 	bic.w	r3, r3, #2
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80041d2:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <HAL_ADCEx_Calibration_Start+0x158>)
 80041d4:	681c      	ldr	r4, [r3, #0]
 80041d6:	2002      	movs	r0, #2
 80041d8:	f001 ff52 	bl	8006080 <HAL_RCCEx_GetPeriphCLKFreq>
 80041dc:	4603      	mov	r3, r0
 80041de:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80041e2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80041e4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80041e6:	e002      	b.n	80041ee <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f9      	bne.n	80041e8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004204:	f7ff fbca 	bl	800399c <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800420a:	e01b      	b.n	8004244 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800420c:	f7ff fbc6 	bl	800399c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b0a      	cmp	r3, #10
 8004218:	d914      	bls.n	8004244 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	f023 0312 	bic.w	r3, r3, #18
 8004230:	f043 0210 	orr.w	r2, r3, #16
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e042      	b.n	80042ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1dc      	bne.n	800420c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0204 	orr.w	r2, r2, #4
 8004260:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004262:	f7ff fb9b 	bl	800399c <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004268:	e01b      	b.n	80042a2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800426a:	f7ff fb97 	bl	800399c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b0a      	cmp	r3, #10
 8004276:	d914      	bls.n	80042a2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	f023 0312 	bic.w	r3, r3, #18
 800428e:	f043 0210 	orr.w	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e013      	b.n	80042ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1dc      	bne.n	800426a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f023 0303 	bic.w	r3, r3, #3
 80042b8:	f043 0201 	orr.w	r2, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd90      	pop	{r4, r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000000 	.word	0x20000000

080042d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0ed      	b.n	80044c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff f8ba 	bl	8003470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800430c:	f7ff fb46 	bl	800399c <HAL_GetTick>
 8004310:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004312:	e012      	b.n	800433a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004314:	f7ff fb42 	bl	800399c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b0a      	cmp	r3, #10
 8004320:	d90b      	bls.n	800433a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2205      	movs	r2, #5
 8004332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0c5      	b.n	80044c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0e5      	beq.n	8004314 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0202 	bic.w	r2, r2, #2
 8004356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004358:	f7ff fb20 	bl	800399c <HAL_GetTick>
 800435c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800435e:	e012      	b.n	8004386 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004360:	f7ff fb1c 	bl	800399c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b0a      	cmp	r3, #10
 800436c:	d90b      	bls.n	8004386 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2205      	movs	r2, #5
 800437e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e09f      	b.n	80044c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7e1b      	ldrb	r3, [r3, #24]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d108      	bne.n	80043ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7e5b      	ldrb	r3, [r3, #25]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d108      	bne.n	80043d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e007      	b.n	80043e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7e9b      	ldrb	r3, [r3, #26]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d108      	bne.n	8004402 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0220 	orr.w	r2, r2, #32
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e007      	b.n	8004412 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0220 	bic.w	r2, r2, #32
 8004410:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7edb      	ldrb	r3, [r3, #27]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0210 	bic.w	r2, r2, #16
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e007      	b.n	800443c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0210 	orr.w	r2, r2, #16
 800443a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7f1b      	ldrb	r3, [r3, #28]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d108      	bne.n	8004456 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0208 	orr.w	r2, r2, #8
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e007      	b.n	8004466 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0208 	bic.w	r2, r2, #8
 8004464:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7f5b      	ldrb	r3, [r3, #29]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d108      	bne.n	8004480 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0204 	orr.w	r2, r2, #4
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e007      	b.n	8004490 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	ea42 0103 	orr.w	r1, r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	1e5a      	subs	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b087      	sub	sp, #28
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d003      	beq.n	80044f4 <HAL_CAN_ConfigFilter+0x26>
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	f040 80aa 	bne.w	8004648 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044fa:	f043 0201 	orr.w	r2, r3, #1
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2201      	movs	r2, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	43db      	mvns	r3, r3
 800451e:	401a      	ands	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d123      	bne.n	8004576 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43db      	mvns	r3, r3
 8004538:	401a      	ands	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004550:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3248      	adds	r2, #72	; 0x48
 8004556:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800456a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800456c:	6979      	ldr	r1, [r7, #20]
 800456e:	3348      	adds	r3, #72	; 0x48
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	440b      	add	r3, r1
 8004574:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d122      	bne.n	80045c4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	431a      	orrs	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800459e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3248      	adds	r2, #72	; 0x48
 80045a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	3348      	adds	r3, #72	; 0x48
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	440b      	add	r3, r1
 80045c2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80045de:	e007      	b.n	80045f0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	43db      	mvns	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800460a:	e007      	b.n	800461c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	431a      	orrs	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	431a      	orrs	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800463a:	f023 0201 	bic.w	r2, r3, #1
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	e006      	b.n	8004656 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	d12e      	bne.n	80046d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800468c:	f7ff f986 	bl	800399c <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004692:	e012      	b.n	80046ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004694:	f7ff f982 	bl	800399c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b0a      	cmp	r3, #10
 80046a0:	d90b      	bls.n	80046ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2205      	movs	r2, #5
 80046b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e012      	b.n	80046e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e006      	b.n	80046e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
  }
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d003      	beq.n	800470c <HAL_CAN_GetRxMessage+0x24>
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b02      	cmp	r3, #2
 8004708:	f040 8103 	bne.w	8004912 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10e      	bne.n	8004730 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d116      	bne.n	800474e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0f7      	b.n	8004920 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d107      	bne.n	800474e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0e8      	b.n	8004920 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	331b      	adds	r3, #27
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	4413      	add	r3, r2
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0204 	and.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10c      	bne.n	8004786 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	331b      	adds	r3, #27
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4413      	add	r3, r2
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	0d5b      	lsrs	r3, r3, #21
 800477c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e00b      	b.n	800479e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	331b      	adds	r3, #27
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	08db      	lsrs	r3, r3, #3
 8004796:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	331b      	adds	r3, #27
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	4413      	add	r3, r2
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0202 	and.w	r2, r3, #2
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	331b      	adds	r3, #27
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4413      	add	r3, r2
 80047c0:	3304      	adds	r3, #4
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2208      	movs	r2, #8
 80047d0:	611a      	str	r2, [r3, #16]
 80047d2:	e00b      	b.n	80047ec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	331b      	adds	r3, #27
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	4413      	add	r3, r2
 80047e0:	3304      	adds	r3, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	331b      	adds	r3, #27
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4413      	add	r3, r2
 80047f8:	3304      	adds	r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	331b      	adds	r3, #27
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	3304      	adds	r3, #4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4413      	add	r3, r2
 8004826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	4413      	add	r3, r2
 800483c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	0a1a      	lsrs	r2, r3, #8
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	4413      	add	r3, r2
 8004856:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	0c1a      	lsrs	r2, r3, #16
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	3302      	adds	r3, #2
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	4413      	add	r3, r2
 8004870:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0e1a      	lsrs	r2, r3, #24
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	3303      	adds	r3, #3
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	4413      	add	r3, r2
 800488a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	3304      	adds	r3, #4
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0a1a      	lsrs	r2, r3, #8
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	3305      	adds	r3, #5
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	0c1a      	lsrs	r2, r3, #16
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	3306      	adds	r3, #6
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	0e1a      	lsrs	r2, r3, #24
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	3307      	adds	r3, #7
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d108      	bne.n	80048fe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0220 	orr.w	r2, r2, #32
 80048fa:	60da      	str	r2, [r3, #12]
 80048fc:	e007      	b.n	800490e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0220 	orr.w	r2, r2, #32
 800490c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e006      	b.n	8004920 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
  }
}
 8004920:	4618      	mov	r0, r3
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800493a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800493c:	7bfb      	ldrb	r3, [r7, #15]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d002      	beq.n	8004948 <HAL_CAN_ActivateNotification+0x1e>
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d109      	bne.n	800495c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6959      	ldr	r1, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e006      	b.n	800496a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800497c:	2300      	movs	r3, #0
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d07c      	beq.n	8004ab4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d023      	beq.n	8004a0c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f983 	bl	8004ce2 <HAL_CAN_TxMailbox0CompleteCallback>
 80049dc:	e016      	b.n	8004a0c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d004      	beq.n	80049f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	e00c      	b.n	8004a0c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	e002      	b.n	8004a0c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f986 	bl	8004d18 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d024      	beq.n	8004a60 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f962 	bl	8004cf4 <HAL_CAN_TxMailbox1CompleteCallback>
 8004a30:	e016      	b.n	8004a60 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
 8004a44:	e00c      	b.n	8004a60 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
 8004a58:	e002      	b.n	8004a60 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f965 	bl	8004d2a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d024      	beq.n	8004ab4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f941 	bl	8004d06 <HAL_CAN_TxMailbox2CompleteCallback>
 8004a84:	e016      	b.n	8004ab4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d004      	beq.n	8004a9a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	e00c      	b.n	8004ab4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	e002      	b.n	8004ab4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f944 	bl	8004d3c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d006      	beq.n	8004afa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2208      	movs	r2, #8
 8004af2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f92a 	bl	8004d4e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd ff3b 	bl	800298e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00c      	beq.n	8004b3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2210      	movs	r2, #16
 8004b3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2208      	movs	r2, #8
 8004b56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f901 	bl	8004d60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd ff15 	bl	80029a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d006      	beq.n	8004b9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2210      	movs	r2, #16
 8004b96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f8ea 	bl	8004d72 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8e2 	bl	8004d84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d07b      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d072      	beq.n	8004cba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f043 0302 	orr.w	r3, r3, #2
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f043 0304 	orr.w	r3, r3, #4
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d043      	beq.n	8004cba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d03e      	beq.n	8004cba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c42:	2b60      	cmp	r3, #96	; 0x60
 8004c44:	d02b      	beq.n	8004c9e <HAL_CAN_IRQHandler+0x32a>
 8004c46:	2b60      	cmp	r3, #96	; 0x60
 8004c48:	d82e      	bhi.n	8004ca8 <HAL_CAN_IRQHandler+0x334>
 8004c4a:	2b50      	cmp	r3, #80	; 0x50
 8004c4c:	d022      	beq.n	8004c94 <HAL_CAN_IRQHandler+0x320>
 8004c4e:	2b50      	cmp	r3, #80	; 0x50
 8004c50:	d82a      	bhi.n	8004ca8 <HAL_CAN_IRQHandler+0x334>
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d019      	beq.n	8004c8a <HAL_CAN_IRQHandler+0x316>
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d826      	bhi.n	8004ca8 <HAL_CAN_IRQHandler+0x334>
 8004c5a:	2b30      	cmp	r3, #48	; 0x30
 8004c5c:	d010      	beq.n	8004c80 <HAL_CAN_IRQHandler+0x30c>
 8004c5e:	2b30      	cmp	r3, #48	; 0x30
 8004c60:	d822      	bhi.n	8004ca8 <HAL_CAN_IRQHandler+0x334>
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d002      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x2f8>
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d005      	beq.n	8004c76 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004c6a:	e01d      	b.n	8004ca8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	f043 0308 	orr.w	r3, r3, #8
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c74:	e019      	b.n	8004caa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	f043 0310 	orr.w	r3, r3, #16
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c7e:	e014      	b.n	8004caa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	f043 0320 	orr.w	r3, r3, #32
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c88:	e00f      	b.n	8004caa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c92:	e00a      	b.n	8004caa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004c9c:	e005      	b.n	8004caa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ca6:	e000      	b.n	8004caa <HAL_CAN_IRQHandler+0x336>
            break;
 8004ca8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004cb8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d008      	beq.n	8004cda <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fd fe73 	bl	80029c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004cda:	bf00      	nop
 8004cdc:	3728      	adds	r7, #40	; 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr

08004d06 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bc80      	pop	{r7}
 8004d16:	4770      	bx	lr

08004d18 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr

08004d2a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr
	...

08004d98 <__NVIC_SetPriorityGrouping>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004db4:	4013      	ands	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dca:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	60d3      	str	r3, [r2, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <__NVIC_GetPriorityGrouping>:
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <__NVIC_GetPriorityGrouping+0x18>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	f003 0307 	and.w	r3, r3, #7
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <__NVIC_EnableIRQ>:
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db0b      	blt.n	8004e26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	4906      	ldr	r1, [pc, #24]	; (8004e30 <__NVIC_EnableIRQ+0x34>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	e000e100 	.word	0xe000e100

08004e34 <__NVIC_SetPriority>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	db0a      	blt.n	8004e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	490c      	ldr	r1, [pc, #48]	; (8004e80 <__NVIC_SetPriority+0x4c>)
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	440b      	add	r3, r1
 8004e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e5c:	e00a      	b.n	8004e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4908      	ldr	r1, [pc, #32]	; (8004e84 <__NVIC_SetPriority+0x50>)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	3b04      	subs	r3, #4
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	440b      	add	r3, r1
 8004e72:	761a      	strb	r2, [r3, #24]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	e000e100 	.word	0xe000e100
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <NVIC_EncodePriority>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	; 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	bf28      	it	cs
 8004ea6:	2304      	movcs	r3, #4
 8004ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d902      	bls.n	8004eb8 <NVIC_EncodePriority+0x30>
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	3b03      	subs	r3, #3
 8004eb6:	e000      	b.n	8004eba <NVIC_EncodePriority+0x32>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	401a      	ands	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	43d9      	mvns	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee0:	4313      	orrs	r3, r2
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3724      	adds	r7, #36	; 0x24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004efc:	d301      	bcc.n	8004f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004efe:	2301      	movs	r3, #1
 8004f00:	e00f      	b.n	8004f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <SysTick_Config+0x40>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f0a:	210f      	movs	r1, #15
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	f7ff ff90 	bl	8004e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <SysTick_Config+0x40>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <SysTick_Config+0x40>)
 8004f1c:	2207      	movs	r2, #7
 8004f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	e000e010 	.word	0xe000e010

08004f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff2d 	bl	8004d98 <__NVIC_SetPriorityGrouping>
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f58:	f7ff ff42 	bl	8004de0 <__NVIC_GetPriorityGrouping>
 8004f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	6978      	ldr	r0, [r7, #20]
 8004f64:	f7ff ff90 	bl	8004e88 <NVIC_EncodePriority>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff ff5f 	bl	8004e34 <__NVIC_SetPriority>
}
 8004f76:	bf00      	nop
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	4603      	mov	r3, r0
 8004f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff ff35 	bl	8004dfc <__NVIC_EnableIRQ>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ffa2 	bl	8004eec <SysTick_Config>
 8004fa8:	4603      	mov	r3, r0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e043      	b.n	8005052 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_DMA_Init+0xa8>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4a22      	ldr	r2, [pc, #136]	; (8005060 <HAL_DMA_Init+0xac>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	009a      	lsls	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <HAL_DMA_Init+0xb0>)
 8004fe6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004ffe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005002:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800500c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	bffdfff8 	.word	0xbffdfff8
 8005060:	cccccccd 	.word	0xcccccccd
 8005064:	40020000 	.word	0x40020000

08005068 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_DMA_Start_IT+0x20>
 8005084:	2302      	movs	r3, #2
 8005086:	e04b      	b.n	8005120 <HAL_DMA_Start_IT+0xb8>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d13a      	bne.n	8005112 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 f937 	bl	8005334 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 020e 	orr.w	r2, r2, #14
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e00f      	b.n	8005100 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0204 	bic.w	r2, r2, #4
 80050ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 020a 	orr.w	r2, r2, #10
 80050fe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e005      	b.n	800511e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800511a:	2302      	movs	r3, #2
 800511c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2204      	movs	r2, #4
 8005146:	409a      	lsls	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d04f      	beq.n	80051f0 <HAL_DMA_IRQHandler+0xc8>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04a      	beq.n	80051f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b00      	cmp	r3, #0
 8005166:	d107      	bne.n	8005178 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0204 	bic.w	r2, r2, #4
 8005176:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a66      	ldr	r2, [pc, #408]	; (8005318 <HAL_DMA_IRQHandler+0x1f0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d029      	beq.n	80051d6 <HAL_DMA_IRQHandler+0xae>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a65      	ldr	r2, [pc, #404]	; (800531c <HAL_DMA_IRQHandler+0x1f4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d022      	beq.n	80051d2 <HAL_DMA_IRQHandler+0xaa>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a63      	ldr	r2, [pc, #396]	; (8005320 <HAL_DMA_IRQHandler+0x1f8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01a      	beq.n	80051cc <HAL_DMA_IRQHandler+0xa4>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a62      	ldr	r2, [pc, #392]	; (8005324 <HAL_DMA_IRQHandler+0x1fc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d012      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x9e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a60      	ldr	r2, [pc, #384]	; (8005328 <HAL_DMA_IRQHandler+0x200>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00a      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x98>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5f      	ldr	r2, [pc, #380]	; (800532c <HAL_DMA_IRQHandler+0x204>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d102      	bne.n	80051ba <HAL_DMA_IRQHandler+0x92>
 80051b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051b8:	e00e      	b.n	80051d8 <HAL_DMA_IRQHandler+0xb0>
 80051ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80051be:	e00b      	b.n	80051d8 <HAL_DMA_IRQHandler+0xb0>
 80051c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051c4:	e008      	b.n	80051d8 <HAL_DMA_IRQHandler+0xb0>
 80051c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051ca:	e005      	b.n	80051d8 <HAL_DMA_IRQHandler+0xb0>
 80051cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d0:	e002      	b.n	80051d8 <HAL_DMA_IRQHandler+0xb0>
 80051d2:	2340      	movs	r3, #64	; 0x40
 80051d4:	e000      	b.n	80051d8 <HAL_DMA_IRQHandler+0xb0>
 80051d6:	2304      	movs	r3, #4
 80051d8:	4a55      	ldr	r2, [pc, #340]	; (8005330 <HAL_DMA_IRQHandler+0x208>)
 80051da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8094 	beq.w	800530e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80051ee:	e08e      	b.n	800530e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	2202      	movs	r2, #2
 80051f6:	409a      	lsls	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d056      	beq.n	80052ae <HAL_DMA_IRQHandler+0x186>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d051      	beq.n	80052ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 020a 	bic.w	r2, r2, #10
 8005226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a38      	ldr	r2, [pc, #224]	; (8005318 <HAL_DMA_IRQHandler+0x1f0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d029      	beq.n	800528e <HAL_DMA_IRQHandler+0x166>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a37      	ldr	r2, [pc, #220]	; (800531c <HAL_DMA_IRQHandler+0x1f4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d022      	beq.n	800528a <HAL_DMA_IRQHandler+0x162>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a35      	ldr	r2, [pc, #212]	; (8005320 <HAL_DMA_IRQHandler+0x1f8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01a      	beq.n	8005284 <HAL_DMA_IRQHandler+0x15c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a34      	ldr	r2, [pc, #208]	; (8005324 <HAL_DMA_IRQHandler+0x1fc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d012      	beq.n	800527e <HAL_DMA_IRQHandler+0x156>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a32      	ldr	r2, [pc, #200]	; (8005328 <HAL_DMA_IRQHandler+0x200>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00a      	beq.n	8005278 <HAL_DMA_IRQHandler+0x150>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a31      	ldr	r2, [pc, #196]	; (800532c <HAL_DMA_IRQHandler+0x204>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d102      	bne.n	8005272 <HAL_DMA_IRQHandler+0x14a>
 800526c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005270:	e00e      	b.n	8005290 <HAL_DMA_IRQHandler+0x168>
 8005272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005276:	e00b      	b.n	8005290 <HAL_DMA_IRQHandler+0x168>
 8005278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800527c:	e008      	b.n	8005290 <HAL_DMA_IRQHandler+0x168>
 800527e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005282:	e005      	b.n	8005290 <HAL_DMA_IRQHandler+0x168>
 8005284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005288:	e002      	b.n	8005290 <HAL_DMA_IRQHandler+0x168>
 800528a:	2320      	movs	r3, #32
 800528c:	e000      	b.n	8005290 <HAL_DMA_IRQHandler+0x168>
 800528e:	2302      	movs	r3, #2
 8005290:	4a27      	ldr	r2, [pc, #156]	; (8005330 <HAL_DMA_IRQHandler+0x208>)
 8005292:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d034      	beq.n	800530e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052ac:	e02f      	b.n	800530e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2208      	movs	r2, #8
 80052b4:	409a      	lsls	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4013      	ands	r3, r2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d028      	beq.n	8005310 <HAL_DMA_IRQHandler+0x1e8>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d023      	beq.n	8005310 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 020e 	bic.w	r2, r2, #14
 80052d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	2101      	movs	r1, #1
 80052e2:	fa01 f202 	lsl.w	r2, r1, r2
 80052e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
    }
  }
  return;
 800530e:	bf00      	nop
 8005310:	bf00      	nop
}
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40020008 	.word	0x40020008
 800531c:	4002001c 	.word	0x4002001c
 8005320:	40020030 	.word	0x40020030
 8005324:	40020044 	.word	0x40020044
 8005328:	40020058 	.word	0x40020058
 800532c:	4002006c 	.word	0x4002006c
 8005330:	40020000 	.word	0x40020000

08005334 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	2101      	movs	r1, #1
 800534c:	fa01 f202 	lsl.w	r2, r1, r2
 8005350:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b10      	cmp	r3, #16
 8005360:	d108      	bne.n	8005374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005372:	e007      	b.n	8005384 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
	...

08005390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005390:	b480      	push	{r7}
 8005392:	b08b      	sub	sp, #44	; 0x2c
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800539e:	2300      	movs	r3, #0
 80053a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053a2:	e169      	b.n	8005678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80053a4:	2201      	movs	r2, #1
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	429a      	cmp	r2, r3
 80053be:	f040 8158 	bne.w	8005672 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4a9a      	ldr	r2, [pc, #616]	; (8005630 <HAL_GPIO_Init+0x2a0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d05e      	beq.n	800548a <HAL_GPIO_Init+0xfa>
 80053cc:	4a98      	ldr	r2, [pc, #608]	; (8005630 <HAL_GPIO_Init+0x2a0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d875      	bhi.n	80054be <HAL_GPIO_Init+0x12e>
 80053d2:	4a98      	ldr	r2, [pc, #608]	; (8005634 <HAL_GPIO_Init+0x2a4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d058      	beq.n	800548a <HAL_GPIO_Init+0xfa>
 80053d8:	4a96      	ldr	r2, [pc, #600]	; (8005634 <HAL_GPIO_Init+0x2a4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d86f      	bhi.n	80054be <HAL_GPIO_Init+0x12e>
 80053de:	4a96      	ldr	r2, [pc, #600]	; (8005638 <HAL_GPIO_Init+0x2a8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d052      	beq.n	800548a <HAL_GPIO_Init+0xfa>
 80053e4:	4a94      	ldr	r2, [pc, #592]	; (8005638 <HAL_GPIO_Init+0x2a8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d869      	bhi.n	80054be <HAL_GPIO_Init+0x12e>
 80053ea:	4a94      	ldr	r2, [pc, #592]	; (800563c <HAL_GPIO_Init+0x2ac>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d04c      	beq.n	800548a <HAL_GPIO_Init+0xfa>
 80053f0:	4a92      	ldr	r2, [pc, #584]	; (800563c <HAL_GPIO_Init+0x2ac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d863      	bhi.n	80054be <HAL_GPIO_Init+0x12e>
 80053f6:	4a92      	ldr	r2, [pc, #584]	; (8005640 <HAL_GPIO_Init+0x2b0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d046      	beq.n	800548a <HAL_GPIO_Init+0xfa>
 80053fc:	4a90      	ldr	r2, [pc, #576]	; (8005640 <HAL_GPIO_Init+0x2b0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d85d      	bhi.n	80054be <HAL_GPIO_Init+0x12e>
 8005402:	2b12      	cmp	r3, #18
 8005404:	d82a      	bhi.n	800545c <HAL_GPIO_Init+0xcc>
 8005406:	2b12      	cmp	r3, #18
 8005408:	d859      	bhi.n	80054be <HAL_GPIO_Init+0x12e>
 800540a:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <HAL_GPIO_Init+0x80>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	0800548b 	.word	0x0800548b
 8005414:	08005465 	.word	0x08005465
 8005418:	08005477 	.word	0x08005477
 800541c:	080054b9 	.word	0x080054b9
 8005420:	080054bf 	.word	0x080054bf
 8005424:	080054bf 	.word	0x080054bf
 8005428:	080054bf 	.word	0x080054bf
 800542c:	080054bf 	.word	0x080054bf
 8005430:	080054bf 	.word	0x080054bf
 8005434:	080054bf 	.word	0x080054bf
 8005438:	080054bf 	.word	0x080054bf
 800543c:	080054bf 	.word	0x080054bf
 8005440:	080054bf 	.word	0x080054bf
 8005444:	080054bf 	.word	0x080054bf
 8005448:	080054bf 	.word	0x080054bf
 800544c:	080054bf 	.word	0x080054bf
 8005450:	080054bf 	.word	0x080054bf
 8005454:	0800546d 	.word	0x0800546d
 8005458:	08005481 	.word	0x08005481
 800545c:	4a79      	ldr	r2, [pc, #484]	; (8005644 <HAL_GPIO_Init+0x2b4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005462:	e02c      	b.n	80054be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	623b      	str	r3, [r7, #32]
          break;
 800546a:	e029      	b.n	80054c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	3304      	adds	r3, #4
 8005472:	623b      	str	r3, [r7, #32]
          break;
 8005474:	e024      	b.n	80054c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	3308      	adds	r3, #8
 800547c:	623b      	str	r3, [r7, #32]
          break;
 800547e:	e01f      	b.n	80054c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	330c      	adds	r3, #12
 8005486:	623b      	str	r3, [r7, #32]
          break;
 8005488:	e01a      	b.n	80054c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005492:	2304      	movs	r3, #4
 8005494:	623b      	str	r3, [r7, #32]
          break;
 8005496:	e013      	b.n	80054c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d105      	bne.n	80054ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80054a0:	2308      	movs	r3, #8
 80054a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	611a      	str	r2, [r3, #16]
          break;
 80054aa:	e009      	b.n	80054c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80054ac:	2308      	movs	r3, #8
 80054ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	615a      	str	r2, [r3, #20]
          break;
 80054b6:	e003      	b.n	80054c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80054b8:	2300      	movs	r3, #0
 80054ba:	623b      	str	r3, [r7, #32]
          break;
 80054bc:	e000      	b.n	80054c0 <HAL_GPIO_Init+0x130>
          break;
 80054be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2bff      	cmp	r3, #255	; 0xff
 80054c4:	d801      	bhi.n	80054ca <HAL_GPIO_Init+0x13a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	e001      	b.n	80054ce <HAL_GPIO_Init+0x13e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3304      	adds	r3, #4
 80054ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2bff      	cmp	r3, #255	; 0xff
 80054d4:	d802      	bhi.n	80054dc <HAL_GPIO_Init+0x14c>
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	e002      	b.n	80054e2 <HAL_GPIO_Init+0x152>
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	3b08      	subs	r3, #8
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	210f      	movs	r1, #15
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	6a39      	ldr	r1, [r7, #32]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	431a      	orrs	r2, r3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80b1 	beq.w	8005672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005510:	4b4d      	ldr	r3, [pc, #308]	; (8005648 <HAL_GPIO_Init+0x2b8>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	4a4c      	ldr	r2, [pc, #304]	; (8005648 <HAL_GPIO_Init+0x2b8>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	6193      	str	r3, [r2, #24]
 800551c:	4b4a      	ldr	r3, [pc, #296]	; (8005648 <HAL_GPIO_Init+0x2b8>)
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005528:	4a48      	ldr	r2, [pc, #288]	; (800564c <HAL_GPIO_Init+0x2bc>)
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	3302      	adds	r3, #2
 8005530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005534:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	220f      	movs	r2, #15
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4013      	ands	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a40      	ldr	r2, [pc, #256]	; (8005650 <HAL_GPIO_Init+0x2c0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_GPIO_Init+0x1ec>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a3f      	ldr	r2, [pc, #252]	; (8005654 <HAL_GPIO_Init+0x2c4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00d      	beq.n	8005578 <HAL_GPIO_Init+0x1e8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a3e      	ldr	r2, [pc, #248]	; (8005658 <HAL_GPIO_Init+0x2c8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <HAL_GPIO_Init+0x1e4>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a3d      	ldr	r2, [pc, #244]	; (800565c <HAL_GPIO_Init+0x2cc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d101      	bne.n	8005570 <HAL_GPIO_Init+0x1e0>
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <HAL_GPIO_Init+0x1ee>
 8005570:	2304      	movs	r3, #4
 8005572:	e004      	b.n	800557e <HAL_GPIO_Init+0x1ee>
 8005574:	2302      	movs	r3, #2
 8005576:	e002      	b.n	800557e <HAL_GPIO_Init+0x1ee>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <HAL_GPIO_Init+0x1ee>
 800557c:	2300      	movs	r3, #0
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	f002 0203 	and.w	r2, r2, #3
 8005584:	0092      	lsls	r2, r2, #2
 8005586:	4093      	lsls	r3, r2
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800558e:	492f      	ldr	r1, [pc, #188]	; (800564c <HAL_GPIO_Init+0x2bc>)
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	3302      	adds	r3, #2
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80055a8:	4b2d      	ldr	r3, [pc, #180]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	492c      	ldr	r1, [pc, #176]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	608b      	str	r3, [r1, #8]
 80055b4:	e006      	b.n	80055c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80055b6:	4b2a      	ldr	r3, [pc, #168]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	43db      	mvns	r3, r3
 80055be:	4928      	ldr	r1, [pc, #160]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055d0:	4b23      	ldr	r3, [pc, #140]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	4922      	ldr	r1, [pc, #136]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60cb      	str	r3, [r1, #12]
 80055dc:	e006      	b.n	80055ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80055de:	4b20      	ldr	r3, [pc, #128]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	491e      	ldr	r1, [pc, #120]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d006      	beq.n	8005606 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4918      	ldr	r1, [pc, #96]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	4313      	orrs	r3, r2
 8005602:	604b      	str	r3, [r1, #4]
 8005604:	e006      	b.n	8005614 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	43db      	mvns	r3, r3
 800560e:	4914      	ldr	r1, [pc, #80]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 8005610:	4013      	ands	r3, r2
 8005612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d021      	beq.n	8005664 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005620:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	490e      	ldr	r1, [pc, #56]	; (8005660 <HAL_GPIO_Init+0x2d0>)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
 800562c:	e021      	b.n	8005672 <HAL_GPIO_Init+0x2e2>
 800562e:	bf00      	nop
 8005630:	10320000 	.word	0x10320000
 8005634:	10310000 	.word	0x10310000
 8005638:	10220000 	.word	0x10220000
 800563c:	10210000 	.word	0x10210000
 8005640:	10120000 	.word	0x10120000
 8005644:	10110000 	.word	0x10110000
 8005648:	40021000 	.word	0x40021000
 800564c:	40010000 	.word	0x40010000
 8005650:	40010800 	.word	0x40010800
 8005654:	40010c00 	.word	0x40010c00
 8005658:	40011000 	.word	0x40011000
 800565c:	40011400 	.word	0x40011400
 8005660:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_GPIO_Init+0x304>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	43db      	mvns	r3, r3
 800566c:	4909      	ldr	r1, [pc, #36]	; (8005694 <HAL_GPIO_Init+0x304>)
 800566e:	4013      	ands	r3, r2
 8005670:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	3301      	adds	r3, #1
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	fa22 f303 	lsr.w	r3, r2, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f ae8e 	bne.w	80053a4 <HAL_GPIO_Init+0x14>
  }
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	372c      	adds	r7, #44	; 0x2c
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr
 8005694:	40010400 	.word	0x40010400

08005698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
 80056b4:	e001      	b.n	80056ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr

080056c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	807b      	strh	r3, [r7, #2]
 80056d2:	4613      	mov	r3, r2
 80056d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056d6:	787b      	ldrb	r3, [r7, #1]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056dc:	887a      	ldrh	r2, [r7, #2]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80056e2:	e003      	b.n	80056ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056e4:	887b      	ldrh	r3, [r7, #2]
 80056e6:	041a      	lsls	r2, r3, #16
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e26c      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8087 	beq.w	8005826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005718:	4b92      	ldr	r3, [pc, #584]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b04      	cmp	r3, #4
 8005722:	d00c      	beq.n	800573e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005724:	4b8f      	ldr	r3, [pc, #572]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b08      	cmp	r3, #8
 800572e:	d112      	bne.n	8005756 <HAL_RCC_OscConfig+0x5e>
 8005730:	4b8c      	ldr	r3, [pc, #560]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573c:	d10b      	bne.n	8005756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800573e:	4b89      	ldr	r3, [pc, #548]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d06c      	beq.n	8005824 <HAL_RCC_OscConfig+0x12c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d168      	bne.n	8005824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e246      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575e:	d106      	bne.n	800576e <HAL_RCC_OscConfig+0x76>
 8005760:	4b80      	ldr	r3, [pc, #512]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a7f      	ldr	r2, [pc, #508]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	e02e      	b.n	80057cc <HAL_RCC_OscConfig+0xd4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10c      	bne.n	8005790 <HAL_RCC_OscConfig+0x98>
 8005776:	4b7b      	ldr	r3, [pc, #492]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a7a      	ldr	r2, [pc, #488]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800577c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	4b78      	ldr	r3, [pc, #480]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a77      	ldr	r2, [pc, #476]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e01d      	b.n	80057cc <HAL_RCC_OscConfig+0xd4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0xbc>
 800579a:	4b72      	ldr	r3, [pc, #456]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a71      	ldr	r2, [pc, #452]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6e      	ldr	r2, [pc, #440]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e00b      	b.n	80057cc <HAL_RCC_OscConfig+0xd4>
 80057b4:	4b6b      	ldr	r3, [pc, #428]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a6a      	ldr	r2, [pc, #424]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4b68      	ldr	r3, [pc, #416]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a67      	ldr	r2, [pc, #412]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d013      	beq.n	80057fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fe f8e2 	bl	800399c <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057dc:	f7fe f8de 	bl	800399c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1fa      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ee:	4b5d      	ldr	r3, [pc, #372]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0xe4>
 80057fa:	e014      	b.n	8005826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fe f8ce 	bl	800399c <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005804:	f7fe f8ca 	bl	800399c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1e6      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005816:	4b53      	ldr	r3, [pc, #332]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0x10c>
 8005822:	e000      	b.n	8005826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d063      	beq.n	80058fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005832:	4b4c      	ldr	r3, [pc, #304]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800583e:	4b49      	ldr	r3, [pc, #292]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b08      	cmp	r3, #8
 8005848:	d11c      	bne.n	8005884 <HAL_RCC_OscConfig+0x18c>
 800584a:	4b46      	ldr	r3, [pc, #280]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d116      	bne.n	8005884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005856:	4b43      	ldr	r3, [pc, #268]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_RCC_OscConfig+0x176>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e1ba      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586e:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4939      	ldr	r1, [pc, #228]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005882:	e03a      	b.n	80058fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800588c:	4b36      	ldr	r3, [pc, #216]	; (8005968 <HAL_RCC_OscConfig+0x270>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fe f883 	bl	800399c <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589a:	f7fe f87f 	bl	800399c <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e19b      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ac:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b8:	4b2a      	ldr	r3, [pc, #168]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4927      	ldr	r1, [pc, #156]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]
 80058cc:	e015      	b.n	80058fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ce:	4b26      	ldr	r3, [pc, #152]	; (8005968 <HAL_RCC_OscConfig+0x270>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d4:	f7fe f862 	bl	800399c <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058dc:	f7fe f85e 	bl	800399c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e17a      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ee:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03a      	beq.n	800597c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d019      	beq.n	8005942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590e:	4b17      	ldr	r3, [pc, #92]	; (800596c <HAL_RCC_OscConfig+0x274>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005914:	f7fe f842 	bl	800399c <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591c:	f7fe f83e 	bl	800399c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e15a      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592e:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800593a:	2001      	movs	r0, #1
 800593c:	f000 facc 	bl	8005ed8 <RCC_Delay>
 8005940:	e01c      	b.n	800597c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <HAL_RCC_OscConfig+0x274>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005948:	f7fe f828 	bl	800399c <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594e:	e00f      	b.n	8005970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005950:	f7fe f824 	bl	800399c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d908      	bls.n	8005970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e140      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000
 8005968:	42420000 	.word	0x42420000
 800596c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	4b9e      	ldr	r3, [pc, #632]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e9      	bne.n	8005950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80a6 	beq.w	8005ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598e:	4b97      	ldr	r3, [pc, #604]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10d      	bne.n	80059b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599a:	4b94      	ldr	r3, [pc, #592]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	4a93      	ldr	r2, [pc, #588]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 80059a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a4:	61d3      	str	r3, [r2, #28]
 80059a6:	4b91      	ldr	r3, [pc, #580]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ae:	60bb      	str	r3, [r7, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b6:	4b8e      	ldr	r3, [pc, #568]	; (8005bf0 <HAL_RCC_OscConfig+0x4f8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d118      	bne.n	80059f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c2:	4b8b      	ldr	r3, [pc, #556]	; (8005bf0 <HAL_RCC_OscConfig+0x4f8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a8a      	ldr	r2, [pc, #552]	; (8005bf0 <HAL_RCC_OscConfig+0x4f8>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ce:	f7fd ffe5 	bl	800399c <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d6:	f7fd ffe1 	bl	800399c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b64      	cmp	r3, #100	; 0x64
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e0fd      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e8:	4b81      	ldr	r3, [pc, #516]	; (8005bf0 <HAL_RCC_OscConfig+0x4f8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d106      	bne.n	8005a0a <HAL_RCC_OscConfig+0x312>
 80059fc:	4b7b      	ldr	r3, [pc, #492]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a7a      	ldr	r2, [pc, #488]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6213      	str	r3, [r2, #32]
 8005a08:	e02d      	b.n	8005a66 <HAL_RCC_OscConfig+0x36e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCC_OscConfig+0x334>
 8005a12:	4b76      	ldr	r3, [pc, #472]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	4a75      	ldr	r2, [pc, #468]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	6213      	str	r3, [r2, #32]
 8005a1e:	4b73      	ldr	r3, [pc, #460]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	4a72      	ldr	r2, [pc, #456]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	6213      	str	r3, [r2, #32]
 8005a2a:	e01c      	b.n	8005a66 <HAL_RCC_OscConfig+0x36e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b05      	cmp	r3, #5
 8005a32:	d10c      	bne.n	8005a4e <HAL_RCC_OscConfig+0x356>
 8005a34:	4b6d      	ldr	r3, [pc, #436]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	4a6c      	ldr	r2, [pc, #432]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a3a:	f043 0304 	orr.w	r3, r3, #4
 8005a3e:	6213      	str	r3, [r2, #32]
 8005a40:	4b6a      	ldr	r3, [pc, #424]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4a69      	ldr	r2, [pc, #420]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6213      	str	r3, [r2, #32]
 8005a4c:	e00b      	b.n	8005a66 <HAL_RCC_OscConfig+0x36e>
 8005a4e:	4b67      	ldr	r3, [pc, #412]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	4a66      	ldr	r2, [pc, #408]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	6213      	str	r3, [r2, #32]
 8005a5a:	4b64      	ldr	r3, [pc, #400]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	4a63      	ldr	r2, [pc, #396]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a60:	f023 0304 	bic.w	r3, r3, #4
 8005a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d015      	beq.n	8005a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd ff95 	bl	800399c <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a74:	e00a      	b.n	8005a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fd ff91 	bl	800399c <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0ab      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8c:	4b57      	ldr	r3, [pc, #348]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ee      	beq.n	8005a76 <HAL_RCC_OscConfig+0x37e>
 8005a98:	e014      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd ff7f 	bl	800399c <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fd ff7b 	bl	800399c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e095      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab8:	4b4c      	ldr	r3, [pc, #304]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ee      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d105      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aca:	4b48      	ldr	r3, [pc, #288]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4a47      	ldr	r2, [pc, #284]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 8081 	beq.w	8005be2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ae0:	4b42      	ldr	r3, [pc, #264]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 030c 	and.w	r3, r3, #12
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d061      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d146      	bne.n	8005b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af4:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <HAL_RCC_OscConfig+0x4fc>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afa:	f7fd ff4f 	bl	800399c <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b02:	f7fd ff4b 	bl	800399c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e067      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b14:	4b35      	ldr	r3, [pc, #212]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b28:	d108      	bne.n	8005b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b2a:	4b30      	ldr	r3, [pc, #192]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	492d      	ldr	r1, [pc, #180]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b3c:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a19      	ldr	r1, [r3, #32]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	4927      	ldr	r1, [pc, #156]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b54:	4b27      	ldr	r3, [pc, #156]	; (8005bf4 <HAL_RCC_OscConfig+0x4fc>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5a:	f7fd ff1f 	bl	800399c <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b62:	f7fd ff1b 	bl	800399c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e037      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b74:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x46a>
 8005b80:	e02f      	b.n	8005be2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b82:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <HAL_RCC_OscConfig+0x4fc>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd ff08 	bl	800399c <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b90:	f7fd ff04 	bl	800399c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e020      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x498>
 8005bae:	e018      	b.n	8005be2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e013      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <HAL_RCC_OscConfig+0x4f4>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d106      	bne.n	8005bde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	40007000 	.word	0x40007000
 8005bf4:	42420060 	.word	0x42420060

08005bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0d0      	b.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c0c:	4b6a      	ldr	r3, [pc, #424]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d910      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1a:	4b67      	ldr	r3, [pc, #412]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 0207 	bic.w	r2, r3, #7
 8005c22:	4965      	ldr	r1, [pc, #404]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b63      	ldr	r3, [pc, #396]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0b8      	b.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d020      	beq.n	8005c8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c54:	4b59      	ldr	r3, [pc, #356]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4a58      	ldr	r2, [pc, #352]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c6c:	4b53      	ldr	r3, [pc, #332]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4a52      	ldr	r2, [pc, #328]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c78:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	494d      	ldr	r1, [pc, #308]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d040      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d115      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07f      	b.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb6:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e073      	b.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc6:	4b3d      	ldr	r3, [pc, #244]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e06b      	b.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cd6:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f023 0203 	bic.w	r2, r3, #3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	4936      	ldr	r1, [pc, #216]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ce8:	f7fd fe58 	bl	800399c <HAL_GetTick>
 8005cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cee:	e00a      	b.n	8005d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf0:	f7fd fe54 	bl	800399c <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e053      	b.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d06:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f003 020c 	and.w	r2, r3, #12
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d1eb      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d18:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d210      	bcs.n	8005d48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f023 0207 	bic.w	r2, r3, #7
 8005d2e:	4922      	ldr	r1, [pc, #136]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d001      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e032      	b.n	8005dae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d54:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4916      	ldr	r1, [pc, #88]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	490e      	ldr	r1, [pc, #56]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d86:	f000 f821 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCC_ClockConfig+0x1c4>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	091b      	lsrs	r3, r3, #4
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	490a      	ldr	r1, [pc, #40]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d98:	5ccb      	ldrb	r3, [r1, r3]
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8005da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fd fdb6 	bl	8003918 <HAL_InitTick>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40022000 	.word	0x40022000
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	08007654 	.word	0x08007654
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	20000004 	.word	0x20000004

08005dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005de6:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d002      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x30>
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d003      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x36>
 8005dfa:	e027      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dfe:	613b      	str	r3, [r7, #16]
      break;
 8005e00:	e027      	b.n	8005e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	0c9b      	lsrs	r3, r3, #18
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e0c:	5cd3      	ldrb	r3, [r2, r3]
 8005e0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d010      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e1a:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	0c5b      	lsrs	r3, r3, #17
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	4a11      	ldr	r2, [pc, #68]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e26:	5cd3      	ldrb	r3, [r2, r3]
 8005e28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e2e:	fb02 f203 	mul.w	r2, r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e004      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e40:	fb02 f303 	mul.w	r3, r2, r3
 8005e44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	613b      	str	r3, [r7, #16]
      break;
 8005e4a:	e002      	b.n	8005e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e4e:	613b      	str	r3, [r7, #16]
      break;
 8005e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e52:	693b      	ldr	r3, [r7, #16]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40021000 	.word	0x40021000
 8005e64:	007a1200 	.word	0x007a1200
 8005e68:	0800766c 	.word	0x0800766c
 8005e6c:	0800767c 	.word	0x0800767c
 8005e70:	003d0900 	.word	0x003d0900

08005e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e78:	4b02      	ldr	r3, [pc, #8]	; (8005e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	20000000 	.word	0x20000000

08005e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e8c:	f7ff fff2 	bl	8005e74 <HAL_RCC_GetHCLKFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	0a1b      	lsrs	r3, r3, #8
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	4903      	ldr	r1, [pc, #12]	; (8005eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	08007664 	.word	0x08007664

08005eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eb4:	f7ff ffde 	bl	8005e74 <HAL_RCC_GetHCLKFreq>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	0adb      	lsrs	r3, r3, #11
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	4903      	ldr	r1, [pc, #12]	; (8005ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ec6:	5ccb      	ldrb	r3, [r1, r3]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	08007664 	.word	0x08007664

08005ed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <RCC_Delay+0x34>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <RCC_Delay+0x38>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	0a5b      	lsrs	r3, r3, #9
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ef4:	bf00      	nop
  }
  while (Delay --);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1e5a      	subs	r2, r3, #1
 8005efa:	60fa      	str	r2, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f9      	bne.n	8005ef4 <RCC_Delay+0x1c>
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr
 8005f0c:	20000000 	.word	0x20000000
 8005f10:	10624dd3 	.word	0x10624dd3

08005f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d07d      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f30:	2300      	movs	r3, #0
 8005f32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f34:	4b4f      	ldr	r3, [pc, #316]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10d      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f40:	4b4c      	ldr	r3, [pc, #304]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4a4b      	ldr	r2, [pc, #300]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	61d3      	str	r3, [r2, #28]
 8005f4c:	4b49      	ldr	r3, [pc, #292]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5c:	4b46      	ldr	r3, [pc, #280]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d118      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f68:	4b43      	ldr	r3, [pc, #268]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a42      	ldr	r2, [pc, #264]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f74:	f7fd fd12 	bl	800399c <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7a:	e008      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f7c:	f7fd fd0e 	bl	800399c <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	; 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e06d      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8e:	4b3a      	ldr	r3, [pc, #232]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0f0      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f9a:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02e      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d027      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fb8:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc8:	4b2c      	ldr	r3, [pc, #176]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fce:	4a29      	ldr	r2, [pc, #164]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d014      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fde:	f7fd fcdd 	bl	800399c <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe6:	f7fd fcd9 	bl	800399c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e036      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ffc:	4b1d      	ldr	r3, [pc, #116]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0ee      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4917      	ldr	r1, [pc, #92]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006016:	4313      	orrs	r3, r2
 8006018:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006020:	4b14      	ldr	r3, [pc, #80]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006038:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	490b      	ldr	r1, [pc, #44]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	4313      	orrs	r3, r2
 8006048:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006056:	4b07      	ldr	r3, [pc, #28]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	4904      	ldr	r1, [pc, #16]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006064:	4313      	orrs	r3, r2
 8006066:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000
 8006078:	40007000 	.word	0x40007000
 800607c:	42420440 	.word	0x42420440

08006080 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	2300      	movs	r3, #0
 800609a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	f200 808a 	bhi.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d045      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d075      	beq.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80060b6:	e082      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80060b8:	4b46      	ldr	r3, [pc, #280]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80060be:	4b45      	ldr	r3, [pc, #276]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d07b      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	0c9b      	lsrs	r3, r3, #18
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	4a41      	ldr	r2, [pc, #260]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80060d4:	5cd3      	ldrb	r3, [r2, r3]
 80060d6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d015      	beq.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060e2:	4b3c      	ldr	r3, [pc, #240]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	0c5b      	lsrs	r3, r3, #17
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	4a3b      	ldr	r2, [pc, #236]	; (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80060ee:	5cd3      	ldrb	r3, [r2, r3]
 80060f0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80060fc:	4a38      	ldr	r2, [pc, #224]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	fbb2 f2f3 	udiv	r2, r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e004      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4a34      	ldr	r2, [pc, #208]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006118:	4b2e      	ldr	r3, [pc, #184]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006124:	d102      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	61bb      	str	r3, [r7, #24]
      break;
 800612a:	e04a      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	61bb      	str	r3, [r7, #24]
      break;
 800613a:	e042      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800613c:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614c:	d108      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e01f      	b.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616a:	d109      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800616c:	4b19      	ldr	r3, [pc, #100]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006178:	f649 4340 	movw	r3, #40000	; 0x9c40
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	e00f      	b.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618a:	d11c      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006198:	f24f 4324 	movw	r3, #62500	; 0xf424
 800619c:	61bb      	str	r3, [r7, #24]
      break;
 800619e:	e012      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061a0:	e011      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80061a2:	f7ff fe85 	bl	8005eb0 <HAL_RCC_GetPCLK2Freq>
 80061a6:	4602      	mov	r2, r0
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	0b9b      	lsrs	r3, r3, #14
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	3301      	adds	r3, #1
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	61bb      	str	r3, [r7, #24]
      break;
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80061c6:	bf00      	nop
    }
  }
  return (frequency);
 80061c8:	69bb      	ldr	r3, [r7, #24]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3720      	adds	r7, #32
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40021000 	.word	0x40021000
 80061d8:	08007680 	.word	0x08007680
 80061dc:	08007690 	.word	0x08007690
 80061e0:	007a1200 	.word	0x007a1200
 80061e4:	003d0900 	.word	0x003d0900
 80061e8:	aaaaaaab 	.word	0xaaaaaaab

080061ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e041      	b.n	8006282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fd f980 	bl	8003518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f000 fbd8 	bl	80069e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d001      	beq.n	80062a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e032      	b.n	800630a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a18      	ldr	r2, [pc, #96]	; (8006314 <HAL_TIM_Base_Start+0x88>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00e      	beq.n	80062d4 <HAL_TIM_Base_Start+0x48>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062be:	d009      	beq.n	80062d4 <HAL_TIM_Base_Start+0x48>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a14      	ldr	r2, [pc, #80]	; (8006318 <HAL_TIM_Base_Start+0x8c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <HAL_TIM_Base_Start+0x48>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <HAL_TIM_Base_Start+0x90>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d111      	bne.n	80062f8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b06      	cmp	r3, #6
 80062e4:	d010      	beq.n	8006308 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f6:	e007      	b.n	8006308 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800

08006320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d001      	beq.n	8006338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e03a      	b.n	80063ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <HAL_TIM_Base_Start_IT+0x98>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00e      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x58>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d009      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x58>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a14      	ldr	r2, [pc, #80]	; (80063bc <HAL_TIM_Base_Start_IT+0x9c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x58>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d111      	bne.n	800639c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b06      	cmp	r3, #6
 8006388:	d010      	beq.n	80063ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	e007      	b.n	80063ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800

080063c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e041      	b.n	800645a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f839 	bl	8006462 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f000 faec 	bl	80069e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr

08006474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d122      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b02      	cmp	r3, #2
 8006496:	d11b      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0202 	mvn.w	r2, #2
 80064a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa76 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 80064bc:	e005      	b.n	80064ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa69 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa78 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d122      	bne.n	8006524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d11b      	bne.n	8006524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0204 	mvn.w	r2, #4
 80064f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa4c 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 8006510:	e005      	b.n	800651e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa3f 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fa4e 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b08      	cmp	r3, #8
 8006530:	d122      	bne.n	8006578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b08      	cmp	r3, #8
 800653e:	d11b      	bne.n	8006578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0208 	mvn.w	r2, #8
 8006548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2204      	movs	r2, #4
 800654e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa22 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa15 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa24 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b10      	cmp	r3, #16
 8006584:	d122      	bne.n	80065cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b10      	cmp	r3, #16
 8006592:	d11b      	bne.n	80065cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0210 	mvn.w	r2, #16
 800659c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2208      	movs	r2, #8
 80065a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9f8 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9eb 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f9fa 	bl	80069ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d10e      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d107      	bne.n	80065f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0201 	mvn.w	r2, #1
 80065f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fc fe2a 	bl	800324c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d10e      	bne.n	8006624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b80      	cmp	r3, #128	; 0x80
 8006612:	d107      	bne.n	8006624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800661c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fdb4 	bl	800718c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662e:	2b40      	cmp	r3, #64	; 0x40
 8006630:	d10e      	bne.n	8006650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d107      	bne.n	8006650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9be 	bl	80069cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b20      	cmp	r3, #32
 800665c:	d10e      	bne.n	800667c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d107      	bne.n	800667c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0220 	mvn.w	r2, #32
 8006674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fd7f 	bl	800717a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800669e:	2302      	movs	r3, #2
 80066a0:	e0ae      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b0c      	cmp	r3, #12
 80066ae:	f200 809f 	bhi.w	80067f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066ed 	.word	0x080066ed
 80066bc:	080067f1 	.word	0x080067f1
 80066c0:	080067f1 	.word	0x080067f1
 80066c4:	080067f1 	.word	0x080067f1
 80066c8:	0800672d 	.word	0x0800672d
 80066cc:	080067f1 	.word	0x080067f1
 80066d0:	080067f1 	.word	0x080067f1
 80066d4:	080067f1 	.word	0x080067f1
 80066d8:	0800676f 	.word	0x0800676f
 80066dc:	080067f1 	.word	0x080067f1
 80066e0:	080067f1 	.word	0x080067f1
 80066e4:	080067f1 	.word	0x080067f1
 80066e8:	080067af 	.word	0x080067af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f9d6 	bl	8006aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0208 	orr.w	r2, r2, #8
 8006706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0204 	bic.w	r2, r2, #4
 8006716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	619a      	str	r2, [r3, #24]
      break;
 800672a:	e064      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fa1c 	bl	8006b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6999      	ldr	r1, [r3, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	619a      	str	r2, [r3, #24]
      break;
 800676c:	e043      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fa65 	bl	8006c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0208 	orr.w	r2, r2, #8
 8006788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0204 	bic.w	r2, r2, #4
 8006798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69d9      	ldr	r1, [r3, #28]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	61da      	str	r2, [r3, #28]
      break;
 80067ac:	e023      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 faaf 	bl	8006d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	021a      	lsls	r2, r3, #8
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	61da      	str	r2, [r3, #28]
      break;
 80067ee:	e002      	b.n	80067f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	75fb      	strb	r3, [r7, #23]
      break;
 80067f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_TIM_ConfigClockSource+0x1c>
 8006820:	2302      	movs	r3, #2
 8006822:	e0b4      	b.n	800698e <HAL_TIM_ConfigClockSource+0x186>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685c:	d03e      	beq.n	80068dc <HAL_TIM_ConfigClockSource+0xd4>
 800685e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006862:	f200 8087 	bhi.w	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 8006866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686a:	f000 8086 	beq.w	800697a <HAL_TIM_ConfigClockSource+0x172>
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d87f      	bhi.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 8006874:	2b70      	cmp	r3, #112	; 0x70
 8006876:	d01a      	beq.n	80068ae <HAL_TIM_ConfigClockSource+0xa6>
 8006878:	2b70      	cmp	r3, #112	; 0x70
 800687a:	d87b      	bhi.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 800687c:	2b60      	cmp	r3, #96	; 0x60
 800687e:	d050      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0x11a>
 8006880:	2b60      	cmp	r3, #96	; 0x60
 8006882:	d877      	bhi.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 8006884:	2b50      	cmp	r3, #80	; 0x50
 8006886:	d03c      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0xfa>
 8006888:	2b50      	cmp	r3, #80	; 0x50
 800688a:	d873      	bhi.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d058      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x13a>
 8006890:	2b40      	cmp	r3, #64	; 0x40
 8006892:	d86f      	bhi.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 8006894:	2b30      	cmp	r3, #48	; 0x30
 8006896:	d064      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x15a>
 8006898:	2b30      	cmp	r3, #48	; 0x30
 800689a:	d86b      	bhi.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 800689c:	2b20      	cmp	r3, #32
 800689e:	d060      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x15a>
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d867      	bhi.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05c      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x15a>
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d05a      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0x15a>
 80068ac:	e062      	b.n	8006974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6899      	ldr	r1, [r3, #8]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f000 faf0 	bl	8006ea2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	609a      	str	r2, [r3, #8]
      break;
 80068da:	e04f      	b.n	800697c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6899      	ldr	r1, [r3, #8]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f000 fad9 	bl	8006ea2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068fe:	609a      	str	r2, [r3, #8]
      break;
 8006900:	e03c      	b.n	800697c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6859      	ldr	r1, [r3, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	461a      	mov	r2, r3
 8006910:	f000 fa50 	bl	8006db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2150      	movs	r1, #80	; 0x50
 800691a:	4618      	mov	r0, r3
 800691c:	f000 faa7 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006920:	e02c      	b.n	800697c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6859      	ldr	r1, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	461a      	mov	r2, r3
 8006930:	f000 fa6e 	bl	8006e10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2160      	movs	r1, #96	; 0x60
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fa97 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006940:	e01c      	b.n	800697c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6859      	ldr	r1, [r3, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	461a      	mov	r2, r3
 8006950:	f000 fa30 	bl	8006db4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2140      	movs	r1, #64	; 0x40
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fa87 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006960:	e00c      	b.n	800697c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4619      	mov	r1, r3
 800696c:	4610      	mov	r0, r2
 800696e:	f000 fa7e 	bl	8006e6e <TIM_ITRx_SetConfig>
      break;
 8006972:	e003      	b.n	800697c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
      break;
 8006978:	e000      	b.n	800697c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800697a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr

080069ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr
	...

080069e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <TIM_Base_SetConfig+0xb8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_Base_SetConfig+0x30>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fe:	d007      	beq.n	8006a10 <TIM_Base_SetConfig+0x30>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a26      	ldr	r2, [pc, #152]	; (8006a9c <TIM_Base_SetConfig+0xbc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_Base_SetConfig+0x30>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <TIM_Base_SetConfig+0xc0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d108      	bne.n	8006a22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <TIM_Base_SetConfig+0xb8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00b      	beq.n	8006a42 <TIM_Base_SetConfig+0x62>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d007      	beq.n	8006a42 <TIM_Base_SetConfig+0x62>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <TIM_Base_SetConfig+0xbc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_Base_SetConfig+0x62>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <TIM_Base_SetConfig+0xc0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d108      	bne.n	8006a54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a07      	ldr	r2, [pc, #28]	; (8006a98 <TIM_Base_SetConfig+0xb8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d103      	bne.n	8006a88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	615a      	str	r2, [r3, #20]
}
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800

08006aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	f023 0201 	bic.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 0302 	bic.w	r3, r3, #2
 8006aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <TIM_OC1_SetConfig+0xc8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d10c      	bne.n	8006b1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0308 	bic.w	r3, r3, #8
 8006b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 0304 	bic.w	r3, r3, #4
 8006b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a13      	ldr	r2, [pc, #76]	; (8006b6c <TIM_OC1_SetConfig+0xc8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d111      	bne.n	8006b46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00

08006b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f023 0210 	bic.w	r2, r3, #16
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 0320 	bic.w	r3, r3, #32
 8006bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <TIM_OC2_SetConfig+0xd0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10d      	bne.n	8006bec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <TIM_OC2_SetConfig+0xd0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d113      	bne.n	8006c1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	621a      	str	r2, [r3, #32]
}
 8006c36:	bf00      	nop
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00

08006c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0303 	bic.w	r3, r3, #3
 8006c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <TIM_OC3_SetConfig+0xd0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d10d      	bne.n	8006cbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a14      	ldr	r2, [pc, #80]	; (8006d14 <TIM_OC3_SetConfig+0xd0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d113      	bne.n	8006cee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40012c00 	.word	0x40012c00

08006d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	031b      	lsls	r3, r3, #12
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <TIM_OC4_SetConfig+0x98>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d109      	bne.n	8006d8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	019b      	lsls	r3, r3, #6
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr
 8006db0:	40012c00 	.word	0x40012c00

08006db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f023 0201 	bic.w	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 030a 	bic.w	r3, r3, #10
 8006df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	621a      	str	r2, [r3, #32]
}
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f023 0210 	bic.w	r2, r3, #16
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	031b      	lsls	r3, r3, #12
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr

08006e6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f043 0307 	orr.w	r3, r3, #7
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	021a      	lsls	r2, r3, #8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	609a      	str	r2, [r3, #8]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <HAL_TIMEx_PWMN_Start+0x24>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e022      	b.n	8006f4a <HAL_TIMEx_PWMN_Start+0x6a>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d109      	bne.n	8006f1e <HAL_TIMEx_PWMN_Start+0x3e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	bf14      	ite	ne
 8006f16:	2301      	movne	r3, #1
 8006f18:	2300      	moveq	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	e015      	b.n	8006f4a <HAL_TIMEx_PWMN_Start+0x6a>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d109      	bne.n	8006f38 <HAL_TIMEx_PWMN_Start+0x58>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	bf14      	ite	ne
 8006f30:	2301      	movne	r3, #1
 8006f32:	2300      	moveq	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	e008      	b.n	8006f4a <HAL_TIMEx_PWMN_Start+0x6a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	bf14      	ite	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2300      	moveq	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e059      	b.n	8007006 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <HAL_TIMEx_PWMN_Start+0x82>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f60:	e013      	b.n	8006f8a <HAL_TIMEx_PWMN_Start+0xaa>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d104      	bne.n	8006f72 <HAL_TIMEx_PWMN_Start+0x92>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f70:	e00b      	b.n	8006f8a <HAL_TIMEx_PWMN_Start+0xaa>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d104      	bne.n	8006f82 <HAL_TIMEx_PWMN_Start+0xa2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f80:	e003      	b.n	8006f8a <HAL_TIMEx_PWMN_Start+0xaa>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2204      	movs	r2, #4
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f903 	bl	800719e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a18      	ldr	r2, [pc, #96]	; (8007010 <HAL_TIMEx_PWMN_Start+0x130>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_TIMEx_PWMN_Start+0xf0>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fba:	d009      	beq.n	8006fd0 <HAL_TIMEx_PWMN_Start+0xf0>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a14      	ldr	r2, [pc, #80]	; (8007014 <HAL_TIMEx_PWMN_Start+0x134>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIMEx_PWMN_Start+0xf0>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a13      	ldr	r2, [pc, #76]	; (8007018 <HAL_TIMEx_PWMN_Start+0x138>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d111      	bne.n	8006ff4 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b06      	cmp	r3, #6
 8006fe0:	d010      	beq.n	8007004 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff2:	e007      	b.n	8007004 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40012c00 	.word	0x40012c00
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800

0800701c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007030:	2302      	movs	r3, #2
 8007032:	e046      	b.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a16      	ldr	r2, [pc, #88]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007080:	d009      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a12      	ldr	r2, [pc, #72]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d10c      	bne.n	80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800709c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800

080070d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e03d      	b.n	8007170 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr

0800717a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	bc80      	pop	{r7}
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr

0800719e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	2204      	movs	r2, #4
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1a      	ldr	r2, [r3, #32]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	43db      	mvns	r3, r3
 80071c0:	401a      	ands	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a1a      	ldr	r2, [r3, #32]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f003 031f 	and.w	r3, r3, #31
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	431a      	orrs	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr

080071e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e042      	b.n	800727e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7fc fa03 	bl	8003618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2224      	movs	r2, #36	; 0x24
 8007216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007228:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f82c 	bl	8007288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800723e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695a      	ldr	r2, [r3, #20]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800724e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800725e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80072c2:	f023 030c 	bic.w	r3, r3, #12
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	430b      	orrs	r3, r1
 80072ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a2c      	ldr	r2, [pc, #176]	; (800739c <UART_SetConfig+0x114>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d103      	bne.n	80072f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80072f0:	f7fe fdde 	bl	8005eb0 <HAL_RCC_GetPCLK2Freq>
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	e002      	b.n	80072fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80072f8:	f7fe fdc6 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 80072fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009a      	lsls	r2, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	fbb2 f3f3 	udiv	r3, r2, r3
 8007314:	4a22      	ldr	r2, [pc, #136]	; (80073a0 <UART_SetConfig+0x118>)
 8007316:	fba2 2303 	umull	r2, r3, r2, r3
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	0119      	lsls	r1, r3, #4
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009a      	lsls	r2, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	fbb2 f2f3 	udiv	r2, r2, r3
 8007334:	4b1a      	ldr	r3, [pc, #104]	; (80073a0 <UART_SetConfig+0x118>)
 8007336:	fba3 0302 	umull	r0, r3, r3, r2
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	2064      	movs	r0, #100	; 0x64
 800733e:	fb00 f303 	mul.w	r3, r0, r3
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	3332      	adds	r3, #50	; 0x32
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <UART_SetConfig+0x118>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007354:	4419      	add	r1, r3
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009a      	lsls	r2, r3, #2
 8007360:	441a      	add	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	fbb2 f2f3 	udiv	r2, r2, r3
 800736c:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <UART_SetConfig+0x118>)
 800736e:	fba3 0302 	umull	r0, r3, r3, r2
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	2064      	movs	r0, #100	; 0x64
 8007376:	fb00 f303 	mul.w	r3, r0, r3
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	3332      	adds	r3, #50	; 0x32
 8007380:	4a07      	ldr	r2, [pc, #28]	; (80073a0 <UART_SetConfig+0x118>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	f003 020f 	and.w	r2, r3, #15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	440a      	add	r2, r1
 8007392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40013800 	.word	0x40013800
 80073a0:	51eb851f 	.word	0x51eb851f

080073a4 <__libc_init_array>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	2600      	movs	r6, #0
 80073a8:	4d0c      	ldr	r5, [pc, #48]	; (80073dc <__libc_init_array+0x38>)
 80073aa:	4c0d      	ldr	r4, [pc, #52]	; (80073e0 <__libc_init_array+0x3c>)
 80073ac:	1b64      	subs	r4, r4, r5
 80073ae:	10a4      	asrs	r4, r4, #2
 80073b0:	42a6      	cmp	r6, r4
 80073b2:	d109      	bne.n	80073c8 <__libc_init_array+0x24>
 80073b4:	f000 f86a 	bl	800748c <_init>
 80073b8:	2600      	movs	r6, #0
 80073ba:	4d0a      	ldr	r5, [pc, #40]	; (80073e4 <__libc_init_array+0x40>)
 80073bc:	4c0a      	ldr	r4, [pc, #40]	; (80073e8 <__libc_init_array+0x44>)
 80073be:	1b64      	subs	r4, r4, r5
 80073c0:	10a4      	asrs	r4, r4, #2
 80073c2:	42a6      	cmp	r6, r4
 80073c4:	d105      	bne.n	80073d2 <__libc_init_array+0x2e>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073cc:	4798      	blx	r3
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7ee      	b.n	80073b0 <__libc_init_array+0xc>
 80073d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d6:	4798      	blx	r3
 80073d8:	3601      	adds	r6, #1
 80073da:	e7f2      	b.n	80073c2 <__libc_init_array+0x1e>
 80073dc:	08007694 	.word	0x08007694
 80073e0:	08007694 	.word	0x08007694
 80073e4:	08007694 	.word	0x08007694
 80073e8:	08007698 	.word	0x08007698

080073ec <memset>:
 80073ec:	4603      	mov	r3, r0
 80073ee:	4402      	add	r2, r0
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d100      	bne.n	80073f6 <memset+0xa>
 80073f4:	4770      	bx	lr
 80073f6:	f803 1b01 	strb.w	r1, [r3], #1
 80073fa:	e7f9      	b.n	80073f0 <memset+0x4>

080073fc <round>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007402:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8007406:	2c13      	cmp	r4, #19
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4606      	mov	r6, r0
 800740e:	460d      	mov	r5, r1
 8007410:	dc19      	bgt.n	8007446 <round+0x4a>
 8007412:	2c00      	cmp	r4, #0
 8007414:	da09      	bge.n	800742a <round+0x2e>
 8007416:	3401      	adds	r4, #1
 8007418:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800741c:	d103      	bne.n	8007426 <round+0x2a>
 800741e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007422:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007426:	2200      	movs	r2, #0
 8007428:	e02a      	b.n	8007480 <round+0x84>
 800742a:	4917      	ldr	r1, [pc, #92]	; (8007488 <round+0x8c>)
 800742c:	4121      	asrs	r1, r4
 800742e:	ea03 0001 	and.w	r0, r3, r1
 8007432:	4302      	orrs	r2, r0
 8007434:	d010      	beq.n	8007458 <round+0x5c>
 8007436:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800743a:	fa42 f404 	asr.w	r4, r2, r4
 800743e:	4423      	add	r3, r4
 8007440:	ea23 0301 	bic.w	r3, r3, r1
 8007444:	e7ef      	b.n	8007426 <round+0x2a>
 8007446:	2c33      	cmp	r4, #51	; 0x33
 8007448:	dd09      	ble.n	800745e <round+0x62>
 800744a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800744e:	d103      	bne.n	8007458 <round+0x5c>
 8007450:	f7f8 fe82 	bl	8000158 <__adddf3>
 8007454:	4606      	mov	r6, r0
 8007456:	460d      	mov	r5, r1
 8007458:	4630      	mov	r0, r6
 800745a:	4629      	mov	r1, r5
 800745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745e:	f04f 30ff 	mov.w	r0, #4294967295
 8007462:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007466:	40f8      	lsrs	r0, r7
 8007468:	4202      	tst	r2, r0
 800746a:	d0f5      	beq.n	8007458 <round+0x5c>
 800746c:	2101      	movs	r1, #1
 800746e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007472:	fa01 f404 	lsl.w	r4, r1, r4
 8007476:	1912      	adds	r2, r2, r4
 8007478:	bf28      	it	cs
 800747a:	185b      	addcs	r3, r3, r1
 800747c:	ea22 0200 	bic.w	r2, r2, r0
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	e7e6      	b.n	8007454 <round+0x58>
 8007486:	bf00      	nop
 8007488:	000fffff 	.word	0x000fffff

0800748c <_init>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	bf00      	nop
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr

08007498 <_fini>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr
