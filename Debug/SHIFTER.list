
SHIFTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb8  08007cb8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb8  08007cb8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cbc  08007cbc  00017cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002694  20000068  08007d28  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026fc  08007d28  000226fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001355b  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e77  00000000  00000000  0003362f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d19  00000000  00000000  00037580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a34c  00000000  00000000  00038299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d5b  00000000  00000000  000525e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000946df  00000000  00000000  00067340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d18  00000000  00000000  000fba20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00100738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08007b08 	.word	0x08007b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08007b08 	.word	0x08007b08

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <__aeabi_d2uiz>:
 8000514:	004a      	lsls	r2, r1, #1
 8000516:	d211      	bcs.n	800053c <__aeabi_d2uiz+0x28>
 8000518:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800051c:	d211      	bcs.n	8000542 <__aeabi_d2uiz+0x2e>
 800051e:	d50d      	bpl.n	800053c <__aeabi_d2uiz+0x28>
 8000520:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000528:	d40e      	bmi.n	8000548 <__aeabi_d2uiz+0x34>
 800052a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000536:	fa23 f002 	lsr.w	r0, r3, r2
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000546:	d102      	bne.n	800054e <__aeabi_d2uiz+0x3a>
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	4770      	bx	lr
 800054e:	f04f 0000 	mov.w	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_frsub>:
 8000554:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__addsf3>
 800055a:	bf00      	nop

0800055c <__aeabi_fsub>:
 800055c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000560 <__addsf3>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	bf1f      	itttt	ne
 8000564:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000568:	ea92 0f03 	teqne	r2, r3
 800056c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000570:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000574:	d06a      	beq.n	800064c <__addsf3+0xec>
 8000576:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800057a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800057e:	bfc1      	itttt	gt
 8000580:	18d2      	addgt	r2, r2, r3
 8000582:	4041      	eorgt	r1, r0
 8000584:	4048      	eorgt	r0, r1
 8000586:	4041      	eorgt	r1, r0
 8000588:	bfb8      	it	lt
 800058a:	425b      	neglt	r3, r3
 800058c:	2b19      	cmp	r3, #25
 800058e:	bf88      	it	hi
 8000590:	4770      	bxhi	lr
 8000592:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800059e:	bf18      	it	ne
 80005a0:	4240      	negne	r0, r0
 80005a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4249      	negne	r1, r1
 80005b2:	ea92 0f03 	teq	r2, r3
 80005b6:	d03f      	beq.n	8000638 <__addsf3+0xd8>
 80005b8:	f1a2 0201 	sub.w	r2, r2, #1
 80005bc:	fa41 fc03 	asr.w	ip, r1, r3
 80005c0:	eb10 000c 	adds.w	r0, r0, ip
 80005c4:	f1c3 0320 	rsb	r3, r3, #32
 80005c8:	fa01 f103 	lsl.w	r1, r1, r3
 80005cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005d0:	d502      	bpl.n	80005d8 <__addsf3+0x78>
 80005d2:	4249      	negs	r1, r1
 80005d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005dc:	d313      	bcc.n	8000606 <__addsf3+0xa6>
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d306      	bcc.n	80005f2 <__addsf3+0x92>
 80005e4:	0840      	lsrs	r0, r0, #1
 80005e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ea:	f102 0201 	add.w	r2, r2, #1
 80005ee:	2afe      	cmp	r2, #254	; 0xfe
 80005f0:	d251      	bcs.n	8000696 <__addsf3+0x136>
 80005f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005fa:	bf08      	it	eq
 80005fc:	f020 0001 	biceq.w	r0, r0, #1
 8000600:	ea40 0003 	orr.w	r0, r0, r3
 8000604:	4770      	bx	lr
 8000606:	0049      	lsls	r1, r1, #1
 8000608:	eb40 0000 	adc.w	r0, r0, r0
 800060c:	3a01      	subs	r2, #1
 800060e:	bf28      	it	cs
 8000610:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000614:	d2ed      	bcs.n	80005f2 <__addsf3+0x92>
 8000616:	fab0 fc80 	clz	ip, r0
 800061a:	f1ac 0c08 	sub.w	ip, ip, #8
 800061e:	ebb2 020c 	subs.w	r2, r2, ip
 8000622:	fa00 f00c 	lsl.w	r0, r0, ip
 8000626:	bfaa      	itet	ge
 8000628:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800062c:	4252      	neglt	r2, r2
 800062e:	4318      	orrge	r0, r3
 8000630:	bfbc      	itt	lt
 8000632:	40d0      	lsrlt	r0, r2
 8000634:	4318      	orrlt	r0, r3
 8000636:	4770      	bx	lr
 8000638:	f092 0f00 	teq	r2, #0
 800063c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000640:	bf06      	itte	eq
 8000642:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000646:	3201      	addeq	r2, #1
 8000648:	3b01      	subne	r3, #1
 800064a:	e7b5      	b.n	80005b8 <__addsf3+0x58>
 800064c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000650:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000654:	bf18      	it	ne
 8000656:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065a:	d021      	beq.n	80006a0 <__addsf3+0x140>
 800065c:	ea92 0f03 	teq	r2, r3
 8000660:	d004      	beq.n	800066c <__addsf3+0x10c>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	bf08      	it	eq
 8000668:	4608      	moveq	r0, r1
 800066a:	4770      	bx	lr
 800066c:	ea90 0f01 	teq	r0, r1
 8000670:	bf1c      	itt	ne
 8000672:	2000      	movne	r0, #0
 8000674:	4770      	bxne	lr
 8000676:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800067a:	d104      	bne.n	8000686 <__addsf3+0x126>
 800067c:	0040      	lsls	r0, r0, #1
 800067e:	bf28      	it	cs
 8000680:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000684:	4770      	bx	lr
 8000686:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800068a:	bf3c      	itt	cc
 800068c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000690:	4770      	bxcc	lr
 8000692:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000696:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800069a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800069e:	4770      	bx	lr
 80006a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006a4:	bf16      	itet	ne
 80006a6:	4608      	movne	r0, r1
 80006a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006ac:	4601      	movne	r1, r0
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	bf06      	itte	eq
 80006b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006b6:	ea90 0f01 	teqeq	r0, r1
 80006ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006be:	4770      	bx	lr

080006c0 <__aeabi_ui2f>:
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e004      	b.n	80006d0 <__aeabi_i2f+0x8>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2f>:
 80006c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	bf48      	it	mi
 80006ce:	4240      	negmi	r0, r0
 80006d0:	ea5f 0c00 	movs.w	ip, r0
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006dc:	4601      	mov	r1, r0
 80006de:	f04f 0000 	mov.w	r0, #0
 80006e2:	e01c      	b.n	800071e <__aeabi_l2f+0x2a>

080006e4 <__aeabi_ul2f>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e00a      	b.n	8000708 <__aeabi_l2f+0x14>
 80006f2:	bf00      	nop

080006f4 <__aeabi_l2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000700:	d502      	bpl.n	8000708 <__aeabi_l2f+0x14>
 8000702:	4240      	negs	r0, r0
 8000704:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000708:	ea5f 0c01 	movs.w	ip, r1
 800070c:	bf02      	ittt	eq
 800070e:	4684      	moveq	ip, r0
 8000710:	4601      	moveq	r1, r0
 8000712:	2000      	moveq	r0, #0
 8000714:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000718:	bf08      	it	eq
 800071a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800071e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000722:	fabc f28c 	clz	r2, ip
 8000726:	3a08      	subs	r2, #8
 8000728:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800072c:	db10      	blt.n	8000750 <__aeabi_l2f+0x5c>
 800072e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000732:	4463      	add	r3, ip
 8000734:	fa00 fc02 	lsl.w	ip, r0, r2
 8000738:	f1c2 0220 	rsb	r2, r2, #32
 800073c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000740:	fa20 f202 	lsr.w	r2, r0, r2
 8000744:	eb43 0002 	adc.w	r0, r3, r2
 8000748:	bf08      	it	eq
 800074a:	f020 0001 	biceq.w	r0, r0, #1
 800074e:	4770      	bx	lr
 8000750:	f102 0220 	add.w	r2, r2, #32
 8000754:	fa01 fc02 	lsl.w	ip, r1, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000760:	fa21 f202 	lsr.w	r2, r1, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800076e:	4770      	bx	lr

08000770 <__aeabi_fmul>:
 8000770:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000774:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000778:	bf1e      	ittt	ne
 800077a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800077e:	ea92 0f0c 	teqne	r2, ip
 8000782:	ea93 0f0c 	teqne	r3, ip
 8000786:	d06f      	beq.n	8000868 <__aeabi_fmul+0xf8>
 8000788:	441a      	add	r2, r3
 800078a:	ea80 0c01 	eor.w	ip, r0, r1
 800078e:	0240      	lsls	r0, r0, #9
 8000790:	bf18      	it	ne
 8000792:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000796:	d01e      	beq.n	80007d6 <__aeabi_fmul+0x66>
 8000798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007a4:	fba0 3101 	umull	r3, r1, r0, r1
 80007a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007b0:	bf3e      	ittt	cc
 80007b2:	0049      	lslcc	r1, r1, #1
 80007b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007b8:	005b      	lslcc	r3, r3, #1
 80007ba:	ea40 0001 	orr.w	r0, r0, r1
 80007be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007c2:	2afd      	cmp	r2, #253	; 0xfd
 80007c4:	d81d      	bhi.n	8000802 <__aeabi_fmul+0x92>
 80007c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	4770      	bx	lr
 80007d6:	f090 0f00 	teq	r0, #0
 80007da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007de:	bf08      	it	eq
 80007e0:	0249      	lsleq	r1, r1, #9
 80007e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007ea:	3a7f      	subs	r2, #127	; 0x7f
 80007ec:	bfc2      	ittt	gt
 80007ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007f6:	4770      	bxgt	lr
 80007f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	3a01      	subs	r2, #1
 8000802:	dc5d      	bgt.n	80008c0 <__aeabi_fmul+0x150>
 8000804:	f112 0f19 	cmn.w	r2, #25
 8000808:	bfdc      	itt	le
 800080a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800080e:	4770      	bxle	lr
 8000810:	f1c2 0200 	rsb	r2, r2, #0
 8000814:	0041      	lsls	r1, r0, #1
 8000816:	fa21 f102 	lsr.w	r1, r1, r2
 800081a:	f1c2 0220 	rsb	r2, r2, #32
 800081e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000822:	ea5f 0031 	movs.w	r0, r1, rrx
 8000826:	f140 0000 	adc.w	r0, r0, #0
 800082a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800082e:	bf08      	it	eq
 8000830:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000834:	4770      	bx	lr
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800083e:	bf02      	ittt	eq
 8000840:	0040      	lsleq	r0, r0, #1
 8000842:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000846:	3a01      	subeq	r2, #1
 8000848:	d0f9      	beq.n	800083e <__aeabi_fmul+0xce>
 800084a:	ea40 000c 	orr.w	r0, r0, ip
 800084e:	f093 0f00 	teq	r3, #0
 8000852:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000856:	bf02      	ittt	eq
 8000858:	0049      	lsleq	r1, r1, #1
 800085a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800085e:	3b01      	subeq	r3, #1
 8000860:	d0f9      	beq.n	8000856 <__aeabi_fmul+0xe6>
 8000862:	ea41 010c 	orr.w	r1, r1, ip
 8000866:	e78f      	b.n	8000788 <__aeabi_fmul+0x18>
 8000868:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800086c:	ea92 0f0c 	teq	r2, ip
 8000870:	bf18      	it	ne
 8000872:	ea93 0f0c 	teqne	r3, ip
 8000876:	d00a      	beq.n	800088e <__aeabi_fmul+0x11e>
 8000878:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800087c:	bf18      	it	ne
 800087e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000882:	d1d8      	bne.n	8000836 <__aeabi_fmul+0xc6>
 8000884:	ea80 0001 	eor.w	r0, r0, r1
 8000888:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f090 0f00 	teq	r0, #0
 8000892:	bf17      	itett	ne
 8000894:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000898:	4608      	moveq	r0, r1
 800089a:	f091 0f00 	teqne	r1, #0
 800089e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008a2:	d014      	beq.n	80008ce <__aeabi_fmul+0x15e>
 80008a4:	ea92 0f0c 	teq	r2, ip
 80008a8:	d101      	bne.n	80008ae <__aeabi_fmul+0x13e>
 80008aa:	0242      	lsls	r2, r0, #9
 80008ac:	d10f      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008ae:	ea93 0f0c 	teq	r3, ip
 80008b2:	d103      	bne.n	80008bc <__aeabi_fmul+0x14c>
 80008b4:	024b      	lsls	r3, r1, #9
 80008b6:	bf18      	it	ne
 80008b8:	4608      	movne	r0, r1
 80008ba:	d108      	bne.n	80008ce <__aeabi_fmul+0x15e>
 80008bc:	ea80 0001 	eor.w	r0, r0, r1
 80008c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008cc:	4770      	bx	lr
 80008ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_fdiv>:
 80008d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008e0:	bf1e      	ittt	ne
 80008e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008e6:	ea92 0f0c 	teqne	r2, ip
 80008ea:	ea93 0f0c 	teqne	r3, ip
 80008ee:	d069      	beq.n	80009c4 <__aeabi_fdiv+0xec>
 80008f0:	eba2 0203 	sub.w	r2, r2, r3
 80008f4:	ea80 0c01 	eor.w	ip, r0, r1
 80008f8:	0249      	lsls	r1, r1, #9
 80008fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008fe:	d037      	beq.n	8000970 <__aeabi_fdiv+0x98>
 8000900:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000904:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000908:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800090c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000910:	428b      	cmp	r3, r1
 8000912:	bf38      	it	cc
 8000914:	005b      	lslcc	r3, r3, #1
 8000916:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800091a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800091e:	428b      	cmp	r3, r1
 8000920:	bf24      	itt	cs
 8000922:	1a5b      	subcs	r3, r3, r1
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800092c:	bf24      	itt	cs
 800092e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000932:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000936:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800093a:	bf24      	itt	cs
 800093c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000948:	bf24      	itt	cs
 800094a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800094e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	bf18      	it	ne
 8000956:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800095a:	d1e0      	bne.n	800091e <__aeabi_fdiv+0x46>
 800095c:	2afd      	cmp	r2, #253	; 0xfd
 800095e:	f63f af50 	bhi.w	8000802 <__aeabi_fmul+0x92>
 8000962:	428b      	cmp	r3, r1
 8000964:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000968:	bf08      	it	eq
 800096a:	f020 0001 	biceq.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000974:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000978:	327f      	adds	r2, #127	; 0x7f
 800097a:	bfc2      	ittt	gt
 800097c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000980:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000984:	4770      	bxgt	lr
 8000986:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	3a01      	subs	r2, #1
 8000990:	e737      	b.n	8000802 <__aeabi_fmul+0x92>
 8000992:	f092 0f00 	teq	r2, #0
 8000996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800099a:	bf02      	ittt	eq
 800099c:	0040      	lsleq	r0, r0, #1
 800099e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009a2:	3a01      	subeq	r2, #1
 80009a4:	d0f9      	beq.n	800099a <__aeabi_fdiv+0xc2>
 80009a6:	ea40 000c 	orr.w	r0, r0, ip
 80009aa:	f093 0f00 	teq	r3, #0
 80009ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b2:	bf02      	ittt	eq
 80009b4:	0049      	lsleq	r1, r1, #1
 80009b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009ba:	3b01      	subeq	r3, #1
 80009bc:	d0f9      	beq.n	80009b2 <__aeabi_fdiv+0xda>
 80009be:	ea41 010c 	orr.w	r1, r1, ip
 80009c2:	e795      	b.n	80008f0 <__aeabi_fdiv+0x18>
 80009c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d108      	bne.n	80009e0 <__aeabi_fdiv+0x108>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	f47f af7d 	bne.w	80008ce <__aeabi_fmul+0x15e>
 80009d4:	ea93 0f0c 	teq	r3, ip
 80009d8:	f47f af70 	bne.w	80008bc <__aeabi_fmul+0x14c>
 80009dc:	4608      	mov	r0, r1
 80009de:	e776      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009e0:	ea93 0f0c 	teq	r3, ip
 80009e4:	d104      	bne.n	80009f0 <__aeabi_fdiv+0x118>
 80009e6:	024b      	lsls	r3, r1, #9
 80009e8:	f43f af4c 	beq.w	8000884 <__aeabi_fmul+0x114>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e76e      	b.n	80008ce <__aeabi_fmul+0x15e>
 80009f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009f4:	bf18      	it	ne
 80009f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	d1ca      	bne.n	8000992 <__aeabi_fdiv+0xba>
 80009fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a00:	f47f af5c 	bne.w	80008bc <__aeabi_fmul+0x14c>
 8000a04:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a08:	f47f af3c 	bne.w	8000884 <__aeabi_fmul+0x114>
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0x15e>
 8000a0e:	bf00      	nop

08000a10 <__gesf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295
 8000a14:	e006      	b.n	8000a24 <__cmpsf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__lesf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpsf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpsf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a3a:	d011      	beq.n	8000a60 <__cmpsf2+0x40>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a42:	bf18      	it	ne
 8000a44:	ea90 0f01 	teqne	r0, r1
 8000a48:	bf58      	it	pl
 8000a4a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a4e:	bf88      	it	hi
 8000a50:	17c8      	asrhi	r0, r1, #31
 8000a52:	bf38      	it	cc
 8000a54:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a58:	bf18      	it	ne
 8000a5a:	f040 0001 	orrne.w	r0, r0, #1
 8000a5e:	4770      	bx	lr
 8000a60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a64:	d102      	bne.n	8000a6c <__cmpsf2+0x4c>
 8000a66:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a6a:	d105      	bne.n	8000a78 <__cmpsf2+0x58>
 8000a6c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a70:	d1e4      	bne.n	8000a3c <__cmpsf2+0x1c>
 8000a72:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a76:	d0e1      	beq.n	8000a3c <__cmpsf2+0x1c>
 8000a78:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cfrcmple>:
 8000a80:	4684      	mov	ip, r0
 8000a82:	4608      	mov	r0, r1
 8000a84:	4661      	mov	r1, ip
 8000a86:	e7ff      	b.n	8000a88 <__aeabi_cfcmpeq>

08000a88 <__aeabi_cfcmpeq>:
 8000a88:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a8a:	f7ff ffc9 	bl	8000a20 <__cmpsf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a98 <__aeabi_fcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cfcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_fcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cfcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffd2 	bl	8000a80 <__aeabi_cfrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_fcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc8 	bl	8000a80 <__aeabi_cfrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_f2uiz>:
 8000afc:	0042      	lsls	r2, r0, #1
 8000afe:	d20e      	bcs.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b00:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b04:	d30b      	bcc.n	8000b1e <__aeabi_f2uiz+0x22>
 8000b06:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b0e:	d409      	bmi.n	8000b24 <__aeabi_f2uiz+0x28>
 8000b10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b18:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr
 8000b24:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b28:	d101      	bne.n	8000b2e <__aeabi_f2uiz+0x32>
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_f2uiz+0x38>
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <InitController>:
#define RaiseControlError(fault_) {do{ MyOutputs->NControlErrorStatus |= (1 << (uint32_t)(fault_)); MyOutputs->NControlErrorStatusLogged = fault_; }while(0);}
#define ClearControlError(fault_) MyOutputs->NControlErrorStatus &= ~(1 << (uint32_t)(fault_))
#define CheckControlError(fault_) (MyOutputs->NControlErrorStatus >> (uint32_t)(fault_)) & 0x1


void InitController(InputStruct *inputs, OutputStruct *outputs) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]

	MyInputs = inputs;
 8000b46:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <InitController+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
	MyOutputs = outputs;
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <InitController+0x44>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6013      	str	r3, [r2, #0]

	MyOutputs->xClutchBitepoint = xCLUTCH_BITE_POINT;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <InitController+0x44>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f240 622c 	movw	r2, #1580	; 0x62c
 8000b5a:	821a      	strh	r2, [r3, #16]
	MyOutputs->xClutchTarget = xCLUTCH_REST_POSITION;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <InitController+0x44>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000b64:	81da      	strh	r2, [r3, #14]
	MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <InitController+0x44>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000b6e:	819a      	strh	r2, [r3, #12]
	IDLE_Entry();
 8000b70:	f000 f946 	bl	8000e00 <IDLE_Entry>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000084 	.word	0x20000084
 8000b80:	20000088 	.word	0x20000088

08000b84 <Controller>:



void Controller(InputStruct *inputs, OutputStruct *outputs){
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]

	tControllerTimmer = HAL_GetTick();
 8000b8e:	f002 fc77 	bl	8003480 <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a93      	ldr	r2, [pc, #588]	; (8000de4 <Controller+0x260>)
 8000b96:	6013      	str	r3, [r2, #0]

	// ANTISTALL
		#ifdef ANTISTALL_ENABLED

			// if the shut down is activated and we are at gear greater than neutral we can enter
			if(!MyInputs->BDriverKill && MyInputs->NGear > 0 && !MyInputs->BNGearInError && !MyInputs->BnEngineInError) {
 8000b98:	4b93      	ldr	r3, [pc, #588]	; (8000de8 <Controller+0x264>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f040 8093 	bne.w	8000ccc <Controller+0x148>
 8000ba6:	4b90      	ldr	r3, [pc, #576]	; (8000de8 <Controller+0x264>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f000 808c 	beq.w	8000ccc <Controller+0x148>
 8000bb4:	4b8c      	ldr	r3, [pc, #560]	; (8000de8 <Controller+0x264>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 8085 	bne.w	8000ccc <Controller+0x148>
 8000bc2:	4b89      	ldr	r3, [pc, #548]	; (8000de8 <Controller+0x264>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d17e      	bne.n	8000ccc <Controller+0x148>

				if(MyOutputs->NAntistallState != Active && MyInputs->nEngine <= nEngineAntistallMap[MyInputs->NGear] && MyInputs->rClutchPaddle < ANTISTALL_CLUTCHPADDLE_RELEASED) {
 8000bce:	4b87      	ldr	r3, [pc, #540]	; (8000dec <Controller+0x268>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d03c      	beq.n	8000c54 <Controller+0xd0>
 8000bda:	4b83      	ldr	r3, [pc, #524]	; (8000de8 <Controller+0x264>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b80      	ldr	r3, [pc, #512]	; (8000de8 <Controller+0x264>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000bec:	4619      	mov	r1, r3
 8000bee:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <Controller+0x26c>)
 8000bf0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dc2d      	bgt.n	8000c54 <Controller+0xd0>
 8000bf8:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <Controller+0x264>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c00:	2b27      	cmp	r3, #39	; 0x27
 8000c02:	dc27      	bgt.n	8000c54 <Controller+0xd0>
					// Timer initialization of enable strategy
					if(MyOutputs->NAntistallState == Off) {
 8000c04:	4b79      	ldr	r3, [pc, #484]	; (8000dec <Controller+0x268>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <Controller+0xa0>
						MyOutputs->NAntistallState = Init;
 8000c10:	4b76      	ldr	r3, [pc, #472]	; (8000dec <Controller+0x268>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2201      	movs	r2, #1
 8000c16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						tAntistallTimmer = HAL_GetTick();
 8000c1a:	f002 fc31 	bl	8003480 <HAL_GetTick>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a74      	ldr	r2, [pc, #464]	; (8000df4 <Controller+0x270>)
 8000c22:	6013      	str	r3, [r2, #0]
					}
					// Activation
					if(MyOutputs->NAntistallState == Init && (tAntistallTimmer + ANTISTALL_TRIGGER_TIME) < tControllerTimmer) {
 8000c24:	4b71      	ldr	r3, [pc, #452]	; (8000dec <Controller+0x268>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d111      	bne.n	8000c54 <Controller+0xd0>
 8000c30:	4b70      	ldr	r3, [pc, #448]	; (8000df4 <Controller+0x270>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000c38:	4b6a      	ldr	r3, [pc, #424]	; (8000de4 <Controller+0x260>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d209      	bcs.n	8000c54 <Controller+0xd0>
						MyOutputs->NAntistallState = Active;
 8000c40:	4b6a      	ldr	r3, [pc, #424]	; (8000dec <Controller+0x268>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2202      	movs	r2, #2
 8000c46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
						MyOutputs->xClutchTargetProtection = xCLUTCH_FULLY_ENGAGED;
 8000c4a:	4b68      	ldr	r3, [pc, #416]	; (8000dec <Controller+0x268>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000c52:	809a      	strh	r2, [r3, #4]
					}
				}
				// Not activation due to engine rpm returning over the limit, or early clutch paddle press
				if(MyOutputs->NAntistallState == Init && (MyInputs->nEngine > nEngineAntistallMap[MyInputs->NGear] || MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED)) {
 8000c54:	4b65      	ldr	r3, [pc, #404]	; (8000dec <Controller+0x268>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d11e      	bne.n	8000c9e <Controller+0x11a>
 8000c60:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <Controller+0x264>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b5f      	ldr	r3, [pc, #380]	; (8000de8 <Controller+0x264>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c72:	4619      	mov	r1, r3
 8000c74:	4b5e      	ldr	r3, [pc, #376]	; (8000df0 <Controller+0x26c>)
 8000c76:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dc05      	bgt.n	8000c8a <Controller+0x106>
 8000c7e:	4b5a      	ldr	r3, [pc, #360]	; (8000de8 <Controller+0x264>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000c86:	2b5f      	cmp	r3, #95	; 0x5f
 8000c88:	dd09      	ble.n	8000c9e <Controller+0x11a>
					MyOutputs->NAntistallState = Off;
 8000c8a:	4b58      	ldr	r3, [pc, #352]	; (8000dec <Controller+0x268>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = xCLUTCH_REST_POSITION;
 8000c94:	4b55      	ldr	r3, [pc, #340]	; (8000dec <Controller+0x268>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000c9c:	809a      	strh	r2, [r3, #4]
				}
				// De-activation by Clutch paddle press
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000c9e:	4b53      	ldr	r3, [pc, #332]	; (8000dec <Controller+0x268>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d11b      	bne.n	8000ce2 <Controller+0x15e>
 8000caa:	4b4f      	ldr	r3, [pc, #316]	; (8000de8 <Controller+0x264>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000cb2:	2b5f      	cmp	r3, #95	; 0x5f
 8000cb4:	dd15      	ble.n	8000ce2 <Controller+0x15e>
					MyOutputs->NAntistallState = Off;
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <Controller+0x268>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					MyOutputs->xClutchTargetProtection = xCLUTCH_REST_POSITION;
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <Controller+0x268>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000cc8:	809a      	strh	r2, [r3, #4]
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000cca:	e00a      	b.n	8000ce2 <Controller+0x15e>
				}
			}
			// De-activation by Driver Kill or Neutral or Errors
			else {
				MyOutputs->NAntistallState = Off;
 8000ccc:	4b47      	ldr	r3, [pc, #284]	; (8000dec <Controller+0x268>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				MyOutputs->xClutchTargetProtection = xCLUTCH_REST_POSITION;
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <Controller+0x268>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8000cde:	809a      	strh	r2, [r3, #4]
 8000ce0:	e000      	b.n	8000ce4 <Controller+0x160>
				if(MyOutputs->NAntistallState == Active && MyInputs->rClutchPaddle > ANTISTALL_CLUTCHPADDLE_PRESSED) {
 8000ce2:	bf00      	nop
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// CLUTCH CONTROLLER

		// Manual target mapping
		if(!MyInputs->BrClutchPaddleInError) {
 8000ce4:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <Controller+0x264>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d114      	bne.n	8000d1a <Controller+0x196>
			My2DMapInterpolate(CLUTCH_PADDLE_TARGET_MAP_MAX_SIZE, rClutchPaddle_xClutchTargetMap, MyInputs->rClutchPaddle, &MyOutputs->xClutchTargetManual, 0, 0);
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <Controller+0x264>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fce5 	bl	80006c8 <__aeabi_i2f>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <Controller+0x268>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3308      	adds	r3, #8
 8000d06:	f04f 0100 	mov.w	r1, #0
 8000d0a:	9101      	str	r1, [sp, #4]
 8000d0c:	f04f 0100 	mov.w	r1, #0
 8000d10:	9100      	str	r1, [sp, #0]
 8000d12:	4939      	ldr	r1, [pc, #228]	; (8000df8 <Controller+0x274>)
 8000d14:	200b      	movs	r0, #11
 8000d16:	f002 fa89 	bl	800322c <My2DMapInterpolate>
		// TODO: do the array running thing also for the launch sequence.
		// Decide if upshifts trigger will happen here, or we will be triggered in IDLE and start the clutch sequence here afterwards

		// we take the maximum target generated from the Antistall/Protection strategy, the request
		// from the driver and the shifter requests when enabled from the respective strategy
		MyOutputs->xClutchTarget = MIN((uint16_t)MyOutputs->xClutchTargetManual, MyOutputs->xClutchTargetShift);
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <Controller+0x268>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	899c      	ldrh	r4, [r3, #12]
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <Controller+0x268>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fee8 	bl	8000afc <__aeabi_f2uiz>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <Controller+0x268>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	42a2      	cmp	r2, r4
 8000d36:	bf28      	it	cs
 8000d38:	4622      	movcs	r2, r4
 8000d3a:	b292      	uxth	r2, r2
 8000d3c:	81da      	strh	r2, [r3, #14]


	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	// TOGGLE SWITCHES & LEDS
		MyOutputs->BSWLEDA = MyInputs->NToggleSwitch01State;
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <Controller+0x264>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <Controller+0x268>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 8000d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		MyOutputs->BSWLEDB = MyInputs->NToggleSwitch02State;
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <Controller+0x264>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <Controller+0x268>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
 8000d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		MyOutputs->BSWLEDC = MyInputs->NToggleSwitch03State;
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <Controller+0x264>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <Controller+0x268>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
 8000d6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	// ------------------------------------------------------------------------------------------------------------------------------------------------------


	//CAN BUS ~ QUICK MESSAGE PARSING
	outputs->BLaunchControl	= inputs->BLaunchRequest;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	// SHIFTER STATE MACHINE

		switch (NCurrentState) {
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <Controller+0x278>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d82c      	bhi.n	8000ddc <Controller+0x258>
 8000d82:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <Controller+0x204>)
 8000d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d88:	08000da1 	.word	0x08000da1
 8000d8c:	08000dab 	.word	0x08000dab
 8000d90:	08000db5 	.word	0x08000db5
 8000d94:	08000dbf 	.word	0x08000dbf
 8000d98:	08000dc9 	.word	0x08000dc9
 8000d9c:	08000dd3 	.word	0x08000dd3

		case IDLE_STATE:
			IDLE_Run();
 8000da0:	f000 f870 	bl	8000e84 <IDLE_Run>
			IDLE_Event();
 8000da4:	f000 f844 	bl	8000e30 <IDLE_Event>
			break;
 8000da8:	e018      	b.n	8000ddc <Controller+0x258>
		case PRE_UPSHIFT_STATE:
			PRE_UPSHIFT_Run();
 8000daa:	f000 f8e1 	bl	8000f70 <PRE_UPSHIFT_Run>
			PRE_UPSHIFT_Event();
 8000dae:	f000 f88b 	bl	8000ec8 <PRE_UPSHIFT_Event>
			break;
 8000db2:	e013      	b.n	8000ddc <Controller+0x258>
		case PRE_DNSHIFT_STATE:
			PRE_DNSHIFT_Run();
 8000db4:	f000 f9be 	bl	8001134 <PRE_DNSHIFT_Run>
			PRE_DNSHIFT_Event();
 8000db8:	f000 f96e 	bl	8001098 <PRE_DNSHIFT_Event>
			break;
 8000dbc:	e00e      	b.n	8000ddc <Controller+0x258>
		case SHIFTING_STATE:
			SHIFTING_Run();
 8000dbe:	f000 fad5 	bl	800136c <SHIFTING_Run>
			SHIFTING_Event();
 8000dc2:	f000 faad 	bl	8001320 <SHIFTING_Event>
			break;
 8000dc6:	e009      	b.n	8000ddc <Controller+0x258>
		case POSTSHIFT_STATE:
			POSTSHIFT_Run();
 8000dc8:	f000 fb3c 	bl	8001444 <POSTSHIFT_Run>
			POSTSHIFT_Event();
 8000dcc:	f000 fb00 	bl	80013d0 <POSTSHIFT_Event>
			break;
 8000dd0:	e004      	b.n	8000ddc <Controller+0x258>
		case ERROR_STATE:
			ERROR_Run();
 8000dd2:	f000 fb99 	bl	8001508 <ERROR_Run>
			ERROR_Event();
 8000dd6:	f000 fb85 	bl	80014e4 <ERROR_Event>
			break;
 8000dda:	bf00      	nop
		}

}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	20000090 	.word	0x20000090
 8000de8:	20000084 	.word	0x20000084
 8000dec:	20000088 	.word	0x20000088
 8000df0:	08007b98 	.word	0x08007b98
 8000df4:	200000a4 	.word	0x200000a4
 8000df8:	08007b40 	.word	0x08007b40
 8000dfc:	2000008c 	.word	0x2000008c

08000e00 <IDLE_Entry>:


void IDLE_Entry(void) {
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <IDLE_Entry+0x1c>)
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <IDLE_Entry+0x20>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	NCurrentState = IDLE_STATE;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <IDLE_Entry+0x1c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000008c 	.word	0x2000008c
 8000e20:	2000008d 	.word	0x2000008d

08000e24 <IDLE_Exit>:
void IDLE_Exit(void) {
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <IDLE_Event>:
void IDLE_Event(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <IDLE_Event+0x50>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 f92b 	bl	8002094 <CheckFaults>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <IDLE_Event+0x1e>
		IDLE_Exit();
 8000e44:	f7ff ffee 	bl	8000e24 <IDLE_Exit>
		ERROR_Entry();
 8000e48:	f000 fb20 	bl	800148c <ERROR_Entry>
		return;
 8000e4c:	e017      	b.n	8000e7e <IDLE_Event+0x4e>
	}

	// TODO: do we need to also check controller errors here? I think no...

    if(CheckEvent(UPSHIFT_PRESS_EVT)) {
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <IDLE_Event+0x50>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <IDLE_Event+0x36>
        IDLE_Exit();
 8000e5c:	f7ff ffe2 	bl	8000e24 <IDLE_Exit>
        PRE_UPSHIFT_Entry();
 8000e60:	f000 f816 	bl	8000e90 <PRE_UPSHIFT_Entry>
        return;
 8000e64:	e00b      	b.n	8000e7e <IDLE_Event+0x4e>
    }

    if(CheckEvent(DNSHIFT_PRESS_EVT)) {
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <IDLE_Event+0x50>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <IDLE_Event+0x4e>
        IDLE_Exit();
 8000e74:	f7ff ffd6 	bl	8000e24 <IDLE_Exit>
        PRE_DNSHIFT_Entry();
 8000e78:	f000 f8f2 	bl	8001060 <PRE_DNSHIFT_Entry>
        return;
 8000e7c:	bf00      	nop
//        IDLE_Exit();
//        LAUNCH_Entry();
//        return;
    }

}
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000084 	.word	0x20000084

08000e84 <IDLE_Run>:
void IDLE_Run(void) {
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <PRE_UPSHIFT_Entry>:



void PRE_UPSHIFT_Entry(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <PRE_UPSHIFT_Entry+0x20>)
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <PRE_UPSHIFT_Entry+0x24>)
 8000e9a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_UPSHIFT_STATE;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <PRE_UPSHIFT_Entry+0x20>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8000ea2:	f002 faed 	bl	8003480 <HAL_GetTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <PRE_UPSHIFT_Entry+0x28>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000008c 	.word	0x2000008c
 8000eb4:	2000008d 	.word	0x2000008d
 8000eb8:	20000094 	.word	0x20000094

08000ebc <PRE_UPSHIFT_Exit>:
void PRE_UPSHIFT_Exit(void) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <PRE_UPSHIFT_Event>:
void PRE_UPSHIFT_Event(void) {
 8000ec8:	b598      	push	{r3, r4, r7, lr}
 8000eca:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <PRE_UPSHIFT_Event+0x98>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 f8df 	bl	8002094 <CheckFaults>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <PRE_UPSHIFT_Event+0x1e>
		PRE_UPSHIFT_Exit();
 8000edc:	f7ff ffee 	bl	8000ebc <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000ee0:	f000 fad4 	bl	800148c <ERROR_Entry>
		return;
 8000ee4:	e03b      	b.n	8000f5e <PRE_UPSHIFT_Event+0x96>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d123      	bne.n	8000f38 <PRE_UPSHIFT_Event+0x70>
		MyOutputs->NGearTarget = MyInputs->NGear + 1;											// we go to the next gear
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <PRE_UPSHIFT_Event+0x98>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3201      	adds	r2, #1
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_UPSHIFT || MyOutputs->BOverrideActuateClutchOnUpShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetUpShiftMap[MyInputs->NGear];
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <PRE_UPSHIFT_Event+0x98>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <PRE_UPSHIFT_Event+0xa0>)
 8000f0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	b292      	uxth	r2, r2
 8000f18:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnUpShift = 0; 									// reset the strat for the next gear
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		}
		else {
			MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
		}

		if(ALLOW_SPARK_CUT_ON_UP_SHIFT) MyOutputs->BSparkCut = 1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		PRE_UPSHIFT_Exit();
 8000f2e:	f7ff ffc5 	bl	8000ebc <PRE_UPSHIFT_Exit>
		SHIFTING_Entry();
 8000f32:	f000 f97d 	bl	8001230 <SHIFTING_Entry>
		return;
 8000f36:	e012      	b.n	8000f5e <PRE_UPSHIFT_Event+0x96>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_UPSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <PRE_UPSHIFT_Event+0x9c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00d      	beq.n	8000f5e <PRE_UPSHIFT_Event+0x96>
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <PRE_UPSHIFT_Event+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8000f4a:	f002 fa99 	bl	8003480 <HAL_GetTick>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	429c      	cmp	r4, r3
 8000f52:	d804      	bhi.n	8000f5e <PRE_UPSHIFT_Event+0x96>
		PRE_UPSHIFT_Exit();
 8000f54:	f7ff ffb2 	bl	8000ebc <PRE_UPSHIFT_Exit>
		ERROR_Entry();
 8000f58:	f000 fa98 	bl	800148c <ERROR_Entry>
		return;
 8000f5c:	bf00      	nop
	}


}
 8000f5e:	bd98      	pop	{r3, r4, r7, pc}
 8000f60:	20000084 	.word	0x20000084
 8000f64:	20000088 	.word	0x20000088
 8000f68:	08007bbc 	.word	0x08007bbc
 8000f6c:	20000094 	.word	0x20000094

08000f70 <PRE_UPSHIFT_Run>:
void PRE_UPSHIFT_Run(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 0 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_FIRST_WITHOUT_CLUTCH) {	// trying to put 1st gear without clutch
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d113      	bne.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8000f88:	2b5a      	cmp	r3, #90	; 0x5a
 8000f8a:	dc0d      	bgt.n	8000fa8 <PRE_UPSHIFT_Run+0x38>
		RaiseControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH);
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0202 	orr.w	r2, r2, #2
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	705a      	strb	r2, [r3, #1]
 8000fa6:	e008      	b.n	8000fba <PRE_UPSHIFT_Run+0x4a>
	}
	else { ClearControlError(NEUTRAL_TO_FIRST_WITH_NO_CLUTCH); }
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0202 	bic.w	r2, r2, #2
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine < nEngineUpShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift up with too low rpm
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <PRE_UPSHIFT_Run+0xec>)
 8000fd0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	da13      	bge.n	8001000 <PRE_UPSHIFT_Run+0x90>
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10d      	bne.n	8001000 <PRE_UPSHIFT_Run+0x90>
		RaiseControlError(RPM_ILLEGAL_FOR_UPSHIFT);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0208 	orr.w	r2, r2, #8
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	705a      	strb	r2, [r3, #1]
 8000ffe:	e008      	b.n	8001012 <PRE_UPSHIFT_Run+0xa2>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_UPSHIFT); }
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0208 	bic.w	r2, r2, #8
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear + 1 > MAX_GEAR)	{																					// trying to shift up after last gear
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <PRE_UPSHIFT_Run+0xe4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800101a:	2b04      	cmp	r3, #4
 800101c:	d90d      	bls.n	800103a <PRE_UPSHIFT_Run+0xca>
		RaiseControlError(TARGET_GEAR_EXCEEDS_MAX);
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0210 	orr.w	r2, r2, #16
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2204      	movs	r2, #4
 8001036:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
}
 8001038:	e008      	b.n	800104c <PRE_UPSHIFT_Run+0xdc>
	else { ClearControlError(TARGET_GEAR_EXCEEDS_MAX); }
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <PRE_UPSHIFT_Run+0xe8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0210 	bic.w	r2, r2, #16
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000084 	.word	0x20000084
 8001058:	20000088 	.word	0x20000088
 800105c:	08007ba4 	.word	0x08007ba4

08001060 <PRE_DNSHIFT_Entry>:



void PRE_DNSHIFT_Entry(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <PRE_DNSHIFT_Entry+0x24>)
 800106a:	701a      	strb	r2, [r3, #0]
	NCurrentState = PRE_DNSHIFT_STATE;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <PRE_DNSHIFT_Entry+0x20>)
 800106e:	2202      	movs	r2, #2
 8001070:	701a      	strb	r2, [r3, #0]

	tPreShiftTimer = HAL_GetTick();
 8001072:	f002 fa05 	bl	8003480 <HAL_GetTick>
 8001076:	4603      	mov	r3, r0
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <PRE_DNSHIFT_Entry+0x28>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000008c 	.word	0x2000008c
 8001084:	2000008d 	.word	0x2000008d
 8001088:	20000094 	.word	0x20000094

0800108c <PRE_DNSHIFT_Exit>:
void PRE_DNSHIFT_Exit(void) {
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <PRE_DNSHIFT_Event>:
void PRE_DNSHIFT_Event(void) {
 8001098:	b598      	push	{r3, r4, r7, lr}
 800109a:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fff7 	bl	8002094 <CheckFaults>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <PRE_DNSHIFT_Event+0x1e>
		PRE_DNSHIFT_Exit();
 80010ac:	f7ff ffee 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 80010b0:	f000 f9ec 	bl	800148c <ERROR_Entry>
		return;
 80010b4:	e035      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// if all ok we define the shifting targets and move on
	if(!MyOutputs->NControlErrorStatus) {
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11d      	bne.n	80010fc <PRE_DNSHIFT_Event+0x64>
		MyOutputs->NGearTarget = MyInputs->NGear - 1;												// we go to the previous gear
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	70da      	strb	r2, [r3, #3]

		if(CLUTCH_ACTUATION_DURING_DNSHIFT || MyOutputs->BOverrideActuateClutchOnDnShift) {		// we check for clutch strategy during shift
			MyOutputs->xClutchTargetShift = xClutchTargetDnShiftMap[MyInputs->NGear];
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <PRE_DNSHIFT_Event+0x8c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010da:	4619      	mov	r1, r3
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <PRE_DNSHIFT_Event+0x94>)
 80010e2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80010e6:	819a      	strh	r2, [r3, #12]
			MyOutputs->BOverrideActuateClutchOnDnShift = 0; 									// reset the strat for the next gear
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
		}

		if(ALLOW_SPARK_CUT_ON_DN_SHIFT) MyOutputs->BSparkCut = 1;

		PRE_DNSHIFT_Exit();
 80010f2:	f7ff ffcb 	bl	800108c <PRE_DNSHIFT_Exit>
		SHIFTING_Entry();
 80010f6:	f000 f89b 	bl	8001230 <SHIFTING_Entry>
		return;
 80010fa:	e012      	b.n	8001122 <PRE_DNSHIFT_Event+0x8a>
	}

	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPreShiftTimer + PRE_DNSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <PRE_DNSHIFT_Event+0x90>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <PRE_DNSHIFT_Event+0x8a>
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <PRE_DNSHIFT_Event+0x98>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 800110e:	f002 f9b7 	bl	8003480 <HAL_GetTick>
 8001112:	4603      	mov	r3, r0
 8001114:	429c      	cmp	r4, r3
 8001116:	d804      	bhi.n	8001122 <PRE_DNSHIFT_Event+0x8a>
		PRE_DNSHIFT_Exit();
 8001118:	f7ff ffb8 	bl	800108c <PRE_DNSHIFT_Exit>
		ERROR_Entry();
 800111c:	f000 f9b6 	bl	800148c <ERROR_Entry>
		return;
 8001120:	bf00      	nop
	}

}
 8001122:	bd98      	pop	{r3, r4, r7, pc}
 8001124:	20000084 	.word	0x20000084
 8001128:	20000088 	.word	0x20000088
 800112c:	08007bd0 	.word	0x08007bd0
 8001130:	20000094 	.word	0x20000094

08001134 <PRE_DNSHIFT_Run>:
void PRE_DNSHIFT_Run(void) {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

	if(MyInputs->NGear == 1 && MyInputs->rClutchPaddle <= CLUTCH_PADDLE_THRESHOLD_FOR_FIRST && !ALLOW_NEUTRAL_WITHOUT_CLUTCH && !(MyInputs->BrClutchPaddleInError && ALLOW_NEUTRAL_WHEN_PADDLE_IN_ERROR)) {	// trying to put neutral gear without clutch
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001140:	2b01      	cmp	r3, #1
 8001142:	d119      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800114c:	2b5a      	cmp	r3, #90	; 0x5a
 800114e:	dc13      	bgt.n	8001178 <PRE_DNSHIFT_Run+0x44>
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10d      	bne.n	8001178 <PRE_DNSHIFT_Run+0x44>
		RaiseControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH);
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0204 	orr.w	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2202      	movs	r2, #2
 8001174:	705a      	strb	r2, [r3, #1]
 8001176:	e008      	b.n	800118a <PRE_DNSHIFT_Run+0x56>
	}
	else { ClearControlError(FIRST_TO_NEUTRAL_WITH_NO_CLUTCH); }
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0204 	bic.w	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]

	if(MyInputs->nEngine > nEngineDnShiftMap[MyInputs->NGear] && !MyInputs->BnEngineInError) {									// trying to shift down with too high rpm
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001192:	461a      	mov	r2, r3
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800119c:	4619      	mov	r1, r3
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <PRE_DNSHIFT_Run+0xf8>)
 80011a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	dd13      	ble.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10d      	bne.n	80011d0 <PRE_DNSHIFT_Run+0x9c>
		RaiseControlError(RPM_ILLEGAL_FOR_DNSHIFT);
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2205      	movs	r2, #5
 80011cc:	705a      	strb	r2, [r3, #1]
 80011ce:	e008      	b.n	80011e2 <PRE_DNSHIFT_Run+0xae>
	}
	else { ClearControlError(RPM_ILLEGAL_FOR_DNSHIFT); }
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0220 	bic.w	r2, r2, #32
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]

	if(MyInputs->NGear == 0)	{																								// trying to shift down from neutral
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <PRE_DNSHIFT_Run+0xf0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <PRE_DNSHIFT_Run+0xd6>
		RaiseControlError(TARGET_GEAR_LESS_THAN_NEUTRAL);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2206      	movs	r2, #6
 8001206:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }

}
 8001208:	e008      	b.n	800121c <PRE_DNSHIFT_Run+0xe8>
	else { ClearControlError(TARGET_GEAR_LESS_THAN_NEUTRAL); }
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <PRE_DNSHIFT_Run+0xf4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000084 	.word	0x20000084
 8001228:	20000088 	.word	0x20000088
 800122c:	08007bb0 	.word	0x08007bb0

08001230 <SHIFTING_Entry>:

void SHIFTING_Entry(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001234:	4b2e      	ldr	r3, [pc, #184]	; (80012f0 <SHIFTING_Entry+0xc0>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <SHIFTING_Entry+0xc4>)
 800123a:	701a      	strb	r2, [r3, #0]
	NCurrentState = SHIFTING_STATE;
 800123c:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <SHIFTING_Entry+0xc0>)
 800123e:	2203      	movs	r2, #3
 8001240:	701a      	strb	r2, [r3, #0]

	if(NPreviousState == PRE_UPSHIFT_STATE) {
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d11b      	bne.n	8001282 <SHIFTING_Entry+0x52>
		tShifterMaxTransitTime = tUpShift[MyInputs->NGear];
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001252:	461a      	mov	r2, r3
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SHIFTING_Entry+0xcc>)
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <SHIFTING_Entry+0xd0>)
 800125c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Up;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <SHIFTING_Entry+0xd4>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 1) {		// if going from neutral to 1st we need to actually downshift (it is how the gears work)
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d104      	bne.n	8001278 <SHIFTING_Entry+0x48>
			MyOutputs->BDnShiftPortState = 1;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <SHIFTING_Entry+0xd8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2201      	movs	r2, #1
 8001274:	751a      	strb	r2, [r3, #20]
 8001276:	e034      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other upshifts are normal
			MyOutputs->BUpShiftPortState = 1;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <SHIFTING_Entry+0xd8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	74da      	strb	r2, [r3, #19]
 8001280:	e02f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else if(NPreviousState == PRE_DNSHIFT_STATE) {
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <SHIFTING_Entry+0xc4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d11b      	bne.n	80012c2 <SHIFTING_Entry+0x92>
		tShifterMaxTransitTime = tDnShift[MyInputs->NGear - 1];
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <SHIFTING_Entry+0xc8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001292:	3b01      	subs	r3, #1
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <SHIFTING_Entry+0xdc>)
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <SHIFTING_Entry+0xd0>)
 800129c:	6013      	str	r3, [r2, #0]
		NShiftRequest = Down;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <SHIFTING_Entry+0xd4>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]

		if(MyOutputs->NGearTarget == 0) {		// if going from 1st to neutral we need to actually upshift (it is how the gears work)
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <SHIFTING_Entry+0x88>
			MyOutputs->BUpShiftPortState = 1;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	74da      	strb	r2, [r3, #19]
 80012b6:	e014      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}
		else {									// all other downshifts are normal
			MyOutputs->BDnShiftPortState = 1;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	751a      	strb	r2, [r3, #20]
 80012c0:	e00f      	b.n	80012e2 <SHIFTING_Entry+0xb2>
		}

	}
	else {
		NCurrentState = Unknown;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <SHIFTING_Entry+0xc0>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]
		RaiseControlError(SHIFT_TARGET_UNKNOWN);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <SHIFTING_Entry+0xd8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2207      	movs	r2, #7
 80012e0:	705a      	strb	r2, [r3, #1]
	}

	tShiftTimer = HAL_GetTick();
 80012e2:	f002 f8cd 	bl	8003480 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <SHIFTING_Entry+0xe0>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000008c 	.word	0x2000008c
 80012f4:	2000008d 	.word	0x2000008d
 80012f8:	20000084 	.word	0x20000084
 80012fc:	08007bdc 	.word	0x08007bdc
 8001300:	2000009c 	.word	0x2000009c
 8001304:	2000008e 	.word	0x2000008e
 8001308:	20000088 	.word	0x20000088
 800130c:	08007bf0 	.word	0x08007bf0
 8001310:	20000098 	.word	0x20000098

08001314 <SHIFTING_Exit>:
void SHIFTING_Exit(void) {
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <SHIFTING_Event>:
void SHIFTING_Event(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SHIFTING_Event+0x3c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 feb3 	bl	8002094 <CheckFaults>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <SHIFTING_Event+0x1e>
		SHIFTING_Exit();
 8001334:	f7ff ffee 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 8001338:	f000 f8a8 	bl	800148c <ERROR_Entry>
		return;
 800133c:	e00d      	b.n	800135a <SHIFTING_Event+0x3a>
	}

	// TODO: keep checking for control errors ??


	if((tShiftTimer + tShifterMaxTransitTime) < tControllerTimmer) {	// the max time for the gear has expired
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <SHIFTING_Event+0x40>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SHIFTING_Event+0x44>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	441a      	add	r2, r3
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <SHIFTING_Event+0x48>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d204      	bcs.n	800135a <SHIFTING_Event+0x3a>
		// go out and determine if the shift was completed or not
		SHIFTING_Exit();
 8001350:	f7ff ffe0 	bl	8001314 <SHIFTING_Exit>
		POSTSHIFT_Entry();
 8001354:	f000 f810 	bl	8001378 <POSTSHIFT_Entry>
		return;
 8001358:	bf00      	nop
	}

}
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000084 	.word	0x20000084
 8001360:	20000098 	.word	0x20000098
 8001364:	2000009c 	.word	0x2000009c
 8001368:	20000090 	.word	0x20000090

0800136c <SHIFTING_Run>:
void SHIFTING_Run(void) {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	// PID


	// FEED FORWARD

}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <POSTSHIFT_Entry>:


void POSTSHIFT_Entry(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <POSTSHIFT_Entry+0x40>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <POSTSHIFT_Entry+0x44>)
 8001382:	701a      	strb	r2, [r3, #0]
	NCurrentState = POSTSHIFT_STATE;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <POSTSHIFT_Entry+0x40>)
 8001386:	2204      	movs	r2, #4
 8001388:	701a      	strb	r2, [r3, #0]

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2200      	movs	r2, #0
 8001398:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTargetShift = xCLUTCH_REST_POSITION;
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 80013a2:	819a      	strh	r2, [r3, #12]
	MyOutputs->BSparkCut = 0;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <POSTSHIFT_Entry+0x48>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000008c 	.word	0x2000008c
 80013bc:	2000008d 	.word	0x2000008d
 80013c0:	20000088 	.word	0x20000088

080013c4 <POSTSHIFT_Exit>:
void POSTSHIFT_Exit(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

	// TODO: probably here we need to set the MyOutputs->NGear = MyInputs->NGear

}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <POSTSHIFT_Event>:
void POSTSHIFT_Event(void) {
 80013d0:	b598      	push	{r3, r4, r7, lr}
 80013d2:	af00      	add	r7, sp, #0

	if(CheckFaults(MyInputs)) {
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <POSTSHIFT_Event+0x68>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fe5b 	bl	8002094 <CheckFaults>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <POSTSHIFT_Event+0x1e>
		SHIFTING_Exit();
 80013e4:	f7ff ff96 	bl	8001314 <SHIFTING_Exit>
		ERROR_Entry();
 80013e8:	f000 f850 	bl	800148c <ERROR_Entry>
		return;
 80013ec:	e023      	b.n	8001436 <POSTSHIFT_Event+0x66>
	}


	if(!MyOutputs->NControlErrorStatus) {
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <POSTSHIFT_Event+0x6c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10b      	bne.n	8001410 <POSTSHIFT_Event+0x40>
		// we update the Gear variable for the outputs
		MyOutputs->NGear = MyInputs->NGear;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <POSTSHIFT_Event+0x68>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <POSTSHIFT_Event+0x6c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8001404:	709a      	strb	r2, [r3, #2]
		POSTSHIFT_Exit();
 8001406:	f7ff ffdd 	bl	80013c4 <POSTSHIFT_Exit>
		IDLE_Entry();
 800140a:	f7ff fcf9 	bl	8000e00 <IDLE_Entry>
		return;
 800140e:	e012      	b.n	8001436 <POSTSHIFT_Event+0x66>
	}


	// we check for control errors and if present after the time threshold, we abort
	if(MyOutputs->NControlErrorStatus && (tPostShiftTimer + POSTSHIFT_THRESHOLD_TIME) <= HAL_GetTick()) {
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <POSTSHIFT_Event+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00d      	beq.n	8001436 <POSTSHIFT_Event+0x66>
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <POSTSHIFT_Event+0x70>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8001422:	f002 f82d 	bl	8003480 <HAL_GetTick>
 8001426:	4603      	mov	r3, r0
 8001428:	429c      	cmp	r4, r3
 800142a:	d804      	bhi.n	8001436 <POSTSHIFT_Event+0x66>
		POSTSHIFT_Exit();
 800142c:	f7ff ffca 	bl	80013c4 <POSTSHIFT_Exit>
		ERROR_Entry();
 8001430:	f000 f82c 	bl	800148c <ERROR_Entry>
		return;
 8001434:	bf00      	nop
	}
}
 8001436:	bd98      	pop	{r3, r4, r7, pc}
 8001438:	20000084 	.word	0x20000084
 800143c:	20000088 	.word	0x20000088
 8001440:	200000a0 	.word	0x200000a0

08001444 <POSTSHIFT_Run>:
void POSTSHIFT_Run(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

	if(CHECK_POST_SHIFT_GEAR && MyInputs->NGear != MyOutputs->NGearTarget) {
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <POSTSHIFT_Run+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	429a      	cmp	r2, r3
 8001458:	d00a      	beq.n	8001470 <POSTSHIFT_Run+0x2c>
		RaiseControlError(GEAR_TARGET_MISMATCH);
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <POSTSHIFT_Run+0x44>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2208      	movs	r2, #8
 800146c:	705a      	strb	r2, [r3, #1]
	}
	else { ClearControlError(GEAR_TARGET_MISMATCH); }

}
 800146e:	e005      	b.n	800147c <POSTSHIFT_Run+0x38>
	else { ClearControlError(GEAR_TARGET_MISMATCH); }
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <POSTSHIFT_Run+0x44>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000084 	.word	0x20000084
 8001488:	20000088 	.word	0x20000088

0800148c <ERROR_Entry>:


void ERROR_Entry(void) {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
	NPreviousState = NCurrentState;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <ERROR_Entry+0x40>)
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <ERROR_Entry+0x44>)
 8001496:	701a      	strb	r2, [r3, #0]
	NCurrentState = ERROR_STATE;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <ERROR_Entry+0x40>)
 800149a:	2205      	movs	r2, #5
 800149c:	701a      	strb	r2, [r3, #0]

	// TODO: we need to open a led to indicate the Error State !!!

	// reset all actuator states
	MyOutputs->BUpShiftPortState = 0;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <ERROR_Entry+0x48>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	74da      	strb	r2, [r3, #19]
	MyOutputs->BDnShiftPortState = 0;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <ERROR_Entry+0x48>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2200      	movs	r2, #0
 80014ac:	751a      	strb	r2, [r3, #20]

	// reset all control variables for the next actuation
	MyOutputs->xClutchTarget = xCLUTCH_REST_POSITION;
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <ERROR_Entry+0x48>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 80014b6:	81da      	strh	r2, [r3, #14]
	// clutch should always work... if we enter here during an actuation, not sure if it is correct to interrupt it
	MyOutputs->BSparkCut = 0;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <ERROR_Entry+0x48>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000008c 	.word	0x2000008c
 80014d0:	2000008d 	.word	0x2000008d
 80014d4:	20000088 	.word	0x20000088

080014d8 <ERROR_Exit>:

void ERROR_Exit(void) {
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <ERROR_Event>:
void ERROR_Event(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

	// check that all faults are cleared
	if(!CheckFaults(MyInputs)) {
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <ERROR_Event+0x20>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fdd1 	bl	8002094 <CheckFaults>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d104      	bne.n	8001502 <ERROR_Event+0x1e>
		ERROR_Exit();
 80014f8:	f7ff ffee 	bl	80014d8 <ERROR_Exit>
		IDLE_Entry();
 80014fc:	f7ff fc80 	bl	8000e00 <IDLE_Entry>
		return;
 8001500:	bf00      	nop
	// check that all control errors are cleared
	// and do not zero the logged error status
	// remember return in all functions

	// Remember to create the Strategy (and a way to exit the error) to be able to function without NGear (complete open loop)
}
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000084 	.word	0x20000084

08001508 <ERROR_Run>:
void ERROR_Run(void) {
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

	MyOutputs->NControlErrorStatus = 0;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <ERROR_Run+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]


	// TODO: find a way to read the Control Errors and then reset them in order to clear them for the next cycle

}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000088 	.word	0x20000088

08001520 <ReadInputs>:

// private functions declaration
uint8_t calculateActualNGear(uint16_t NGear, uint16_t NGearRaw);
uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset);

void ReadInputs(InputStruct *inputs){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af02      	add	r7, sp, #8
 8001526:	6078      	str	r0, [r7, #4]

	// Reset events
	inputs->nEventStatus = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

    tInputsTimmer = HAL_GetTick();
 800152e:	f001 ffa7 	bl	8003480 <HAL_GetTick>
 8001532:	4603      	mov	r3, r0
 8001534:	4aa9      	ldr	r2, [pc, #676]	; (80017dc <ReadInputs+0x2bc>)
 8001536:	6013      	str	r3, [r2, #0]

	// ---------------------------------------------------------------------------------------------------
	//Analog Inputs

	//ADC Averaging
	inputs->NADCChannel01Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 0);	// PA0
 8001538:	4ba9      	ldr	r3, [pc, #676]	; (80017e0 <ReadInputs+0x2c0>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	2300      	movs	r3, #0
 8001540:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001544:	48a7      	ldr	r0, [pc, #668]	; (80017e4 <ReadInputs+0x2c4>)
 8001546:	f000 fe65 	bl	8002214 <MyHalfBufferAverage>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	851a      	strh	r2, [r3, #40]	; 0x28
	inputs->NADCChannel02Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 1);	// PA1
 8001552:	4ba3      	ldr	r3, [pc, #652]	; (80017e0 <ReadInputs+0x2c0>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	2301      	movs	r3, #1
 800155a:	f44f 6109 	mov.w	r1, #2192	; 0x890
 800155e:	48a1      	ldr	r0, [pc, #644]	; (80017e4 <ReadInputs+0x2c4>)
 8001560:	f000 fe58 	bl	8002214 <MyHalfBufferAverage>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	855a      	strh	r2, [r3, #42]	; 0x2a
	inputs->NADCChannel03Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 2);	// PA2
 800156c:	4b9c      	ldr	r3, [pc, #624]	; (80017e0 <ReadInputs+0x2c0>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	2302      	movs	r3, #2
 8001574:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001578:	489a      	ldr	r0, [pc, #616]	; (80017e4 <ReadInputs+0x2c4>)
 800157a:	f000 fe4b 	bl	8002214 <MyHalfBufferAverage>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	859a      	strh	r2, [r3, #44]	; 0x2c
	inputs->NADCChannel04Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 3);	// PA3
 8001586:	4b96      	ldr	r3, [pc, #600]	; (80017e0 <ReadInputs+0x2c0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	2303      	movs	r3, #3
 800158e:	f44f 6109 	mov.w	r1, #2192	; 0x890
 8001592:	4894      	ldr	r0, [pc, #592]	; (80017e4 <ReadInputs+0x2c4>)
 8001594:	f000 fe3e 	bl	8002214 <MyHalfBufferAverage>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	85da      	strh	r2, [r3, #46]	; 0x2e
	inputs->NADCChannel05Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 5);	// PA5
 80015a0:	4b8f      	ldr	r3, [pc, #572]	; (80017e0 <ReadInputs+0x2c0>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	2305      	movs	r3, #5
 80015a8:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015ac:	488d      	ldr	r0, [pc, #564]	; (80017e4 <ReadInputs+0x2c4>)
 80015ae:	f000 fe31 	bl	8002214 <MyHalfBufferAverage>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	861a      	strh	r2, [r3, #48]	; 0x30
	inputs->NADCChannel06Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 4);	// PA4
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <ReadInputs+0x2c0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	2304      	movs	r3, #4
 80015c2:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015c6:	4887      	ldr	r0, [pc, #540]	; (80017e4 <ReadInputs+0x2c4>)
 80015c8:	f000 fe24 	bl	8002214 <MyHalfBufferAverage>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	865a      	strh	r2, [r3, #50]	; 0x32
	inputs->NADCChannel07Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 7);	// PA7
 80015d4:	4b82      	ldr	r3, [pc, #520]	; (80017e0 <ReadInputs+0x2c0>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	2307      	movs	r3, #7
 80015dc:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015e0:	4880      	ldr	r0, [pc, #512]	; (80017e4 <ReadInputs+0x2c4>)
 80015e2:	f000 fe17 	bl	8002214 <MyHalfBufferAverage>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	869a      	strh	r2, [r3, #52]	; 0x34
	inputs->NADCChannel08Raw = MyHalfBufferAverage(adcRawValue, ADC_BUFFER_HALF_SIZE, NAdcBufferSide, 6);	// PA7
 80015ee:	4b7c      	ldr	r3, [pc, #496]	; (80017e0 <ReadInputs+0x2c0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	2306      	movs	r3, #6
 80015f6:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80015fa:	487a      	ldr	r0, [pc, #488]	; (80017e4 <ReadInputs+0x2c4>)
 80015fc:	f000 fe0a 	bl	8002214 <MyHalfBufferAverage>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	86da      	strh	r2, [r3, #54]	; 0x36

	//Voltage Conversion
	inputs->VSHIFTERAnalog01 = (float)(inputs->NADCChannel01Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f85b 	bl	80006c8 <__aeabi_i2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4974      	ldr	r1, [pc, #464]	; (80017e8 <ReadInputs+0x2c8>)
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f8aa 	bl	8000770 <__aeabi_fmul>
 800161c:	4603      	mov	r3, r0
 800161e:	4973      	ldr	r1, [pc, #460]	; (80017ec <ReadInputs+0x2cc>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f959 	bl	80008d8 <__aeabi_fdiv>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]
	inputs->VSHIFTERAnalog02 = (float)(inputs->NADCChannel02Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f848 	bl	80006c8 <__aeabi_i2f>
 8001638:	4603      	mov	r3, r0
 800163a:	496b      	ldr	r1, [pc, #428]	; (80017e8 <ReadInputs+0x2c8>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f897 	bl	8000770 <__aeabi_fmul>
 8001642:	4603      	mov	r3, r0
 8001644:	4969      	ldr	r1, [pc, #420]	; (80017ec <ReadInputs+0x2cc>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f946 	bl	80008d8 <__aeabi_fdiv>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]
	inputs->VSHIFTERAnalog03 = (float)(inputs->NADCChannel03Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f835 	bl	80006c8 <__aeabi_i2f>
 800165e:	4603      	mov	r3, r0
 8001660:	4961      	ldr	r1, [pc, #388]	; (80017e8 <ReadInputs+0x2c8>)
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f884 	bl	8000770 <__aeabi_fmul>
 8001668:	4603      	mov	r3, r0
 800166a:	4960      	ldr	r1, [pc, #384]	; (80017ec <ReadInputs+0x2cc>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f933 	bl	80008d8 <__aeabi_fdiv>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]
	inputs->VSHIFTERAnalog04 = (float)(inputs->NADCChannel04Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f822 	bl	80006c8 <__aeabi_i2f>
 8001684:	4603      	mov	r3, r0
 8001686:	4958      	ldr	r1, [pc, #352]	; (80017e8 <ReadInputs+0x2c8>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f871 	bl	8000770 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	4956      	ldr	r1, [pc, #344]	; (80017ec <ReadInputs+0x2cc>)
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff f920 	bl	80008d8 <__aeabi_fdiv>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	615a      	str	r2, [r3, #20]
	inputs->VSHIFTERAnalog05 = (float)(inputs->NADCChannel05Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f80f 	bl	80006c8 <__aeabi_i2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	494e      	ldr	r1, [pc, #312]	; (80017e8 <ReadInputs+0x2c8>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f85e 	bl	8000770 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	494d      	ldr	r1, [pc, #308]	; (80017ec <ReadInputs+0x2cc>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f90d 	bl	80008d8 <__aeabi_fdiv>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	619a      	str	r2, [r3, #24]
	inputs->VSHIFTERAnalog06 = (float)(inputs->NADCChannel06Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fffc 	bl	80006c8 <__aeabi_i2f>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4945      	ldr	r1, [pc, #276]	; (80017e8 <ReadInputs+0x2c8>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff f84b 	bl	8000770 <__aeabi_fmul>
 80016da:	4603      	mov	r3, r0
 80016dc:	4943      	ldr	r1, [pc, #268]	; (80017ec <ReadInputs+0x2cc>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f8fa 	bl	80008d8 <__aeabi_fdiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	61da      	str	r2, [r3, #28]
	inputs->VSHIFTERAnalog07 = (float)(inputs->NADCChannel07Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ffe9 	bl	80006c8 <__aeabi_i2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	493b      	ldr	r1, [pc, #236]	; (80017e8 <ReadInputs+0x2c8>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f838 	bl	8000770 <__aeabi_fmul>
 8001700:	4603      	mov	r3, r0
 8001702:	493a      	ldr	r1, [pc, #232]	; (80017ec <ReadInputs+0x2cc>)
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f8e7 	bl	80008d8 <__aeabi_fdiv>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	621a      	str	r2, [r3, #32]
	inputs->VSHIFTERAnalog08 = (float)(inputs->NADCChannel08Raw * MCU_SUPPLY_VOLTAGE / 4095.0);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ffd6 	bl	80006c8 <__aeabi_i2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4932      	ldr	r1, [pc, #200]	; (80017e8 <ReadInputs+0x2c8>)
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f825 	bl	8000770 <__aeabi_fmul>
 8001726:	4603      	mov	r3, r0
 8001728:	4930      	ldr	r1, [pc, #192]	; (80017ec <ReadInputs+0x2cc>)
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f8d4 	bl	80008d8 <__aeabi_fdiv>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

	//Digital Inputs
	inputs->NSHIFTERDIN01 = HAL_GPIO_ReadPin(DIN01_GPIO_Port, DIN01_Pin);
 8001738:	2101      	movs	r1, #1
 800173a:	482d      	ldr	r0, [pc, #180]	; (80017f0 <ReadInputs+0x2d0>)
 800173c:	f003 fe64 	bl	8005408 <HAL_GPIO_ReadPin>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inputs->NSHIFTERDIN02 = HAL_GPIO_ReadPin(DIN02_GPIO_Port, DIN02_Pin);
 800174a:	2102      	movs	r1, #2
 800174c:	4828      	ldr	r0, [pc, #160]	; (80017f0 <ReadInputs+0x2d0>)
 800174e:	f003 fe5b 	bl	8005408 <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	inputs->NSHIFTERDIN03 = HAL_GPIO_ReadPin(DIN03_GPIO_Port, DIN03_Pin);
 800175c:	2120      	movs	r1, #32
 800175e:	4824      	ldr	r0, [pc, #144]	; (80017f0 <ReadInputs+0x2d0>)
 8001760:	f003 fe52 	bl	8005408 <HAL_GPIO_ReadPin>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	inputs->NSHIFTERDIN04 = HAL_GPIO_ReadPin(DIN04_GPIO_Port, DIN04_Pin);
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <ReadInputs+0x2d0>)
 8001772:	f003 fe49 	bl	8005408 <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	// Steering Wheel Buttons
	inputs->BSWButtonA = BButtonACAN;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <ReadInputs+0x2d4>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	inputs->BSWButtonB = BButtonBCAN;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <ReadInputs+0x2d8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	inputs->BSWButtonC = BButtonCCAN;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <ReadInputs+0x2dc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	inputs->BSWButtonD = BButtonDCAN;
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <ReadInputs+0x2e0>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	inputs->BSWButtonE = BButtonECAN;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <ReadInputs+0x2e4>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	inputs->BSWButtonF = BButtonFCAN;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <ReadInputs+0x2e8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	// ---------------------------------------------------------------------------------------------------
	// Driver Kill

		// Inverted logic!! DriverKill=1 means ShutDown is Open, DriverKill=0 means ShutDown is closed
	if(inputs->NSHIFTERDIN04 & (tBDriverKillTimer < tInputsTimmer) && inputs->BDriverKill) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017ce:	4619      	mov	r1, r3
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <ReadInputs+0x2ec>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <ReadInputs+0x2bc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	e019      	b.n	8001810 <ReadInputs+0x2f0>
 80017dc:	200000a8 	.word	0x200000a8
 80017e0:	200000e0 	.word	0x200000e0
 80017e4:	200002a0 	.word	0x200002a0
 80017e8:	4055c28f 	.word	0x4055c28f
 80017ec:	457ff000 	.word	0x457ff000
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	200000c9 	.word	0x200000c9
 80017f8:	200000ca 	.word	0x200000ca
 80017fc:	200000cb 	.word	0x200000cb
 8001800:	200000cc 	.word	0x200000cc
 8001804:	200000cd 	.word	0x200000cd
 8001808:	200000ce 	.word	0x200000ce
 800180c:	200000bc 	.word	0x200000bc
 8001810:	bf34      	ite	cc
 8001812:	2301      	movcc	r3, #1
 8001814:	2300      	movcs	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	400b      	ands	r3, r1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00e      	beq.n	800183c <ReadInputs+0x31c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <ReadInputs+0x31c>
		inputs->BDriverKill = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		tBDriverKillTimer = tInputsTimmer + DRIVER_KILL_DEBOUNCE;
 8001830:	4ba5      	ldr	r3, [pc, #660]	; (8001ac8 <ReadInputs+0x5a8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	33c8      	adds	r3, #200	; 0xc8
 8001836:	4aa5      	ldr	r2, [pc, #660]	; (8001acc <ReadInputs+0x5ac>)
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e00d      	b.n	8001858 <ReadInputs+0x338>
	}
	else if(!inputs->NSHIFTERDIN04 & !inputs->BDriverKill) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001848:	4313      	orrs	r3, r2
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d103      	bne.n	8001858 <ReadInputs+0x338>
		inputs->BDriverKill = 1;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

	// ---------------------------------------------------------------------------------------------------
	// NGear Conditioning

	// Analog Input
	inputs->VNGear = inputs->VSHIFTERAnalog04;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40

	// mapping
	inputs->BNGearInError = My2DMapInterpolate(TOTAL_GEARS, NGearMap, inputs->VNGear, &(inputs->NGearRaw), VNGEAR_MARGIN_MIN, VNGEAR_MARGIN_MAX);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3344      	adds	r3, #68	; 0x44
 8001868:	4999      	ldr	r1, [pc, #612]	; (8001ad0 <ReadInputs+0x5b0>)
 800186a:	9101      	str	r1, [sp, #4]
 800186c:	4998      	ldr	r1, [pc, #608]	; (8001ad0 <ReadInputs+0x5b0>)
 800186e:	9100      	str	r1, [sp, #0]
 8001870:	4998      	ldr	r1, [pc, #608]	; (8001ad4 <ReadInputs+0x5b4>)
 8001872:	2006      	movs	r0, #6
 8001874:	f001 fcda 	bl	800322c <My2DMapInterpolate>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	// TODO: think about checking the float NGear for +-0.2 to define false neutral

	// conditioning (round float to nearest integer)
	inputs->NGear = (uint8_t)round(inputs->NGearRaw);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdc4 	bl	8000414 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f006 f8f2 	bl	8007a7c <round>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7fe fe38 	bl	8000514 <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// CLAMPING
	inputs->NGear = CLAMP(inputs->NGear, 0, MAX_GEAR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	bf28      	it	cs
 80018b8:	2305      	movcs	r3, #5
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	// check for errors
	if(inputs->BNGearInError) {
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <ReadInputs+0x3ba>
		RaiseFault(inputs, NGEAR_FAULT);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	e005      	b.n	80018e6 <ReadInputs+0x3c6>
		// inputs->NGear = 1; // TODO: is it correct??? not sure. I would put 1 to be able trigger antistall and to be generic for all functions
	}
	else ClearFault(inputs, NGEAR_FAULT);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f023 0201 	bic.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	605a      	str	r2, [r3, #4]

	// ---------------------------------------------------------------------------------------------------
	// Steering Wheel Fitted Check

	if((tCANSteeringWheelLastSeen + STEERING_WHEEL_FITTED_INTERVAL) < tInputsTimmer) {
 80018e6:	4b7c      	ldr	r3, [pc, #496]	; (8001ad8 <ReadInputs+0x5b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80018ee:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <ReadInputs+0x5a8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d204      	bcs.n	8001900 <ReadInputs+0x3e0>
		inputs->BSteeringWheelFitted = 0;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018fe:	e003      	b.n	8001908 <ReadInputs+0x3e8>
	}
	else {
		inputs->BSteeringWheelFitted = 1;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	}

	// ---------------------------------------------------------------------------------------------------
	// DECLUTCH Input

	if(inputs->BSteeringWheelFitted) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00a      	beq.n	8001928 <ReadInputs+0x408>
		inputs->BDeclutchRequest = inputs->BSWButtonF;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inputs->BDeclutchRequestInError = 0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8001926:	e007      	b.n	8001938 <ReadInputs+0x418>
	}
	else {
		inputs->BDeclutchRequestInError = 1;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		inputs->BDeclutchRequest = 0;		// we force to zero if in error
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	// ---------------------------------------------------------------------------------------------------
	// Clutch Paddle Conditioning

	// CAN Input
	inputs->BrClutchPaddleRawCANInError = BrClutchPaddleRawInErrorCAN;
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <ReadInputs+0x5bc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	b2da      	uxtb	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	inputs->rClutchPaddleRawCAN = rClutchPaddleRawCAN;
 8001946:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <ReadInputs+0x5c0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b25a      	sxtb	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	// Analog Input & Mapping
	inputs->VrClutchPaddleRawAnalog = inputs->VSHIFTERAnalog02;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	661a      	str	r2, [r3, #96]	; 0x60
	inputs->BrClutchPaddleRawAnalogInError= My2DMapInterpolate(CLUTCH_PADDLE_MAP_SIZE, rClutchMap, inputs->VrClutchPaddleRawAnalog, &(inputs->rClutchPaddleRawAnalog), VrCLUTCH_PADDLE_MARGIN_MIN, VrCLUTCH_PADDLE_MARGIN_MAX);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3364      	adds	r3, #100	; 0x64
 8001962:	4960      	ldr	r1, [pc, #384]	; (8001ae4 <ReadInputs+0x5c4>)
 8001964:	9101      	str	r1, [sp, #4]
 8001966:	495f      	ldr	r1, [pc, #380]	; (8001ae4 <ReadInputs+0x5c4>)
 8001968:	9100      	str	r1, [sp, #0]
 800196a:	495f      	ldr	r1, [pc, #380]	; (8001ae8 <ReadInputs+0x5c8>)
 800196c:	2002      	movs	r0, #2
 800196e:	f001 fc5d 	bl	800322c <My2DMapInterpolate>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d


	// Clutch Paddle Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BrClutchPaddleRawCANInError) {
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001982:	2b00      	cmp	r3, #0
 8001984:	d012      	beq.n	80019ac <ReadInputs+0x48c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <ReadInputs+0x48c>
		rClutchPaddleRaw = inputs->rClutchPaddleRawCAN;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f993 205c 	ldrsb.w	r2, [r3, #92]	; 0x5c
 8001996:	4b55      	ldr	r3, [pc, #340]	; (8001aec <ReadInputs+0x5cc>)
 8001998:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = CAN;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80019aa:	e02d      	b.n	8001a08 <ReadInputs+0x4e8>

	}
	else if(!inputs->BrClutchPaddleRawAnalogInError) {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11d      	bne.n	80019f2 <ReadInputs+0x4d2>
		rClutchPaddleRaw = (int8_t)round(inputs->rClutchPaddleRawAnalog);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd2a 	bl	8000414 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f006 f858 	bl	8007a7c <round>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7fe fd76 	bl	80004c4 <__aeabi_d2iz>
 80019d8:	4603      	mov	r3, r0
 80019da:	b25a      	sxtb	r2, r3
 80019dc:	4b43      	ldr	r3, [pc, #268]	; (8001aec <ReadInputs+0x5cc>)
 80019de:	701a      	strb	r2, [r3, #0]
		inputs->NrClutchPaddleSource = Analog;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		inputs->BrClutchPaddleInError = 0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80019f0:	e00a      	b.n	8001a08 <ReadInputs+0x4e8>
	}
	else {
		inputs->BrClutchPaddleInError = 1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		inputs->NrClutchPaddleSource = NoSource;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2202      	movs	r2, #2
 80019fe:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		rClutchPaddleRaw = rCLUTCH_PADDLE_IN_ERROR_DEFAULT;
 8001a02:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <ReadInputs+0x5cc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
	}

	// DECLUTCH
	if(!inputs->BDeclutchRequestInError) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <ReadInputs+0x506>
		rClutchPaddleDeclutch = (inputs->BDeclutchRequest == 1 ? rCLUTCH_ON_DECLUTCH : 0);	// we use the button to fully press the clutch
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <ReadInputs+0x500>
 8001a1c:	2264      	movs	r2, #100	; 0x64
 8001a1e:	e000      	b.n	8001a22 <ReadInputs+0x502>
 8001a20:	2200      	movs	r2, #0
 8001a22:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <ReadInputs+0x5d0>)
 8001a24:	701a      	strb	r2, [r3, #0]
	}

	// CLAMPING
	inputs->rClutchPaddle = CLAMP(MAX(rClutchPaddleRaw, rClutchPaddleDeclutch), CLUTCH_PADDLE_MIN, CLUTCH_PADDLE_MAX);
 8001a26:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <ReadInputs+0x5d0>)
 8001a28:	f993 2000 	ldrsb.w	r2, [r3]
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <ReadInputs+0x5cc>)
 8001a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	bfb8      	it	lt
 8001a36:	4613      	movlt	r3, r2
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	2b63      	cmp	r3, #99	; 0x63
 8001a3c:	dc0d      	bgt.n	8001a5a <ReadInputs+0x53a>
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <ReadInputs+0x5d0>)
 8001a40:	f993 2000 	ldrsb.w	r2, [r3]
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <ReadInputs+0x5cc>)
 8001a46:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	bfb8      	it	lt
 8001a4e:	4613      	movlt	r3, r2
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a56:	b25a      	sxtb	r2, r3
 8001a58:	e000      	b.n	8001a5c <ReadInputs+0x53c>
 8001a5a:	2264      	movs	r2, #100	; 0x64
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

	// ---------------------------------------------------------------------------------------------------
	// Up-Dn Shift Conditioning

	// CAN Input
	inputs->BUpShiftButtonCANInError = BUpShiftButtonCANInError;
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <ReadInputs+0x5d4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	inputs->BDnShiftButtonCANInError = BDnShiftButtonCANInError;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <ReadInputs+0x5d8>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	inputs->BUpShiftButtonCAN = BUpShiftButtonCAN;
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <ReadInputs+0x5dc>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	inputs->BDnShiftButtonCAN = BDnShiftButtonCAN;
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <ReadInputs+0x5e0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	// Analog Input
	// TODO: Debouncing and STUCK detection ???
	inputs->VUpDnButtonAnalog = inputs->VSHIFTERAnalog03;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	651a      	str	r2, [r3, #80]	; 0x50

	// Level checking
	if(inputs->NBUpDnShiftButtonAnalog >= VUPDN_NOPRESS) {
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fe11 	bl	80006c8 <__aeabi_i2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4916      	ldr	r1, [pc, #88]	; (8001b04 <ReadInputs+0x5e4>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f812 	bl	8000ad4 <__aeabi_fcmpge>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d028      	beq.n	8001b08 <ReadInputs+0x5e8>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001ac6:	e078      	b.n	8001bba <ReadInputs+0x69a>
 8001ac8:	200000a8 	.word	0x200000a8
 8001acc:	200000bc 	.word	0x200000bc
 8001ad0:	3e4ccccd 	.word	0x3e4ccccd
 8001ad4:	08007c04 	.word	0x08007c04
 8001ad8:	200000d4 	.word	0x200000d4
 8001adc:	200000d0 	.word	0x200000d0
 8001ae0:	200000cf 	.word	0x200000cf
 8001ae4:	3dcccccd 	.word	0x3dcccccd
 8001ae8:	08007c34 	.word	0x08007c34
 8001aec:	200000e1 	.word	0x200000e1
 8001af0:	200000e2 	.word	0x200000e2
 8001af4:	200000c6 	.word	0x200000c6
 8001af8:	200000c8 	.word	0x200000c8
 8001afc:	200000c5 	.word	0x200000c5
 8001b00:	200000c7 	.word	0x200000c7
 8001b04:	40200000 	.word	0x40200000
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_UPSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_UPSHIFT_MIN) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0c:	4972      	ldr	r1, [pc, #456]	; (8001cd8 <ReadInputs+0x7b8>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe ffd6 	bl	8000ac0 <__aeabi_fcmple>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d011      	beq.n	8001b3e <ReadInputs+0x61e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1e:	496f      	ldr	r1, [pc, #444]	; (8001cdc <ReadInputs+0x7bc>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe ffd7 	bl	8000ad4 <__aeabi_fcmpge>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <ReadInputs+0x61e>
		inputs->NBUpDnShiftButtonAnalog = 1;	// Up Shift
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b3c:	e03d      	b.n	8001bba <ReadInputs+0x69a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_DNSHIFT_MAX && inputs->VUpDnButtonAnalog >= VUPDN_DNSHIFT_MIN) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b42:	4967      	ldr	r1, [pc, #412]	; (8001ce0 <ReadInputs+0x7c0>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe ffbb 	bl	8000ac0 <__aeabi_fcmple>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d011      	beq.n	8001b74 <ReadInputs+0x654>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b54:	4963      	ldr	r1, [pc, #396]	; (8001ce4 <ReadInputs+0x7c4>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe ffbc 	bl	8000ad4 <__aeabi_fcmpge>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <ReadInputs+0x654>
		inputs->NBUpDnShiftButtonAnalog = 2;	// Dn Shift
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2202      	movs	r2, #2
 8001b66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001b72:	e022      	b.n	8001bba <ReadInputs+0x69a>
	}
	else if(inputs->VUpDnButtonAnalog <= VUPDN_BOTHPRESSED_MAX && inputs->VUpDnButtonAnalog >= VUPDN_BOTHPRESSED_MIN) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b78:	495b      	ldr	r1, [pc, #364]	; (8001ce8 <ReadInputs+0x7c8>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe ffa0 	bl	8000ac0 <__aeabi_fcmple>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d011      	beq.n	8001baa <ReadInputs+0x68a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8a:	4958      	ldr	r1, [pc, #352]	; (8001cec <ReadInputs+0x7cc>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ffa1 	bl	8000ad4 <__aeabi_fcmpge>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <ReadInputs+0x68a>
		inputs->NBUpDnShiftButtonAnalog = 0;	// None
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001ba8:	e007      	b.n	8001bba <ReadInputs+0x69a>
	}
	else {
		inputs->NBUpDnShiftButtonAnalog = 0;	// Error
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		inputs->BUpDnShiftButtonAnalogInError = 1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	}


	// UpShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BUpShiftButtonCANInError) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <ReadInputs+0x6cc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10e      	bne.n	8001bec <ReadInputs+0x6cc>
		inputs->BUpShiftRequest = inputs->BUpShiftButtonCAN;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = CAN;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001bea:	e025      	b.n	8001c38 <ReadInputs+0x718>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d114      	bne.n	8001c20 <ReadInputs+0x700>
		inputs->BUpShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 1 ? 1 : 0);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = Analog;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		inputs->BUpShiftRequestInError = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001c1e:	e00b      	b.n	8001c38 <ReadInputs+0x718>
	}
	else {
		inputs->BUpShiftRequestInError = 1;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		inputs->BUpShiftRequest = 0;		// we force to zero if in error
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
		inputs->NBUpshiftRequestSource = NoSource;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	}

	// DnShift Input Strategy
	if(inputs->BSteeringWheelFitted && !inputs->BDnShiftButtonCANInError) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d013      	beq.n	8001c6a <ReadInputs+0x74a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10e      	bne.n	8001c6a <ReadInputs+0x74a>
		inputs->BDnShiftRequest = inputs->BDnShiftButtonCAN;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = CAN;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001c68:	e025      	b.n	8001cb6 <ReadInputs+0x796>
	}
	else if(!inputs->BUpDnShiftButtonAnalogInError) {
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d114      	bne.n	8001c9e <ReadInputs+0x77e>
		inputs->BDnShiftRequest = (inputs->NBUpDnShiftButtonAnalog == 2 ? 1 : 0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = Analog;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		inputs->BDnShiftRequestInError = 0;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001c9c:	e00b      	b.n	8001cb6 <ReadInputs+0x796>
	}
	else {
		inputs->BDnShiftRequestInError = 1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		inputs->BDnShiftRequest = 0;		// we force to zero if in error
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		inputs->NBDnshiftRequestSource = NoSource;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a

	// ---------------------------------------------------------------------------------------------------
	// Launch

	// Launch Input Strategy
	if(inputs->BSteeringWheelFitted) {
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d017      	beq.n	8001cf0 <ReadInputs+0x7d0>
		inputs->BLaunchRequest = inputs->BSWButtonD;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		inputs->BLaunchRequestInError = 0;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001cd4:	e014      	b.n	8001d00 <ReadInputs+0x7e0>
 8001cd6:	bf00      	nop
 8001cd8:	3f8ccccd 	.word	0x3f8ccccd
 8001cdc:	3f733333 	.word	0x3f733333
 8001ce0:	3ff33333 	.word	0x3ff33333
 8001ce4:	3fd9999a 	.word	0x3fd9999a
 8001ce8:	3f666666 	.word	0x3f666666
 8001cec:	3f4ccccd 	.word	0x3f4ccccd
	}
	else {
		inputs->BLaunchRequestInError = 1;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		inputs->BLaunchRequest = 0;		// we force to zero if in error
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	// ---------------------------------------------------------------------------------------------------
	// Toggle Switches

	// Toggle 1
	if(inputs->BSWButtonA && tToggleSwitch01 < tInputsTimmer) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d014      	beq.n	8001d34 <ReadInputs+0x814>
 8001d0a:	4b8f      	ldr	r3, [pc, #572]	; (8001f48 <ReadInputs+0xa28>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <ReadInputs+0xa2c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d20e      	bcs.n	8001d34 <ReadInputs+0x814>
		inputs->NToggleSwitch01State ^= 1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001d1c:	f083 0301 	eor.w	r3, r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		tToggleSwitch01 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d28:	4b88      	ldr	r3, [pc, #544]	; (8001f4c <ReadInputs+0xa2c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d30:	4a85      	ldr	r2, [pc, #532]	; (8001f48 <ReadInputs+0xa28>)
 8001d32:	6013      	str	r3, [r2, #0]
	}

	// Toggle 2
	if(inputs->BSWButtonB && tToggleSwitch02 < tInputsTimmer) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d014      	beq.n	8001d68 <ReadInputs+0x848>
 8001d3e:	4b84      	ldr	r3, [pc, #528]	; (8001f50 <ReadInputs+0xa30>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <ReadInputs+0xa2c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d20e      	bcs.n	8001d68 <ReadInputs+0x848>
		inputs->NToggleSwitch02State ^= 1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		tToggleSwitch02 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d5c:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <ReadInputs+0xa2c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d64:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <ReadInputs+0xa30>)
 8001d66:	6013      	str	r3, [r2, #0]
	}

	// Toggle 3
	if(inputs->BSWButtonC && tToggleSwitch03 < tInputsTimmer) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d014      	beq.n	8001d9c <ReadInputs+0x87c>
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <ReadInputs+0xa34>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <ReadInputs+0xa2c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d20e      	bcs.n	8001d9c <ReadInputs+0x87c>
		inputs->NToggleSwitch03State ^= 1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001d84:	f083 0301 	eor.w	r3, r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		tToggleSwitch03 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001d90:	4b6e      	ldr	r3, [pc, #440]	; (8001f4c <ReadInputs+0xa2c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001d98:	4a6e      	ldr	r2, [pc, #440]	; (8001f54 <ReadInputs+0xa34>)
 8001d9a:	6013      	str	r3, [r2, #0]
	}

	// Toggle 4
	if(inputs->BSWButtonE && tToggleSwitch04 < tInputsTimmer) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <ReadInputs+0x8b0>
 8001da6:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <ReadInputs+0xa38>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <ReadInputs+0xa2c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d20e      	bcs.n	8001dd0 <ReadInputs+0x8b0>
		inputs->NToggleSwitch04State ^= 1;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001db8:	f083 0301 	eor.w	r3, r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		tToggleSwitch04 = tInputsTimmer + TOGGLE_SWITCH_DEBOUNCE;
 8001dc4:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <ReadInputs+0xa2c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001dcc:	4a62      	ldr	r2, [pc, #392]	; (8001f58 <ReadInputs+0xa38>)
 8001dce:	6013      	str	r3, [r2, #0]


	// ---------------------------------------------------------------------------------------------------
	// PCB Supply Voltage Conditioning

	inputs->VSupply = inputs->VSHIFTERAnalog01 / VSUPPLY_DIVIDER_GAIN;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4961      	ldr	r1, [pc, #388]	; (8001f5c <ReadInputs+0xa3c>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fd7e 	bl	80008d8 <__aeabi_fdiv>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// ---------------------------------------------------------------------------------------------------
	// nEngine Conditioning

	// CAN Input

	if((tCANECULastSeen + ECU_COMMS_LOST_INTERVAL) < tInputsTimmer) {
 8001de6:	4b5e      	ldr	r3, [pc, #376]	; (8001f60 <ReadInputs+0xa40>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <ReadInputs+0xa2c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d20c      	bcs.n	8001e10 <ReadInputs+0x8f0>
		inputs->BnEngineInError = 1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 0;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		inputs->nEngine = 0; 		// we force to zero if in error
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001e0e:	e007      	b.n	8001e20 <ReadInputs+0x900>
	}
	else {
		inputs->BnEngineInError = 0;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
		inputs->BnEngineReliable = 1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	}

	inputs->nEngine = nEngineRawCAN; // TODO: conversion??
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <ReadInputs+0xa44>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	// TODO: we have both in error and reliable. In the controller we will consider reliable as the strategy
	// think about doing extra checks apart from CANRx timing, such as noise and out of bounds checks


	if(inputs->BnEngineInError) {
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <ReadInputs+0x920>
		inputs->nEngine = nENGINE_IN_ERROR_DEFAULT; 		// we force to zero if in error
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}

	// ---------------------------------------------------------------------------------------------------
	// CAN Diagnostics

	inputs->NCANErrors = NCANErrorCount;			// update can error count
 8001e40:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <ReadInputs+0xa48>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	inputs->NCANRxErrors = NCanGetRxErrorCount;		// update can Rx error count
 8001e4c:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <ReadInputs+0xa4c>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	// ---------------------------------------------------------------------------------------------------
	// EVENTS

	if(!inputs->BUpShiftRequestInError && inputs->BUpShiftRequest && !BUpShiftRequested) {
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d112      	bne.n	8001e8a <ReadInputs+0x96a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <ReadInputs+0x96a>
 8001e6e:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <ReadInputs+0xa50>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <ReadInputs+0x96a>
		BUpShiftRequested = 1;
 8001e76:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <ReadInputs+0xa50>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_PRESS_EVT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e016      	b.n	8001eb8 <ReadInputs+0x998>
	}
	else if(!inputs->BUpShiftRequestInError && !inputs->BUpShiftRequest && BUpShiftRequested) {
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d111      	bne.n	8001eb8 <ReadInputs+0x998>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <ReadInputs+0x998>
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <ReadInputs+0xa50>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <ReadInputs+0x998>
		BUpShiftRequested = 0;
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <ReadInputs+0xa50>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, UPSHIFT_RELEASE_EVT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDnShiftRequestInError && inputs->BDnShiftRequest && !BDnShiftRequested) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d112      	bne.n	8001ee8 <ReadInputs+0x9c8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00d      	beq.n	8001ee8 <ReadInputs+0x9c8>
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <ReadInputs+0xa54>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <ReadInputs+0x9c8>
		BDnShiftRequested = 1;
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <ReadInputs+0xa54>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_PRESS_EVT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f043 0204 	orr.w	r2, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e016      	b.n	8001f16 <ReadInputs+0x9f6>
	}
	else if(!inputs->BDnShiftRequestInError && !inputs->BDnShiftRequest && BDnShiftRequested) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d111      	bne.n	8001f16 <ReadInputs+0x9f6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10c      	bne.n	8001f16 <ReadInputs+0x9f6>
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <ReadInputs+0xa54>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <ReadInputs+0x9f6>
		BDnShiftRequested = 0;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <ReadInputs+0xa54>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DNSHIFT_RELEASE_EVT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f043 0208 	orr.w	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BLaunchRequestInError && inputs->BLaunchRequest && !BLaunchRequested) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12d      	bne.n	8001f7c <ReadInputs+0xa5c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d028      	beq.n	8001f7c <ReadInputs+0xa5c>
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <ReadInputs+0xa58>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d124      	bne.n	8001f7c <ReadInputs+0xa5c>
		BLaunchRequested = 1;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <ReadInputs+0xa58>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_PRESS_EVT);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e031      	b.n	8001faa <ReadInputs+0xa8a>
 8001f46:	bf00      	nop
 8001f48:	200000ac 	.word	0x200000ac
 8001f4c:	200000a8 	.word	0x200000a8
 8001f50:	200000b0 	.word	0x200000b0
 8001f54:	200000b4 	.word	0x200000b4
 8001f58:	200000b8 	.word	0x200000b8
 8001f5c:	3e617c1c 	.word	0x3e617c1c
 8001f60:	200000d8 	.word	0x200000d8
 8001f64:	200000d2 	.word	0x200000d2
 8001f68:	200000dc 	.word	0x200000dc
 8001f6c:	200000de 	.word	0x200000de
 8001f70:	200000c0 	.word	0x200000c0
 8001f74:	200000c1 	.word	0x200000c1
 8001f78:	200000c2 	.word	0x200000c2
	}
	else if(!inputs->BLaunchRequestInError && !inputs->BLaunchRequest && BLaunchRequested) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d111      	bne.n	8001faa <ReadInputs+0xa8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <ReadInputs+0xa8a>
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <ReadInputs+0xb44>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <ReadInputs+0xa8a>
		BLaunchRequested = 0;
 8001f98:	4b32      	ldr	r3, [pc, #200]	; (8002064 <ReadInputs+0xb44>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, LAUNCH_RELEASE_EVT);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BDeclutchRequestInError && inputs->BDeclutchRequest && !BDeclutchRequested) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d112      	bne.n	8001fda <ReadInputs+0xaba>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00d      	beq.n	8001fda <ReadInputs+0xaba>
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <ReadInputs+0xb48>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <ReadInputs+0xaba>
		BDeclutchRequested = 1;
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <ReadInputs+0xb48>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_PRESS_EVT);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e016      	b.n	8002008 <ReadInputs+0xae8>
	}
	else if(!inputs->BDeclutchRequestInError && !inputs->BDeclutchRequest && BDeclutchRequested) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d111      	bne.n	8002008 <ReadInputs+0xae8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <ReadInputs+0xae8>
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <ReadInputs+0xb48>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <ReadInputs+0xae8>
		BDeclutchRequested = 0;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <ReadInputs+0xb48>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
		PushEvent(inputs, DECLUTCH_RELEASE_EVT);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]
	}

	if(!inputs->BrClutchPaddleInError) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800200e:	2b00      	cmp	r3, #0
 8002010:	d124      	bne.n	800205c <ReadInputs+0xb3c>
		if (inputs->rClutchPaddle >= CLUTCH_PADDLE_PRESSED_THRESHOLD && !BClutchPaddlePressed) {
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 8002018:	2b4f      	cmp	r3, #79	; 0x4f
 800201a:	dd0d      	ble.n	8002038 <ReadInputs+0xb18>
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <ReadInputs+0xb4c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <ReadInputs+0xb18>
			PushEvent(inputs, CLUTCH_PADDLE_PRESS_EVT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 1;
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <ReadInputs+0xb4c>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]



	// ---------------------------------------------------------------------------------------------------

}
 8002036:	e011      	b.n	800205c <ReadInputs+0xb3c>
		else if (inputs->rClutchPaddle <= CLUTCH_PADDLE_RELEASED_THRESHOLD && BClutchPaddlePressed) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f993 3069 	ldrsb.w	r3, [r3, #105]	; 0x69
 800203e:	2b00      	cmp	r3, #0
 8002040:	dc0c      	bgt.n	800205c <ReadInputs+0xb3c>
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <ReadInputs+0xb4c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <ReadInputs+0xb3c>
			PushEvent(inputs, CLUTCH_PADDLE_RELEASE_EVT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	601a      	str	r2, [r3, #0]
			BClutchPaddlePressed = 0;
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <ReadInputs+0xb4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200000c2 	.word	0x200000c2
 8002068:	200000c3 	.word	0x200000c3
 800206c:	200000c4 	.word	0x200000c4

08002070 <InitInputs>:

void InitInputs(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <InitInputs+0x1c>)
 8002076:	f001 fdf3 	bl	8003c60 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawValue, ADC_BUFFER_SIZE);
 800207a:	f44f 5289 	mov.w	r2, #4384	; 0x1120
 800207e:	4904      	ldr	r1, [pc, #16]	; (8002090 <InitInputs+0x20>)
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <InitInputs+0x1c>)
 8002082:	f001 fb03 	bl	800368c <HAL_ADC_Start_DMA>
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200000e4 	.word	0x200000e4
 8002090:	200002a0 	.word	0x200002a0

08002094 <CheckFaults>:

uint8_t CheckFaults(InputStruct *inputs) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	if(inputs->nFaultStatus) return 1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <CheckFaults+0x14>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <CheckFaults+0x16>
	return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef *hcan, uint32_t RxFifo) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	; 0x30
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxBuffer[8];

	if(HAL_CAN_GetRxMessage(hcan, RxFifo, &RxHeader, RxBuffer) != HAL_OK) {
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	f107 0214 	add.w	r2, r7, #20
 80020c6:	6839      	ldr	r1, [r7, #0]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f002 f9c6 	bl	800445a <HAL_CAN_GetRxMessage>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <CAN_RX+0x30>
		NCanGetRxErrorCount++;
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <CAN_RX+0x120>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <CAN_RX+0x120>)
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	e073      	b.n	80021cc <CAN_RX+0x118>
		return;
	}

	 //Don't forget to add and enable filters for each message
	switch(RxHeader.StdId) {
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80020ea:	d003      	beq.n	80020f4 <CAN_RX+0x40>
 80020ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020f0:	d05c      	beq.n	80021ac <CAN_RX+0xf8>
		 tCANECULastSeen = HAL_GetTick();
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
		 break;

	 default:
		 break;
 80020f2:	e06b      	b.n	80021cc <CAN_RX+0x118>
		 tCANSteeringWheelLastSeen = HAL_GetTick();
 80020f4:	f001 f9c4 	bl	8003480 <HAL_GetTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a37      	ldr	r2, [pc, #220]	; (80021d8 <CAN_RX+0x124>)
 80020fc:	6013      	str	r3, [r2, #0]
		 BUpShiftButtonCANInError 		= (RxBuffer[0] >> 0) & 0x01;
 80020fe:	7b3b      	ldrb	r3, [r7, #12]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4b35      	ldr	r3, [pc, #212]	; (80021dc <CAN_RX+0x128>)
 8002108:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCANInError 		= (RxBuffer[0] >> 1) & 0x01;
 800210a:	7b3b      	ldrb	r3, [r7, #12]
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <CAN_RX+0x12c>)
 8002118:	701a      	strb	r2, [r3, #0]
		 BrClutchPaddleRawInErrorCAN 	= (RxBuffer[0] >> 6) & 0x01;
 800211a:	7b3b      	ldrb	r3, [r7, #12]
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	b2db      	uxtb	r3, r3
 8002120:	b25b      	sxtb	r3, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	b25a      	sxtb	r2, r3
 8002128:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <CAN_RX+0x130>)
 800212a:	701a      	strb	r2, [r3, #0]
		 BUpShiftButtonCAN 				= (RxBuffer[1] >> 0) & 0x01;
 800212c:	7b7b      	ldrb	r3, [r7, #13]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <CAN_RX+0x134>)
 8002136:	701a      	strb	r2, [r3, #0]
		 BDnShiftButtonCAN 				= (RxBuffer[1] >> 1) & 0x01;
 8002138:	7b7b      	ldrb	r3, [r7, #13]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <CAN_RX+0x138>)
 8002146:	701a      	strb	r2, [r3, #0]
		 BButtonACAN	 				= (RxBuffer[1] >> 2) & 0x01;
 8002148:	7b7b      	ldrb	r3, [r7, #13]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <CAN_RX+0x13c>)
 8002156:	701a      	strb	r2, [r3, #0]
		 BButtonBCAN	 				= (RxBuffer[1] >> 3) & 0x01;
 8002158:	7b7b      	ldrb	r3, [r7, #13]
 800215a:	08db      	lsrs	r3, r3, #3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <CAN_RX+0x140>)
 8002166:	701a      	strb	r2, [r3, #0]
		 BButtonCCAN	 				= (RxBuffer[1] >> 4) & 0x01;
 8002168:	7b7b      	ldrb	r3, [r7, #13]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <CAN_RX+0x144>)
 8002176:	701a      	strb	r2, [r3, #0]
		 BButtonDCAN	 				= (RxBuffer[1] >> 5) & 0x01;
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <CAN_RX+0x148>)
 8002186:	701a      	strb	r2, [r3, #0]
		 BButtonECAN	 				= (RxBuffer[1] >> 6) & 0x01;
 8002188:	7b7b      	ldrb	r3, [r7, #13]
 800218a:	099b      	lsrs	r3, r3, #6
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <CAN_RX+0x14c>)
 8002196:	701a      	strb	r2, [r3, #0]
		 BButtonFCAN	 				= (RxBuffer[1] >> 7) & 0x01;
 8002198:	7b7b      	ldrb	r3, [r7, #13]
 800219a:	09db      	lsrs	r3, r3, #7
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <CAN_RX+0x150>)
 80021a0:	701a      	strb	r2, [r3, #0]
		 rClutchPaddleRawCAN 			= RxBuffer[2];
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	b25a      	sxtb	r2, r3
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <CAN_RX+0x154>)
 80021a8:	701a      	strb	r2, [r3, #0]
		 break;
 80021aa:	e00f      	b.n	80021cc <CAN_RX+0x118>
		 tCANECULastSeen = HAL_GetTick();
 80021ac:	f001 f968 	bl	8003480 <HAL_GetTick>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <CAN_RX+0x158>)
 80021b4:	6013      	str	r3, [r2, #0]
		 nEngineRawCAN = (uint16_t)(RxBuffer[0] << 8 | RxBuffer[1]);
 80021b6:	7b3b      	ldrb	r3, [r7, #12]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	7b7b      	ldrb	r3, [r7, #13]
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <CAN_RX+0x15c>)
 80021c8:	801a      	strh	r2, [r3, #0]
		 break;
 80021ca:	bf00      	nop
	 }
}
 80021cc:	3730      	adds	r7, #48	; 0x30
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200000de 	.word	0x200000de
 80021d8:	200000d4 	.word	0x200000d4
 80021dc:	200000c6 	.word	0x200000c6
 80021e0:	200000c8 	.word	0x200000c8
 80021e4:	200000d0 	.word	0x200000d0
 80021e8:	200000c5 	.word	0x200000c5
 80021ec:	200000c7 	.word	0x200000c7
 80021f0:	200000c9 	.word	0x200000c9
 80021f4:	200000ca 	.word	0x200000ca
 80021f8:	200000cb 	.word	0x200000cb
 80021fc:	200000cc 	.word	0x200000cc
 8002200:	200000cd 	.word	0x200000cd
 8002204:	200000ce 	.word	0x200000ce
 8002208:	200000cf 	.word	0x200000cf
 800220c:	200000d8 	.word	0x200000d8
 8002210:	200000d2 	.word	0x200000d2

08002214 <MyHalfBufferAverage>:
    }
    return 1; // If no match found, return error!
}


uint16_t MyHalfBufferAverage(uint16_t *buffer, uint16_t halfsize, uint8_t side, uint8_t offset) {
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	807b      	strh	r3, [r7, #2]
 8002226:	460b      	mov	r3, r1
 8002228:	707b      	strb	r3, [r7, #1]
 800222a:	4613      	mov	r3, r2
 800222c:	703b      	strb	r3, [r7, #0]

	uint32_t Accumulator = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
	uint16_t SideOffset = (side == 1 ? halfsize : 0);
 8002232:	787b      	ldrb	r3, [r7, #1]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <MyHalfBufferAverage+0x28>
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	e000      	b.n	800223e <MyHalfBufferAverage+0x2a>
 800223c:	2300      	movs	r3, #0
 800223e:	823b      	strh	r3, [r7, #16]
	uint16_t maxArrayIndex = halfsize / ADC_NUMBER_OF_CHANNELS;
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	81fb      	strh	r3, [r7, #14]

 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	827b      	strh	r3, [r7, #18]
 800224a:	e010      	b.n	800226e <MyHalfBufferAverage+0x5a>
		Accumulator += buffer[(i * ADC_NUMBER_OF_CHANNELS) + offset + SideOffset];
 800224c:	8a7b      	ldrh	r3, [r7, #18]
 800224e:	00da      	lsls	r2, r3, #3
 8002250:	783b      	ldrb	r3, [r7, #0]
 8002252:	441a      	add	r2, r3
 8002254:	8a3b      	ldrh	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
 	for(uint16_t i=0; i< maxArrayIndex; i++) {
 8002268:	8a7b      	ldrh	r3, [r7, #18]
 800226a:	3301      	adds	r3, #1
 800226c:	827b      	strh	r3, [r7, #18]
 800226e:	8a7a      	ldrh	r2, [r7, #18]
 8002270:	89fb      	ldrh	r3, [r7, #14]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3ea      	bcc.n	800224c <MyHalfBufferAverage+0x38>
	}

	Accumulator /= maxArrayIndex;
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
	return (uint16_t)Accumulator;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	b29b      	uxth	r3, r3

}
 8002284:	4618      	mov	r0, r3
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO0);
 8002296:	2100      	movs	r1, #0
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff0b 	bl	80020b4 <CAN_RX>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	CAN_RX(hcan, CAN_RX_FIFO1);
 80022ae:	2101      	movs	r1, #1
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff feff 	bl	80020b4 <CAN_RX>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	NCANErrorCount++;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_CAN_ErrorCallback+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_CAN_ErrorCallback+0x20>)
 80022d4:	701a      	strb	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	200000dc 	.word	0x200000dc

080022e4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	// we enter here every time ADC_BUFFER_SIZE/2 samples have been moved to the adcRawValue buffer by the DMA

	if(hadc == &hadc1) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d107      	bne.n	8002304 <HAL_ADC_ConvHalfCpltCallback+0x20>
		NAdcBufferSide ^= 1;	// changes from 0 to 1
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f083 0301 	eor.w	r3, r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8002302:	701a      	strb	r2, [r3, #0]
	}
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	200000e4 	.word	0x200000e4
 8002314:	200000e0 	.word	0x200000e0

08002318 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800231c:	f3bf 8f4f 	dsb	sy
}
 8002320:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <__NVIC_SystemReset+0x24>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800232a:	4904      	ldr	r1, [pc, #16]	; (800233c <__NVIC_SystemReset+0x24>)
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_SystemReset+0x28>)
 800232e:	4313      	orrs	r3, r2
 8002330:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002332:	f3bf 8f4f 	dsb	sy
}
 8002336:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <__NVIC_SystemReset+0x20>
 800233c:	e000ed00 	.word	0xe000ed00
 8002340:	05fa0004 	.word	0x05fa0004

08002344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002348:	f001 f842 	bl	80033d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800234c:	f000 f83e 	bl	80023cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002350:	f000 fba4 	bl	8002a9c <MX_GPIO_Init>
  MX_DMA_Init();
 8002354:	f000 fb84 	bl	8002a60 <MX_DMA_Init>
  MX_TIM3_Init();
 8002358:	f000 fb0a 	bl	8002970 <MX_TIM3_Init>
  MX_ADC1_Init();
 800235c:	f000 f892 	bl	8002484 <MX_ADC1_Init>
  MX_CAN_Init();
 8002360:	f000 f932 	bl	80025c8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002364:	f000 fb52 	bl	8002a0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002368:	f000 fab6 	bl	80028d8 <MX_TIM2_Init>
  MX_TIM1_Init();
 800236c:	f000 fa14 	bl	8002798 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);	// Code Cycle timer with interrupt (100Hz)
 8002370:	4811      	ldr	r0, [pc, #68]	; (80023b8 <main+0x74>)
 8002372:	f003 fe8f 	bl	8006094 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);		// general 1MHz timer for timing
 8002376:	4811      	ldr	r0, [pc, #68]	; (80023bc <main+0x78>)
 8002378:	f003 fe42 	bl	8006000 <HAL_TIM_Base_Start>
  InitInputs();
 800237c:	f7ff fe78 	bl	8002070 <InitInputs>
  InitController(&Inputs,&Outputs);
 8002380:	490f      	ldr	r1, [pc, #60]	; (80023c0 <main+0x7c>)
 8002382:	4810      	ldr	r0, [pc, #64]	; (80023c4 <main+0x80>)
 8002384:	f7fe fbda 	bl	8000b3c <InitController>
  InitOutputs();
 8002388:	f000 fbfe 	bl	8002b88 <InitOutputs>

  HAL_Delay(50);	// we give some time to the peripherals to start and produce normal values
 800238c:	2032      	movs	r0, #50	; 0x32
 800238e:	f001 f881 	bl	8003494 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <main+0x84>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0fa      	beq.n	8002392 <main+0x4e>
		  BCycleTimerFlag = 0;
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <main+0x84>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

		  ReadInputs(&Inputs);
 80023a2:	4808      	ldr	r0, [pc, #32]	; (80023c4 <main+0x80>)
 80023a4:	f7ff f8bc 	bl	8001520 <ReadInputs>
		  Controller(&Inputs,&Outputs);
 80023a8:	4905      	ldr	r1, [pc, #20]	; (80023c0 <main+0x7c>)
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <main+0x80>)
 80023ac:	f7fe fbea 	bl	8000b84 <Controller>
		  WriteOutputs(&Outputs);
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <main+0x7c>)
 80023b2:	f000 fbf7 	bl	8002ba4 <WriteOutputs>
	  if(BCycleTimerFlag) {		// BCycleTimerFlag becomes 1 in the Timer callback below
 80023b6:	e7ec      	b.n	8002392 <main+0x4e>
 80023b8:	20000210 	.word	0x20000210
 80023bc:	200001c8 	.word	0x200001c8
 80023c0:	2000256c 	.word	0x2000256c
 80023c4:	200024e4 	.word	0x200024e4
 80023c8:	200024e0 	.word	0x200024e0

080023cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b094      	sub	sp, #80	; 0x50
 80023d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d6:	2228      	movs	r2, #40	; 0x28
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f004 febc 	bl	8007158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002406:	2300      	movs	r3, #0
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240a:	2301      	movs	r3, #1
 800240c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800240e:	2302      	movs	r3, #2
 8002410:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002418:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800241c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800241e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002422:	4618      	mov	r0, r3
 8002424:	f003 f820 	bl	8005468 <HAL_RCC_OscConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800242e:	f000 fba1 	bl	8002b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002432:	230f      	movs	r3, #15
 8002434:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002436:	2302      	movs	r3, #2
 8002438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800243e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002442:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2102      	movs	r1, #2
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fa8c 	bl	800596c <HAL_RCC_ClockConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800245a:	f000 fb8b 	bl	8002b74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800245e:	2302      	movs	r3, #2
 8002460:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002462:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002466:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fc0c 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002476:	f000 fb7d 	bl	8002b74 <Error_Handler>
  }
}
 800247a:	bf00      	nop
 800247c:	3750      	adds	r7, #80	; 0x50
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002494:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <MX_ADC1_Init+0x13c>)
 8002496:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <MX_ADC1_Init+0x140>)
 8002498:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <MX_ADC1_Init+0x13c>)
 800249c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024a8:	4b45      	ldr	r3, [pc, #276]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024ae:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80024b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024b6:	4b42      	ldr	r3, [pc, #264]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80024be:	2208      	movs	r2, #8
 80024c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024c2:	483f      	ldr	r0, [pc, #252]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80024c4:	f001 f80a 	bl	80034dc <HAL_ADC_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80024ce:	f000 fb51 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80024da:	2303      	movs	r3, #3
 80024dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4837      	ldr	r0, [pc, #220]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80024e4:	f001 f9c2 	bl	800386c <HAL_ADC_ConfigChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80024ee:	f000 fb41 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024f6:	2302      	movs	r3, #2
 80024f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4830      	ldr	r0, [pc, #192]	; (80025c0 <MX_ADC1_Init+0x13c>)
 8002500:	f001 f9b4 	bl	800386c <HAL_ADC_ConfigChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800250a:	f000 fb33 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800250e:	2302      	movs	r3, #2
 8002510:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002512:	2303      	movs	r3, #3
 8002514:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4829      	ldr	r0, [pc, #164]	; (80025c0 <MX_ADC1_Init+0x13c>)
 800251c:	f001 f9a6 	bl	800386c <HAL_ADC_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002526:	f000 fb25 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800252a:	2303      	movs	r3, #3
 800252c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800252e:	2304      	movs	r3, #4
 8002530:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4822      	ldr	r0, [pc, #136]	; (80025c0 <MX_ADC1_Init+0x13c>)
 8002538:	f001 f998 	bl	800386c <HAL_ADC_ConfigChannel>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002542:	f000 fb17 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002546:	2304      	movs	r3, #4
 8002548:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800254a:	2305      	movs	r3, #5
 800254c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	4619      	mov	r1, r3
 8002552:	481b      	ldr	r0, [pc, #108]	; (80025c0 <MX_ADC1_Init+0x13c>)
 8002554:	f001 f98a 	bl	800386c <HAL_ADC_ConfigChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800255e:	f000 fb09 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002562:	2305      	movs	r3, #5
 8002564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002566:	2306      	movs	r3, #6
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4814      	ldr	r0, [pc, #80]	; (80025c0 <MX_ADC1_Init+0x13c>)
 8002570:	f001 f97c 	bl	800386c <HAL_ADC_ConfigChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800257a:	f000 fafb 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800257e:	2306      	movs	r3, #6
 8002580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002582:	2307      	movs	r3, #7
 8002584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	4619      	mov	r1, r3
 800258a:	480d      	ldr	r0, [pc, #52]	; (80025c0 <MX_ADC1_Init+0x13c>)
 800258c:	f001 f96e 	bl	800386c <HAL_ADC_ConfigChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8002596:	f000 faed 	bl	8002b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800259a:	2307      	movs	r3, #7
 800259c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800259e:	2308      	movs	r3, #8
 80025a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <MX_ADC1_Init+0x13c>)
 80025a8:	f001 f960 	bl	800386c <HAL_ADC_ConfigChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80025b2:	f000 fadf 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200000e4 	.word	0x200000e4
 80025c4:	40012400 	.word	0x40012400

080025c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b0a8      	sub	sp, #160	; 0xa0
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80025ce:	4b70      	ldr	r3, [pc, #448]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025d0:	4a70      	ldr	r2, [pc, #448]	; (8002794 <MX_CAN_Init+0x1cc>)
 80025d2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80025d4:	4b6e      	ldr	r3, [pc, #440]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025d6:	2204      	movs	r2, #4
 80025d8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80025da:	4b6d      	ldr	r3, [pc, #436]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025e0:	4b6b      	ldr	r3, [pc, #428]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80025e6:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025e8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80025ec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025ee:	4b68      	ldr	r3, [pc, #416]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025f4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80025f6:	4b66      	ldr	r3, [pc, #408]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80025fc:	4b64      	ldr	r3, [pc, #400]	; (8002790 <MX_CAN_Init+0x1c8>)
 80025fe:	2201      	movs	r2, #1
 8002600:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <MX_CAN_Init+0x1c8>)
 8002604:	2200      	movs	r2, #0
 8002606:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002608:	4b61      	ldr	r3, [pc, #388]	; (8002790 <MX_CAN_Init+0x1c8>)
 800260a:	2201      	movs	r2, #1
 800260c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800260e:	4b60      	ldr	r3, [pc, #384]	; (8002790 <MX_CAN_Init+0x1c8>)
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002614:	4b5e      	ldr	r3, [pc, #376]	; (8002790 <MX_CAN_Init+0x1c8>)
 8002616:	2200      	movs	r2, #0
 8002618:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800261a:	485d      	ldr	r0, [pc, #372]	; (8002790 <MX_CAN_Init+0x1c8>)
 800261c:	f001 fbce 	bl	8003dbc <HAL_CAN_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002626:	f000 faa5 	bl	8002b74 <Error_Handler>
  	  // like this the message has the chance to enter either FIFO and get received with an interrupt
  	  // We need to increment the banks to be able to have all filters active at the same time and not overwrite them

  	// STEERING WHEEL RECEIVE
   CAN_FilterTypeDef FilterConfig0;
   FilterConfig0.FilterIdHigh = SIU_RX_ID << 5 ;
 800262a:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800262e:	67bb      	str	r3, [r7, #120]	; 0x78
   FilterConfig0.FilterIdLow = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	67fb      	str	r3, [r7, #124]	; 0x7c
   FilterConfig0.FilterMaskIdHigh = 0xffe0;
 8002634:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   FilterConfig0.FilterMaskIdLow = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   FilterConfig0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   FilterConfig0.FilterBank = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   FilterConfig0.SlaveStartFilterBank = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   FilterConfig0.FilterMode = CAN_FILTERMODE_IDMASK;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   FilterConfig0.FilterScale = CAN_FILTERSCALE_32BIT;
 800265a:	2301      	movs	r3, #1
 800265c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   FilterConfig0.FilterActivation = ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig0)!=HAL_OK) {
 8002666:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800266a:	4619      	mov	r1, r3
 800266c:	4848      	ldr	r0, [pc, #288]	; (8002790 <MX_CAN_Init+0x1c8>)
 800266e:	f001 fca0 	bl	8003fb2 <HAL_CAN_ConfigFilter>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_CAN_Init+0xb4>
 	  Error_Handler();
 8002678:	f000 fa7c 	bl	8002b74 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig01;
   FilterConfig01.FilterIdHigh = SIU_RX_ID << 5 ;
 800267c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002680:	653b      	str	r3, [r7, #80]	; 0x50
   FilterConfig01.FilterIdLow = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	657b      	str	r3, [r7, #84]	; 0x54
   FilterConfig01.FilterMaskIdHigh = 0xffe0;
 8002686:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800268a:	65bb      	str	r3, [r7, #88]	; 0x58
   FilterConfig01.FilterMaskIdLow = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	65fb      	str	r3, [r7, #92]	; 0x5c
   FilterConfig01.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002690:	2301      	movs	r3, #1
 8002692:	663b      	str	r3, [r7, #96]	; 0x60
   FilterConfig01.FilterBank = 1;
 8002694:	2301      	movs	r3, #1
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
   FilterConfig01.SlaveStartFilterBank = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	677b      	str	r3, [r7, #116]	; 0x74
   FilterConfig01.FilterMode = CAN_FILTERMODE_IDMASK;
 800269c:	2300      	movs	r3, #0
 800269e:	66bb      	str	r3, [r7, #104]	; 0x68
   FilterConfig01.FilterScale = CAN_FILTERSCALE_32BIT;
 80026a0:	2301      	movs	r3, #1
 80026a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   FilterConfig01.FilterActivation = ENABLE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	673b      	str	r3, [r7, #112]	; 0x70

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig01)!=HAL_OK) {
 80026a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026ac:	4619      	mov	r1, r3
 80026ae:	4838      	ldr	r0, [pc, #224]	; (8002790 <MX_CAN_Init+0x1c8>)
 80026b0:	f001 fc7f 	bl	8003fb2 <HAL_CAN_ConfigFilter>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_CAN_Init+0xf6>
 	  Error_Handler();
 80026ba:	f000 fa5b 	bl	8002b74 <Error_Handler>
 	}

 	// ECU RECEIVE
   CAN_FilterTypeDef FilterConfig1;
   FilterConfig1.FilterIdHigh = ECU_RX_ID << 5 ;
 80026be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
   FilterConfig1.FilterIdLow = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   FilterConfig1.FilterMaskIdHigh = 0xffe0;
 80026c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
   FilterConfig1.FilterMaskIdLow = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
   FilterConfig1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
   FilterConfig1.FilterBank = 2;
 80026d6:	2302      	movs	r3, #2
 80026d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   FilterConfig1.SlaveStartFilterBank = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   FilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80026de:	2300      	movs	r3, #0
 80026e0:	643b      	str	r3, [r7, #64]	; 0x40
   FilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80026e2:	2301      	movs	r3, #1
 80026e4:	647b      	str	r3, [r7, #68]	; 0x44
   FilterConfig1.FilterActivation = ENABLE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig1)!=HAL_OK) {
 80026ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ee:	4619      	mov	r1, r3
 80026f0:	4827      	ldr	r0, [pc, #156]	; (8002790 <MX_CAN_Init+0x1c8>)
 80026f2:	f001 fc5e 	bl	8003fb2 <HAL_CAN_ConfigFilter>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_CAN_Init+0x138>
 	  Error_Handler();
 80026fc:	f000 fa3a 	bl	8002b74 <Error_Handler>
 	}

   CAN_FilterTypeDef FilterConfig11;
   FilterConfig11.FilterIdHigh = ECU_RX_ID << 5 ;
 8002700:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002704:	603b      	str	r3, [r7, #0]
   FilterConfig11.FilterIdLow = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
   FilterConfig11.FilterMaskIdHigh = 0xffe0;
 800270a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800270e:	60bb      	str	r3, [r7, #8]
   FilterConfig11.FilterMaskIdLow = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
   FilterConfig11.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
   FilterConfig11.FilterBank = 3;
 8002718:	2303      	movs	r3, #3
 800271a:	617b      	str	r3, [r7, #20]
   FilterConfig11.SlaveStartFilterBank = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
   FilterConfig11.FilterMode = CAN_FILTERMODE_IDMASK;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
   FilterConfig11.FilterScale = CAN_FILTERSCALE_32BIT;
 8002724:	2301      	movs	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
   FilterConfig11.FilterActivation = ENABLE;
 8002728:	2301      	movs	r3, #1
 800272a:	623b      	str	r3, [r7, #32]

   if(HAL_CAN_ConfigFilter(&hcan, &FilterConfig11)!=HAL_OK) {
 800272c:	463b      	mov	r3, r7
 800272e:	4619      	mov	r1, r3
 8002730:	4817      	ldr	r0, [pc, #92]	; (8002790 <MX_CAN_Init+0x1c8>)
 8002732:	f001 fc3e 	bl	8003fb2 <HAL_CAN_ConfigFilter>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_CAN_Init+0x178>
 	  Error_Handler();
 800273c:	f000 fa1a 	bl	8002b74 <Error_Handler>
 	}

   // we activate the notifications (interrupts) for FIFO0
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002740:	2102      	movs	r1, #2
 8002742:	4813      	ldr	r0, [pc, #76]	; (8002790 <MX_CAN_Init+0x1c8>)
 8002744:	f001 ffaa 	bl	800469c <HAL_CAN_ActivateNotification>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_CAN_Init+0x18a>
	   Error_Handler();
 800274e:	f000 fa11 	bl	8002b74 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for FIFO1
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8002752:	2110      	movs	r1, #16
 8002754:	480e      	ldr	r0, [pc, #56]	; (8002790 <MX_CAN_Init+0x1c8>)
 8002756:	f001 ffa1 	bl	800469c <HAL_CAN_ActivateNotification>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_CAN_Init+0x19c>
	   Error_Handler();
 8002760:	f000 fa08 	bl	8002b74 <Error_Handler>
 	}
   // we activate the notifications (interrupts) for all error codes
   if(HAL_CAN_ActivateNotification(&hcan, (CAN_IT_ERROR_WARNING | CAN_IT_ERROR_PASSIVE | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE | CAN_IT_ERROR)) != HAL_OK) {
 8002764:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 8002768:	4809      	ldr	r0, [pc, #36]	; (8002790 <MX_CAN_Init+0x1c8>)
 800276a:	f001 ff97 	bl	800469c <HAL_CAN_ActivateNotification>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_CAN_Init+0x1b0>
	   Error_Handler();
 8002774:	f000 f9fe 	bl	8002b74 <Error_Handler>
   }
   // we start the CAN
   if(HAL_CAN_Start(&hcan)!=HAL_OK) {
 8002778:	4805      	ldr	r0, [pc, #20]	; (8002790 <MX_CAN_Init+0x1c8>)
 800277a:	f001 fce3 	bl	8004144 <HAL_CAN_Start>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_CAN_Init+0x1c0>
 	  Error_Handler();
 8002784:	f000 f9f6 	bl	8002b74 <Error_Handler>
   }

  /* USER CODE END CAN_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	37a0      	adds	r7, #160	; 0xa0
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000158 	.word	0x20000158
 8002794:	40006400 	.word	0x40006400

08002798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b096      	sub	sp, #88	; 0x58
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]
 80027c6:	615a      	str	r2, [r3, #20]
 80027c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	2220      	movs	r2, #32
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 fcc1 	bl	8007158 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027d6:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <MX_TIM1_Init+0x138>)
 80027d8:	4a3e      	ldr	r2, [pc, #248]	; (80028d4 <MX_TIM1_Init+0x13c>)
 80027da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80027dc:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <MX_TIM1_Init+0x138>)
 80027de:	2247      	movs	r2, #71	; 0x47
 80027e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <MX_TIM1_Init+0x138>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <MX_TIM1_Init+0x138>)
 80027ea:	f240 52db 	movw	r2, #1499	; 0x5db
 80027ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <MX_TIM1_Init+0x138>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <MX_TIM1_Init+0x138>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <MX_TIM1_Init+0x138>)
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002802:	4833      	ldr	r0, [pc, #204]	; (80028d0 <MX_TIM1_Init+0x138>)
 8002804:	f003 fbac 	bl	8005f60 <HAL_TIM_Base_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800280e:	f000 f9b1 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002818:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800281c:	4619      	mov	r1, r3
 800281e:	482c      	ldr	r0, [pc, #176]	; (80028d0 <MX_TIM1_Init+0x138>)
 8002820:	f003 feac 	bl	800657c <HAL_TIM_ConfigClockSource>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800282a:	f000 f9a3 	bl	8002b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800282e:	4828      	ldr	r0, [pc, #160]	; (80028d0 <MX_TIM1_Init+0x138>)
 8002830:	f003 fc82 	bl	8006138 <HAL_TIM_PWM_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800283a:	f000 f99b 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002846:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800284a:	4619      	mov	r1, r3
 800284c:	4820      	ldr	r0, [pc, #128]	; (80028d0 <MX_TIM1_Init+0x138>)
 800284e:	f004 fa9f 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002858:	f000 f98c 	bl	8002b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800285c:	2360      	movs	r3, #96	; 0x60
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800286c:	2304      	movs	r3, #4
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002870:	2300      	movs	r3, #0
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002874:	2300      	movs	r3, #0
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287c:	2204      	movs	r2, #4
 800287e:	4619      	mov	r1, r3
 8002880:	4813      	ldr	r0, [pc, #76]	; (80028d0 <MX_TIM1_Init+0x138>)
 8002882:	f003 fdb9 	bl	80063f8 <HAL_TIM_PWM_ConfigChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800288c:	f000 f972 	bl	8002b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4807      	ldr	r0, [pc, #28]	; (80028d0 <MX_TIM1_Init+0x138>)
 80028b4:	f004 faca 	bl	8006e4c <HAL_TIMEx_ConfigBreakDeadTime>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80028be:	f000 f959 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028c2:	4803      	ldr	r0, [pc, #12]	; (80028d0 <MX_TIM1_Init+0x138>)
 80028c4:	f000 fb9c 	bl	8003000 <HAL_TIM_MspPostInit>

}
 80028c8:	bf00      	nop
 80028ca:	3758      	adds	r7, #88	; 0x58
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000180 	.word	0x20000180
 80028d4:	40012c00 	.word	0x40012c00

080028d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ec:	463b      	mov	r3, r7
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <MX_TIM2_Init+0x94>)
 80028f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <MX_TIM2_Init+0x94>)
 80028fe:	2247      	movs	r2, #71	; 0x47
 8002900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <MX_TIM2_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <MX_TIM2_Init+0x94>)
 800290a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800290e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <MX_TIM2_Init+0x94>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <MX_TIM2_Init+0x94>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800291c:	4813      	ldr	r0, [pc, #76]	; (800296c <MX_TIM2_Init+0x94>)
 800291e:	f003 fb1f 	bl	8005f60 <HAL_TIM_Base_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002928:	f000 f924 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <MX_TIM2_Init+0x94>)
 800293a:	f003 fe1f 	bl	800657c <HAL_TIM_ConfigClockSource>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002944:	f000 f916 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002950:	463b      	mov	r3, r7
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_TIM2_Init+0x94>)
 8002956:	f004 fa1b 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002960:	f000 f908 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200001c8 	.word	0x200001c8

08002970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002984:	463b      	mov	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_TIM3_Init+0x94>)
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <MX_TIM3_Init+0x98>)
 8002990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_TIM3_Init+0x94>)
 8002994:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_TIM3_Init+0x94>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029a2:	2263      	movs	r2, #99	; 0x63
 80029a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029b2:	4814      	ldr	r0, [pc, #80]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029b4:	f003 fad4 	bl	8005f60 <HAL_TIM_Base_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80029be:	f000 f8d9 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	4619      	mov	r1, r3
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029d0:	f003 fdd4 	bl	800657c <HAL_TIM_ConfigClockSource>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80029da:	f000 f8cb 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029e6:	463b      	mov	r3, r7
 80029e8:	4619      	mov	r1, r3
 80029ea:	4806      	ldr	r0, [pc, #24]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029ec:	f004 f9d0 	bl	8006d90 <HAL_TIMEx_MasterConfigSynchronization>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80029f6:	f000 f8bd 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000210 	.word	0x20000210
 8002a08:	40000400 	.word	0x40000400

08002a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <MX_USART1_UART_Init+0x50>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_USART1_UART_Init+0x4c>)
 8002a44:	f004 fa89 	bl	8006f5a <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a4e:	f000 f891 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000258 	.word	0x20000258
 8002a5c:	40013800 	.word	0x40013800

08002a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_DMA_Init+0x38>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <MX_DMA_Init+0x38>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6153      	str	r3, [r2, #20]
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_DMA_Init+0x38>)
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	200b      	movs	r0, #11
 8002a84:	f002 f917 	bl	8004cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a88:	200b      	movs	r0, #11
 8002a8a:	f002 f930 	bl	8004cee <HAL_NVIC_EnableIRQ>

}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000

08002a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa2:	f107 0310 	add.w	r3, r7, #16
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002ab6:	f043 0320 	orr.w	r3, r3, #32
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002ae6:	f043 0308 	orr.w	r3, r3, #8
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_GPIO_Init+0xa8>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin, GPIO_PIN_RESET);
 8002af8:	2200      	movs	r2, #0
 8002afa:	f44f 4134 	mov.w	r1, #46080	; 0xb400
 8002afe:	4812      	ldr	r0, [pc, #72]	; (8002b48 <MX_GPIO_Init+0xac>)
 8002b00:	f002 fc99 	bl	8005436 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN01_Pin DIN02_Pin DIN01B3_Pin DIN02B4_Pin
                           DIN03_Pin DIN04_Pin */
  GPIO_InitStruct.Pin = DIN01_Pin|DIN02_Pin|DIN01B3_Pin|DIN02B4_Pin
 8002b04:	237b      	movs	r3, #123	; 0x7b
 8002b06:	613b      	str	r3, [r7, #16]
                          |DIN03_Pin|DIN04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	4619      	mov	r1, r3
 8002b16:	480c      	ldr	r0, [pc, #48]	; (8002b48 <MX_GPIO_Init+0xac>)
 8002b18:	f002 faf2 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DO03_Pin DO02_Pin DO04_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DO03_Pin|DO02_Pin|DO04_Pin;
 8002b1c:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8002b20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 0310 	add.w	r3, r7, #16
 8002b32:	4619      	mov	r1, r3
 8002b34:	4804      	ldr	r0, [pc, #16]	; (8002b48 <MX_GPIO_Init+0xac>)
 8002b36:	f002 fae3 	bl	8005100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40010c00 	.word	0x40010c00

08002b4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

	if(htim == &htim3) {	// Code Cycle interrupt
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d102      	bne.n	8002b62 <HAL_TIM_PeriodElapsedCallback+0x16>
		BCycleTimerFlag = 1;
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
	}
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	20000210 	.word	0x20000210
 8002b70:	200024e0 	.word	0x200024e0

08002b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b78:	b672      	cpsid	i
}
 8002b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002b7c:	20c8      	movs	r0, #200	; 0xc8
 8002b7e:	f000 fc89 	bl	8003494 <HAL_Delay>
	  NVIC_SystemReset();
 8002b82:	f7ff fbc9 	bl	8002318 <__NVIC_SystemReset>
	...

08002b88 <InitOutputs>:
void shiftdown_activation(OutputStruct *output);
void neutral_activation(OutputStruct *output);
void end_of_shift(OutputStruct *output);


void InitOutputs(void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0

	// TODO: start the timer with initial target (CLUTCH_REST_POSITION) the released value (make the #define and also use it in the maps??)

	// set the duty cycle to 0 before enabling the PWM in order to avoid unwanted movement
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, 0);
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <InitOutputs+0x18>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002b94:	2104      	movs	r1, #4
 8002b96:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <InitOutputs+0x18>)
 8002b98:	f004 f85c 	bl	8006c54 <HAL_TIMEx_PWMN_Start>
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000180 	.word	0x20000180

08002ba4 <WriteOutputs>:

void WriteOutputs(OutputStruct *output) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

	// CLUTCH

	// Clamping to avoid out of bounds values
	xClutchTargetOut = CLAMP(output->xClutchTarget, xCLUTCH_ABSOLUTE_MIN, xCLUTCH_ABSOLUTE_MAX);
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <WriteOutputs+0xf4>)
 8002bae:	f240 5264 	movw	r2, #1380	; 0x564
 8002bb2:	801a      	strh	r2, [r3, #0]
	// The output for the clutch servo is a +5V (or 3.3V) pulse 50% duty cycle 1500us +- 400us (1500 central position, 1900 or 1100 is fully pressed) to

	// we double the auto reload counter to multiply the frequency by 2
	// (the servo expects the pulse to be 900 - 2100 usec) so the period of the pulse needs to be the double,
	//since the duty cycle is 50%)
	xClutchTargetOut *= 2;
 8002bb4:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <WriteOutputs+0xf4>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <WriteOutputs+0xf4>)
 8002bbe:	801a      	strh	r2, [r3, #0]

	// think about not putting the duty cycle at 50% but to try and fine tune the compare and autoreload.
	// think about the auto preload function. It is now enabled, is it correct?
	// update the Timer Registers, using the TIM_Exported_Macros
//	__HAL_TIM_SET_PRESCALER(&htim1, nTimerPrescaler - 1);
	__HAL_TIM_SET_AUTORELOAD(&htim1, xClutchTargetOut -1 );
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <WriteOutputs+0xf4>)
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <WriteOutputs+0xf8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bcc:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <WriteOutputs+0xf4>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <WriteOutputs+0xf8>)
 8002bd6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2, xClutchTargetOut/2);
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <WriteOutputs+0xf4>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <WriteOutputs+0xf8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38


	// Shifting Ports
	// TODO: Think about doing a check if both requests are 1 in order to not do nothing or to always give priority to up or down shift
	HAL_GPIO_WritePin(DO03_GPIO_Port, DO03_Pin, output->BUpShiftPortState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7cdb      	ldrb	r3, [r3, #19]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bf0:	482b      	ldr	r0, [pc, #172]	; (8002ca0 <WriteOutputs+0xfc>)
 8002bf2:	f002 fc20 	bl	8005436 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DO02_GPIO_Port, DO02_Pin, output->BDnShiftPortState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7d1b      	ldrb	r3, [r3, #20]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c00:	4827      	ldr	r0, [pc, #156]	; (8002ca0 <WriteOutputs+0xfc>)
 8002c02:	f002 fc18 	bl	8005436 <HAL_GPIO_WritePin>


	// Toggle Switches
	// output->BSWLEDA

	uint8_t BLaunchButtonCANSW = output->BLaunchControl;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c0c:	73fb      	strb	r3, [r7, #15]
	uint8_t BSparkCutCANSW = output->BSparkCut;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c14:	73bb      	strb	r3, [r7, #14]


	CANTxBuffer[6] = 0;
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <WriteOutputs+0x100>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (BLaunchButtonCANSW				& 0x01) << 0;
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <WriteOutputs+0x100>)
 8002c1e:	799b      	ldrb	r3, [r3, #6]
 8002c20:	b25a      	sxtb	r2, r3
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	b25b      	sxtb	r3, r3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <WriteOutputs+0x100>)
 8002c34:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (BSparkCutCANSW 					& 0x01) << 1;
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <WriteOutputs+0x100>)
 8002c38:	799b      	ldrb	r3, [r3, #6]
 8002c3a:	b25a      	sxtb	r2, r3
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <WriteOutputs+0x100>)
 8002c50:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0							  	& 0x01) << 2;
 8002c52:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <WriteOutputs+0x100>)
 8002c54:	799a      	ldrb	r2, [r3, #6]
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <WriteOutputs+0x100>)
 8002c58:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 3;
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <WriteOutputs+0x100>)
 8002c5c:	799a      	ldrb	r2, [r3, #6]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <WriteOutputs+0x100>)
 8002c60:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0							    & 0x01) << 4;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <WriteOutputs+0x100>)
 8002c64:	799a      	ldrb	r2, [r3, #6]
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <WriteOutputs+0x100>)
 8002c68:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 5;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <WriteOutputs+0x100>)
 8002c6c:	799a      	ldrb	r2, [r3, #6]
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <WriteOutputs+0x100>)
 8002c70:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 6;
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <WriteOutputs+0x100>)
 8002c74:	799a      	ldrb	r2, [r3, #6]
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <WriteOutputs+0x100>)
 8002c78:	719a      	strb	r2, [r3, #6]
	CANTxBuffer[6] |= (0								& 0x01) << 7;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <WriteOutputs+0x100>)
 8002c7c:	799a      	ldrb	r2, [r3, #6]
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <WriteOutputs+0x100>)
 8002c80:	719a      	strb	r2, [r3, #6]


	CAN_TX(ECU_SWITCH_TX_ID, 8 , CANTxBuffer);
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <WriteOutputs+0x100>)
 8002c84:	2108      	movs	r1, #8
 8002c86:	f240 6066 	movw	r0, #1638	; 0x666
 8002c8a:	f000 f80d 	bl	8002ca8 <CAN_TX>
	// CAN
	//	CAN_TX(ECU_SWITCH_TX_ID, 8 , CANTxBuffer);
	// add the info of the shutDown (DriverKill) in the CAN for others to see
	// send the command for the outputs of the steering (LEDS) (think about sending frequency and duty instead of On-OFF
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200025a8 	.word	0x200025a8
 8002c9c:	20000180 	.word	0x20000180
 8002ca0:	40010c00 	.word	0x40010c00
 8002ca4:	2000259c 	.word	0x2000259c

08002ca8 <CAN_TX>:

void CAN_TX(uint32_t ID, uint8_t dlc, uint8_t* data) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	72fb      	strb	r3, [r7, #11]

	CAN_TxHeaderTypeDef CanTxHeader;
	uint32_t nCanTxMailbox;

	CanTxHeader.DLC = dlc;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
	CanTxHeader.StdId = ID;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	617b      	str	r3, [r7, #20]
	CanTxHeader.IDE = CAN_ID_STD;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
	CanTxHeader.RTR = CAN_RTR_DATA;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]

	uint32_t wait = __HAL_TIM_GET_COUNTER(&htim2) + CAN_TX_TIMEOUT;
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <CAN_TX+0xc4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	33c8      	adds	r3, #200	; 0xc8
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	while((HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) && (__HAL_TIM_GET_COUNTER(&htim2) < wait));
 8002cd0:	bf00      	nop
 8002cd2:	4827      	ldr	r0, [pc, #156]	; (8002d70 <CAN_TX+0xc8>)
 8002cd4:	f001 fb8d 	bl	80043f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <CAN_TX+0x42>
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <CAN_TX+0xc4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d8f3      	bhi.n	8002cd2 <CAN_TX+0x2a>

	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0) {	// all mailboxes are still filled
 8002cea:	4821      	ldr	r0, [pc, #132]	; (8002d70 <CAN_TX+0xc8>)
 8002cec:	f001 fb81 	bl	80043f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d105      	bne.n	8002d02 <CAN_TX+0x5a>
		HAL_CAN_AbortTxRequest(&hcan, nCanOldestMailbox);
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <CAN_TX+0xcc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	481c      	ldr	r0, [pc, #112]	; (8002d70 <CAN_TX+0xc8>)
 8002cfe:	f001 fb34 	bl	800436a <HAL_CAN_AbortTxRequest>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, data, &nCanTxMailbox) != HAL_OK) {
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	f107 0114 	add.w	r1, r7, #20
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4818      	ldr	r0, [pc, #96]	; (8002d70 <CAN_TX+0xc8>)
 8002d0e:	f001 fa5d 	bl	80041cc <HAL_CAN_AddTxMessage>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <CAN_TX+0x82>
		print("Failed to Add Message can 1\n");
 8002d18:	4817      	ldr	r0, [pc, #92]	; (8002d78 <CAN_TX+0xd0>)
 8002d1a:	f000 fa73 	bl	8003204 <print>
		nCanTxErrorCount++;
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <CAN_TX+0xd4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <CAN_TX+0xd4>)
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e01c      	b.n	8002d64 <CAN_TX+0xbc>
		return;
	}

	// Mailbox aging adjustment
	if(nCanTxMailbox != nCanYoungestMailbox) {
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <CAN_TX+0xd8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d017      	beq.n	8002d64 <CAN_TX+0xbc>

		if(nCanTxMailbox != nCanSecondOldestMailbox) {
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <CAN_TX+0xdc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d00b      	beq.n	8002d56 <CAN_TX+0xae>
			nCanOldestMailbox = nCanSecondOldestMailbox;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <CAN_TX+0xdc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <CAN_TX+0xcc>)
 8002d44:	6013      	str	r3, [r2, #0]
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <CAN_TX+0xd8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <CAN_TX+0xdc>)
 8002d4c:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <CAN_TX+0xd8>)
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e006      	b.n	8002d64 <CAN_TX+0xbc>
		}
		else {
			nCanSecondOldestMailbox = nCanYoungestMailbox;
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <CAN_TX+0xd8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <CAN_TX+0xdc>)
 8002d5c:	6013      	str	r3, [r2, #0]
			nCanYoungestMailbox = nCanTxMailbox;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <CAN_TX+0xd8>)
 8002d62:	6013      	str	r3, [r2, #0]
		}
	}

}
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200001c8 	.word	0x200001c8
 8002d70:	20000158 	.word	0x20000158
 8002d74:	20000000 	.word	0x20000000
 8002d78:	08007b20 	.word	0x08007b20
 8002d7c:	200025a4 	.word	0x200025a4
 8002d80:	20000008 	.word	0x20000008
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_MspInit+0x5c>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_MspInit+0x5c>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6193      	str	r3, [r2, #24]
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_MspInit+0x5c>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_MspInit+0x5c>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_MspInit+0x5c>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_MspInit+0x5c>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_MspInit+0x60>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_MspInit+0x60>)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40010000 	.word	0x40010000

08002dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a29      	ldr	r2, [pc, #164]	; (8002eac <HAL_ADC_MspInit+0xc0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d14a      	bne.n	8002ea2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_ADC_MspInit+0xc4>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_ADC_MspInit+0xc4>)
 8002e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e16:	6193      	str	r3, [r2, #24]
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_ADC_MspInit+0xc4>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_ADC_MspInit+0xc4>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <HAL_ADC_MspInit+0xc4>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_ADC_MspInit+0xc4>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002e3c:	23ff      	movs	r3, #255	; 0xff
 8002e3e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e40:	2303      	movs	r3, #3
 8002e42:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e44:	f107 0310 	add.w	r3, r7, #16
 8002e48:	4619      	mov	r1, r3
 8002e4a:	481a      	ldr	r0, [pc, #104]	; (8002eb4 <HAL_ADC_MspInit+0xc8>)
 8002e4c:	f002 f958 	bl	8005100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e52:	4a1a      	ldr	r2, [pc, #104]	; (8002ebc <HAL_ADC_MspInit+0xd0>)
 8002e54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e86:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e88:	f001 ff4c 	bl	8004d24 <HAL_DMA_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002e92:	f7ff fe6f 	bl	8002b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e9a:	621a      	str	r2, [r3, #32]
 8002e9c:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <HAL_ADC_MspInit+0xcc>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40012400 	.word	0x40012400
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010800 	.word	0x40010800
 8002eb8:	20000114 	.word	0x20000114
 8002ebc:	40020008 	.word	0x40020008

08002ec0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <HAL_CAN_MspInit+0x9c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d139      	bne.n	8002f54 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_CAN_MspInit+0xa0>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_CAN_MspInit+0xa0>)
 8002ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eea:	61d3      	str	r3, [r2, #28]
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <HAL_CAN_MspInit+0xa0>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_CAN_MspInit+0xa0>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_CAN_MspInit+0xa0>)
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	6193      	str	r3, [r2, #24]
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_CAN_MspInit+0xa0>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	4619      	mov	r1, r3
 8002f24:	480f      	ldr	r0, [pc, #60]	; (8002f64 <HAL_CAN_MspInit+0xa4>)
 8002f26:	f002 f8eb 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f34:	2303      	movs	r3, #3
 8002f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4809      	ldr	r0, [pc, #36]	; (8002f64 <HAL_CAN_MspInit+0xa4>)
 8002f40:	f002 f8de 	bl	8005100 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	2014      	movs	r0, #20
 8002f4a:	f001 feb4 	bl	8004cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f4e:	2014      	movs	r0, #20
 8002f50:	f001 fecd 	bl	8004cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40006400 	.word	0x40006400
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010800 	.word	0x40010800

08002f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_TIM_Base_MspInit+0x8c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002f80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f84:	6193      	str	r3, [r2, #24]
 8002f86:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f92:	e02a      	b.n	8002fea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	61d3      	str	r3, [r2, #28]
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
}
 8002fb6:	e018      	b.n	8002fea <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <HAL_TIM_Base_MspInit+0x94>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d113      	bne.n	8002fea <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	61d3      	str	r3, [r2, #28]
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_TIM_Base_MspInit+0x90>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	201d      	movs	r0, #29
 8002fe0:	f001 fe69 	bl	8004cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fe4:	201d      	movs	r0, #29
 8002fe6:	f001 fe82 	bl	8004cee <HAL_NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40000400 	.word	0x40000400

08003000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0310 	add.w	r3, r7, #16
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a10      	ldr	r2, [pc, #64]	; (800305c <HAL_TIM_MspPostInit+0x5c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d118      	bne.n	8003052 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_TIM_MspPostInit+0x60>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_TIM_MspPostInit+0x60>)
 8003026:	f043 0308 	orr.w	r3, r3, #8
 800302a:	6193      	str	r3, [r2, #24]
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_TIM_MspPostInit+0x60>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB14     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = DO01_Pin;
 8003038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800303c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2302      	movs	r3, #2
 8003044:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO01_GPIO_Port, &GPIO_InitStruct);
 8003046:	f107 0310 	add.w	r3, r7, #16
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_TIM_MspPostInit+0x64>)
 800304e:	f002 f857 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40021000 	.word	0x40021000
 8003064:	40010c00 	.word	0x40010c00

08003068 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	f107 0310 	add.w	r3, r7, #16
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_UART_MspInit+0x8c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d131      	bne.n	80030ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_UART_MspInit+0x90>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_UART_MspInit+0x90>)
 800308e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_UART_MspInit+0x90>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_UART_MspInit+0x90>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <HAL_UART_MspInit+0x90>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_UART_MspInit+0x90>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c2:	2303      	movs	r3, #3
 80030c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	f107 0310 	add.w	r3, r7, #16
 80030ca:	4619      	mov	r1, r3
 80030cc:	480b      	ldr	r0, [pc, #44]	; (80030fc <HAL_UART_MspInit+0x94>)
 80030ce:	f002 f817 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	4619      	mov	r1, r3
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <HAL_UART_MspInit+0x94>)
 80030e8:	f002 f80a 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030ec:	bf00      	nop
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40010800 	.word	0x40010800

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003104:	e7fe      	b.n	8003104 <NMI_Handler+0x4>

08003106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <MemManage_Handler+0x4>

08003112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler+0x4>

0800311e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003146:	f000 f989 	bl	800345c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <DMA1_Channel1_IRQHandler+0x10>)
 8003156:	f001 fe9f 	bl	8004e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000114 	.word	0x20000114

08003164 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800316a:	f001 fabc 	bl	80046e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000158 	.word	0x20000158

08003178 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <TIM3_IRQHandler+0x10>)
 800317e:	f003 f833 	bl	80061e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000210 	.word	0x20000210

0800318c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <_sbrk+0x5c>)
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <_sbrk+0x60>)
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <_sbrk+0x64>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <_sbrk+0x64>)
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <_sbrk+0x68>)
 80031ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <_sbrk+0x64>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d207      	bcs.n	80031cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031bc:	f003 ffd4 	bl	8007168 <__errno>
 80031c0:	4603      	mov	r3, r0
 80031c2:	220c      	movs	r2, #12
 80031c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ca:	e009      	b.n	80031e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <_sbrk+0x64>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <_sbrk+0x64>)
 80031dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031de:	68fb      	ldr	r3, [r7, #12]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20005000 	.word	0x20005000
 80031ec:	00000400 	.word	0x00000400
 80031f0:	200025ac 	.word	0x200025ac
 80031f4:	20002700 	.word	0x20002700

080031f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <print>:
 *      Author: orestis
 */

#include <Utils.h>

void print(char *msg, ...) {
 8003204:	b40f      	push	{r0, r1, r2, r3}
 8003206:	b580      	push	{r7, lr}
 8003208:	b09a      	sub	sp, #104	; 0x68
 800320a:	af00      	add	r7, sp, #0

	char buff[100];
	va_list args;
	va_start(args, msg);
 800320c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003210:	603b      	str	r3, [r7, #0]
	vsprintf(buff, msg, args);
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003218:	4618      	mov	r0, r3
 800321a:	f003 ff93 	bl	8007144 <vsiprintf>
	va_end(args);

#if USB_DEBUG
	HAL_UART_Transmit(&huart3, (uint8_t *)buff, strlen(buff), 10);
#endif
}
 800321e:	bf00      	nop
 8003220:	3768      	adds	r7, #104	; 0x68
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003228:	b004      	add	sp, #16
 800322a:	4770      	bx	lr

0800322c <My2DMapInterpolate>:

uint8_t My2DMapInterpolate(int size, const float map[][size], float input, float *output, float minMargin, float maxMargin) {
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	68fe      	ldr	r6, [r7, #12]
 800323c:	1e73      	subs	r3, r6, #1
 800323e:	61bb      	str	r3, [r7, #24]
 8003240:	4632      	mov	r2, r6
 8003242:	2300      	movs	r3, #0
 8003244:	4614      	mov	r4, r2
 8003246:	461d      	mov	r5, r3
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	016b      	lsls	r3, r5, #5
 8003252:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003256:	0162      	lsls	r2, r4, #5
	float dx, dy;
	int i;

	if(input < map[0][0] - minMargin) {
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f97c 	bl	800055c <__aeabi_fsub>
 8003264:	4603      	mov	r3, r0
 8003266:	4619      	mov	r1, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fd fc1f 	bl	8000aac <__aeabi_fcmplt>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <My2DMapInterpolate+0x5a>
		// if input is less than the smaller element of the map minus a small margin,
		// we declare the input in error and assign the min value of the map
		*output = map[1][0];
 8003274:	4633      	mov	r3, r6
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	4413      	add	r3, r2
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	601a      	str	r2, [r3, #0]
		return 1;
 8003282:	2301      	movs	r3, #1
 8003284:	e07a      	b.n	800337c <My2DMapInterpolate+0x150>
	}
	if(input > map[0][size-1] + maxMargin) {
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f964 	bl	8000560 <__addsf3>
 8003298:	4603      	mov	r3, r0
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fc23 	bl	8000ae8 <__aeabi_fcmpgt>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <My2DMapInterpolate+0x94>
		// if input is greater than the largest element of the map plus a small margin,
		// we declare the input in error and assign the max value of the map
		*output = map[1][size-1];
 80032a8:	4633      	mov	r3, r6
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	4413      	add	r3, r2
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	3a01      	subs	r2, #1
 80032b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	601a      	str	r2, [r3, #0]
		return 1;
 80032bc:	2301      	movs	r3, #1
 80032be:	e05d      	b.n	800337c <My2DMapInterpolate+0x150>
	}

	// we find i so that map[0][i] < input < map[0][i+1]
	for(i=0; i<size-1; i++) {
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	e00e      	b.n	80032e4 <My2DMapInterpolate+0xb8>
		if(map[0][i+1] > input)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fbea 	bl	8000aac <__aeabi_fcmplt>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d108      	bne.n	80032f0 <My2DMapInterpolate+0xc4>
	for(i=0; i<size-1; i++) {
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	dbeb      	blt.n	80032c6 <My2DMapInterpolate+0x9a>
 80032ee:	e000      	b.n	80032f2 <My2DMapInterpolate+0xc6>
			break;
 80032f0:	bf00      	nop
	}

	// we interpolate
	dx = map[0][i+1] - map[0][i];
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	4619      	mov	r1, r3
 8003306:	f7fd f929 	bl	800055c <__aeabi_fsub>
 800330a:	4603      	mov	r3, r0
 800330c:	617b      	str	r3, [r7, #20]
	dy = map[1][i+1] - map[1][i];
 800330e:	4633      	mov	r3, r6
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	4413      	add	r3, r2
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	3201      	adds	r2, #1
 800331a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800331e:	4633      	mov	r3, r6
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332c:	4619      	mov	r1, r3
 800332e:	f7fd f915 	bl	800055c <__aeabi_fsub>
 8003332:	4603      	mov	r3, r0
 8003334:	613b      	str	r3, [r7, #16]

	*output = (float)(map[1][i] + (input - map[0][i]) * dy/dx);
 8003336:	4633      	mov	r3, r6
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	4413      	add	r3, r2
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd f904 	bl	800055c <__aeabi_fsub>
 8003354:	4603      	mov	r3, r0
 8003356:	6939      	ldr	r1, [r7, #16]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd fa09 	bl	8000770 <__aeabi_fmul>
 800335e:	4603      	mov	r3, r0
 8003360:	6979      	ldr	r1, [r7, #20]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd fab8 	bl	80008d8 <__aeabi_fdiv>
 8003368:	4603      	mov	r3, r0
 800336a:	4619      	mov	r1, r3
 800336c:	4620      	mov	r0, r4
 800336e:	f7fd f8f7 	bl	8000560 <__addsf3>
 8003372:	4603      	mov	r3, r0
 8003374:	461a      	mov	r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	601a      	str	r2, [r3, #0]
	return 0;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3724      	adds	r7, #36	; 0x24
 8003380:	46bd      	mov	sp, r7
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003384 <Reset_Handler>:
 8003384:	f7ff ff38 	bl	80031f8 <SystemInit>
 8003388:	480b      	ldr	r0, [pc, #44]	; (80033b8 <LoopFillZerobss+0xe>)
 800338a:	490c      	ldr	r1, [pc, #48]	; (80033bc <LoopFillZerobss+0x12>)
 800338c:	4a0c      	ldr	r2, [pc, #48]	; (80033c0 <LoopFillZerobss+0x16>)
 800338e:	2300      	movs	r3, #0
 8003390:	e002      	b.n	8003398 <LoopCopyDataInit>

08003392 <CopyDataInit>:
 8003392:	58d4      	ldr	r4, [r2, r3]
 8003394:	50c4      	str	r4, [r0, r3]
 8003396:	3304      	adds	r3, #4

08003398 <LoopCopyDataInit>:
 8003398:	18c4      	adds	r4, r0, r3
 800339a:	428c      	cmp	r4, r1
 800339c:	d3f9      	bcc.n	8003392 <CopyDataInit>
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <LoopFillZerobss+0x1a>)
 80033a0:	4c09      	ldr	r4, [pc, #36]	; (80033c8 <LoopFillZerobss+0x1e>)
 80033a2:	2300      	movs	r3, #0
 80033a4:	e001      	b.n	80033aa <LoopFillZerobss>

080033a6 <FillZerobss>:
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	3204      	adds	r2, #4

080033aa <LoopFillZerobss>:
 80033aa:	42a2      	cmp	r2, r4
 80033ac:	d3fb      	bcc.n	80033a6 <FillZerobss>
 80033ae:	f003 fee1 	bl	8007174 <__libc_init_array>
 80033b2:	f7fe ffc7 	bl	8002344 <main>
 80033b6:	4770      	bx	lr
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000068 	.word	0x20000068
 80033c0:	08007cc0 	.word	0x08007cc0
 80033c4:	20000068 	.word	0x20000068
 80033c8:	200026fc 	.word	0x200026fc

080033cc <ADC1_2_IRQHandler>:
 80033cc:	e7fe      	b.n	80033cc <ADC1_2_IRQHandler>
	...

080033d0 <HAL_Init>:
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <HAL_Init+0x28>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a07      	ldr	r2, [pc, #28]	; (80033f8 <HAL_Init+0x28>)
 80033da:	f043 0310 	orr.w	r3, r3, #16
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	2003      	movs	r0, #3
 80033e2:	f001 fc5d 	bl	8004ca0 <HAL_NVIC_SetPriorityGrouping>
 80033e6:	200f      	movs	r0, #15
 80033e8:	f000 f808 	bl	80033fc <HAL_InitTick>
 80033ec:	f7ff fccc 	bl	8002d88 <HAL_MspInit>
 80033f0:	2300      	movs	r3, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40022000 	.word	0x40022000

080033fc <HAL_InitTick>:
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_InitTick+0x54>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_InitTick+0x58>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003412:	fbb3 f3f1 	udiv	r3, r3, r1
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fc75 	bl	8004d0a <HAL_SYSTICK_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_InitTick+0x2e>
 8003426:	2301      	movs	r3, #1
 8003428:	e00e      	b.n	8003448 <HAL_InitTick+0x4c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b0f      	cmp	r3, #15
 800342e:	d80a      	bhi.n	8003446 <HAL_InitTick+0x4a>
 8003430:	2200      	movs	r2, #0
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f001 fc3d 	bl	8004cb6 <HAL_NVIC_SetPriority>
 800343c:	4a06      	ldr	r2, [pc, #24]	; (8003458 <HAL_InitTick+0x5c>)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_InitTick+0x4c>
 8003446:	2301      	movs	r3, #1
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	2000000c 	.word	0x2000000c
 8003454:	20000014 	.word	0x20000014
 8003458:	20000010 	.word	0x20000010

0800345c <HAL_IncTick>:
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_IncTick+0x1c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_IncTick+0x20>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4413      	add	r3, r2
 800346c:	4a03      	ldr	r2, [pc, #12]	; (800347c <HAL_IncTick+0x20>)
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	20000014 	.word	0x20000014
 800347c:	200025b0 	.word	0x200025b0

08003480 <HAL_GetTick>:
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <HAL_GetTick+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	200025b0 	.word	0x200025b0

08003494 <HAL_Delay>:
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	f7ff fff0 	bl	8003480 <HAL_GetTick>
 80034a0:	60b8      	str	r0, [r7, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d005      	beq.n	80034ba <HAL_Delay+0x26>
 80034ae:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <HAL_Delay+0x44>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	bf00      	nop
 80034bc:	f7ff ffe0 	bl	8003480 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d8f7      	bhi.n	80034bc <HAL_Delay+0x28>
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000014 	.word	0x20000014

080034dc <HAL_ADC_Init>:
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	2300      	movs	r3, #0
 80034e6:	75fb      	strb	r3, [r7, #23]
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_Init+0x22>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0be      	b.n	800367c <HAL_ADC_Init+0x1a0>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_ADC_Init+0x44>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fc66 	bl	8002dec <HAL_ADC_MspInit>
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 faf5 	bl	8003b10 <ADC_ConversionStop_Disable>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 8099 	bne.w	800366a <HAL_ADC_Init+0x18e>
 8003538:	7dfb      	ldrb	r3, [r7, #23]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8095 	bne.w	800366a <HAL_ADC_Init+0x18e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003548:	f023 0302 	bic.w	r3, r3, #2
 800354c:	f043 0202 	orr.w	r2, r3, #2
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	7b1b      	ldrb	r3, [r3, #12]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4313      	orrs	r3, r2
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003574:	d003      	beq.n	800357e <HAL_ADC_Init+0xa2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_ADC_Init+0xa8>
 800357e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003582:	e000      	b.n	8003586 <HAL_ADC_Init+0xaa>
 8003584:	2300      	movs	r3, #0
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7d1b      	ldrb	r3, [r3, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d119      	bne.n	80035c8 <HAL_ADC_Init+0xec>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7b1b      	ldrb	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_ADC_Init+0xd4>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	035a      	lsls	r2, r3, #13
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	e00b      	b.n	80035c8 <HAL_ADC_Init+0xec>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	4b28      	ldr	r3, [pc, #160]	; (8003684 <HAL_ADC_Init+0x1a8>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6093      	str	r3, [r2, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f8:	d003      	beq.n	8003602 <HAL_ADC_Init+0x126>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d104      	bne.n	800360c <HAL_ADC_Init+0x130>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	3b01      	subs	r3, #1
 8003608:	051b      	lsls	r3, r3, #20
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	430a      	orrs	r2, r1
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_ADC_Init+0x1ac>)
 8003628:	4013      	ands	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	429a      	cmp	r2, r3
 800362e:	d10b      	bne.n	8003648 <HAL_ADC_Init+0x16c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
 8003646:	e018      	b.n	800367a <HAL_ADC_Init+0x19e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f023 0312 	bic.w	r3, r3, #18
 8003650:	f043 0210 	orr.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
 8003668:	e007      	b.n	800367a <HAL_ADC_Init+0x19e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	ffe1f7fd 	.word	0xffe1f7fd
 8003688:	ff1f0efe 	.word	0xff1f0efe

0800368c <HAL_ADC_Start_DMA>:
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	2300      	movs	r3, #0
 800369a:	75fb      	strb	r3, [r7, #23]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a64      	ldr	r2, [pc, #400]	; (8003834 <HAL_ADC_Start_DMA+0x1a8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_ADC_Start_DMA+0x24>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a63      	ldr	r2, [pc, #396]	; (8003838 <HAL_ADC_Start_DMA+0x1ac>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d106      	bne.n	80036be <HAL_ADC_Start_DMA+0x32>
 80036b0:	4b60      	ldr	r3, [pc, #384]	; (8003834 <HAL_ADC_Start_DMA+0x1a8>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 80b3 	bne.w	8003824 <HAL_ADC_Start_DMA+0x198>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_Start_DMA+0x40>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e0ae      	b.n	800382a <HAL_ADC_Start_DMA+0x19e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f9c1 	bl	8003a5c <ADC_Enable>
 80036da:	4603      	mov	r3, r0
 80036dc:	75fb      	strb	r3, [r7, #23]
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f040 809a 	bne.w	800381a <HAL_ADC_Start_DMA+0x18e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	629a      	str	r2, [r3, #40]	; 0x28
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <HAL_ADC_Start_DMA+0x1ac>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d105      	bne.n	8003710 <HAL_ADC_Start_DMA+0x84>
 8003704:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_ADC_Start_DMA+0x1a8>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d115      	bne.n	800373c <HAL_ADC_Start_DMA+0xb0>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	2b00      	cmp	r3, #0
 8003728:	d026      	beq.n	8003778 <HAL_ADC_Start_DMA+0xec>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003732:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
 800373a:	e01d      	b.n	8003778 <HAL_ADC_Start_DMA+0xec>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a39      	ldr	r2, [pc, #228]	; (8003834 <HAL_ADC_Start_DMA+0x1a8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_ADC_Start_DMA+0xd0>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a38      	ldr	r2, [pc, #224]	; (8003838 <HAL_ADC_Start_DMA+0x1ac>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d10d      	bne.n	8003778 <HAL_ADC_Start_DMA+0xec>
 800375c:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_ADC_Start_DMA+0x1a8>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_ADC_Start_DMA+0xec>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003770:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <HAL_ADC_Start_DMA+0x106>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f023 0206 	bic.w	r2, r3, #6
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003790:	e002      	b.n	8003798 <HAL_ADC_Start_DMA+0x10c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4a25      	ldr	r2, [pc, #148]	; (800383c <HAL_ADC_Start_DMA+0x1b0>)
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <HAL_ADC_Start_DMA+0x1b4>)
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_ADC_Start_DMA+0x1b8>)
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0202 	mvn.w	r2, #2
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a18      	ldr	r0, [r3, #32]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	334c      	adds	r3, #76	; 0x4c
 80037dc:	4619      	mov	r1, r3
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f001 faf9 	bl	8004dd8 <HAL_DMA_Start_IT>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037f4:	d108      	bne.n	8003808 <HAL_ADC_Start_DMA+0x17c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	e00f      	b.n	8003828 <HAL_ADC_Start_DMA+0x19c>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	e006      	b.n	8003828 <HAL_ADC_Start_DMA+0x19c>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003822:	e001      	b.n	8003828 <HAL_ADC_Start_DMA+0x19c>
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40012400 	.word	0x40012400
 8003838:	40012800 	.word	0x40012800
 800383c:	08003b93 	.word	0x08003b93
 8003840:	08003c0f 	.word	0x08003c0f
 8003844:	08003c2b 	.word	0x08003c2b

08003848 <HAL_ADC_ConvCpltCallback>:
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <HAL_ADC_ErrorCallback>:
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <HAL_ADC_ConfigChannel>:
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_ADC_ConfigChannel+0x20>
 8003888:	2302      	movs	r3, #2
 800388a:	e0dc      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x1da>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d81c      	bhi.n	80038d6 <HAL_ADC_ConfigChannel+0x6a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	3b05      	subs	r3, #5
 80038ae:	221f      	movs	r2, #31
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	4019      	ands	r1, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b05      	subs	r3, #5
 80038c8:	fa00 f203 	lsl.w	r2, r0, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
 80038d4:	e03c      	b.n	8003950 <HAL_ADC_ConfigChannel+0xe4>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d81c      	bhi.n	8003918 <HAL_ADC_ConfigChannel+0xac>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	3b23      	subs	r3, #35	; 0x23
 80038f0:	221f      	movs	r2, #31
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	4019      	ands	r1, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	3b23      	subs	r3, #35	; 0x23
 800390a:	fa00 f203 	lsl.w	r2, r0, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
 8003916:	e01b      	b.n	8003950 <HAL_ADC_ConfigChannel+0xe4>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	3b41      	subs	r3, #65	; 0x41
 800392a:	221f      	movs	r2, #31
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	4019      	ands	r1, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	3b41      	subs	r3, #65	; 0x41
 8003944:	fa00 f203 	lsl.w	r2, r0, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b09      	cmp	r3, #9
 8003956:	d91c      	bls.n	8003992 <HAL_ADC_ConfigChannel+0x126>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68d9      	ldr	r1, [r3, #12]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	3b1e      	subs	r3, #30
 800396a:	2207      	movs	r2, #7
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	4019      	ands	r1, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	6898      	ldr	r0, [r3, #8]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	3b1e      	subs	r3, #30
 8003984:	fa00 f203 	lsl.w	r2, r0, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]
 8003990:	e019      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x15a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6919      	ldr	r1, [r3, #16]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	2207      	movs	r2, #7
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	4019      	ands	r1, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6898      	ldr	r0, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4413      	add	r3, r2
 80039ba:	fa00 f203 	lsl.w	r2, r0, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d003      	beq.n	80039d6 <HAL_ADC_ConfigChannel+0x16a>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b11      	cmp	r3, #17
 80039d4:	d132      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1d0>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_ADC_ConfigChannel+0x1e4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d125      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x1c0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d126      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1d0>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d11a      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1d0>
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	0c9a      	lsrs	r2, r3, #18
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	e002      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x1b8>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f9      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x1b2>
 8003a2a:	e007      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x1d0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	40012400 	.word	0x40012400
 8003a54:	2000000c 	.word	0x2000000c
 8003a58:	431bde83 	.word	0x431bde83

08003a5c <ADC_Enable>:
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60bb      	str	r3, [r7, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d040      	beq.n	8003afc <ADC_Enable+0xa0>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <ADC_Enable+0xac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <ADC_Enable+0xb0>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	0c9b      	lsrs	r3, r3, #18
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	e002      	b.n	8003aa0 <ADC_Enable+0x44>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f9      	bne.n	8003a9a <ADC_Enable+0x3e>
 8003aa6:	f7ff fceb 	bl	8003480 <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	e01f      	b.n	8003aee <ADC_Enable+0x92>
 8003aae:	f7ff fce7 	bl	8003480 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d918      	bls.n	8003aee <ADC_Enable+0x92>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d011      	beq.n	8003aee <ADC_Enable+0x92>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	f043 0210 	orr.w	r2, r3, #16
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f043 0201 	orr.w	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <ADC_Enable+0xa2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d1d8      	bne.n	8003aae <ADC_Enable+0x52>
 8003afc:	2300      	movs	r3, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	431bde83 	.word	0x431bde83

08003b10 <ADC_ConversionStop_Disable>:
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d12e      	bne.n	8003b88 <ADC_ConversionStop_Disable+0x78>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	f7ff fca1 	bl	8003480 <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	e01b      	b.n	8003b7a <ADC_ConversionStop_Disable+0x6a>
 8003b42:	f7ff fc9d 	bl	8003480 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d914      	bls.n	8003b7a <ADC_ConversionStop_Disable+0x6a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10d      	bne.n	8003b7a <ADC_ConversionStop_Disable+0x6a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	f043 0210 	orr.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	f043 0201 	orr.w	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b76:	2301      	movs	r3, #1
 8003b78:	e007      	b.n	8003b8a <ADC_ConversionStop_Disable+0x7a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d0dc      	beq.n	8003b42 <ADC_ConversionStop_Disable+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <ADC_DMAConvCplt>:
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d127      	bne.n	8003bfc <ADC_DMAConvCplt+0x6a>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003bc2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003bc6:	d115      	bne.n	8003bf4 <ADC_DMAConvCplt+0x62>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	7b1b      	ldrb	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <ADC_DMAConvCplt+0x62>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <ADC_DMAConvCplt+0x62>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	f043 0201 	orr.w	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7ff fe27 	bl	8003848 <HAL_ADC_ConvCpltCallback>
 8003bfa:	e004      	b.n	8003c06 <ADC_DMAConvCplt+0x74>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	4798      	blx	r3
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <ADC_DMAHalfConvCplt>:
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7fe fb61 	bl	80022e4 <HAL_ADC_ConvHalfCpltCallback>
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <ADC_DMAError>:
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f043 0204 	orr.w	r2, r3, #4
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fe02 	bl	800385a <HAL_ADC_ErrorCallback>
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_ADCEx_Calibration_Start>:
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_ADCEx_Calibration_Start+0x1e>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e097      	b.n	8003dae <HAL_ADCEx_Calibration_Start+0x14e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ff42 	bl	8003b10 <ADC_ConversionStop_Disable>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fee3 	bl	8003a5c <ADC_Enable>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8081 	bne.w	8003da4 <HAL_ADCEx_Calibration_Start+0x144>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003caa:	f023 0302 	bic.w	r3, r3, #2
 8003cae:	f043 0202 	orr.w	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb6:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <HAL_ADCEx_Calibration_Start+0x158>)
 8003cb8:	681c      	ldr	r4, [r3, #0]
 8003cba:	2002      	movs	r0, #2
 8003cbc:	f002 f89a 	bl	8005df4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e002      	b.n	8003cd2 <HAL_ADCEx_Calibration_Start+0x72>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f9      	bne.n	8003ccc <HAL_ADCEx_Calibration_Start+0x6c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0208 	orr.w	r2, r2, #8
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	f7ff fbca 	bl	8003480 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]
 8003cee:	e01b      	b.n	8003d28 <HAL_ADCEx_Calibration_Start+0xc8>
 8003cf0:	f7ff fbc6 	bl	8003480 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b0a      	cmp	r3, #10
 8003cfc:	d914      	bls.n	8003d28 <HAL_ADCEx_Calibration_Start+0xc8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <HAL_ADCEx_Calibration_Start+0xc8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	f023 0312 	bic.w	r3, r3, #18
 8003d14:	f043 0210 	orr.w	r2, r3, #16
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d24:	2301      	movs	r3, #1
 8003d26:	e042      	b.n	8003dae <HAL_ADCEx_Calibration_Start+0x14e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1dc      	bne.n	8003cf0 <HAL_ADCEx_Calibration_Start+0x90>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0204 	orr.w	r2, r2, #4
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	f7ff fb9b 	bl	8003480 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]
 8003d4c:	e01b      	b.n	8003d86 <HAL_ADCEx_Calibration_Start+0x126>
 8003d4e:	f7ff fb97 	bl	8003480 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b0a      	cmp	r3, #10
 8003d5a:	d914      	bls.n	8003d86 <HAL_ADCEx_Calibration_Start+0x126>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <HAL_ADCEx_Calibration_Start+0x126>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	f023 0312 	bic.w	r3, r3, #18
 8003d72:	f043 0210 	orr.w	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d82:	2301      	movs	r3, #1
 8003d84:	e013      	b.n	8003dae <HAL_ADCEx_Calibration_Start+0x14e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1dc      	bne.n	8003d4e <HAL_ADCEx_Calibration_Start+0xee>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f023 0303 	bic.w	r3, r3, #3
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	4618      	mov	r0, r3
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000000c 	.word	0x2000000c

08003dbc <HAL_CAN_Init>:
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_CAN_Init+0x12>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0ed      	b.n	8003faa <HAL_CAN_Init+0x1ee>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_CAN_Init+0x24>
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff f870 	bl	8002ec0 <HAL_CAN_MspInit>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	f7ff fb46 	bl	8003480 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	e012      	b.n	8003e1e <HAL_CAN_Init+0x62>
 8003df8:	f7ff fb42 	bl	8003480 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b0a      	cmp	r3, #10
 8003e04:	d90b      	bls.n	8003e1e <HAL_CAN_Init+0x62>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2205      	movs	r2, #5
 8003e16:	f883 2020 	strb.w	r2, [r3, #32]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0c5      	b.n	8003faa <HAL_CAN_Init+0x1ee>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0e5      	beq.n	8003df8 <HAL_CAN_Init+0x3c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0202 	bic.w	r2, r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f7ff fb20 	bl	8003480 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	e012      	b.n	8003e6a <HAL_CAN_Init+0xae>
 8003e44:	f7ff fb1c 	bl	8003480 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b0a      	cmp	r3, #10
 8003e50:	d90b      	bls.n	8003e6a <HAL_CAN_Init+0xae>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2205      	movs	r2, #5
 8003e62:	f883 2020 	strb.w	r2, [r3, #32]
 8003e66:	2301      	movs	r3, #1
 8003e68:	e09f      	b.n	8003faa <HAL_CAN_Init+0x1ee>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <HAL_CAN_Init+0x88>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7e1b      	ldrb	r3, [r3, #24]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d108      	bne.n	8003e92 <HAL_CAN_Init+0xd6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e007      	b.n	8003ea2 <HAL_CAN_Init+0xe6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	7e5b      	ldrb	r3, [r3, #25]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <HAL_CAN_Init+0x100>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e007      	b.n	8003ecc <HAL_CAN_Init+0x110>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7e9b      	ldrb	r3, [r3, #26]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d108      	bne.n	8003ee6 <HAL_CAN_Init+0x12a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0220 	orr.w	r2, r2, #32
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e007      	b.n	8003ef6 <HAL_CAN_Init+0x13a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0220 	bic.w	r2, r2, #32
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	7edb      	ldrb	r3, [r3, #27]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d108      	bne.n	8003f10 <HAL_CAN_Init+0x154>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0210 	bic.w	r2, r2, #16
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e007      	b.n	8003f20 <HAL_CAN_Init+0x164>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0210 	orr.w	r2, r2, #16
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7f1b      	ldrb	r3, [r3, #28]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d108      	bne.n	8003f3a <HAL_CAN_Init+0x17e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e007      	b.n	8003f4a <HAL_CAN_Init+0x18e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0208 	bic.w	r2, r2, #8
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	7f5b      	ldrb	r3, [r3, #29]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d108      	bne.n	8003f64 <HAL_CAN_Init+0x1a8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0204 	orr.w	r2, r2, #4
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <HAL_CAN_Init+0x1b8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	1e5a      	subs	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	61da      	str	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2020 	strb.w	r2, [r3, #32]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_CAN_ConfigFilter>:
 8003fb2:	b480      	push	{r7}
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc8:	74fb      	strb	r3, [r7, #19]
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d003      	beq.n	8003fd8 <HAL_CAN_ConfigFilter+0x26>
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f040 80aa 	bne.w	800412c <HAL_CAN_ConfigFilter+0x17a>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fde:	f043 0201 	orr.w	r2, r3, #1
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d123      	bne.n	800405a <HAL_CAN_ConfigFilter+0xa8>
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	43db      	mvns	r3, r3
 800401c:	401a      	ands	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	0419      	lsls	r1, r3, #16
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b29b      	uxth	r3, r3
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	6952      	ldr	r2, [r2, #20]
 8004034:	4319      	orrs	r1, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	3248      	adds	r2, #72	; 0x48
 800403a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0419      	lsls	r1, r3, #16
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	b29a      	uxth	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	430a      	orrs	r2, r1
 8004050:	6979      	ldr	r1, [r7, #20]
 8004052:	3348      	adds	r3, #72	; 0x48
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d122      	bne.n	80040a8 <HAL_CAN_ConfigFilter+0xf6>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	431a      	orrs	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	0419      	lsls	r1, r3, #16
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	b29b      	uxth	r3, r3
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	6952      	ldr	r2, [r2, #20]
 8004082:	4319      	orrs	r1, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	3248      	adds	r2, #72	; 0x48
 8004088:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	0419      	lsls	r1, r3, #16
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	b29a      	uxth	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	430a      	orrs	r2, r1
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	3348      	adds	r3, #72	; 0x48
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_CAN_ConfigFilter+0x112>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040c2:	e007      	b.n	80040d4 <HAL_CAN_ConfigFilter+0x122>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_CAN_ConfigFilter+0x13e>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	401a      	ands	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040ee:	e007      	b.n	8004100 <HAL_CAN_ConfigFilter+0x14e>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_CAN_ConfigFilter+0x166>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	431a      	orrs	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800411e:	f023 0201 	bic.w	r2, r3, #1
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004128:	2300      	movs	r3, #0
 800412a:	e006      	b.n	800413a <HAL_CAN_ConfigFilter+0x188>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24
 8004138:	2301      	movs	r3, #1
 800413a:	4618      	mov	r0, r3
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_CAN_Start>:
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d12e      	bne.n	80041b6 <HAL_CAN_Start+0x72>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2020 	strb.w	r2, [r3, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f7ff f986 	bl	8003480 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	e012      	b.n	800419e <HAL_CAN_Start+0x5a>
 8004178:	f7ff f982 	bl	8003480 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b0a      	cmp	r3, #10
 8004184:	d90b      	bls.n	800419e <HAL_CAN_Start+0x5a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2205      	movs	r2, #5
 8004196:	f883 2020 	strb.w	r2, [r3, #32]
 800419a:	2301      	movs	r3, #1
 800419c:	e012      	b.n	80041c4 <HAL_CAN_Start+0x80>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <HAL_CAN_Start+0x34>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
 80041b2:	2300      	movs	r3, #0
 80041b4:	e006      	b.n	80041c4 <HAL_CAN_Start+0x80>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
 80041c2:	2301      	movs	r3, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_CAN_AddTxMessage>:
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d003      	beq.n	80041f8 <HAL_CAN_AddTxMessage+0x2c>
 80041f0:	7ffb      	ldrb	r3, [r7, #31]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	f040 80ad 	bne.w	8004352 <HAL_CAN_AddTxMessage+0x186>
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_CAN_AddTxMessage+0x4c>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <HAL_CAN_AddTxMessage+0x4c>
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8095 	beq.w	8004342 <HAL_CAN_AddTxMessage+0x176>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	0e1b      	lsrs	r3, r3, #24
 800421c:	f003 0303 	and.w	r3, r3, #3
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	2201      	movs	r2, #1
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	409a      	lsls	r2, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10d      	bne.n	8004250 <HAL_CAN_AddTxMessage+0x84>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	055a      	lsls	r2, r3, #21
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	6809      	ldr	r1, [r1, #0]
 8004242:	431a      	orrs	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	3318      	adds	r3, #24
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	440b      	add	r3, r1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e00f      	b.n	8004270 <HAL_CAN_AddTxMessage+0xa4>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	00da      	lsls	r2, r3, #3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	431a      	orrs	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	6809      	ldr	r1, [r1, #0]
 8004264:	431a      	orrs	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3318      	adds	r3, #24
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	440b      	add	r3, r1
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	3318      	adds	r3, #24
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	440b      	add	r3, r1
 8004280:	3304      	adds	r3, #4
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	7d1b      	ldrb	r3, [r3, #20]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d111      	bne.n	80042b0 <HAL_CAN_AddTxMessage+0xe4>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3318      	adds	r3, #24
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	4413      	add	r3, r2
 8004298:	3304      	adds	r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6811      	ldr	r1, [r2, #0]
 80042a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3318      	adds	r3, #24
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	440b      	add	r3, r1
 80042ac:	3304      	adds	r3, #4
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3307      	adds	r3, #7
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	061a      	lsls	r2, r3, #24
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3306      	adds	r3, #6
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3305      	adds	r3, #5
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	4313      	orrs	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	3204      	adds	r2, #4
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	4610      	mov	r0, r2
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	6811      	ldr	r1, [r2, #0]
 80042d8:	ea43 0200 	orr.w	r2, r3, r0
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	440b      	add	r3, r1
 80042e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3303      	adds	r3, #3
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	061a      	lsls	r2, r3, #24
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3302      	adds	r3, #2
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	041b      	lsls	r3, r3, #16
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3301      	adds	r3, #1
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	4313      	orrs	r3, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	4610      	mov	r0, r2
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	ea43 0200 	orr.w	r2, r3, r0
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	440b      	add	r3, r1
 8004318:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3318      	adds	r3, #24
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6811      	ldr	r1, [r2, #0]
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3318      	adds	r3, #24
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	440b      	add	r3, r1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	e00e      	b.n	8004360 <HAL_CAN_AddTxMessage+0x194>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
 800434e:	2301      	movs	r3, #1
 8004350:	e006      	b.n	8004360 <HAL_CAN_AddTxMessage+0x194>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24
 800435e:	2301      	movs	r3, #1
 8004360:	4618      	mov	r0, r3
 8004362:	3724      	adds	r7, #36	; 0x24
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <HAL_CAN_AbortTxRequest>:
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d002      	beq.n	8004388 <HAL_CAN_AbortTxRequest+0x1e>
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d128      	bne.n	80043da <HAL_CAN_AbortTxRequest+0x70>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_CAN_AbortTxRequest+0x38>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_CAN_AbortTxRequest+0x52>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_CAN_AbortTxRequest+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	2300      	movs	r3, #0
 80043d8:	e006      	b.n	80043e8 <HAL_CAN_AbortTxRequest+0x7e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
 80043e6:	2301      	movs	r3, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_CAN_GetTxMailboxesFreeLevel>:
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004404:	72fb      	strb	r3, [r7, #11]
 8004406:	7afb      	ldrb	r3, [r7, #11]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d002      	beq.n	8004412 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800440c:	7afb      	ldrb	r3, [r7, #11]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d11d      	bne.n	800444e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_CAN_GetRxMessage>:
 800445a:	b480      	push	{r7}
 800445c:	b087      	sub	sp, #28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800446e:	75fb      	strb	r3, [r7, #23]
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d003      	beq.n	800447e <HAL_CAN_GetRxMessage+0x24>
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b02      	cmp	r3, #2
 800447a:	f040 8103 	bne.w	8004684 <HAL_CAN_GetRxMessage+0x22a>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10e      	bne.n	80044a2 <HAL_CAN_GetRxMessage+0x48>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d116      	bne.n	80044c0 <HAL_CAN_GetRxMessage+0x66>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	625a      	str	r2, [r3, #36]	; 0x24
 800449e:	2301      	movs	r3, #1
 80044a0:	e0f7      	b.n	8004692 <HAL_CAN_GetRxMessage+0x238>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_CAN_GetRxMessage+0x66>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
 80044bc:	2301      	movs	r3, #1
 80044be:	e0e8      	b.n	8004692 <HAL_CAN_GetRxMessage+0x238>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	331b      	adds	r3, #27
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	4413      	add	r3, r2
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0204 	and.w	r2, r3, #4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10c      	bne.n	80044f8 <HAL_CAN_GetRxMessage+0x9e>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	331b      	adds	r3, #27
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4413      	add	r3, r2
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0d5b      	lsrs	r3, r3, #21
 80044ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e00b      	b.n	8004510 <HAL_CAN_GetRxMessage+0xb6>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	331b      	adds	r3, #27
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	4413      	add	r3, r2
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	08db      	lsrs	r3, r3, #3
 8004508:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	331b      	adds	r3, #27
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4413      	add	r3, r2
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0202 	and.w	r2, r3, #2
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	331b      	adds	r3, #27
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	4413      	add	r3, r2
 8004532:	3304      	adds	r3, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_CAN_GetRxMessage+0xec>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	611a      	str	r2, [r3, #16]
 8004544:	e00b      	b.n	800455e <HAL_CAN_GetRxMessage+0x104>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	331b      	adds	r3, #27
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	3304      	adds	r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 020f 	and.w	r2, r3, #15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	331b      	adds	r3, #27
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	4413      	add	r3, r2
 800456a:	3304      	adds	r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	0a1b      	lsrs	r3, r3, #8
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	619a      	str	r2, [r3, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	331b      	adds	r3, #27
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	4413      	add	r3, r2
 8004582:	3304      	adds	r3, #4
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b29a      	uxth	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	615a      	str	r2, [r3, #20]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	4413      	add	r3, r2
 8004598:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0a1a      	lsrs	r2, r3, #8
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0c1a      	lsrs	r2, r3, #16
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	3302      	adds	r3, #2
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	0e1a      	lsrs	r2, r3, #24
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3303      	adds	r3, #3
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3304      	adds	r3, #4
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4413      	add	r3, r2
 8004614:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0a1a      	lsrs	r2, r3, #8
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3305      	adds	r3, #5
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0c1a      	lsrs	r2, r3, #16
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	3306      	adds	r3, #6
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	4413      	add	r3, r2
 8004648:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0e1a      	lsrs	r2, r3, #24
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	3307      	adds	r3, #7
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_CAN_GetRxMessage+0x216>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	e007      	b.n	8004680 <HAL_CAN_GetRxMessage+0x226>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0220 	orr.w	r2, r2, #32
 800467e:	611a      	str	r2, [r3, #16]
 8004680:	2300      	movs	r3, #0
 8004682:	e006      	b.n	8004692 <HAL_CAN_GetRxMessage+0x238>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24
 8004690:	2301      	movs	r3, #1
 8004692:	4618      	mov	r0, r3
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <HAL_CAN_ActivateNotification>:
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d002      	beq.n	80046ba <HAL_CAN_ActivateNotification+0x1e>
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d109      	bne.n	80046ce <HAL_CAN_ActivateNotification+0x32>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6959      	ldr	r1, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	615a      	str	r2, [r3, #20]
 80046ca:	2300      	movs	r3, #0
 80046cc:	e006      	b.n	80046dc <HAL_CAN_ActivateNotification+0x40>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
 80046da:	2301      	movs	r3, #1
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <HAL_CAN_IRQHandler>:
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08a      	sub	sp, #40	; 0x28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	623b      	str	r3, [r7, #32]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d07c      	beq.n	8004826 <HAL_CAN_IRQHandler+0x140>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d023      	beq.n	800477e <HAL_CAN_IRQHandler+0x98>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	609a      	str	r2, [r3, #8]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_CAN_IRQHandler+0x6a>
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f983 	bl	8004a54 <HAL_CAN_TxMailbox0CompleteCallback>
 800474e:	e016      	b.n	800477e <HAL_CAN_IRQHandler+0x98>
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <HAL_CAN_IRQHandler+0x7e>
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
 8004762:	e00c      	b.n	800477e <HAL_CAN_IRQHandler+0x98>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_CAN_IRQHandler+0x92>
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	e002      	b.n	800477e <HAL_CAN_IRQHandler+0x98>
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f986 	bl	8004a8a <HAL_CAN_TxMailbox0AbortCallback>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d024      	beq.n	80047d2 <HAL_CAN_IRQHandler+0xec>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_CAN_IRQHandler+0xbe>
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f962 	bl	8004a66 <HAL_CAN_TxMailbox1CompleteCallback>
 80047a2:	e016      	b.n	80047d2 <HAL_CAN_IRQHandler+0xec>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d004      	beq.n	80047b8 <HAL_CAN_IRQHandler+0xd2>
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
 80047b6:	e00c      	b.n	80047d2 <HAL_CAN_IRQHandler+0xec>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_CAN_IRQHandler+0xe6>
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ca:	e002      	b.n	80047d2 <HAL_CAN_IRQHandler+0xec>
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f965 	bl	8004a9c <HAL_CAN_TxMailbox1AbortCallback>
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d024      	beq.n	8004826 <HAL_CAN_IRQHandler+0x140>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047e4:	609a      	str	r2, [r3, #8]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_CAN_IRQHandler+0x112>
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f941 	bl	8004a78 <HAL_CAN_TxMailbox2CompleteCallback>
 80047f6:	e016      	b.n	8004826 <HAL_CAN_IRQHandler+0x140>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <HAL_CAN_IRQHandler+0x126>
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	e00c      	b.n	8004826 <HAL_CAN_IRQHandler+0x140>
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <HAL_CAN_IRQHandler+0x13a>
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	e002      	b.n	8004826 <HAL_CAN_IRQHandler+0x140>
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f944 	bl	8004aae <HAL_CAN_TxMailbox2AbortCallback>
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <HAL_CAN_IRQHandler+0x164>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <HAL_CAN_IRQHandler+0x164>
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2210      	movs	r2, #16
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_CAN_IRQHandler+0x186>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d006      	beq.n	800486c <HAL_CAN_IRQHandler+0x186>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2208      	movs	r2, #8
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f92a 	bl	8004ac0 <HAL_CAN_RxFifo0FullCallback>
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_CAN_IRQHandler+0x1a4>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_CAN_IRQHandler+0x1a4>
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fd fd02 	bl	800228e <HAL_CAN_RxFifo0MsgPendingCallback>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00c      	beq.n	80048ae <HAL_CAN_IRQHandler+0x1c8>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <HAL_CAN_IRQHandler+0x1c8>
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2210      	movs	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_CAN_IRQHandler+0x1ea>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_CAN_IRQHandler+0x1ea>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2208      	movs	r2, #8
 80048c8:	611a      	str	r2, [r3, #16]
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f901 	bl	8004ad2 <HAL_CAN_RxFifo1FullCallback>
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <HAL_CAN_IRQHandler+0x208>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0303 	and.w	r3, r3, #3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_CAN_IRQHandler+0x208>
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7fd fcdc 	bl	80022a6 <HAL_CAN_RxFifo1MsgPendingCallback>
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_CAN_IRQHandler+0x22a>
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <HAL_CAN_IRQHandler+0x22a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2210      	movs	r2, #16
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8ea 	bl	8004ae4 <HAL_CAN_SleepCallback>
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <HAL_CAN_IRQHandler+0x24c>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <HAL_CAN_IRQHandler+0x24c>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2208      	movs	r2, #8
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8e2 	bl	8004af6 <HAL_CAN_WakeUpFromRxMsgCallback>
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d07b      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x34e>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d072      	beq.n	8004a2c <HAL_CAN_IRQHandler+0x346>
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_CAN_IRQHandler+0x27c>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_CAN_IRQHandler+0x27c>
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_CAN_IRQHandler+0x298>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_CAN_IRQHandler+0x298>
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_CAN_IRQHandler+0x2b4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_CAN_IRQHandler+0x2b4>
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d043      	beq.n	8004a2c <HAL_CAN_IRQHandler+0x346>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d03e      	beq.n	8004a2c <HAL_CAN_IRQHandler+0x346>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d02b      	beq.n	8004a10 <HAL_CAN_IRQHandler+0x32a>
 80049b8:	2b60      	cmp	r3, #96	; 0x60
 80049ba:	d82e      	bhi.n	8004a1a <HAL_CAN_IRQHandler+0x334>
 80049bc:	2b50      	cmp	r3, #80	; 0x50
 80049be:	d022      	beq.n	8004a06 <HAL_CAN_IRQHandler+0x320>
 80049c0:	2b50      	cmp	r3, #80	; 0x50
 80049c2:	d82a      	bhi.n	8004a1a <HAL_CAN_IRQHandler+0x334>
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d019      	beq.n	80049fc <HAL_CAN_IRQHandler+0x316>
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d826      	bhi.n	8004a1a <HAL_CAN_IRQHandler+0x334>
 80049cc:	2b30      	cmp	r3, #48	; 0x30
 80049ce:	d010      	beq.n	80049f2 <HAL_CAN_IRQHandler+0x30c>
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d822      	bhi.n	8004a1a <HAL_CAN_IRQHandler+0x334>
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d002      	beq.n	80049de <HAL_CAN_IRQHandler+0x2f8>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d005      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x302>
 80049dc:	e01d      	b.n	8004a1a <HAL_CAN_IRQHandler+0x334>
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	e019      	b.n	8004a1c <HAL_CAN_IRQHandler+0x336>
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	f043 0310 	orr.w	r3, r3, #16
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	e014      	b.n	8004a1c <HAL_CAN_IRQHandler+0x336>
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	f043 0320 	orr.w	r3, r3, #32
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	e00f      	b.n	8004a1c <HAL_CAN_IRQHandler+0x336>
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	e00a      	b.n	8004a1c <HAL_CAN_IRQHandler+0x336>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	e005      	b.n	8004a1c <HAL_CAN_IRQHandler+0x336>
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
 8004a18:	e000      	b.n	8004a1c <HAL_CAN_IRQHandler+0x336>
 8004a1a:	bf00      	nop
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a2a:	619a      	str	r2, [r3, #24]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2204      	movs	r2, #4
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_CAN_IRQHandler+0x366>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fd fc3a 	bl	80022c0 <HAL_CAN_ErrorCallback>
 8004a4c:	bf00      	nop
 8004a4e:	3728      	adds	r7, #40	; 0x28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_CAN_TxMailbox0CompleteCallback>:
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_CAN_TxMailbox1CompleteCallback>:
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_CAN_TxMailbox2CompleteCallback>:
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_CAN_TxMailbox0AbortCallback>:
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_CAN_TxMailbox1AbortCallback>:
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <HAL_CAN_TxMailbox2AbortCallback>:
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <HAL_CAN_RxFifo0FullCallback>:
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_CAN_RxFifo1FullCallback>:
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_CAN_SleepCallback>:
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr

08004af6 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <__NVIC_SetPriorityGrouping>:
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <__NVIC_SetPriorityGrouping+0x44>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b24:	4013      	ands	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <__NVIC_SetPriorityGrouping+0x44>)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	60d3      	str	r3, [r2, #12]
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <__NVIC_GetPriorityGrouping>:
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <__NVIC_GetPriorityGrouping+0x18>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	4618      	mov	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <__NVIC_EnableIRQ>:
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	db0b      	blt.n	8004b96 <__NVIC_EnableIRQ+0x2a>
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	f003 021f 	and.w	r2, r3, #31
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <__NVIC_EnableIRQ+0x34>)
 8004b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <__NVIC_SetPriority>:
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	71fb      	strb	r3, [r7, #7]
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <__NVIC_SetPriority+0x2a>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	490c      	ldr	r1, [pc, #48]	; (8004bf0 <__NVIC_SetPriority+0x4c>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004bcc:	e00a      	b.n	8004be4 <__NVIC_SetPriority+0x40>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4908      	ldr	r1, [pc, #32]	; (8004bf4 <__NVIC_SetPriority+0x50>)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	440b      	add	r3, r1
 8004be2:	761a      	strb	r2, [r3, #24]
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e100 	.word	0xe000e100
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <NVIC_EncodePriority>:
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf28      	it	cs
 8004c16:	2304      	movcs	r3, #4
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d902      	bls.n	8004c28 <NVIC_EncodePriority+0x30>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3b03      	subs	r3, #3
 8004c26:	e000      	b.n	8004c2a <NVIC_EncodePriority+0x32>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	f04f 31ff 	mov.w	r1, #4294967295
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43d9      	mvns	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	400b      	ands	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <SysTick_Config>:
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c6c:	d301      	bcc.n	8004c72 <SysTick_Config+0x16>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e00f      	b.n	8004c92 <SysTick_Config+0x36>
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <SysTick_Config+0x40>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	6053      	str	r3, [r2, #4]
 8004c7a:	210f      	movs	r1, #15
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c80:	f7ff ff90 	bl	8004ba4 <__NVIC_SetPriority>
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <SysTick_Config+0x40>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <SysTick_Config+0x40>)
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	e000e010 	.word	0xe000e010

08004ca0 <HAL_NVIC_SetPriorityGrouping>:
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ff2d 	bl	8004b08 <__NVIC_SetPriorityGrouping>
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_NVIC_SetPriority>:
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	f7ff ff42 	bl	8004b50 <__NVIC_GetPriorityGrouping>
 8004ccc:	6178      	str	r0, [r7, #20]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	6978      	ldr	r0, [r7, #20]
 8004cd4:	f7ff ff90 	bl	8004bf8 <NVIC_EncodePriority>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ff5f 	bl	8004ba4 <__NVIC_SetPriority>
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_NVIC_EnableIRQ>:
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	71fb      	strb	r3, [r7, #7]
 8004cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff ff35 	bl	8004b6c <__NVIC_EnableIRQ>
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_SYSTICK_Config>:
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff ffa2 	bl	8004c5c <SysTick_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_DMA_Init>:
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_DMA_Init+0x16>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e043      	b.n	8004dc2 <HAL_DMA_Init+0x9e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_DMA_Init+0xa8>)
 8004d42:	4413      	add	r3, r2
 8004d44:	4a22      	ldr	r2, [pc, #136]	; (8004dd0 <HAL_DMA_Init+0xac>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	009a      	lsls	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_DMA_Init+0xb0>)
 8004d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2020 	strb.w	r2, [r3, #32]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	bffdfff8 	.word	0xbffdfff8
 8004dd0:	cccccccd 	.word	0xcccccccd
 8004dd4:	40020000 	.word	0x40020000

08004dd8 <HAL_DMA_Start_IT>:
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_DMA_Start_IT+0x20>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e04b      	b.n	8004e90 <HAL_DMA_Start_IT+0xb8>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2020 	strb.w	r2, [r3, #32]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d13a      	bne.n	8004e82 <HAL_DMA_Start_IT+0xaa>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f937 	bl	80050a4 <DMA_SetConfig>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_DMA_Start_IT+0x78>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 020e 	orr.w	r2, r2, #14
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e00f      	b.n	8004e70 <HAL_DMA_Start_IT+0x98>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 020a 	orr.w	r2, r2, #10
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e005      	b.n	8004e8e <HAL_DMA_Start_IT+0xb6>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2020 	strb.w	r2, [r3, #32]
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	75fb      	strb	r3, [r7, #23]
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_DMA_IRQHandler>:
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d04f      	beq.n	8004f60 <HAL_DMA_IRQHandler+0xc8>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d04a      	beq.n	8004f60 <HAL_DMA_IRQHandler+0xc8>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0x50>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0204 	bic.w	r2, r2, #4
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a66      	ldr	r2, [pc, #408]	; (8005088 <HAL_DMA_IRQHandler+0x1f0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d029      	beq.n	8004f46 <HAL_DMA_IRQHandler+0xae>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a65      	ldr	r2, [pc, #404]	; (800508c <HAL_DMA_IRQHandler+0x1f4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xaa>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a63      	ldr	r2, [pc, #396]	; (8005090 <HAL_DMA_IRQHandler+0x1f8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d01a      	beq.n	8004f3c <HAL_DMA_IRQHandler+0xa4>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a62      	ldr	r2, [pc, #392]	; (8005094 <HAL_DMA_IRQHandler+0x1fc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d012      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x9e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a60      	ldr	r2, [pc, #384]	; (8005098 <HAL_DMA_IRQHandler+0x200>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00a      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x98>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5f      	ldr	r2, [pc, #380]	; (800509c <HAL_DMA_IRQHandler+0x204>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d102      	bne.n	8004f2a <HAL_DMA_IRQHandler+0x92>
 8004f24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f28:	e00e      	b.n	8004f48 <HAL_DMA_IRQHandler+0xb0>
 8004f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f2e:	e00b      	b.n	8004f48 <HAL_DMA_IRQHandler+0xb0>
 8004f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f34:	e008      	b.n	8004f48 <HAL_DMA_IRQHandler+0xb0>
 8004f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f3a:	e005      	b.n	8004f48 <HAL_DMA_IRQHandler+0xb0>
 8004f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f40:	e002      	b.n	8004f48 <HAL_DMA_IRQHandler+0xb0>
 8004f42:	2340      	movs	r3, #64	; 0x40
 8004f44:	e000      	b.n	8004f48 <HAL_DMA_IRQHandler+0xb0>
 8004f46:	2304      	movs	r3, #4
 8004f48:	4a55      	ldr	r2, [pc, #340]	; (80050a0 <HAL_DMA_IRQHandler+0x208>)
 8004f4a:	6053      	str	r3, [r2, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8094 	beq.w	800507e <HAL_DMA_IRQHandler+0x1e6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	e08e      	b.n	800507e <HAL_DMA_IRQHandler+0x1e6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	2202      	movs	r2, #2
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d056      	beq.n	800501e <HAL_DMA_IRQHandler+0x186>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d051      	beq.n	800501e <HAL_DMA_IRQHandler+0x186>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10b      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0x108>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 020a 	bic.w	r2, r2, #10
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a38      	ldr	r2, [pc, #224]	; (8005088 <HAL_DMA_IRQHandler+0x1f0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d029      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x166>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a37      	ldr	r2, [pc, #220]	; (800508c <HAL_DMA_IRQHandler+0x1f4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d022      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x162>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a35      	ldr	r2, [pc, #212]	; (8005090 <HAL_DMA_IRQHandler+0x1f8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01a      	beq.n	8004ff4 <HAL_DMA_IRQHandler+0x15c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a34      	ldr	r2, [pc, #208]	; (8005094 <HAL_DMA_IRQHandler+0x1fc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d012      	beq.n	8004fee <HAL_DMA_IRQHandler+0x156>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a32      	ldr	r2, [pc, #200]	; (8005098 <HAL_DMA_IRQHandler+0x200>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x150>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a31      	ldr	r2, [pc, #196]	; (800509c <HAL_DMA_IRQHandler+0x204>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d102      	bne.n	8004fe2 <HAL_DMA_IRQHandler+0x14a>
 8004fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fe0:	e00e      	b.n	8005000 <HAL_DMA_IRQHandler+0x168>
 8004fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fe6:	e00b      	b.n	8005000 <HAL_DMA_IRQHandler+0x168>
 8004fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fec:	e008      	b.n	8005000 <HAL_DMA_IRQHandler+0x168>
 8004fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ff2:	e005      	b.n	8005000 <HAL_DMA_IRQHandler+0x168>
 8004ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff8:	e002      	b.n	8005000 <HAL_DMA_IRQHandler+0x168>
 8004ffa:	2320      	movs	r3, #32
 8004ffc:	e000      	b.n	8005000 <HAL_DMA_IRQHandler+0x168>
 8004ffe:	2302      	movs	r3, #2
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <HAL_DMA_IRQHandler+0x208>)
 8005002:	6053      	str	r3, [r2, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2020 	strb.w	r2, [r3, #32]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d034      	beq.n	800507e <HAL_DMA_IRQHandler+0x1e6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
 800501c:	e02f      	b.n	800507e <HAL_DMA_IRQHandler+0x1e6>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2208      	movs	r2, #8
 8005024:	409a      	lsls	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d028      	beq.n	8005080 <HAL_DMA_IRQHandler+0x1e8>
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d023      	beq.n	8005080 <HAL_DMA_IRQHandler+0x1e8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 020e 	bic.w	r2, r2, #14
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	2101      	movs	r1, #1
 8005052:	fa01 f202 	lsl.w	r2, r1, r2
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2020 	strb.w	r2, [r3, #32]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_DMA_IRQHandler+0x1e8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	4798      	blx	r3
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40020008 	.word	0x40020008
 800508c:	4002001c 	.word	0x4002001c
 8005090:	40020030 	.word	0x40020030
 8005094:	40020044 	.word	0x40020044
 8005098:	40020058 	.word	0x40020058
 800509c:	4002006c 	.word	0x4002006c
 80050a0:	40020000 	.word	0x40020000

080050a4 <DMA_SetConfig>:
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	2101      	movs	r1, #1
 80050bc:	fa01 f202 	lsl.w	r2, r1, r2
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d108      	bne.n	80050e4 <DMA_SetConfig+0x40>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	609a      	str	r2, [r3, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	e007      	b.n	80050f4 <DMA_SetConfig+0x50>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	60da      	str	r2, [r3, #12]
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr
	...

08005100 <HAL_GPIO_Init>:
 8005100:	b480      	push	{r7}
 8005102:	b08b      	sub	sp, #44	; 0x2c
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e169      	b.n	80053e8 <HAL_GPIO_Init+0x2e8>
 8005114:	2201      	movs	r2, #1
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	429a      	cmp	r2, r3
 800512e:	f040 8158 	bne.w	80053e2 <HAL_GPIO_Init+0x2e2>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4a9a      	ldr	r2, [pc, #616]	; (80053a0 <HAL_GPIO_Init+0x2a0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d05e      	beq.n	80051fa <HAL_GPIO_Init+0xfa>
 800513c:	4a98      	ldr	r2, [pc, #608]	; (80053a0 <HAL_GPIO_Init+0x2a0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d875      	bhi.n	800522e <HAL_GPIO_Init+0x12e>
 8005142:	4a98      	ldr	r2, [pc, #608]	; (80053a4 <HAL_GPIO_Init+0x2a4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d058      	beq.n	80051fa <HAL_GPIO_Init+0xfa>
 8005148:	4a96      	ldr	r2, [pc, #600]	; (80053a4 <HAL_GPIO_Init+0x2a4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d86f      	bhi.n	800522e <HAL_GPIO_Init+0x12e>
 800514e:	4a96      	ldr	r2, [pc, #600]	; (80053a8 <HAL_GPIO_Init+0x2a8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d052      	beq.n	80051fa <HAL_GPIO_Init+0xfa>
 8005154:	4a94      	ldr	r2, [pc, #592]	; (80053a8 <HAL_GPIO_Init+0x2a8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d869      	bhi.n	800522e <HAL_GPIO_Init+0x12e>
 800515a:	4a94      	ldr	r2, [pc, #592]	; (80053ac <HAL_GPIO_Init+0x2ac>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d04c      	beq.n	80051fa <HAL_GPIO_Init+0xfa>
 8005160:	4a92      	ldr	r2, [pc, #584]	; (80053ac <HAL_GPIO_Init+0x2ac>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d863      	bhi.n	800522e <HAL_GPIO_Init+0x12e>
 8005166:	4a92      	ldr	r2, [pc, #584]	; (80053b0 <HAL_GPIO_Init+0x2b0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d046      	beq.n	80051fa <HAL_GPIO_Init+0xfa>
 800516c:	4a90      	ldr	r2, [pc, #576]	; (80053b0 <HAL_GPIO_Init+0x2b0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d85d      	bhi.n	800522e <HAL_GPIO_Init+0x12e>
 8005172:	2b12      	cmp	r3, #18
 8005174:	d82a      	bhi.n	80051cc <HAL_GPIO_Init+0xcc>
 8005176:	2b12      	cmp	r3, #18
 8005178:	d859      	bhi.n	800522e <HAL_GPIO_Init+0x12e>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <HAL_GPIO_Init+0x80>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051fb 	.word	0x080051fb
 8005184:	080051d5 	.word	0x080051d5
 8005188:	080051e7 	.word	0x080051e7
 800518c:	08005229 	.word	0x08005229
 8005190:	0800522f 	.word	0x0800522f
 8005194:	0800522f 	.word	0x0800522f
 8005198:	0800522f 	.word	0x0800522f
 800519c:	0800522f 	.word	0x0800522f
 80051a0:	0800522f 	.word	0x0800522f
 80051a4:	0800522f 	.word	0x0800522f
 80051a8:	0800522f 	.word	0x0800522f
 80051ac:	0800522f 	.word	0x0800522f
 80051b0:	0800522f 	.word	0x0800522f
 80051b4:	0800522f 	.word	0x0800522f
 80051b8:	0800522f 	.word	0x0800522f
 80051bc:	0800522f 	.word	0x0800522f
 80051c0:	0800522f 	.word	0x0800522f
 80051c4:	080051dd 	.word	0x080051dd
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	4a79      	ldr	r2, [pc, #484]	; (80053b4 <HAL_GPIO_Init+0x2b4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_GPIO_Init+0xfa>
 80051d2:	e02c      	b.n	800522e <HAL_GPIO_Init+0x12e>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	623b      	str	r3, [r7, #32]
 80051da:	e029      	b.n	8005230 <HAL_GPIO_Init+0x130>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	3304      	adds	r3, #4
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	e024      	b.n	8005230 <HAL_GPIO_Init+0x130>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	3308      	adds	r3, #8
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	e01f      	b.n	8005230 <HAL_GPIO_Init+0x130>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	330c      	adds	r3, #12
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	e01a      	b.n	8005230 <HAL_GPIO_Init+0x130>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <HAL_GPIO_Init+0x108>
 8005202:	2304      	movs	r3, #4
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	e013      	b.n	8005230 <HAL_GPIO_Init+0x130>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d105      	bne.n	800521c <HAL_GPIO_Init+0x11c>
 8005210:	2308      	movs	r3, #8
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	611a      	str	r2, [r3, #16]
 800521a:	e009      	b.n	8005230 <HAL_GPIO_Init+0x130>
 800521c:	2308      	movs	r3, #8
 800521e:	623b      	str	r3, [r7, #32]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	615a      	str	r2, [r3, #20]
 8005226:	e003      	b.n	8005230 <HAL_GPIO_Init+0x130>
 8005228:	2300      	movs	r3, #0
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	e000      	b.n	8005230 <HAL_GPIO_Init+0x130>
 800522e:	bf00      	nop
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2bff      	cmp	r3, #255	; 0xff
 8005234:	d801      	bhi.n	800523a <HAL_GPIO_Init+0x13a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	e001      	b.n	800523e <HAL_GPIO_Init+0x13e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2bff      	cmp	r3, #255	; 0xff
 8005244:	d802      	bhi.n	800524c <HAL_GPIO_Init+0x14c>
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	e002      	b.n	8005252 <HAL_GPIO_Init+0x152>
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	3b08      	subs	r3, #8
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	210f      	movs	r1, #15
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	6a39      	ldr	r1, [r7, #32]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 80b1 	beq.w	80053e2 <HAL_GPIO_Init+0x2e2>
 8005280:	4b4d      	ldr	r3, [pc, #308]	; (80053b8 <HAL_GPIO_Init+0x2b8>)
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	4a4c      	ldr	r2, [pc, #304]	; (80053b8 <HAL_GPIO_Init+0x2b8>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6193      	str	r3, [r2, #24]
 800528c:	4b4a      	ldr	r3, [pc, #296]	; (80053b8 <HAL_GPIO_Init+0x2b8>)
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4a48      	ldr	r2, [pc, #288]	; (80053bc <HAL_GPIO_Init+0x2bc>)
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	3302      	adds	r3, #2
 80052a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	220f      	movs	r2, #15
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4013      	ands	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a40      	ldr	r2, [pc, #256]	; (80053c0 <HAL_GPIO_Init+0x2c0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d013      	beq.n	80052ec <HAL_GPIO_Init+0x1ec>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3f      	ldr	r2, [pc, #252]	; (80053c4 <HAL_GPIO_Init+0x2c4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00d      	beq.n	80052e8 <HAL_GPIO_Init+0x1e8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3e      	ldr	r2, [pc, #248]	; (80053c8 <HAL_GPIO_Init+0x2c8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <HAL_GPIO_Init+0x1e4>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3d      	ldr	r2, [pc, #244]	; (80053cc <HAL_GPIO_Init+0x2cc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <HAL_GPIO_Init+0x1e0>
 80052dc:	2303      	movs	r3, #3
 80052de:	e006      	b.n	80052ee <HAL_GPIO_Init+0x1ee>
 80052e0:	2304      	movs	r3, #4
 80052e2:	e004      	b.n	80052ee <HAL_GPIO_Init+0x1ee>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e002      	b.n	80052ee <HAL_GPIO_Init+0x1ee>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_GPIO_Init+0x1ee>
 80052ec:	2300      	movs	r3, #0
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	f002 0203 	and.w	r2, r2, #3
 80052f4:	0092      	lsls	r2, r2, #2
 80052f6:	4093      	lsls	r3, r2
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	492f      	ldr	r1, [pc, #188]	; (80053bc <HAL_GPIO_Init+0x2bc>)
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	089b      	lsrs	r3, r3, #2
 8005304:	3302      	adds	r3, #2
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <HAL_GPIO_Init+0x226>
 8005318:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	492c      	ldr	r1, [pc, #176]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]
 8005324:	e006      	b.n	8005334 <HAL_GPIO_Init+0x234>
 8005326:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	43db      	mvns	r3, r3
 800532e:	4928      	ldr	r1, [pc, #160]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005330:	4013      	ands	r3, r2
 8005332:	608b      	str	r3, [r1, #8]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <HAL_GPIO_Init+0x24e>
 8005340:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	4922      	ldr	r1, [pc, #136]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
 800534c:	e006      	b.n	800535c <HAL_GPIO_Init+0x25c>
 800534e:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	43db      	mvns	r3, r3
 8005356:	491e      	ldr	r1, [pc, #120]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005358:	4013      	ands	r3, r2
 800535a:	60cb      	str	r3, [r1, #12]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d006      	beq.n	8005376 <HAL_GPIO_Init+0x276>
 8005368:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4918      	ldr	r1, [pc, #96]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	604b      	str	r3, [r1, #4]
 8005374:	e006      	b.n	8005384 <HAL_GPIO_Init+0x284>
 8005376:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	43db      	mvns	r3, r3
 800537e:	4914      	ldr	r1, [pc, #80]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005380:	4013      	ands	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d021      	beq.n	80053d4 <HAL_GPIO_Init+0x2d4>
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	490e      	ldr	r1, [pc, #56]	; (80053d0 <HAL_GPIO_Init+0x2d0>)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]
 800539c:	e021      	b.n	80053e2 <HAL_GPIO_Init+0x2e2>
 800539e:	bf00      	nop
 80053a0:	10320000 	.word	0x10320000
 80053a4:	10310000 	.word	0x10310000
 80053a8:	10220000 	.word	0x10220000
 80053ac:	10210000 	.word	0x10210000
 80053b0:	10120000 	.word	0x10120000
 80053b4:	10110000 	.word	0x10110000
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010800 	.word	0x40010800
 80053c4:	40010c00 	.word	0x40010c00
 80053c8:	40011000 	.word	0x40011000
 80053cc:	40011400 	.word	0x40011400
 80053d0:	40010400 	.word	0x40010400
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_GPIO_Init+0x304>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	43db      	mvns	r3, r3
 80053dc:	4909      	ldr	r1, [pc, #36]	; (8005404 <HAL_GPIO_Init+0x304>)
 80053de:	4013      	ands	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	3301      	adds	r3, #1
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	fa22 f303 	lsr.w	r3, r2, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f47f ae8e 	bne.w	8005114 <HAL_GPIO_Init+0x14>
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	372c      	adds	r7, #44	; 0x2c
 80053fe:	46bd      	mov	sp, r7
 8005400:	bc80      	pop	{r7}
 8005402:	4770      	bx	lr
 8005404:	40010400 	.word	0x40010400

08005408 <HAL_GPIO_ReadPin>:
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	887b      	ldrh	r3, [r7, #2]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_GPIO_ReadPin+0x1e>
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e001      	b.n	800542a <HAL_GPIO_ReadPin+0x22>
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <HAL_GPIO_WritePin>:
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	807b      	strh	r3, [r7, #2]
 8005442:	4613      	mov	r3, r2
 8005444:	707b      	strb	r3, [r7, #1]
 8005446:	787b      	ldrb	r3, [r7, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_WritePin+0x1e>
 800544c:	887a      	ldrh	r2, [r7, #2]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]
 8005452:	e003      	b.n	800545c <HAL_GPIO_WritePin+0x26>
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	041a      	lsls	r2, r3, #16
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	611a      	str	r2, [r3, #16]
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
	...

08005468 <HAL_RCC_OscConfig>:
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_RCC_OscConfig+0x12>
 8005476:	2301      	movs	r3, #1
 8005478:	e272      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8087 	beq.w	8005596 <HAL_RCC_OscConfig+0x12e>
 8005488:	4b92      	ldr	r3, [pc, #584]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b04      	cmp	r3, #4
 8005492:	d00c      	beq.n	80054ae <HAL_RCC_OscConfig+0x46>
 8005494:	4b8f      	ldr	r3, [pc, #572]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 030c 	and.w	r3, r3, #12
 800549c:	2b08      	cmp	r3, #8
 800549e:	d112      	bne.n	80054c6 <HAL_RCC_OscConfig+0x5e>
 80054a0:	4b8c      	ldr	r3, [pc, #560]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCC_OscConfig+0x5e>
 80054ae:	4b89      	ldr	r3, [pc, #548]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d06c      	beq.n	8005594 <HAL_RCC_OscConfig+0x12c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d168      	bne.n	8005594 <HAL_RCC_OscConfig+0x12c>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e24c      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ce:	d106      	bne.n	80054de <HAL_RCC_OscConfig+0x76>
 80054d0:	4b80      	ldr	r3, [pc, #512]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7f      	ldr	r2, [pc, #508]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e02e      	b.n	800553c <HAL_RCC_OscConfig+0xd4>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_OscConfig+0x98>
 80054e6:	4b7b      	ldr	r3, [pc, #492]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a7a      	ldr	r2, [pc, #488]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b78      	ldr	r3, [pc, #480]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a77      	ldr	r2, [pc, #476]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xd4>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0xbc>
 800550a:	4b72      	ldr	r3, [pc, #456]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a71      	ldr	r2, [pc, #452]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b6f      	ldr	r3, [pc, #444]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6e      	ldr	r2, [pc, #440]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xd4>
 8005524:	4b6b      	ldr	r3, [pc, #428]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a6a      	ldr	r2, [pc, #424]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b68      	ldr	r3, [pc, #416]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a67      	ldr	r2, [pc, #412]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0x104>
 8005544:	f7fd ff9c 	bl	8003480 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xf6>
 800554c:	f7fd ff98 	bl	8003480 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xf6>
 800555a:	2303      	movs	r3, #3
 800555c:	e200      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 800555e:	4b5d      	ldr	r3, [pc, #372]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xe4>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x12e>
 800556c:	f7fd ff88 	bl	8003480 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x11e>
 8005574:	f7fd ff84 	bl	8003480 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x11e>
 8005582:	2303      	movs	r3, #3
 8005584:	e1ec      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 8005586:	4b53      	ldr	r3, [pc, #332]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x10c>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x12e>
 8005594:	bf00      	nop
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_OscConfig+0x202>
 80055a2:	4b4c      	ldr	r3, [pc, #304]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x15e>
 80055ae:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 030c 	and.w	r3, r3, #12
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x18c>
 80055ba:	4b46      	ldr	r3, [pc, #280]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x18c>
 80055c6:	4b43      	ldr	r3, [pc, #268]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x176>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x176>
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c0      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 80055de:	4b3d      	ldr	r3, [pc, #244]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4939      	ldr	r1, [pc, #228]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x202>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1d6>
 80055fc:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <HAL_RCC_OscConfig+0x270>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f7fd ff3d 	bl	8003480 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x1b4>
 800560a:	f7fd ff39 	bl	8003480 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x1b4>
 8005618:	2303      	movs	r3, #3
 800561a:	e1a1      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 800561c:	4b2d      	ldr	r3, [pc, #180]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x1a2>
 8005628:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4927      	ldr	r1, [pc, #156]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x202>
 800563e:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <HAL_RCC_OscConfig+0x270>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f7fd ff1c 	bl	8003480 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x1f6>
 800564c:	f7fd ff18 	bl	8003480 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x1f6>
 800565a:	2303      	movs	r3, #3
 800565c:	e180      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1e4>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d03a      	beq.n	80056ec <HAL_RCC_OscConfig+0x284>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d019      	beq.n	80056b2 <HAL_RCC_OscConfig+0x24a>
 800567e:	4b17      	ldr	r3, [pc, #92]	; (80056dc <HAL_RCC_OscConfig+0x274>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	f7fd fefc 	bl	8003480 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x236>
 800568c:	f7fd fef8 	bl	8003480 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x236>
 800569a:	2303      	movs	r3, #3
 800569c:	e160      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <HAL_RCC_OscConfig+0x26c>)
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x224>
 80056aa:	2001      	movs	r0, #1
 80056ac:	f000 face 	bl	8005c4c <RCC_Delay>
 80056b0:	e01c      	b.n	80056ec <HAL_RCC_OscConfig+0x284>
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <HAL_RCC_OscConfig+0x274>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f7fd fee2 	bl	8003480 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]
 80056be:	e00f      	b.n	80056e0 <HAL_RCC_OscConfig+0x278>
 80056c0:	f7fd fede 	bl	8003480 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d908      	bls.n	80056e0 <HAL_RCC_OscConfig+0x278>
 80056ce:	2303      	movs	r3, #3
 80056d0:	e146      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 80056d2:	bf00      	nop
 80056d4:	40021000 	.word	0x40021000
 80056d8:	42420000 	.word	0x42420000
 80056dc:	42420480 	.word	0x42420480
 80056e0:	4b92      	ldr	r3, [pc, #584]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e9      	bne.n	80056c0 <HAL_RCC_OscConfig+0x258>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80a6 	beq.w	8005846 <HAL_RCC_OscConfig+0x3de>
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]
 80056fe:	4b8b      	ldr	r3, [pc, #556]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <HAL_RCC_OscConfig+0x2be>
 800570a:	4b88      	ldr	r3, [pc, #544]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4a87      	ldr	r2, [pc, #540]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	61d3      	str	r3, [r2, #28]
 8005716:	4b85      	ldr	r3, [pc, #532]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
 8005726:	4b82      	ldr	r3, [pc, #520]	; (8005930 <HAL_RCC_OscConfig+0x4c8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d118      	bne.n	8005764 <HAL_RCC_OscConfig+0x2fc>
 8005732:	4b7f      	ldr	r3, [pc, #508]	; (8005930 <HAL_RCC_OscConfig+0x4c8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a7e      	ldr	r2, [pc, #504]	; (8005930 <HAL_RCC_OscConfig+0x4c8>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	f7fd fe9f 	bl	8003480 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x2f0>
 8005746:	f7fd fe9b 	bl	8003480 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b64      	cmp	r3, #100	; 0x64
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x2f0>
 8005754:	2303      	movs	r3, #3
 8005756:	e103      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 8005758:	4b75      	ldr	r3, [pc, #468]	; (8005930 <HAL_RCC_OscConfig+0x4c8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x2de>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d106      	bne.n	800577a <HAL_RCC_OscConfig+0x312>
 800576c:	4b6f      	ldr	r3, [pc, #444]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	4a6e      	ldr	r2, [pc, #440]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6213      	str	r3, [r2, #32]
 8005778:	e02d      	b.n	80057d6 <HAL_RCC_OscConfig+0x36e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10c      	bne.n	800579c <HAL_RCC_OscConfig+0x334>
 8005782:	4b6a      	ldr	r3, [pc, #424]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	4a69      	ldr	r2, [pc, #420]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	6213      	str	r3, [r2, #32]
 800578e:	4b67      	ldr	r3, [pc, #412]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	4a66      	ldr	r2, [pc, #408]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005794:	f023 0304 	bic.w	r3, r3, #4
 8005798:	6213      	str	r3, [r2, #32]
 800579a:	e01c      	b.n	80057d6 <HAL_RCC_OscConfig+0x36e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	2b05      	cmp	r3, #5
 80057a2:	d10c      	bne.n	80057be <HAL_RCC_OscConfig+0x356>
 80057a4:	4b61      	ldr	r3, [pc, #388]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	4a60      	ldr	r2, [pc, #384]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057aa:	f043 0304 	orr.w	r3, r3, #4
 80057ae:	6213      	str	r3, [r2, #32]
 80057b0:	4b5e      	ldr	r3, [pc, #376]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	4a5d      	ldr	r2, [pc, #372]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	f043 0301 	orr.w	r3, r3, #1
 80057ba:	6213      	str	r3, [r2, #32]
 80057bc:	e00b      	b.n	80057d6 <HAL_RCC_OscConfig+0x36e>
 80057be:	4b5b      	ldr	r3, [pc, #364]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	4a5a      	ldr	r2, [pc, #360]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	6213      	str	r3, [r2, #32]
 80057ca:	4b58      	ldr	r3, [pc, #352]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	4a57      	ldr	r2, [pc, #348]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	6213      	str	r3, [r2, #32]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d015      	beq.n	800580a <HAL_RCC_OscConfig+0x3a2>
 80057de:	f7fd fe4f 	bl	8003480 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_OscConfig+0x394>
 80057e6:	f7fd fe4b 	bl	8003480 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x394>
 80057f8:	2303      	movs	r3, #3
 80057fa:	e0b1      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 80057fc:	4b4b      	ldr	r3, [pc, #300]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ee      	beq.n	80057e6 <HAL_RCC_OscConfig+0x37e>
 8005808:	e014      	b.n	8005834 <HAL_RCC_OscConfig+0x3cc>
 800580a:	f7fd fe39 	bl	8003480 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]
 8005810:	e00a      	b.n	8005828 <HAL_RCC_OscConfig+0x3c0>
 8005812:	f7fd fe35 	bl	8003480 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x3c0>
 8005824:	2303      	movs	r3, #3
 8005826:	e09b      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 8005828:	4b40      	ldr	r3, [pc, #256]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ee      	bne.n	8005812 <HAL_RCC_OscConfig+0x3aa>
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <HAL_RCC_OscConfig+0x3de>
 800583a:	4b3c      	ldr	r3, [pc, #240]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	4a3b      	ldr	r2, [pc, #236]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005844:	61d3      	str	r3, [r2, #28]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8087 	beq.w	800595e <HAL_RCC_OscConfig+0x4f6>
 8005850:	4b36      	ldr	r3, [pc, #216]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 030c 	and.w	r3, r3, #12
 8005858:	2b08      	cmp	r3, #8
 800585a:	d061      	beq.n	8005920 <HAL_RCC_OscConfig+0x4b8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d146      	bne.n	80058f2 <HAL_RCC_OscConfig+0x48a>
 8005864:	4b33      	ldr	r3, [pc, #204]	; (8005934 <HAL_RCC_OscConfig+0x4cc>)
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	f7fd fe09 	bl	8003480 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x41c>
 8005872:	f7fd fe05 	bl	8003480 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x41c>
 8005880:	2303      	movs	r3, #3
 8005882:	e06d      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 8005884:	4b29      	ldr	r3, [pc, #164]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <HAL_RCC_OscConfig+0x40a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005898:	d108      	bne.n	80058ac <HAL_RCC_OscConfig+0x444>
 800589a:	4b24      	ldr	r3, [pc, #144]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	4921      	ldr	r1, [pc, #132]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]
 80058ac:	4b1f      	ldr	r3, [pc, #124]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a19      	ldr	r1, [r3, #32]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	430b      	orrs	r3, r1
 80058be:	491b      	ldr	r1, [pc, #108]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]
 80058c4:	4b1b      	ldr	r3, [pc, #108]	; (8005934 <HAL_RCC_OscConfig+0x4cc>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	f7fd fdd9 	bl	8003480 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x47c>
 80058d2:	f7fd fdd5 	bl	8003480 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x47c>
 80058e0:	2303      	movs	r3, #3
 80058e2:	e03d      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x46a>
 80058f0:	e035      	b.n	800595e <HAL_RCC_OscConfig+0x4f6>
 80058f2:	4b10      	ldr	r3, [pc, #64]	; (8005934 <HAL_RCC_OscConfig+0x4cc>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f7fd fdc2 	bl	8003480 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x4aa>
 8005900:	f7fd fdbe 	bl	8003480 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x4aa>
 800590e:	2303      	movs	r3, #3
 8005910:	e026      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_RCC_OscConfig+0x4c4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x498>
 800591e:	e01e      	b.n	800595e <HAL_RCC_OscConfig+0x4f6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d107      	bne.n	8005938 <HAL_RCC_OscConfig+0x4d0>
 8005928:	2301      	movs	r3, #1
 800592a:	e019      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 800592c:	40021000 	.word	0x40021000
 8005930:	40007000 	.word	0x40007000
 8005934:	42420060 	.word	0x42420060
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_OscConfig+0x500>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	429a      	cmp	r2, r3
 800594a:	d106      	bne.n	800595a <HAL_RCC_OscConfig+0x4f2>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	429a      	cmp	r2, r3
 8005958:	d001      	beq.n	800595e <HAL_RCC_OscConfig+0x4f6>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_RCC_OscConfig+0x4f8>
 800595e:	2300      	movs	r3, #0
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40021000 	.word	0x40021000

0800596c <HAL_RCC_ClockConfig>:
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x14>
 800597c:	2301      	movs	r3, #1
 800597e:	e0d0      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1b6>
 8005980:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d910      	bls.n	80059b0 <HAL_RCC_ClockConfig+0x44>
 800598e:	4b67      	ldr	r3, [pc, #412]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 0207 	bic.w	r2, r3, #7
 8005996:	4965      	ldr	r1, [pc, #404]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
 800599e:	4b63      	ldr	r3, [pc, #396]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d001      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x44>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0b8      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1b6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d020      	beq.n	80059fe <HAL_RCC_ClockConfig+0x92>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x68>
 80059c8:	4b59      	ldr	r3, [pc, #356]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a58      	ldr	r2, [pc, #352]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059d2:	6053      	str	r3, [r2, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0x80>
 80059e0:	4b53      	ldr	r3, [pc, #332]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a52      	ldr	r2, [pc, #328]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 80059e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059ea:	6053      	str	r3, [r2, #4]
 80059ec:	4b50      	ldr	r3, [pc, #320]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	494d      	ldr	r1, [pc, #308]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d040      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x120>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d107      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xb6>
 8005a12:	4b47      	ldr	r3, [pc, #284]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d115      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e07f      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1b6>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d107      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xce>
 8005a2a:	4b41      	ldr	r3, [pc, #260]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e073      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1b6>
 8005a3a:	4b3d      	ldr	r3, [pc, #244]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xde>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06b      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1b6>
 8005a4a:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f023 0203 	bic.w	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4936      	ldr	r1, [pc, #216]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
 8005a5c:	f7fd fd10 	bl	8003480 <HAL_GetTick>
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
 8005a64:	f7fd fd0c 	bl	8003480 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_ClockConfig+0x10e>
 8005a76:	2303      	movs	r3, #3
 8005a78:	e053      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1b6>
 8005a7a:	4b2d      	ldr	r3, [pc, #180]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 020c 	and.w	r2, r3, #12
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d1eb      	bne.n	8005a64 <HAL_RCC_ClockConfig+0xf8>
 8005a8c:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d210      	bcs.n	8005abc <HAL_RCC_ClockConfig+0x150>
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f023 0207 	bic.w	r2, r3, #7
 8005aa2:	4922      	ldr	r1, [pc, #136]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
 8005aaa:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_RCC_ClockConfig+0x1c0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_ClockConfig+0x150>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e032      	b.n	8005b22 <HAL_RCC_ClockConfig+0x1b6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <HAL_RCC_ClockConfig+0x16e>
 8005ac8:	4b19      	ldr	r3, [pc, #100]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4916      	ldr	r1, [pc, #88]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <HAL_RCC_ClockConfig+0x18e>
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	490e      	ldr	r1, [pc, #56]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
 8005afa:	f000 f821 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8005afe:	4602      	mov	r2, r0
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <HAL_RCC_ClockConfig+0x1c4>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	490a      	ldr	r1, [pc, #40]	; (8005b34 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0c:	5ccb      	ldrb	r3, [r1, r3]
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	4a09      	ldr	r2, [pc, #36]	; (8005b38 <HAL_RCC_ClockConfig+0x1cc>)
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <HAL_RCC_ClockConfig+0x1d0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fd fc6e 	bl	80033fc <HAL_InitTick>
 8005b20:	2300      	movs	r3, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40022000 	.word	0x40022000
 8005b30:	40021000 	.word	0x40021000
 8005b34:	08007c44 	.word	0x08007c44
 8005b38:	2000000c 	.word	0x2000000c
 8005b3c:	20000010 	.word	0x20000010

08005b40 <HAL_RCC_GetSysClockFreq>:
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	2300      	movs	r3, #0
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d002      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x30>
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d003      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x36>
 8005b6e:	e027      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x80>
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	e027      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x86>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	0c9b      	lsrs	r3, r3, #18
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b80:	5cd3      	ldrb	r3, [r2, r3]
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d010      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x70>
 8005b8e:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	0c5b      	lsrs	r3, r3, #17
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a0d      	ldr	r2, [pc, #52]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ba2:	fb03 f202 	mul.w	r2, r3, r2
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e004      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0x7a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	e002      	b.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x86>
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	bf00      	nop
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000
 8005bd8:	007a1200 	.word	0x007a1200
 8005bdc:	08007c5c 	.word	0x08007c5c
 8005be0:	08007c6c 	.word	0x08007c6c
 8005be4:	003d0900 	.word	0x003d0900

08005be8 <HAL_RCC_GetHCLKFreq>:
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	4b02      	ldr	r3, [pc, #8]	; (8005bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	2000000c 	.word	0x2000000c

08005bfc <HAL_RCC_GetPCLK1Freq>:
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	f7ff fff2 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c04:	4602      	mov	r2, r0
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	0a1b      	lsrs	r3, r3, #8
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	4903      	ldr	r1, [pc, #12]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c12:	5ccb      	ldrb	r3, [r1, r3]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	4618      	mov	r0, r3
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	08007c54 	.word	0x08007c54

08005c24 <HAL_RCC_GetPCLK2Freq>:
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	f7ff ffde 	bl	8005be8 <HAL_RCC_GetHCLKFreq>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	0adb      	lsrs	r3, r3, #11
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	4903      	ldr	r1, [pc, #12]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c3a:	5ccb      	ldrb	r3, [r1, r3]
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	08007c54 	.word	0x08007c54

08005c4c <RCC_Delay>:
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <RCC_Delay+0x34>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <RCC_Delay+0x38>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	0a5b      	lsrs	r3, r3, #9
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	bf00      	nop
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	60fa      	str	r2, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1f9      	bne.n	8005c68 <RCC_Delay+0x1c>
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	2000000c 	.word	0x2000000c
 8005c84:	10624dd3 	.word	0x10624dd3

08005c88 <HAL_RCCEx_PeriphCLKConfig>:
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d07d      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	75fb      	strb	r3, [r7, #23]
 8005ca8:	4b4f      	ldr	r3, [pc, #316]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10d      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8005cb4:	4b4c      	ldr	r3, [pc, #304]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4a4b      	ldr	r2, [pc, #300]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	61d3      	str	r3, [r2, #28]
 8005cc0:	4b49      	ldr	r3, [pc, #292]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
 8005cd0:	4b46      	ldr	r3, [pc, #280]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d118      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x86>
 8005cdc:	4b43      	ldr	r3, [pc, #268]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a42      	ldr	r2, [pc, #264]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	f7fd fbca 	bl	8003480 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]
 8005cee:	e008      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cf0:	f7fd fbc6 	bl	8003480 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e06d      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005d02:	4b3a      	ldr	r3, [pc, #232]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005d0e:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02e      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d027      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d2c:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	4b2e      	ldr	r3, [pc, #184]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d38:	2201      	movs	r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	4b2c      	ldr	r3, [pc, #176]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6213      	str	r3, [r2, #32]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d014      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d52:	f7fd fb95 	bl	8003480 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]
 8005d58:	e00a      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d5a:	f7fd fb91 	bl	8003480 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e036      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x156>
 8005d70:	4b1d      	ldr	r3, [pc, #116]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0ee      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4917      	ldr	r1, [pc, #92]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	620b      	str	r3, [r1, #32]
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d105      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8005d94:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	61d3      	str	r3, [r2, #28]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d008      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005dac:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	490b      	ldr	r1, [pc, #44]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	604b      	str	r3, [r1, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	4904      	ldr	r1, [pc, #16]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	604b      	str	r3, [r1, #4]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40021000 	.word	0x40021000
 8005dec:	40007000 	.word	0x40007000
 8005df0:	42420440 	.word	0x42420440

08005df4 <HAL_RCCEx_GetPeriphCLKFreq>:
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	2300      	movs	r3, #0
 8005e02:	61fb      	str	r3, [r7, #28]
 8005e04:	2300      	movs	r3, #0
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	f200 808a 	bhi.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d045      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d075      	beq.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005e2a:	e082      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005e2c:	4b46      	ldr	r3, [pc, #280]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	4b45      	ldr	r3, [pc, #276]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d07b      	beq.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	0c9b      	lsrs	r3, r3, #18
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	4a41      	ldr	r2, [pc, #260]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005e48:	5cd3      	ldrb	r3, [r2, r3]
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d015      	beq.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8005e56:	4b3c      	ldr	r3, [pc, #240]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	0c5b      	lsrs	r3, r3, #17
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	4a3b      	ldr	r2, [pc, #236]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005e62:	5cd3      	ldrb	r3, [r2, r3]
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00d      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8005e70:	4a38      	ldr	r2, [pc, #224]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e004      	b.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4a34      	ldr	r2, [pc, #208]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e98:	d102      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	e04a      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4a2d      	ldr	r2, [pc, #180]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e042      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8005eb0:	4b25      	ldr	r3, [pc, #148]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec0:	d108      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	e01f      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ede:	d109      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ee0:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005eec:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e00f      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005efe:	d11c      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d016      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f0c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e012      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f14:	e011      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005f16:	f7ff fe85 	bl	8005c24 <HAL_RCC_GetPCLK2Freq>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	0b9b      	lsrs	r3, r3, #14
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	3301      	adds	r3, #1
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e004      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005f32:	bf00      	nop
 8005f34:	e002      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005f3a:	bf00      	nop
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	08007c70 	.word	0x08007c70
 8005f50:	08007c80 	.word	0x08007c80
 8005f54:	007a1200 	.word	0x007a1200
 8005f58:	003d0900 	.word	0x003d0900
 8005f5c:	aaaaaaab 	.word	0xaaaaaaab

08005f60 <HAL_TIM_Base_Init>:
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_Base_Init+0x12>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e041      	b.n	8005ff6 <HAL_TIM_Base_Init+0x96>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_TIM_Base_Init+0x2c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc ffee 	bl	8002f68 <HAL_TIM_Base_MspInit>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f000 fbd8 	bl	8006754 <TIM_Base_SetConfig>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_TIM_Base_Start>:
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d001      	beq.n	8006018 <HAL_TIM_Base_Start+0x18>
 8006014:	2301      	movs	r3, #1
 8006016:	e032      	b.n	800607e <HAL_TIM_Base_Start+0x7e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_TIM_Base_Start+0x88>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <HAL_TIM_Base_Start+0x48>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006032:	d009      	beq.n	8006048 <HAL_TIM_Base_Start+0x48>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a14      	ldr	r2, [pc, #80]	; (800608c <HAL_TIM_Base_Start+0x8c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <HAL_TIM_Base_Start+0x48>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a13      	ldr	r2, [pc, #76]	; (8006090 <HAL_TIM_Base_Start+0x90>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d111      	bne.n	800606c <HAL_TIM_Base_Start+0x6c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b06      	cmp	r3, #6
 8006058:	d010      	beq.n	800607c <HAL_TIM_Base_Start+0x7c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	e007      	b.n	800607c <HAL_TIM_Base_Start+0x7c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	2300      	movs	r3, #0
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr
 8006088:	40012c00 	.word	0x40012c00
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800

08006094 <HAL_TIM_Base_Start_IT>:
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d001      	beq.n	80060ac <HAL_TIM_Base_Start_IT+0x18>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e03a      	b.n	8006122 <HAL_TIM_Base_Start_IT+0x8e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	60da      	str	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_TIM_Base_Start_IT+0x98>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00e      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x58>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d009      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x58>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a14      	ldr	r2, [pc, #80]	; (8006130 <HAL_TIM_Base_Start_IT+0x9c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d004      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x58>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a13      	ldr	r2, [pc, #76]	; (8006134 <HAL_TIM_Base_Start_IT+0xa0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d111      	bne.n	8006110 <HAL_TIM_Base_Start_IT+0x7c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d010      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0x8c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e007      	b.n	8006120 <HAL_TIM_Base_Start_IT+0x8c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	2300      	movs	r3, #0
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40000400 	.word	0x40000400
 8006134:	40000800 	.word	0x40000800

08006138 <HAL_TIM_PWM_Init>:
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_Init+0x12>
 8006146:	2301      	movs	r3, #1
 8006148:	e041      	b.n	80061ce <HAL_TIM_PWM_Init+0x96>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_TIM_PWM_Init+0x2c>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f839 	bl	80061d6 <HAL_TIM_PWM_MspInit>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f000 faec 	bl	8006754 <TIM_Base_SetConfig>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061cc:	2300      	movs	r3, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_TIM_PWM_MspInit>:
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <HAL_TIM_IRQHandler>:
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0x5c>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b02      	cmp	r3, #2
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0x5c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0202 	mvn.w	r2, #2
 8006214:	611a      	str	r2, [r3, #16]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	771a      	strb	r2, [r3, #28]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x4a>
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa76 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0x56>
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa69 	bl	800670a <HAL_TIM_OC_DelayElapsedCallback>
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fa78 	bl	800672e <HAL_TIM_PWM_PulseFinishedCallback>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0304 	and.w	r3, r3, #4
 800624e:	2b04      	cmp	r3, #4
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0xb0>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b04      	cmp	r3, #4
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0xb0>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0204 	mvn.w	r2, #4
 8006268:	611a      	str	r2, [r3, #16]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	771a      	strb	r2, [r3, #28]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0x9e>
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fa4c 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0xaa>
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa3f 	bl	800670a <HAL_TIM_OC_DelayElapsedCallback>
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa4e 	bl	800672e <HAL_TIM_PWM_PulseFinishedCallback>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0x104>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0x104>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0208 	mvn.w	r2, #8
 80062bc:	611a      	str	r2, [r3, #16]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2204      	movs	r2, #4
 80062c2:	771a      	strb	r2, [r3, #28]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0xf2>
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fa22 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0xfe>
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa15 	bl	800670a <HAL_TIM_OC_DelayElapsedCallback>
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa24 	bl	800672e <HAL_TIM_PWM_PulseFinishedCallback>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b10      	cmp	r3, #16
 80062f8:	d122      	bne.n	8006340 <HAL_TIM_IRQHandler+0x158>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b10      	cmp	r3, #16
 8006306:	d11b      	bne.n	8006340 <HAL_TIM_IRQHandler+0x158>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0210 	mvn.w	r2, #16
 8006310:	611a      	str	r2, [r3, #16]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2208      	movs	r2, #8
 8006316:	771a      	strb	r2, [r3, #28]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_TIM_IRQHandler+0x146>
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f9f8 	bl	800671c <HAL_TIM_IC_CaptureCallback>
 800632c:	e005      	b.n	800633a <HAL_TIM_IRQHandler+0x152>
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f9eb 	bl	800670a <HAL_TIM_OC_DelayElapsedCallback>
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f9fa 	bl	800672e <HAL_TIM_PWM_PulseFinishedCallback>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	771a      	strb	r2, [r3, #28]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d10e      	bne.n	800636c <HAL_TIM_IRQHandler+0x184>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d107      	bne.n	800636c <HAL_TIM_IRQHandler+0x184>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0201 	mvn.w	r2, #1
 8006364:	611a      	str	r2, [r3, #16]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fc fbf0 	bl	8002b4c <HAL_TIM_PeriodElapsedCallback>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b80      	cmp	r3, #128	; 0x80
 8006378:	d10e      	bne.n	8006398 <HAL_TIM_IRQHandler+0x1b0>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006384:	2b80      	cmp	r3, #128	; 0x80
 8006386:	d107      	bne.n	8006398 <HAL_TIM_IRQHandler+0x1b0>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006390:	611a      	str	r2, [r3, #16]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fdb4 	bl	8006f00 <HAL_TIMEx_BreakCallback>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d10e      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x1dc>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b0:	2b40      	cmp	r3, #64	; 0x40
 80063b2:	d107      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x1dc>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063bc:	611a      	str	r2, [r3, #16]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f9be 	bl	8006740 <HAL_TIM_TriggerCallback>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d10e      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x208>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d107      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x208>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0220 	mvn.w	r2, #32
 80063e8:	611a      	str	r2, [r3, #16]
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fd7f 	bl	8006eee <HAL_TIMEx_CommutCallback>
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_PWM_ConfigChannel>:
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	2300      	movs	r3, #0
 8006406:	75fb      	strb	r3, [r7, #23]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006412:	2302      	movs	r3, #2
 8006414:	e0ae      	b.n	8006574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	f200 809f 	bhi.w	8006564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006461 	.word	0x08006461
 8006430:	08006565 	.word	0x08006565
 8006434:	08006565 	.word	0x08006565
 8006438:	08006565 	.word	0x08006565
 800643c:	080064a1 	.word	0x080064a1
 8006440:	08006565 	.word	0x08006565
 8006444:	08006565 	.word	0x08006565
 8006448:	08006565 	.word	0x08006565
 800644c:	080064e3 	.word	0x080064e3
 8006450:	08006565 	.word	0x08006565
 8006454:	08006565 	.word	0x08006565
 8006458:	08006565 	.word	0x08006565
 800645c:	08006523 	.word	0x08006523
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f9d6 	bl	8006818 <TIM_OC1_SetConfig>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0208 	orr.w	r2, r2, #8
 800647a:	619a      	str	r2, [r3, #24]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0204 	bic.w	r2, r2, #4
 800648a:	619a      	str	r2, [r3, #24]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6999      	ldr	r1, [r3, #24]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	619a      	str	r2, [r3, #24]
 800649e:	e064      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68b9      	ldr	r1, [r7, #8]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fa1c 	bl	80068e4 <TIM_OC2_SetConfig>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699a      	ldr	r2, [r3, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ba:	619a      	str	r2, [r3, #24]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ca:	619a      	str	r2, [r3, #24]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6999      	ldr	r1, [r3, #24]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	021a      	lsls	r2, r3, #8
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	619a      	str	r2, [r3, #24]
 80064e0:	e043      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fa65 	bl	80069b8 <TIM_OC3_SetConfig>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0208 	orr.w	r2, r2, #8
 80064fc:	61da      	str	r2, [r3, #28]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0204 	bic.w	r2, r2, #4
 800650c:	61da      	str	r2, [r3, #28]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69d9      	ldr	r1, [r3, #28]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	61da      	str	r2, [r3, #28]
 8006520:	e023      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 faaf 	bl	8006a8c <TIM_OC4_SetConfig>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653c:	61da      	str	r2, [r3, #28]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69da      	ldr	r2, [r3, #28]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654c:	61da      	str	r2, [r3, #28]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69d9      	ldr	r1, [r3, #28]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	021a      	lsls	r2, r3, #8
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	61da      	str	r2, [r3, #28]
 8006562:	e002      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x172>
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]
 8006568:	bf00      	nop
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_TIM_ConfigClockSource>:
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_TIM_ConfigClockSource+0x1c>
 8006594:	2302      	movs	r3, #2
 8006596:	e0b4      	b.n	8006702 <HAL_TIM_ConfigClockSource+0x186>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	60bb      	str	r3, [r7, #8]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065b6:	60bb      	str	r3, [r7, #8]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065be:	60bb      	str	r3, [r7, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	609a      	str	r2, [r3, #8]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d0:	d03e      	beq.n	8006650 <HAL_TIM_ConfigClockSource+0xd4>
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d6:	f200 8087 	bhi.w	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065de:	f000 8086 	beq.w	80066ee <HAL_TIM_ConfigClockSource+0x172>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	d87f      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b70      	cmp	r3, #112	; 0x70
 80065ea:	d01a      	beq.n	8006622 <HAL_TIM_ConfigClockSource+0xa6>
 80065ec:	2b70      	cmp	r3, #112	; 0x70
 80065ee:	d87b      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b60      	cmp	r3, #96	; 0x60
 80065f2:	d050      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x11a>
 80065f4:	2b60      	cmp	r3, #96	; 0x60
 80065f6:	d877      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b50      	cmp	r3, #80	; 0x50
 80065fa:	d03c      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0xfa>
 80065fc:	2b50      	cmp	r3, #80	; 0x50
 80065fe:	d873      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d058      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d86f      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b30      	cmp	r3, #48	; 0x30
 800660a:	d064      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 800660c:	2b30      	cmp	r3, #48	; 0x30
 800660e:	d86b      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b20      	cmp	r3, #32
 8006612:	d060      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006614:	2b20      	cmp	r3, #32
 8006616:	d867      	bhi.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d05c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 800661c:	2b10      	cmp	r3, #16
 800661e:	d05a      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006620:	e062      	b.n	80066e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6899      	ldr	r1, [r3, #8]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f000 faf0 	bl	8006c16 <TIM_ETR_SetConfig>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	609a      	str	r2, [r3, #8]
 800664e:	e04f      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6899      	ldr	r1, [r3, #8]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f000 fad9 	bl	8006c16 <TIM_ETR_SetConfig>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	e03c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6859      	ldr	r1, [r3, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	461a      	mov	r2, r3
 8006684:	f000 fa50 	bl	8006b28 <TIM_TI1_ConfigInputStage>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2150      	movs	r1, #80	; 0x50
 800668e:	4618      	mov	r0, r3
 8006690:	f000 faa7 	bl	8006be2 <TIM_ITRx_SetConfig>
 8006694:	e02c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6859      	ldr	r1, [r3, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f000 fa6e 	bl	8006b84 <TIM_TI2_ConfigInputStage>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2160      	movs	r1, #96	; 0x60
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fa97 	bl	8006be2 <TIM_ITRx_SetConfig>
 80066b4:	e01c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6859      	ldr	r1, [r3, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 fa30 	bl	8006b28 <TIM_TI1_ConfigInputStage>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fa87 	bl	8006be2 <TIM_ITRx_SetConfig>
 80066d4:	e00c      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f000 fa7e 	bl	8006be2 <TIM_ITRx_SetConfig>
 80066e6:	e003      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e000      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0x174>
 80066ee:	bf00      	nop
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_TIM_OC_DelayElapsedCallback>:
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <HAL_TIM_IC_CaptureCallback>:
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <HAL_TIM_PWM_PulseFinishedCallback>:
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr

08006740 <HAL_TIM_TriggerCallback>:
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr
	...

08006754 <TIM_Base_SetConfig>:
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a29      	ldr	r2, [pc, #164]	; (800680c <TIM_Base_SetConfig+0xb8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00b      	beq.n	8006784 <TIM_Base_SetConfig+0x30>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006772:	d007      	beq.n	8006784 <TIM_Base_SetConfig+0x30>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a26      	ldr	r2, [pc, #152]	; (8006810 <TIM_Base_SetConfig+0xbc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_Base_SetConfig+0x30>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a25      	ldr	r2, [pc, #148]	; (8006814 <TIM_Base_SetConfig+0xc0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d108      	bne.n	8006796 <TIM_Base_SetConfig+0x42>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1c      	ldr	r2, [pc, #112]	; (800680c <TIM_Base_SetConfig+0xb8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00b      	beq.n	80067b6 <TIM_Base_SetConfig+0x62>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a4:	d007      	beq.n	80067b6 <TIM_Base_SetConfig+0x62>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a19      	ldr	r2, [pc, #100]	; (8006810 <TIM_Base_SetConfig+0xbc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d003      	beq.n	80067b6 <TIM_Base_SetConfig+0x62>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a18      	ldr	r2, [pc, #96]	; (8006814 <TIM_Base_SetConfig+0xc0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d108      	bne.n	80067c8 <TIM_Base_SetConfig+0x74>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a07      	ldr	r2, [pc, #28]	; (800680c <TIM_Base_SetConfig+0xb8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d103      	bne.n	80067fc <TIM_Base_SetConfig+0xa8>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	615a      	str	r2, [r3, #20]
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800

08006818 <TIM_OC1_SetConfig>:
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f023 0201 	bic.w	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 0302 	bic.w	r3, r3, #2
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a1c      	ldr	r2, [pc, #112]	; (80068e0 <TIM_OC1_SetConfig+0xc8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10c      	bne.n	800688e <TIM_OC1_SetConfig+0x76>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0308 	bic.w	r3, r3, #8
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <TIM_OC1_SetConfig+0xc8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d111      	bne.n	80068ba <TIM_OC1_SetConfig+0xa2>
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	605a      	str	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	619a      	str	r2, [r3, #24]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	635a      	str	r2, [r3, #52]	; 0x34
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	621a      	str	r2, [r3, #32]
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40012c00 	.word	0x40012c00

080068e4 <TIM_OC2_SetConfig>:
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f023 0210 	bic.w	r2, r3, #16
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	621a      	str	r2, [r3, #32]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0320 	bic.w	r3, r3, #32
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	011b      	lsls	r3, r3, #4
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <TIM_OC2_SetConfig+0xd0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d10d      	bne.n	8006960 <TIM_OC2_SetConfig+0x7c>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a14      	ldr	r2, [pc, #80]	; (80069b4 <TIM_OC2_SetConfig+0xd0>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d113      	bne.n	8006990 <TIM_OC2_SetConfig+0xac>
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	619a      	str	r2, [r3, #24]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00

080069b8 <TIM_OC3_SetConfig>:
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	621a      	str	r2, [r3, #32]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0303 	bic.w	r3, r3, #3
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <TIM_OC3_SetConfig+0xd0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d10d      	bne.n	8006a32 <TIM_OC3_SetConfig+0x7a>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a14      	ldr	r2, [pc, #80]	; (8006a88 <TIM_OC3_SetConfig+0xd0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d113      	bne.n	8006a62 <TIM_OC3_SetConfig+0xaa>
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	61da      	str	r2, [r3, #28]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	621a      	str	r2, [r3, #32]
 8006a7c:	bf00      	nop
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40012c00 	.word	0x40012c00

08006a8c <TIM_OC4_SetConfig>:
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a0f      	ldr	r2, [pc, #60]	; (8006b24 <TIM_OC4_SetConfig+0x98>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d109      	bne.n	8006b00 <TIM_OC4_SetConfig+0x74>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	019b      	lsls	r3, r3, #6
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	605a      	str	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	61da      	str	r2, [r3, #28]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	641a      	str	r2, [r3, #64]	; 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	621a      	str	r2, [r3, #32]
 8006b1a:	bf00      	nop
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr
 8006b24:	40012c00 	.word	0x40012c00

08006b28 <TIM_TI1_ConfigInputStage>:
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f023 0201 	bic.w	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 030a 	bic.w	r3, r3, #10
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	619a      	str	r2, [r3, #24]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	621a      	str	r2, [r3, #32]
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <TIM_TI2_ConfigInputStage>:
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f023 0210 	bic.w	r2, r3, #16
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	621a      	str	r2, [r3, #32]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	031b      	lsls	r3, r3, #12
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	619a      	str	r2, [r3, #24]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	621a      	str	r2, [r3, #32]
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <TIM_ITRx_SetConfig>:
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f043 0307 	orr.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr

08006c16 <TIM_ETR_SetConfig>:
 8006c16:	b480      	push	{r7}
 8006c18:	b087      	sub	sp, #28
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	021a      	lsls	r2, r3, #8
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	609a      	str	r2, [r3, #8]
 8006c4a:	bf00      	nop
 8006c4c:	371c      	adds	r7, #28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_PWMN_Start>:
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d109      	bne.n	8006c78 <HAL_TIMEx_PWMN_Start+0x24>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e022      	b.n	8006cbe <HAL_TIMEx_PWMN_Start+0x6a>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d109      	bne.n	8006c92 <HAL_TIMEx_PWMN_Start+0x3e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	e015      	b.n	8006cbe <HAL_TIMEx_PWMN_Start+0x6a>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d109      	bne.n	8006cac <HAL_TIMEx_PWMN_Start+0x58>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	e008      	b.n	8006cbe <HAL_TIMEx_PWMN_Start+0x6a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_TIMEx_PWMN_Start+0x72>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e059      	b.n	8006d7a <HAL_TIMEx_PWMN_Start+0x126>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIMEx_PWMN_Start+0x82>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd4:	e013      	b.n	8006cfe <HAL_TIMEx_PWMN_Start+0xaa>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIMEx_PWMN_Start+0x92>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce4:	e00b      	b.n	8006cfe <HAL_TIMEx_PWMN_Start+0xaa>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d104      	bne.n	8006cf6 <HAL_TIMEx_PWMN_Start+0xa2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cf4:	e003      	b.n	8006cfe <HAL_TIMEx_PWMN_Start+0xaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2204      	movs	r2, #4
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 f903 	bl	8006f12 <TIM_CCxNChannelCmd>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <HAL_TIMEx_PWMN_Start+0x130>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_TIMEx_PWMN_Start+0xf0>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2e:	d009      	beq.n	8006d44 <HAL_TIMEx_PWMN_Start+0xf0>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a14      	ldr	r2, [pc, #80]	; (8006d88 <HAL_TIMEx_PWMN_Start+0x134>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_TIMEx_PWMN_Start+0xf0>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <HAL_TIMEx_PWMN_Start+0x138>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d111      	bne.n	8006d68 <HAL_TIMEx_PWMN_Start+0x114>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b06      	cmp	r3, #6
 8006d54:	d010      	beq.n	8006d78 <HAL_TIMEx_PWMN_Start+0x124>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e007      	b.n	8006d78 <HAL_TIMEx_PWMN_Start+0x124>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40012c00 	.word	0x40012c00
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800

08006d90 <HAL_TIMEx_MasterConfigSynchronization>:
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e046      	b.n	8006e36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df4:	d009      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a12      	ldr	r2, [pc, #72]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a10      	ldr	r2, [pc, #64]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d10c      	bne.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e34:	2300      	movs	r3, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40000400 	.word	0x40000400
 8006e48:	40000800 	.word	0x40000800

08006e4c <HAL_TIMEx_ConfigBreakDeadTime>:
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e03d      	b.n	8006ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	645a      	str	r2, [r3, #68]	; 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr

08006eee <HAL_TIMEx_CommutCallback>:
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_BreakCallback>:
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr

08006f12 <TIM_CCxNChannelCmd>:
 8006f12:	b480      	push	{r7}
 8006f14:	b087      	sub	sp, #28
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	2204      	movs	r2, #4
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1a      	ldr	r2, [r3, #32]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	43db      	mvns	r3, r3
 8006f34:	401a      	ands	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	621a      	str	r2, [r3, #32]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1a      	ldr	r2, [r3, #32]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	621a      	str	r2, [r3, #32]
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr

08006f5a <HAL_UART_Init>:
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_UART_Init+0x12>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e042      	b.n	8006ff2 <HAL_UART_Init+0x98>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <HAL_UART_Init+0x2c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7fc f871 	bl	8003068 <HAL_UART_MspInit>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2224      	movs	r2, #36	; 0x24
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f82c 	bl	8006ffc <UART_SetConfig>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691a      	ldr	r2, [r3, #16]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fb2:	611a      	str	r2, [r3, #16]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695a      	ldr	r2, [r3, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fc2:	615a      	str	r2, [r3, #20]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	635a      	str	r2, [r3, #52]	; 0x34
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <UART_SetConfig>:
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	611a      	str	r2, [r3, #16]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007036:	f023 030c 	bic.w	r3, r3, #12
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	430b      	orrs	r3, r1
 8007042:	60d3      	str	r3, [r2, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699a      	ldr	r2, [r3, #24]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	615a      	str	r2, [r3, #20]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <UART_SetConfig+0x114>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d103      	bne.n	800706c <UART_SetConfig+0x70>
 8007064:	f7fe fdde 	bl	8005c24 <HAL_RCC_GetPCLK2Freq>
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	e002      	b.n	8007072 <UART_SetConfig+0x76>
 800706c:	f7fe fdc6 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009a      	lsls	r2, r3, #2
 800707c:	441a      	add	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	fbb2 f3f3 	udiv	r3, r2, r3
 8007088:	4a22      	ldr	r2, [pc, #136]	; (8007114 <UART_SetConfig+0x118>)
 800708a:	fba2 2303 	umull	r2, r3, r2, r3
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	0119      	lsls	r1, r3, #4
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009a      	lsls	r2, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a8:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <UART_SetConfig+0x118>)
 80070aa:	fba3 0302 	umull	r0, r3, r3, r2
 80070ae:	095b      	lsrs	r3, r3, #5
 80070b0:	2064      	movs	r0, #100	; 0x64
 80070b2:	fb00 f303 	mul.w	r3, r0, r3
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	3332      	adds	r3, #50	; 0x32
 80070bc:	4a15      	ldr	r2, [pc, #84]	; (8007114 <UART_SetConfig+0x118>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070c8:	4419      	add	r1, r3
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4613      	mov	r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	009a      	lsls	r2, r3, #2
 80070d4:	441a      	add	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <UART_SetConfig+0x118>)
 80070e2:	fba3 0302 	umull	r0, r3, r3, r2
 80070e6:	095b      	lsrs	r3, r3, #5
 80070e8:	2064      	movs	r0, #100	; 0x64
 80070ea:	fb00 f303 	mul.w	r3, r0, r3
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	3332      	adds	r3, #50	; 0x32
 80070f4:	4a07      	ldr	r2, [pc, #28]	; (8007114 <UART_SetConfig+0x118>)
 80070f6:	fba2 2303 	umull	r2, r3, r2, r3
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	440a      	add	r2, r1
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40013800 	.word	0x40013800
 8007114:	51eb851f 	.word	0x51eb851f

08007118 <_vsiprintf_r>:
 8007118:	b500      	push	{lr}
 800711a:	b09b      	sub	sp, #108	; 0x6c
 800711c:	9100      	str	r1, [sp, #0]
 800711e:	9104      	str	r1, [sp, #16]
 8007120:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007124:	9105      	str	r1, [sp, #20]
 8007126:	9102      	str	r1, [sp, #8]
 8007128:	4905      	ldr	r1, [pc, #20]	; (8007140 <_vsiprintf_r+0x28>)
 800712a:	9103      	str	r1, [sp, #12]
 800712c:	4669      	mov	r1, sp
 800712e:	f000 f995 	bl	800745c <_svfiprintf_r>
 8007132:	2200      	movs	r2, #0
 8007134:	9b00      	ldr	r3, [sp, #0]
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	b01b      	add	sp, #108	; 0x6c
 800713a:	f85d fb04 	ldr.w	pc, [sp], #4
 800713e:	bf00      	nop
 8007140:	ffff0208 	.word	0xffff0208

08007144 <vsiprintf>:
 8007144:	4613      	mov	r3, r2
 8007146:	460a      	mov	r2, r1
 8007148:	4601      	mov	r1, r0
 800714a:	4802      	ldr	r0, [pc, #8]	; (8007154 <vsiprintf+0x10>)
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f7ff bfe3 	b.w	8007118 <_vsiprintf_r>
 8007152:	bf00      	nop
 8007154:	20000064 	.word	0x20000064

08007158 <memset>:
 8007158:	4603      	mov	r3, r0
 800715a:	4402      	add	r2, r0
 800715c:	4293      	cmp	r3, r2
 800715e:	d100      	bne.n	8007162 <memset+0xa>
 8007160:	4770      	bx	lr
 8007162:	f803 1b01 	strb.w	r1, [r3], #1
 8007166:	e7f9      	b.n	800715c <memset+0x4>

08007168 <__errno>:
 8007168:	4b01      	ldr	r3, [pc, #4]	; (8007170 <__errno+0x8>)
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000064 	.word	0x20000064

08007174 <__libc_init_array>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	2600      	movs	r6, #0
 8007178:	4d0c      	ldr	r5, [pc, #48]	; (80071ac <__libc_init_array+0x38>)
 800717a:	4c0d      	ldr	r4, [pc, #52]	; (80071b0 <__libc_init_array+0x3c>)
 800717c:	1b64      	subs	r4, r4, r5
 800717e:	10a4      	asrs	r4, r4, #2
 8007180:	42a6      	cmp	r6, r4
 8007182:	d109      	bne.n	8007198 <__libc_init_array+0x24>
 8007184:	f000 fcc0 	bl	8007b08 <_init>
 8007188:	2600      	movs	r6, #0
 800718a:	4d0a      	ldr	r5, [pc, #40]	; (80071b4 <__libc_init_array+0x40>)
 800718c:	4c0a      	ldr	r4, [pc, #40]	; (80071b8 <__libc_init_array+0x44>)
 800718e:	1b64      	subs	r4, r4, r5
 8007190:	10a4      	asrs	r4, r4, #2
 8007192:	42a6      	cmp	r6, r4
 8007194:	d105      	bne.n	80071a2 <__libc_init_array+0x2e>
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	f855 3b04 	ldr.w	r3, [r5], #4
 800719c:	4798      	blx	r3
 800719e:	3601      	adds	r6, #1
 80071a0:	e7ee      	b.n	8007180 <__libc_init_array+0xc>
 80071a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a6:	4798      	blx	r3
 80071a8:	3601      	adds	r6, #1
 80071aa:	e7f2      	b.n	8007192 <__libc_init_array+0x1e>
 80071ac:	08007cb8 	.word	0x08007cb8
 80071b0:	08007cb8 	.word	0x08007cb8
 80071b4:	08007cb8 	.word	0x08007cb8
 80071b8:	08007cbc 	.word	0x08007cbc

080071bc <__retarget_lock_acquire_recursive>:
 80071bc:	4770      	bx	lr

080071be <__retarget_lock_release_recursive>:
 80071be:	4770      	bx	lr

080071c0 <_free_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4605      	mov	r5, r0
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d040      	beq.n	800724a <_free_r+0x8a>
 80071c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071cc:	1f0c      	subs	r4, r1, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb8      	it	lt
 80071d2:	18e4      	addlt	r4, r4, r3
 80071d4:	f000 f8dc 	bl	8007390 <__malloc_lock>
 80071d8:	4a1c      	ldr	r2, [pc, #112]	; (800724c <_free_r+0x8c>)
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	b933      	cbnz	r3, 80071ec <_free_r+0x2c>
 80071de:	6063      	str	r3, [r4, #4]
 80071e0:	6014      	str	r4, [r2, #0]
 80071e2:	4628      	mov	r0, r5
 80071e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e8:	f000 b8d8 	b.w	800739c <__malloc_unlock>
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d908      	bls.n	8007202 <_free_r+0x42>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	1821      	adds	r1, r4, r0
 80071f4:	428b      	cmp	r3, r1
 80071f6:	bf01      	itttt	eq
 80071f8:	6819      	ldreq	r1, [r3, #0]
 80071fa:	685b      	ldreq	r3, [r3, #4]
 80071fc:	1809      	addeq	r1, r1, r0
 80071fe:	6021      	streq	r1, [r4, #0]
 8007200:	e7ed      	b.n	80071de <_free_r+0x1e>
 8007202:	461a      	mov	r2, r3
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	b10b      	cbz	r3, 800720c <_free_r+0x4c>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d9fa      	bls.n	8007202 <_free_r+0x42>
 800720c:	6811      	ldr	r1, [r2, #0]
 800720e:	1850      	adds	r0, r2, r1
 8007210:	42a0      	cmp	r0, r4
 8007212:	d10b      	bne.n	800722c <_free_r+0x6c>
 8007214:	6820      	ldr	r0, [r4, #0]
 8007216:	4401      	add	r1, r0
 8007218:	1850      	adds	r0, r2, r1
 800721a:	4283      	cmp	r3, r0
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	d1e0      	bne.n	80071e2 <_free_r+0x22>
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	4408      	add	r0, r1
 8007226:	6010      	str	r0, [r2, #0]
 8007228:	6053      	str	r3, [r2, #4]
 800722a:	e7da      	b.n	80071e2 <_free_r+0x22>
 800722c:	d902      	bls.n	8007234 <_free_r+0x74>
 800722e:	230c      	movs	r3, #12
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	e7d6      	b.n	80071e2 <_free_r+0x22>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	1821      	adds	r1, r4, r0
 8007238:	428b      	cmp	r3, r1
 800723a:	bf01      	itttt	eq
 800723c:	6819      	ldreq	r1, [r3, #0]
 800723e:	685b      	ldreq	r3, [r3, #4]
 8007240:	1809      	addeq	r1, r1, r0
 8007242:	6021      	streq	r1, [r4, #0]
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	6054      	str	r4, [r2, #4]
 8007248:	e7cb      	b.n	80071e2 <_free_r+0x22>
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	200026f4 	.word	0x200026f4

08007250 <sbrk_aligned>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4e0e      	ldr	r6, [pc, #56]	; (800728c <sbrk_aligned+0x3c>)
 8007254:	460c      	mov	r4, r1
 8007256:	6831      	ldr	r1, [r6, #0]
 8007258:	4605      	mov	r5, r0
 800725a:	b911      	cbnz	r1, 8007262 <sbrk_aligned+0x12>
 800725c:	f000 fbaa 	bl	80079b4 <_sbrk_r>
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	4621      	mov	r1, r4
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fba5 	bl	80079b4 <_sbrk_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d00a      	beq.n	8007284 <sbrk_aligned+0x34>
 800726e:	1cc4      	adds	r4, r0, #3
 8007270:	f024 0403 	bic.w	r4, r4, #3
 8007274:	42a0      	cmp	r0, r4
 8007276:	d007      	beq.n	8007288 <sbrk_aligned+0x38>
 8007278:	1a21      	subs	r1, r4, r0
 800727a:	4628      	mov	r0, r5
 800727c:	f000 fb9a 	bl	80079b4 <_sbrk_r>
 8007280:	3001      	adds	r0, #1
 8007282:	d101      	bne.n	8007288 <sbrk_aligned+0x38>
 8007284:	f04f 34ff 	mov.w	r4, #4294967295
 8007288:	4620      	mov	r0, r4
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	200026f8 	.word	0x200026f8

08007290 <_malloc_r>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	1ccd      	adds	r5, r1, #3
 8007296:	f025 0503 	bic.w	r5, r5, #3
 800729a:	3508      	adds	r5, #8
 800729c:	2d0c      	cmp	r5, #12
 800729e:	bf38      	it	cc
 80072a0:	250c      	movcc	r5, #12
 80072a2:	2d00      	cmp	r5, #0
 80072a4:	4607      	mov	r7, r0
 80072a6:	db01      	blt.n	80072ac <_malloc_r+0x1c>
 80072a8:	42a9      	cmp	r1, r5
 80072aa:	d905      	bls.n	80072b8 <_malloc_r+0x28>
 80072ac:	230c      	movs	r3, #12
 80072ae:	2600      	movs	r6, #0
 80072b0:	603b      	str	r3, [r7, #0]
 80072b2:	4630      	mov	r0, r6
 80072b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800738c <_malloc_r+0xfc>
 80072bc:	f000 f868 	bl	8007390 <__malloc_lock>
 80072c0:	f8d8 3000 	ldr.w	r3, [r8]
 80072c4:	461c      	mov	r4, r3
 80072c6:	bb5c      	cbnz	r4, 8007320 <_malloc_r+0x90>
 80072c8:	4629      	mov	r1, r5
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ffc0 	bl	8007250 <sbrk_aligned>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	4604      	mov	r4, r0
 80072d4:	d155      	bne.n	8007382 <_malloc_r+0xf2>
 80072d6:	f8d8 4000 	ldr.w	r4, [r8]
 80072da:	4626      	mov	r6, r4
 80072dc:	2e00      	cmp	r6, #0
 80072de:	d145      	bne.n	800736c <_malloc_r+0xdc>
 80072e0:	2c00      	cmp	r4, #0
 80072e2:	d048      	beq.n	8007376 <_malloc_r+0xe6>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	4631      	mov	r1, r6
 80072e8:	4638      	mov	r0, r7
 80072ea:	eb04 0903 	add.w	r9, r4, r3
 80072ee:	f000 fb61 	bl	80079b4 <_sbrk_r>
 80072f2:	4581      	cmp	r9, r0
 80072f4:	d13f      	bne.n	8007376 <_malloc_r+0xe6>
 80072f6:	6821      	ldr	r1, [r4, #0]
 80072f8:	4638      	mov	r0, r7
 80072fa:	1a6d      	subs	r5, r5, r1
 80072fc:	4629      	mov	r1, r5
 80072fe:	f7ff ffa7 	bl	8007250 <sbrk_aligned>
 8007302:	3001      	adds	r0, #1
 8007304:	d037      	beq.n	8007376 <_malloc_r+0xe6>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	442b      	add	r3, r5
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	f8d8 3000 	ldr.w	r3, [r8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d038      	beq.n	8007386 <_malloc_r+0xf6>
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	42a2      	cmp	r2, r4
 8007318:	d12b      	bne.n	8007372 <_malloc_r+0xe2>
 800731a:	2200      	movs	r2, #0
 800731c:	605a      	str	r2, [r3, #4]
 800731e:	e00f      	b.n	8007340 <_malloc_r+0xb0>
 8007320:	6822      	ldr	r2, [r4, #0]
 8007322:	1b52      	subs	r2, r2, r5
 8007324:	d41f      	bmi.n	8007366 <_malloc_r+0xd6>
 8007326:	2a0b      	cmp	r2, #11
 8007328:	d917      	bls.n	800735a <_malloc_r+0xca>
 800732a:	1961      	adds	r1, r4, r5
 800732c:	42a3      	cmp	r3, r4
 800732e:	6025      	str	r5, [r4, #0]
 8007330:	bf18      	it	ne
 8007332:	6059      	strne	r1, [r3, #4]
 8007334:	6863      	ldr	r3, [r4, #4]
 8007336:	bf08      	it	eq
 8007338:	f8c8 1000 	streq.w	r1, [r8]
 800733c:	5162      	str	r2, [r4, r5]
 800733e:	604b      	str	r3, [r1, #4]
 8007340:	4638      	mov	r0, r7
 8007342:	f104 060b 	add.w	r6, r4, #11
 8007346:	f000 f829 	bl	800739c <__malloc_unlock>
 800734a:	f026 0607 	bic.w	r6, r6, #7
 800734e:	1d23      	adds	r3, r4, #4
 8007350:	1af2      	subs	r2, r6, r3
 8007352:	d0ae      	beq.n	80072b2 <_malloc_r+0x22>
 8007354:	1b9b      	subs	r3, r3, r6
 8007356:	50a3      	str	r3, [r4, r2]
 8007358:	e7ab      	b.n	80072b2 <_malloc_r+0x22>
 800735a:	42a3      	cmp	r3, r4
 800735c:	6862      	ldr	r2, [r4, #4]
 800735e:	d1dd      	bne.n	800731c <_malloc_r+0x8c>
 8007360:	f8c8 2000 	str.w	r2, [r8]
 8007364:	e7ec      	b.n	8007340 <_malloc_r+0xb0>
 8007366:	4623      	mov	r3, r4
 8007368:	6864      	ldr	r4, [r4, #4]
 800736a:	e7ac      	b.n	80072c6 <_malloc_r+0x36>
 800736c:	4634      	mov	r4, r6
 800736e:	6876      	ldr	r6, [r6, #4]
 8007370:	e7b4      	b.n	80072dc <_malloc_r+0x4c>
 8007372:	4613      	mov	r3, r2
 8007374:	e7cc      	b.n	8007310 <_malloc_r+0x80>
 8007376:	230c      	movs	r3, #12
 8007378:	4638      	mov	r0, r7
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	f000 f80e 	bl	800739c <__malloc_unlock>
 8007380:	e797      	b.n	80072b2 <_malloc_r+0x22>
 8007382:	6025      	str	r5, [r4, #0]
 8007384:	e7dc      	b.n	8007340 <_malloc_r+0xb0>
 8007386:	605b      	str	r3, [r3, #4]
 8007388:	deff      	udf	#255	; 0xff
 800738a:	bf00      	nop
 800738c:	200026f4 	.word	0x200026f4

08007390 <__malloc_lock>:
 8007390:	4801      	ldr	r0, [pc, #4]	; (8007398 <__malloc_lock+0x8>)
 8007392:	f7ff bf13 	b.w	80071bc <__retarget_lock_acquire_recursive>
 8007396:	bf00      	nop
 8007398:	200026f0 	.word	0x200026f0

0800739c <__malloc_unlock>:
 800739c:	4801      	ldr	r0, [pc, #4]	; (80073a4 <__malloc_unlock+0x8>)
 800739e:	f7ff bf0e 	b.w	80071be <__retarget_lock_release_recursive>
 80073a2:	bf00      	nop
 80073a4:	200026f0 	.word	0x200026f0

080073a8 <__ssputs_r>:
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	461f      	mov	r7, r3
 80073ae:	688e      	ldr	r6, [r1, #8]
 80073b0:	4682      	mov	sl, r0
 80073b2:	42be      	cmp	r6, r7
 80073b4:	460c      	mov	r4, r1
 80073b6:	4690      	mov	r8, r2
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	d82c      	bhi.n	8007416 <__ssputs_r+0x6e>
 80073bc:	898a      	ldrh	r2, [r1, #12]
 80073be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c2:	d026      	beq.n	8007412 <__ssputs_r+0x6a>
 80073c4:	6965      	ldr	r5, [r4, #20]
 80073c6:	6909      	ldr	r1, [r1, #16]
 80073c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073cc:	eba3 0901 	sub.w	r9, r3, r1
 80073d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d4:	1c7b      	adds	r3, r7, #1
 80073d6:	444b      	add	r3, r9
 80073d8:	106d      	asrs	r5, r5, #1
 80073da:	429d      	cmp	r5, r3
 80073dc:	bf38      	it	cc
 80073de:	461d      	movcc	r5, r3
 80073e0:	0553      	lsls	r3, r2, #21
 80073e2:	d527      	bpl.n	8007434 <__ssputs_r+0x8c>
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7ff ff53 	bl	8007290 <_malloc_r>
 80073ea:	4606      	mov	r6, r0
 80073ec:	b360      	cbz	r0, 8007448 <__ssputs_r+0xa0>
 80073ee:	464a      	mov	r2, r9
 80073f0:	6921      	ldr	r1, [r4, #16]
 80073f2:	f000 fafd 	bl	80079f0 <memcpy>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007400:	81a3      	strh	r3, [r4, #12]
 8007402:	6126      	str	r6, [r4, #16]
 8007404:	444e      	add	r6, r9
 8007406:	6026      	str	r6, [r4, #0]
 8007408:	463e      	mov	r6, r7
 800740a:	6165      	str	r5, [r4, #20]
 800740c:	eba5 0509 	sub.w	r5, r5, r9
 8007410:	60a5      	str	r5, [r4, #8]
 8007412:	42be      	cmp	r6, r7
 8007414:	d900      	bls.n	8007418 <__ssputs_r+0x70>
 8007416:	463e      	mov	r6, r7
 8007418:	4632      	mov	r2, r6
 800741a:	4641      	mov	r1, r8
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	f000 faaf 	bl	8007980 <memmove>
 8007422:	2000      	movs	r0, #0
 8007424:	68a3      	ldr	r3, [r4, #8]
 8007426:	1b9b      	subs	r3, r3, r6
 8007428:	60a3      	str	r3, [r4, #8]
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4433      	add	r3, r6
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007434:	462a      	mov	r2, r5
 8007436:	f000 fae9 	bl	8007a0c <_realloc_r>
 800743a:	4606      	mov	r6, r0
 800743c:	2800      	cmp	r0, #0
 800743e:	d1e0      	bne.n	8007402 <__ssputs_r+0x5a>
 8007440:	4650      	mov	r0, sl
 8007442:	6921      	ldr	r1, [r4, #16]
 8007444:	f7ff febc 	bl	80071c0 <_free_r>
 8007448:	230c      	movs	r3, #12
 800744a:	f8ca 3000 	str.w	r3, [sl]
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f04f 30ff 	mov.w	r0, #4294967295
 8007454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007458:	81a3      	strh	r3, [r4, #12]
 800745a:	e7e9      	b.n	8007430 <__ssputs_r+0x88>

0800745c <_svfiprintf_r>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	4698      	mov	r8, r3
 8007462:	898b      	ldrh	r3, [r1, #12]
 8007464:	4607      	mov	r7, r0
 8007466:	061b      	lsls	r3, r3, #24
 8007468:	460d      	mov	r5, r1
 800746a:	4614      	mov	r4, r2
 800746c:	b09d      	sub	sp, #116	; 0x74
 800746e:	d50e      	bpl.n	800748e <_svfiprintf_r+0x32>
 8007470:	690b      	ldr	r3, [r1, #16]
 8007472:	b963      	cbnz	r3, 800748e <_svfiprintf_r+0x32>
 8007474:	2140      	movs	r1, #64	; 0x40
 8007476:	f7ff ff0b 	bl	8007290 <_malloc_r>
 800747a:	6028      	str	r0, [r5, #0]
 800747c:	6128      	str	r0, [r5, #16]
 800747e:	b920      	cbnz	r0, 800748a <_svfiprintf_r+0x2e>
 8007480:	230c      	movs	r3, #12
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	e0d0      	b.n	800762c <_svfiprintf_r+0x1d0>
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	616b      	str	r3, [r5, #20]
 800748e:	2300      	movs	r3, #0
 8007490:	9309      	str	r3, [sp, #36]	; 0x24
 8007492:	2320      	movs	r3, #32
 8007494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007498:	2330      	movs	r3, #48	; 0x30
 800749a:	f04f 0901 	mov.w	r9, #1
 800749e:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007644 <_svfiprintf_r+0x1e8>
 80074a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074aa:	4623      	mov	r3, r4
 80074ac:	469a      	mov	sl, r3
 80074ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b2:	b10a      	cbz	r2, 80074b8 <_svfiprintf_r+0x5c>
 80074b4:	2a25      	cmp	r2, #37	; 0x25
 80074b6:	d1f9      	bne.n	80074ac <_svfiprintf_r+0x50>
 80074b8:	ebba 0b04 	subs.w	fp, sl, r4
 80074bc:	d00b      	beq.n	80074d6 <_svfiprintf_r+0x7a>
 80074be:	465b      	mov	r3, fp
 80074c0:	4622      	mov	r2, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff ff6f 	bl	80073a8 <__ssputs_r>
 80074ca:	3001      	adds	r0, #1
 80074cc:	f000 80a9 	beq.w	8007622 <_svfiprintf_r+0x1c6>
 80074d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d2:	445a      	add	r2, fp
 80074d4:	9209      	str	r2, [sp, #36]	; 0x24
 80074d6:	f89a 3000 	ldrb.w	r3, [sl]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80a1 	beq.w	8007622 <_svfiprintf_r+0x1c6>
 80074e0:	2300      	movs	r3, #0
 80074e2:	f04f 32ff 	mov.w	r2, #4294967295
 80074e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ea:	f10a 0a01 	add.w	sl, sl, #1
 80074ee:	9304      	str	r3, [sp, #16]
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074f6:	931a      	str	r3, [sp, #104]	; 0x68
 80074f8:	4654      	mov	r4, sl
 80074fa:	2205      	movs	r2, #5
 80074fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007500:	4850      	ldr	r0, [pc, #320]	; (8007644 <_svfiprintf_r+0x1e8>)
 8007502:	f000 fa67 	bl	80079d4 <memchr>
 8007506:	9a04      	ldr	r2, [sp, #16]
 8007508:	b9d8      	cbnz	r0, 8007542 <_svfiprintf_r+0xe6>
 800750a:	06d0      	lsls	r0, r2, #27
 800750c:	bf44      	itt	mi
 800750e:	2320      	movmi	r3, #32
 8007510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007514:	0711      	lsls	r1, r2, #28
 8007516:	bf44      	itt	mi
 8007518:	232b      	movmi	r3, #43	; 0x2b
 800751a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751e:	f89a 3000 	ldrb.w	r3, [sl]
 8007522:	2b2a      	cmp	r3, #42	; 0x2a
 8007524:	d015      	beq.n	8007552 <_svfiprintf_r+0xf6>
 8007526:	4654      	mov	r4, sl
 8007528:	2000      	movs	r0, #0
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	9a07      	ldr	r2, [sp, #28]
 8007530:	4621      	mov	r1, r4
 8007532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007536:	3b30      	subs	r3, #48	; 0x30
 8007538:	2b09      	cmp	r3, #9
 800753a:	d94d      	bls.n	80075d8 <_svfiprintf_r+0x17c>
 800753c:	b1b0      	cbz	r0, 800756c <_svfiprintf_r+0x110>
 800753e:	9207      	str	r2, [sp, #28]
 8007540:	e014      	b.n	800756c <_svfiprintf_r+0x110>
 8007542:	eba0 0308 	sub.w	r3, r0, r8
 8007546:	fa09 f303 	lsl.w	r3, r9, r3
 800754a:	4313      	orrs	r3, r2
 800754c:	46a2      	mov	sl, r4
 800754e:	9304      	str	r3, [sp, #16]
 8007550:	e7d2      	b.n	80074f8 <_svfiprintf_r+0x9c>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	1d19      	adds	r1, r3, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	9103      	str	r1, [sp, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	bfbb      	ittet	lt
 800755e:	425b      	neglt	r3, r3
 8007560:	f042 0202 	orrlt.w	r2, r2, #2
 8007564:	9307      	strge	r3, [sp, #28]
 8007566:	9307      	strlt	r3, [sp, #28]
 8007568:	bfb8      	it	lt
 800756a:	9204      	strlt	r2, [sp, #16]
 800756c:	7823      	ldrb	r3, [r4, #0]
 800756e:	2b2e      	cmp	r3, #46	; 0x2e
 8007570:	d10c      	bne.n	800758c <_svfiprintf_r+0x130>
 8007572:	7863      	ldrb	r3, [r4, #1]
 8007574:	2b2a      	cmp	r3, #42	; 0x2a
 8007576:	d134      	bne.n	80075e2 <_svfiprintf_r+0x186>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	3402      	adds	r4, #2
 800757c:	1d1a      	adds	r2, r3, #4
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	9203      	str	r2, [sp, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfb8      	it	lt
 8007586:	f04f 33ff 	movlt.w	r3, #4294967295
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007648 <_svfiprintf_r+0x1ec>
 8007590:	2203      	movs	r2, #3
 8007592:	4650      	mov	r0, sl
 8007594:	7821      	ldrb	r1, [r4, #0]
 8007596:	f000 fa1d 	bl	80079d4 <memchr>
 800759a:	b138      	cbz	r0, 80075ac <_svfiprintf_r+0x150>
 800759c:	2240      	movs	r2, #64	; 0x40
 800759e:	9b04      	ldr	r3, [sp, #16]
 80075a0:	eba0 000a 	sub.w	r0, r0, sl
 80075a4:	4082      	lsls	r2, r0
 80075a6:	4313      	orrs	r3, r2
 80075a8:	3401      	adds	r4, #1
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b0:	2206      	movs	r2, #6
 80075b2:	4826      	ldr	r0, [pc, #152]	; (800764c <_svfiprintf_r+0x1f0>)
 80075b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075b8:	f000 fa0c 	bl	80079d4 <memchr>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d038      	beq.n	8007632 <_svfiprintf_r+0x1d6>
 80075c0:	4b23      	ldr	r3, [pc, #140]	; (8007650 <_svfiprintf_r+0x1f4>)
 80075c2:	bb1b      	cbnz	r3, 800760c <_svfiprintf_r+0x1b0>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	3307      	adds	r3, #7
 80075c8:	f023 0307 	bic.w	r3, r3, #7
 80075cc:	3308      	adds	r3, #8
 80075ce:	9303      	str	r3, [sp, #12]
 80075d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d2:	4433      	add	r3, r6
 80075d4:	9309      	str	r3, [sp, #36]	; 0x24
 80075d6:	e768      	b.n	80074aa <_svfiprintf_r+0x4e>
 80075d8:	460c      	mov	r4, r1
 80075da:	2001      	movs	r0, #1
 80075dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e0:	e7a6      	b.n	8007530 <_svfiprintf_r+0xd4>
 80075e2:	2300      	movs	r3, #0
 80075e4:	f04f 0c0a 	mov.w	ip, #10
 80075e8:	4619      	mov	r1, r3
 80075ea:	3401      	adds	r4, #1
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075f4:	3a30      	subs	r2, #48	; 0x30
 80075f6:	2a09      	cmp	r2, #9
 80075f8:	d903      	bls.n	8007602 <_svfiprintf_r+0x1a6>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0c6      	beq.n	800758c <_svfiprintf_r+0x130>
 80075fe:	9105      	str	r1, [sp, #20]
 8007600:	e7c4      	b.n	800758c <_svfiprintf_r+0x130>
 8007602:	4604      	mov	r4, r0
 8007604:	2301      	movs	r3, #1
 8007606:	fb0c 2101 	mla	r1, ip, r1, r2
 800760a:	e7f0      	b.n	80075ee <_svfiprintf_r+0x192>
 800760c:	ab03      	add	r3, sp, #12
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	462a      	mov	r2, r5
 8007612:	4638      	mov	r0, r7
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <_svfiprintf_r+0x1f8>)
 8007616:	a904      	add	r1, sp, #16
 8007618:	f3af 8000 	nop.w
 800761c:	1c42      	adds	r2, r0, #1
 800761e:	4606      	mov	r6, r0
 8007620:	d1d6      	bne.n	80075d0 <_svfiprintf_r+0x174>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	065b      	lsls	r3, r3, #25
 8007626:	f53f af2d 	bmi.w	8007484 <_svfiprintf_r+0x28>
 800762a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800762c:	b01d      	add	sp, #116	; 0x74
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	ab03      	add	r3, sp, #12
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	462a      	mov	r2, r5
 8007638:	4638      	mov	r0, r7
 800763a:	4b06      	ldr	r3, [pc, #24]	; (8007654 <_svfiprintf_r+0x1f8>)
 800763c:	a904      	add	r1, sp, #16
 800763e:	f000 f87d 	bl	800773c <_printf_i>
 8007642:	e7eb      	b.n	800761c <_svfiprintf_r+0x1c0>
 8007644:	08007c82 	.word	0x08007c82
 8007648:	08007c88 	.word	0x08007c88
 800764c:	08007c8c 	.word	0x08007c8c
 8007650:	00000000 	.word	0x00000000
 8007654:	080073a9 	.word	0x080073a9

08007658 <_printf_common>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	4616      	mov	r6, r2
 800765e:	4699      	mov	r9, r3
 8007660:	688a      	ldr	r2, [r1, #8]
 8007662:	690b      	ldr	r3, [r1, #16]
 8007664:	4607      	mov	r7, r0
 8007666:	4293      	cmp	r3, r2
 8007668:	bfb8      	it	lt
 800766a:	4613      	movlt	r3, r2
 800766c:	6033      	str	r3, [r6, #0]
 800766e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007672:	460c      	mov	r4, r1
 8007674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007678:	b10a      	cbz	r2, 800767e <_printf_common+0x26>
 800767a:	3301      	adds	r3, #1
 800767c:	6033      	str	r3, [r6, #0]
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	0699      	lsls	r1, r3, #26
 8007682:	bf42      	ittt	mi
 8007684:	6833      	ldrmi	r3, [r6, #0]
 8007686:	3302      	addmi	r3, #2
 8007688:	6033      	strmi	r3, [r6, #0]
 800768a:	6825      	ldr	r5, [r4, #0]
 800768c:	f015 0506 	ands.w	r5, r5, #6
 8007690:	d106      	bne.n	80076a0 <_printf_common+0x48>
 8007692:	f104 0a19 	add.w	sl, r4, #25
 8007696:	68e3      	ldr	r3, [r4, #12]
 8007698:	6832      	ldr	r2, [r6, #0]
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	42ab      	cmp	r3, r5
 800769e:	dc2b      	bgt.n	80076f8 <_printf_common+0xa0>
 80076a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076a4:	1e13      	subs	r3, r2, #0
 80076a6:	6822      	ldr	r2, [r4, #0]
 80076a8:	bf18      	it	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	0692      	lsls	r2, r2, #26
 80076ae:	d430      	bmi.n	8007712 <_printf_common+0xba>
 80076b0:	4649      	mov	r1, r9
 80076b2:	4638      	mov	r0, r7
 80076b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b8:	47c0      	blx	r8
 80076ba:	3001      	adds	r0, #1
 80076bc:	d023      	beq.n	8007706 <_printf_common+0xae>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	6922      	ldr	r2, [r4, #16]
 80076c2:	f003 0306 	and.w	r3, r3, #6
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	bf14      	ite	ne
 80076ca:	2500      	movne	r5, #0
 80076cc:	6833      	ldreq	r3, [r6, #0]
 80076ce:	f04f 0600 	mov.w	r6, #0
 80076d2:	bf08      	it	eq
 80076d4:	68e5      	ldreq	r5, [r4, #12]
 80076d6:	f104 041a 	add.w	r4, r4, #26
 80076da:	bf08      	it	eq
 80076dc:	1aed      	subeq	r5, r5, r3
 80076de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076e2:	bf08      	it	eq
 80076e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfc4      	itt	gt
 80076ec:	1a9b      	subgt	r3, r3, r2
 80076ee:	18ed      	addgt	r5, r5, r3
 80076f0:	42b5      	cmp	r5, r6
 80076f2:	d11a      	bne.n	800772a <_printf_common+0xd2>
 80076f4:	2000      	movs	r0, #0
 80076f6:	e008      	b.n	800770a <_printf_common+0xb2>
 80076f8:	2301      	movs	r3, #1
 80076fa:	4652      	mov	r2, sl
 80076fc:	4649      	mov	r1, r9
 80076fe:	4638      	mov	r0, r7
 8007700:	47c0      	blx	r8
 8007702:	3001      	adds	r0, #1
 8007704:	d103      	bne.n	800770e <_printf_common+0xb6>
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	3501      	adds	r5, #1
 8007710:	e7c1      	b.n	8007696 <_printf_common+0x3e>
 8007712:	2030      	movs	r0, #48	; 0x30
 8007714:	18e1      	adds	r1, r4, r3
 8007716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007720:	4422      	add	r2, r4
 8007722:	3302      	adds	r3, #2
 8007724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007728:	e7c2      	b.n	80076b0 <_printf_common+0x58>
 800772a:	2301      	movs	r3, #1
 800772c:	4622      	mov	r2, r4
 800772e:	4649      	mov	r1, r9
 8007730:	4638      	mov	r0, r7
 8007732:	47c0      	blx	r8
 8007734:	3001      	adds	r0, #1
 8007736:	d0e6      	beq.n	8007706 <_printf_common+0xae>
 8007738:	3601      	adds	r6, #1
 800773a:	e7d9      	b.n	80076f0 <_printf_common+0x98>

0800773c <_printf_i>:
 800773c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	7e0f      	ldrb	r7, [r1, #24]
 8007742:	4691      	mov	r9, r2
 8007744:	2f78      	cmp	r7, #120	; 0x78
 8007746:	4680      	mov	r8, r0
 8007748:	460c      	mov	r4, r1
 800774a:	469a      	mov	sl, r3
 800774c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800774e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007752:	d807      	bhi.n	8007764 <_printf_i+0x28>
 8007754:	2f62      	cmp	r7, #98	; 0x62
 8007756:	d80a      	bhi.n	800776e <_printf_i+0x32>
 8007758:	2f00      	cmp	r7, #0
 800775a:	f000 80d5 	beq.w	8007908 <_printf_i+0x1cc>
 800775e:	2f58      	cmp	r7, #88	; 0x58
 8007760:	f000 80c1 	beq.w	80078e6 <_printf_i+0x1aa>
 8007764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800776c:	e03a      	b.n	80077e4 <_printf_i+0xa8>
 800776e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007772:	2b15      	cmp	r3, #21
 8007774:	d8f6      	bhi.n	8007764 <_printf_i+0x28>
 8007776:	a101      	add	r1, pc, #4	; (adr r1, 800777c <_printf_i+0x40>)
 8007778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800777c:	080077d5 	.word	0x080077d5
 8007780:	080077e9 	.word	0x080077e9
 8007784:	08007765 	.word	0x08007765
 8007788:	08007765 	.word	0x08007765
 800778c:	08007765 	.word	0x08007765
 8007790:	08007765 	.word	0x08007765
 8007794:	080077e9 	.word	0x080077e9
 8007798:	08007765 	.word	0x08007765
 800779c:	08007765 	.word	0x08007765
 80077a0:	08007765 	.word	0x08007765
 80077a4:	08007765 	.word	0x08007765
 80077a8:	080078ef 	.word	0x080078ef
 80077ac:	08007815 	.word	0x08007815
 80077b0:	080078a9 	.word	0x080078a9
 80077b4:	08007765 	.word	0x08007765
 80077b8:	08007765 	.word	0x08007765
 80077bc:	08007911 	.word	0x08007911
 80077c0:	08007765 	.word	0x08007765
 80077c4:	08007815 	.word	0x08007815
 80077c8:	08007765 	.word	0x08007765
 80077cc:	08007765 	.word	0x08007765
 80077d0:	080078b1 	.word	0x080078b1
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	1d1a      	adds	r2, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	602a      	str	r2, [r5, #0]
 80077dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0a0      	b.n	800792a <_printf_i+0x1ee>
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	682b      	ldr	r3, [r5, #0]
 80077ec:	0607      	lsls	r7, r0, #24
 80077ee:	f103 0104 	add.w	r1, r3, #4
 80077f2:	6029      	str	r1, [r5, #0]
 80077f4:	d501      	bpl.n	80077fa <_printf_i+0xbe>
 80077f6:	681e      	ldr	r6, [r3, #0]
 80077f8:	e003      	b.n	8007802 <_printf_i+0xc6>
 80077fa:	0646      	lsls	r6, r0, #25
 80077fc:	d5fb      	bpl.n	80077f6 <_printf_i+0xba>
 80077fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007802:	2e00      	cmp	r6, #0
 8007804:	da03      	bge.n	800780e <_printf_i+0xd2>
 8007806:	232d      	movs	r3, #45	; 0x2d
 8007808:	4276      	negs	r6, r6
 800780a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780e:	230a      	movs	r3, #10
 8007810:	4859      	ldr	r0, [pc, #356]	; (8007978 <_printf_i+0x23c>)
 8007812:	e012      	b.n	800783a <_printf_i+0xfe>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	6820      	ldr	r0, [r4, #0]
 8007818:	1d19      	adds	r1, r3, #4
 800781a:	6029      	str	r1, [r5, #0]
 800781c:	0605      	lsls	r5, r0, #24
 800781e:	d501      	bpl.n	8007824 <_printf_i+0xe8>
 8007820:	681e      	ldr	r6, [r3, #0]
 8007822:	e002      	b.n	800782a <_printf_i+0xee>
 8007824:	0641      	lsls	r1, r0, #25
 8007826:	d5fb      	bpl.n	8007820 <_printf_i+0xe4>
 8007828:	881e      	ldrh	r6, [r3, #0]
 800782a:	2f6f      	cmp	r7, #111	; 0x6f
 800782c:	bf0c      	ite	eq
 800782e:	2308      	moveq	r3, #8
 8007830:	230a      	movne	r3, #10
 8007832:	4851      	ldr	r0, [pc, #324]	; (8007978 <_printf_i+0x23c>)
 8007834:	2100      	movs	r1, #0
 8007836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800783a:	6865      	ldr	r5, [r4, #4]
 800783c:	2d00      	cmp	r5, #0
 800783e:	bfa8      	it	ge
 8007840:	6821      	ldrge	r1, [r4, #0]
 8007842:	60a5      	str	r5, [r4, #8]
 8007844:	bfa4      	itt	ge
 8007846:	f021 0104 	bicge.w	r1, r1, #4
 800784a:	6021      	strge	r1, [r4, #0]
 800784c:	b90e      	cbnz	r6, 8007852 <_printf_i+0x116>
 800784e:	2d00      	cmp	r5, #0
 8007850:	d04b      	beq.n	80078ea <_printf_i+0x1ae>
 8007852:	4615      	mov	r5, r2
 8007854:	fbb6 f1f3 	udiv	r1, r6, r3
 8007858:	fb03 6711 	mls	r7, r3, r1, r6
 800785c:	5dc7      	ldrb	r7, [r0, r7]
 800785e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007862:	4637      	mov	r7, r6
 8007864:	42bb      	cmp	r3, r7
 8007866:	460e      	mov	r6, r1
 8007868:	d9f4      	bls.n	8007854 <_printf_i+0x118>
 800786a:	2b08      	cmp	r3, #8
 800786c:	d10b      	bne.n	8007886 <_printf_i+0x14a>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	07de      	lsls	r6, r3, #31
 8007872:	d508      	bpl.n	8007886 <_printf_i+0x14a>
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	6861      	ldr	r1, [r4, #4]
 8007878:	4299      	cmp	r1, r3
 800787a:	bfde      	ittt	le
 800787c:	2330      	movle	r3, #48	; 0x30
 800787e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007882:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007886:	1b52      	subs	r2, r2, r5
 8007888:	6122      	str	r2, [r4, #16]
 800788a:	464b      	mov	r3, r9
 800788c:	4621      	mov	r1, r4
 800788e:	4640      	mov	r0, r8
 8007890:	f8cd a000 	str.w	sl, [sp]
 8007894:	aa03      	add	r2, sp, #12
 8007896:	f7ff fedf 	bl	8007658 <_printf_common>
 800789a:	3001      	adds	r0, #1
 800789c:	d14a      	bne.n	8007934 <_printf_i+0x1f8>
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	b004      	add	sp, #16
 80078a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	f043 0320 	orr.w	r3, r3, #32
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	2778      	movs	r7, #120	; 0x78
 80078b2:	4832      	ldr	r0, [pc, #200]	; (800797c <_printf_i+0x240>)
 80078b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	6829      	ldr	r1, [r5, #0]
 80078bc:	061f      	lsls	r7, r3, #24
 80078be:	f851 6b04 	ldr.w	r6, [r1], #4
 80078c2:	d402      	bmi.n	80078ca <_printf_i+0x18e>
 80078c4:	065f      	lsls	r7, r3, #25
 80078c6:	bf48      	it	mi
 80078c8:	b2b6      	uxthmi	r6, r6
 80078ca:	07df      	lsls	r7, r3, #31
 80078cc:	bf48      	it	mi
 80078ce:	f043 0320 	orrmi.w	r3, r3, #32
 80078d2:	6029      	str	r1, [r5, #0]
 80078d4:	bf48      	it	mi
 80078d6:	6023      	strmi	r3, [r4, #0]
 80078d8:	b91e      	cbnz	r6, 80078e2 <_printf_i+0x1a6>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	f023 0320 	bic.w	r3, r3, #32
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	2310      	movs	r3, #16
 80078e4:	e7a6      	b.n	8007834 <_printf_i+0xf8>
 80078e6:	4824      	ldr	r0, [pc, #144]	; (8007978 <_printf_i+0x23c>)
 80078e8:	e7e4      	b.n	80078b4 <_printf_i+0x178>
 80078ea:	4615      	mov	r5, r2
 80078ec:	e7bd      	b.n	800786a <_printf_i+0x12e>
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	6826      	ldr	r6, [r4, #0]
 80078f2:	1d18      	adds	r0, r3, #4
 80078f4:	6961      	ldr	r1, [r4, #20]
 80078f6:	6028      	str	r0, [r5, #0]
 80078f8:	0635      	lsls	r5, r6, #24
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	d501      	bpl.n	8007902 <_printf_i+0x1c6>
 80078fe:	6019      	str	r1, [r3, #0]
 8007900:	e002      	b.n	8007908 <_printf_i+0x1cc>
 8007902:	0670      	lsls	r0, r6, #25
 8007904:	d5fb      	bpl.n	80078fe <_printf_i+0x1c2>
 8007906:	8019      	strh	r1, [r3, #0]
 8007908:	2300      	movs	r3, #0
 800790a:	4615      	mov	r5, r2
 800790c:	6123      	str	r3, [r4, #16]
 800790e:	e7bc      	b.n	800788a <_printf_i+0x14e>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	2100      	movs	r1, #0
 8007914:	1d1a      	adds	r2, r3, #4
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	681d      	ldr	r5, [r3, #0]
 800791a:	6862      	ldr	r2, [r4, #4]
 800791c:	4628      	mov	r0, r5
 800791e:	f000 f859 	bl	80079d4 <memchr>
 8007922:	b108      	cbz	r0, 8007928 <_printf_i+0x1ec>
 8007924:	1b40      	subs	r0, r0, r5
 8007926:	6060      	str	r0, [r4, #4]
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	2300      	movs	r3, #0
 800792e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007932:	e7aa      	b.n	800788a <_printf_i+0x14e>
 8007934:	462a      	mov	r2, r5
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	47d0      	blx	sl
 800793e:	3001      	adds	r0, #1
 8007940:	d0ad      	beq.n	800789e <_printf_i+0x162>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	079b      	lsls	r3, r3, #30
 8007946:	d413      	bmi.n	8007970 <_printf_i+0x234>
 8007948:	68e0      	ldr	r0, [r4, #12]
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	4298      	cmp	r0, r3
 800794e:	bfb8      	it	lt
 8007950:	4618      	movlt	r0, r3
 8007952:	e7a6      	b.n	80078a2 <_printf_i+0x166>
 8007954:	2301      	movs	r3, #1
 8007956:	4632      	mov	r2, r6
 8007958:	4649      	mov	r1, r9
 800795a:	4640      	mov	r0, r8
 800795c:	47d0      	blx	sl
 800795e:	3001      	adds	r0, #1
 8007960:	d09d      	beq.n	800789e <_printf_i+0x162>
 8007962:	3501      	adds	r5, #1
 8007964:	68e3      	ldr	r3, [r4, #12]
 8007966:	9903      	ldr	r1, [sp, #12]
 8007968:	1a5b      	subs	r3, r3, r1
 800796a:	42ab      	cmp	r3, r5
 800796c:	dcf2      	bgt.n	8007954 <_printf_i+0x218>
 800796e:	e7eb      	b.n	8007948 <_printf_i+0x20c>
 8007970:	2500      	movs	r5, #0
 8007972:	f104 0619 	add.w	r6, r4, #25
 8007976:	e7f5      	b.n	8007964 <_printf_i+0x228>
 8007978:	08007c93 	.word	0x08007c93
 800797c:	08007ca4 	.word	0x08007ca4

08007980 <memmove>:
 8007980:	4288      	cmp	r0, r1
 8007982:	b510      	push	{r4, lr}
 8007984:	eb01 0402 	add.w	r4, r1, r2
 8007988:	d902      	bls.n	8007990 <memmove+0x10>
 800798a:	4284      	cmp	r4, r0
 800798c:	4623      	mov	r3, r4
 800798e:	d807      	bhi.n	80079a0 <memmove+0x20>
 8007990:	1e43      	subs	r3, r0, #1
 8007992:	42a1      	cmp	r1, r4
 8007994:	d008      	beq.n	80079a8 <memmove+0x28>
 8007996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800799a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800799e:	e7f8      	b.n	8007992 <memmove+0x12>
 80079a0:	4601      	mov	r1, r0
 80079a2:	4402      	add	r2, r0
 80079a4:	428a      	cmp	r2, r1
 80079a6:	d100      	bne.n	80079aa <memmove+0x2a>
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079b2:	e7f7      	b.n	80079a4 <memmove+0x24>

080079b4 <_sbrk_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	2300      	movs	r3, #0
 80079b8:	4d05      	ldr	r5, [pc, #20]	; (80079d0 <_sbrk_r+0x1c>)
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7fb fbe4 	bl	800318c <_sbrk>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_sbrk_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_sbrk_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	200026ec 	.word	0x200026ec

080079d4 <memchr>:
 80079d4:	4603      	mov	r3, r0
 80079d6:	b510      	push	{r4, lr}
 80079d8:	b2c9      	uxtb	r1, r1
 80079da:	4402      	add	r2, r0
 80079dc:	4293      	cmp	r3, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	d101      	bne.n	80079e6 <memchr+0x12>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e003      	b.n	80079ee <memchr+0x1a>
 80079e6:	7804      	ldrb	r4, [r0, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	428c      	cmp	r4, r1
 80079ec:	d1f6      	bne.n	80079dc <memchr+0x8>
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <memcpy>:
 80079f0:	440a      	add	r2, r1
 80079f2:	4291      	cmp	r1, r2
 80079f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079f8:	d100      	bne.n	80079fc <memcpy+0xc>
 80079fa:	4770      	bx	lr
 80079fc:	b510      	push	{r4, lr}
 80079fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a02:	4291      	cmp	r1, r2
 8007a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a08:	d1f9      	bne.n	80079fe <memcpy+0xe>
 8007a0a:	bd10      	pop	{r4, pc}

08007a0c <_realloc_r>:
 8007a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a10:	4680      	mov	r8, r0
 8007a12:	4614      	mov	r4, r2
 8007a14:	460e      	mov	r6, r1
 8007a16:	b921      	cbnz	r1, 8007a22 <_realloc_r+0x16>
 8007a18:	4611      	mov	r1, r2
 8007a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1e:	f7ff bc37 	b.w	8007290 <_malloc_r>
 8007a22:	b92a      	cbnz	r2, 8007a30 <_realloc_r+0x24>
 8007a24:	f7ff fbcc 	bl	80071c0 <_free_r>
 8007a28:	4625      	mov	r5, r4
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a30:	f000 f81b 	bl	8007a6a <_malloc_usable_size_r>
 8007a34:	4284      	cmp	r4, r0
 8007a36:	4607      	mov	r7, r0
 8007a38:	d802      	bhi.n	8007a40 <_realloc_r+0x34>
 8007a3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a3e:	d812      	bhi.n	8007a66 <_realloc_r+0x5a>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4640      	mov	r0, r8
 8007a44:	f7ff fc24 	bl	8007290 <_malloc_r>
 8007a48:	4605      	mov	r5, r0
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d0ed      	beq.n	8007a2a <_realloc_r+0x1e>
 8007a4e:	42bc      	cmp	r4, r7
 8007a50:	4622      	mov	r2, r4
 8007a52:	4631      	mov	r1, r6
 8007a54:	bf28      	it	cs
 8007a56:	463a      	movcs	r2, r7
 8007a58:	f7ff ffca 	bl	80079f0 <memcpy>
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f7ff fbae 	bl	80071c0 <_free_r>
 8007a64:	e7e1      	b.n	8007a2a <_realloc_r+0x1e>
 8007a66:	4635      	mov	r5, r6
 8007a68:	e7df      	b.n	8007a2a <_realloc_r+0x1e>

08007a6a <_malloc_usable_size_r>:
 8007a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6e:	1f18      	subs	r0, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfbc      	itt	lt
 8007a74:	580b      	ldrlt	r3, [r1, r0]
 8007a76:	18c0      	addlt	r0, r0, r3
 8007a78:	4770      	bx	lr
	...

08007a7c <round>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a82:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8007a86:	2a13      	cmp	r2, #19
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	dc18      	bgt.n	8007ac2 <round+0x46>
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	da09      	bge.n	8007aa8 <round+0x2c>
 8007a94:	3201      	adds	r2, #1
 8007a96:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007a9a:	d103      	bne.n	8007aa4 <round+0x28>
 8007a9c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007aa0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	e029      	b.n	8007afc <round+0x80>
 8007aa8:	4816      	ldr	r0, [pc, #88]	; (8007b04 <round+0x88>)
 8007aaa:	4110      	asrs	r0, r2
 8007aac:	4001      	ands	r1, r0
 8007aae:	4329      	orrs	r1, r5
 8007ab0:	d011      	beq.n	8007ad6 <round+0x5a>
 8007ab2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007ab6:	fa41 f202 	asr.w	r2, r1, r2
 8007aba:	4413      	add	r3, r2
 8007abc:	ea23 0300 	bic.w	r3, r3, r0
 8007ac0:	e7f0      	b.n	8007aa4 <round+0x28>
 8007ac2:	2a33      	cmp	r2, #51	; 0x33
 8007ac4:	dd0a      	ble.n	8007adc <round+0x60>
 8007ac6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007aca:	d104      	bne.n	8007ad6 <round+0x5a>
 8007acc:	4602      	mov	r2, r0
 8007ace:	f7f8 fb43 	bl	8000158 <__adddf3>
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	4621      	mov	r1, r4
 8007ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007ae4:	40f8      	lsrs	r0, r7
 8007ae6:	4228      	tst	r0, r5
 8007ae8:	d0f5      	beq.n	8007ad6 <round+0x5a>
 8007aea:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8007aee:	2201      	movs	r2, #1
 8007af0:	408a      	lsls	r2, r1
 8007af2:	1952      	adds	r2, r2, r5
 8007af4:	bf28      	it	cs
 8007af6:	3301      	addcs	r3, #1
 8007af8:	ea22 0200 	bic.w	r2, r2, r0
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	e7e7      	b.n	8007ad2 <round+0x56>
 8007b02:	bf00      	nop
 8007b04:	000fffff 	.word	0x000fffff

08007b08 <_init>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr

08007b14 <_fini>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr
